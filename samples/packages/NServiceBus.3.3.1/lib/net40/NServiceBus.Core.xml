<?xml version="1.0"?>
<doc>
  <assembly>
    <name>NServiceBus.Core</name>
  </assembly>
  <members>
    <member name="T:NServiceBus.IWantToRunBeforeConfiguration">
      <summary>
            Indicates that this class contains logic that need to be executed before other configuration
            </summary>
    </member>
    <member name="M:NServiceBus.IWantToRunBeforeConfiguration.Init">
      <summary>
            Invoked before configuration starts
            </summary>
    </member>
    <member name="T:NServiceBus.Config.AddressInitializer">
      <summary>
            Initializes the local address
            </summary>
    </member>
    <member name="M:NServiceBus.Config.AddressInitializer.Init">
      <summary>
            Initialize the local address
            </summary>
    </member>
    <member name="T:NServiceBus.AllAssemblies">
      <summary>
            Class for specifying which assemblies not to load.
            </summary>
    </member>
    <member name="M:NServiceBus.AllAssemblies.Except(System.String)">
      <summary>
            Indicate that the given assembly is not to be used.
            Use the 'And' method to indicate other assemblies to be skipped.
            </summary>
      <param name="assembly">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.AllAssemblies.And(System.String)">
      <summary>
            Indicate that the given assembly should not be used.
            You can call this method multiple times.
            </summary>
      <param name="assembly">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.AllAssemblies.GetEnumerator">
      <summary>
            Returns an enumerator for looping over the assemblies to be loaded.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Config.ConfigurationSource.IConfigurationSource">
      <summary>
            Abstraction of a source of configuration data.
            Implement this interface if you want to change the source of all configuration data.
            If you want to change the source of only a specific set of configuration data,
            implement <see cref="T:NServiceBus.Config.ConfigurationSource.IProvideConfiguration`1" /> instead.
            </summary>
    </member>
    <member name="M:NServiceBus.Config.ConfigurationSource.IConfigurationSource.GetConfiguration``1">
      <summary>
            Returns configuration data based on the given type.
            </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Config.ConfigurationSource.DefaultConfigurationSource">
      <summary>
            A configuration source implementation on top of ConfigurationManager.
            </summary>
    </member>
    <member name="T:NServiceBus.Configure">
      <summary>
            Central configuration entry point for NServiceBus.
            </summary>
    </member>
    <member name="F:NServiceBus.Configure.GetEndpointNameAction">
      <summary>
            The function used to get the name of this endpoint
            </summary>
    </member>
    <member name="M:NServiceBus.Configure.WithHasBeenCalled">
      <summary>
            True if any of the Configure.With() has been called
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Configure.BuilderIsConfigured">
      <summary>
            True if a builder has been defined
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Configure.CustomConfigurationSource(NServiceBus.Config.ConfigurationSource.IConfigurationSource)">
      <summary>
            Sets the current configuration source
            </summary>
      <param name="configurationSource">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Configure.#ctor">
      <summary>
            Protected constructor to enable creation only via the With method.
            </summary>
    </member>
    <member name="M:NServiceBus.Configure.With">
      <summary>
            Creates a new configuration object scanning assemblies
            in the regular runtime directory.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Configure.WithWeb">
      <summary>
            Configures NServiceBus to scan for assemblies 
            in the relevant web directory instead of regular
            runtime directory.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Configure.With(System.String)">
      <summary>
            Configures NServiceBus to scan for assemblies
            in the given directory rather than the regular
            runtime directory.
            </summary>
      <param name="probeDirectory">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Configure.With(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>
            Configures NServiceBus to use the types found in the given assemblies.
            </summary>
      <param name="assemblies">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Configure.With(System.Reflection.Assembly[])">
      <summary>
            Configures nServiceBus to scan the given assemblies only.
            </summary>
      <param name="assemblies">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Configure.With(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
            Configures nServiceBus to scan the given types.
            </summary>
      <param name="typesToScan">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Configure.RunCustomAction(System.Action)">
      <summary>
            Run a custom action at configuration time - useful for performing additional configuration not exposed by the fluent interface.
            </summary>
      <param name="action">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Configure.CreateBus">
      <summary>
            Provides an instance to a startable bus.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Configure.Initialize">
      <summary>
            Finalizes the configuration by invoking all initializers.
            </summary>
    </member>
    <member name="M:NServiceBus.Configure.ForAllTypes``1(System.Action{System.Type})">
      <summary>
            Applies the given action to all the scanned types that can be assigned to T 
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="action">
      </param>
    </member>
    <member name="M:NServiceBus.Configure.GetConfigSection``1">
      <summary>
            Returns the requested config section using the current configuration source
            </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Configure.GetAssembliesInDirectory(System.String,System.String[])">
      <summary>
            Load and return all assemblies in the given directory except the given ones to exclude
            </summary>
      <param name="path">
      </param>
      <param name="assembliesToSkip">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Configure.SendOnly">
      <summary>
            Initialized the bus in send only mode
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NServiceBus.Configure.Instance">
      <summary>
            Provides static access to the configuration object.
            </summary>
    </member>
    <member name="P:NServiceBus.Configure.Builder">
      <summary>
            Gets/sets the builder.
            Setting the builder should only be done by NServiceBus framework code.
            </summary>
    </member>
    <member name="P:NServiceBus.Configure.ConfigurationSource">
      <summary>
            Gets/sets the configuration source to be used by NServiceBus.
            </summary>
    </member>
    <member name="P:NServiceBus.Configure.Configurer">
      <summary>
            Gets/sets the object used to configure components.
            This object should eventually reference the same container as the Builder.
            </summary>
    </member>
    <member name="P:NServiceBus.Configure.TypesToScan">
      <summary>
            Returns types in assemblies found in the current directory.
            </summary>
    </member>
    <member name="P:NServiceBus.Configure.SendOnlyMode">
      <summary>
            True if this endpoint is operating in send only mode
            </summary>
    </member>
    <member name="P:NServiceBus.Configure.EndpointName">
      <summary>
            The name of this endpoint
            </summary>
    </member>
    <member name="E:NServiceBus.Configure.ConfigurationComplete">
      <summary>
            Event raised when configuration is complete
            </summary>
    </member>
    <member name="T:NServiceBus.Config.ConfigurationSource.IProvideConfiguration`1">
      <summary>
            Abstraction of a configuration source for a given piece of configuration data. 
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:NServiceBus.Config.ConfigurationSource.IProvideConfiguration`1.GetConfiguration">
      <summary>
            Returns configuration data for the given type.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Config.Advanced.ConfigureSettingLocalAddressNameAction">
      <summary>
            Allow overriding local address name.
            </summary>
    </member>
    <member name="F:NServiceBus.Config.Advanced.ConfigureSettingLocalAddressNameAction.defineLocalAddressNameFunc">
      <summary>
            By default local address should equal endpoint name.
            See: <a href="http://nservicebus.com/faq/HowToSpecifyYourInputQueueName.aspx">Here</a> for more details.
            </summary>
    </member>
    <member name="M:NServiceBus.Config.Advanced.ConfigureSettingLocalAddressNameAction.DefineLocalAddressNameFunc(NServiceBus.Configure,System.Func{System.String})">
      <summary>
            Set a function that overrides the default naming of NServiceBus local addresses.
            See: <a href="http://nservicebus.com/faq/HowToSpecifyYourInputQueueName.aspx">Here</a> for more details.
            </summary>
      <param name="config">
      </param>
      <param name="setLocalAddressNameFunc">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Config.Advanced.ConfigureSettingLocalAddressNameAction.GetLocalAddressName">
      <summary>
            Execute function that returns the NServiceBus local addresses name. If not override by the user, NServiceBus defaults will be used.
            See: <a href="http://nservicebus.com/faq/HowToSpecifyYourInputQueueName.aspx">Here</a> for more details.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.MessageConventions">
      <summary>
            Static extension methods to Configure.
            </summary>
    </member>
    <member name="M:NServiceBus.MessageConventions.DefiningMessagesAs(NServiceBus.Configure,System.Func{System.Type,System.Boolean})">
      <summary>
            Sets the function to be used to evaluate whether a type is a message.
            </summary>
      <param name="config">
      </param>
      <param name="definesMessageType">
      </param>
    </member>
    <member name="M:NServiceBus.MessageConventions.DefiningCommandsAs(NServiceBus.Configure,System.Func{System.Type,System.Boolean})">
      <summary>
            Sets the function to be used to evaluate whether a type is a commands.
            </summary>
      <param name="config">
      </param>
      <param name="definesCommandType">
      </param>
    </member>
    <member name="M:NServiceBus.MessageConventions.DefiningEventsAs(NServiceBus.Configure,System.Func{System.Type,System.Boolean})">
      <summary>
            Sets the function to be used to evaluate whether a type is a event.
            </summary>
      <param name="config">
      </param>
      <param name="definesEventType">
      </param>
    </member>
    <member name="M:NServiceBus.MessageConventions.DefiningEncryptedPropertiesAs(NServiceBus.Configure,System.Func{System.Reflection.PropertyInfo,System.Boolean})">
      <summary>
            Sets the function to be used to evaluate whether a property should be encrypted or not.
            </summary>
      <param name="config">
      </param>
      <param name="definesEncryptedProperty">
      </param>
    </member>
    <member name="M:NServiceBus.MessageConventions.DefiningDataBusPropertiesAs(NServiceBus.Configure,System.Func{System.Reflection.PropertyInfo,System.Boolean})">
      <summary>
            Sets the function to be used to evaluate whether a property should be sent via the DataBus or not.
            </summary>
      <param name="config">
      </param>
      <param name="definesDataBusProperty">
      </param>
    </member>
    <member name="M:NServiceBus.MessageConventions.DefiningTimeToBeReceivedAs(NServiceBus.Configure,System.Func{System.Type,System.TimeSpan})">
      <summary>
            Sets the function to be used to evaluate whether a message has a time to be received.
            </summary>
      <param name="config">
      </param>
      <param name="retrieveTimeToBeReceived">
      </param>
    </member>
    <member name="M:NServiceBus.MessageConventions.DefiningExpressMessagesAs(NServiceBus.Configure,System.Func{System.Type,System.Boolean})">
      <summary>
            Sets the function to be used to evaluate whether a type is an express message or not.
            </summary>
      <param name="config">
      </param>
      <param name="definesExpressMessageType">
      </param>
    </member>
    <member name="T:NServiceBus.Config.Conventions.SystemMessageConventions">
      <summary>
            Define system message convention
            </summary>
    </member>
    <member name="M:NServiceBus.Config.Conventions.SystemMessageConventions.AddSystemMessagesAs(NServiceBus.Configure,System.Func{System.Type,System.Boolean})">
      <summary>
            Add system messages convention
            </summary>
      <param name="config">
      </param>
      <param name="definesMessageType">
      </param>
    </member>
    <member name="T:NServiceBus.Config.INeedInitialization">
      <summary>
            Implementers will be called after NServiceBus.Configure.With completes and a container
            has been set. 
            </summary>
    </member>
    <member name="M:NServiceBus.Config.INeedInitialization.Init">
      <summary>
            Implementers will include custom initialization code here.
            </summary>
    </member>
    <member name="T:NServiceBus.IWantToRunBeforeConfigurationIsFinalized">
      <summary>
            Indicates that this class contains logic that needs to run just before
            configuration is finalized
            </summary>
    </member>
    <member name="M:NServiceBus.IWantToRunBeforeConfigurationIsFinalized.Run">
      <summary>
            Invoked before configuration is finalized and locked
            </summary>
    </member>
    <member name="T:NServiceBus.Config.IWantToRunWhenConfigurationIsComplete">
      <summary>
            Implementors are invoked when configuration is complete.
            Implementors are resolved from the container so have access to full DI.
            </summary>
    </member>
    <member name="M:NServiceBus.Config.IWantToRunWhenConfigurationIsComplete.Run">
      <summary>
            Method invoked to run custom code.
            </summary>
    </member>
    <member name="T:NServiceBus.EndpointConventions">
      <summary>
            Static extension methods to Configure.
            </summary>
    </member>
    <member name="M:NServiceBus.EndpointConventions.DefineEndpointName(NServiceBus.Configure,System.Func{System.String})">
      <summary>
            Sets the function that specified the name of this endpoint
            </summary>
      <param name="config">
      </param>
      <param name="definesEndpointName">
      </param>
    </member>
    <member name="M:NServiceBus.EndpointConventions.DefineEndpointName(NServiceBus.Configure,System.String)">
      <summary>
            Sets the function that specified the name of this endpoint
            </summary>
      <param name="config">
      </param>
      <param name="name">
      </param>
    </member>
    <member name="T:NServiceBus.Config.Conventions.DefaultEndpointName">
      <summary>
            The default name for a endpoint
            </summary>
    </member>
    <member name="M:NServiceBus.Config.Conventions.DefaultEndpointName.Get">
      <summary>
            Gets the name of this endpoint
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Installation.IEnvironment">
      <summary>
            Interface for Environment
            </summary>
    </member>
    <member name="T:NServiceBus.Installation.INeedToInstallSomething">
      <summary>
            Interface invoked by the infrastructure when going to install an endpoint.
            Implementors are invoked after <see cref="T:NServiceBus.Installation.INeedToInstallInfrastructure" />.
            Implementors should not implement this type directly but rather the generic version of it.
            </summary>
    </member>
    <member name="M:NServiceBus.Installation.INeedToInstallSomething.Install(System.Security.Principal.WindowsIdentity)">
      <summary>
            Performs the installation providing permission for the given user.
            </summary>
      <param name="identity">The user for whom permissions will be given.</param>
    </member>
    <member name="T:NServiceBus.Installation.INeedToInstallInfrastructure">
      <summary>
            Interface invoked by the infrastructure when going to install an endpoint.
            Implementors should not implement this type directly but rather the generic version of it.
            </summary>
    </member>
    <member name="T:NServiceBus.Installation.INeedToInstallInfrastructure`1">
      <summary>
            Interface invoked by the infrastructure when going to install an endpoint for a specific environment.
            Implementors invoked before <see cref="T:NServiceBus.Installation.INeedToInstallSomething" />.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="T:NServiceBus.Installation.INeedToInstallSomething`1">
      <summary>
            Interface invoked by the infrastructure when going to install an endpoint for a specific environment.
            </summary>
      <typeparam name="T">The environment type.</typeparam>
    </member>
    <member name="T:NServiceBus.Install">
      <summary>
            Contains extension methods to the Configure class.
            </summary>
    </member>
    <member name="M:NServiceBus.Install.Test">
      <summary>
            Test Method for Installation
            </summary>
    </member>
    <member name="M:NServiceBus.Install.ForInstallationOn``1(NServiceBus.Configure)">
      <summary>
            Indicates which environment is going to be installed, specifying that resources 
            to be created will be provided permissions for the currently logged on user.
            </summary>
      <typeparam name="T">The environment type.</typeparam>
      <param name="config">Extension method object.</param>
      <returns>An Installer object whose Install method should be invoked.</returns>
    </member>
    <member name="M:NServiceBus.Install.ForInstallationOn``1(NServiceBus.Configure,System.Nullable{System.IntPtr})">
      <summary>
            Indicates which environment is going to be installed, specifying that resources 
            to be created will be provided permissions for the user represented by the userToken
            (where not the currently logged on user) or the currently logged on user.
            </summary>
      <typeparam name="T">The environment type.</typeparam>
      <param name="config">Extension method object.</param>
      <param name="userToken">A token that will be used to create a <see cref="T:System.Security.Principal.WindowsIdentity" />.</param>
      <returns>An Installer object whose Install method should be invoked.</returns>
    </member>
    <member name="T:NServiceBus.Installer`1">
      <summary>
            Resolves objects who implement INeedToInstall and invokes them for the given environment.
            Assumes that implementors have already been registered in the container.
            </summary>
      <typeparam name="T">The environment for which the installers should be invoked.</typeparam>
    </member>
    <member name="M:NServiceBus.Installer`1.#ctor(System.Security.Principal.WindowsIdentity)">
      <summary>
            Initializes a new instance of the Installer
            </summary>
      <param name="identity">WindowsIdentity</param>
    </member>
    <member name="M:NServiceBus.Installer`1.Install">
      <summary>
            Invokes installers for the given environment
            </summary>
    </member>
    <member name="M:NServiceBus.Installer`1.InstallInfrastructureInstallers">
      <summary>
            Invokes only Infrastructure installers for the given environment.
            </summary>
    </member>
    <member name="M:NServiceBus.Installer`1.InstallOtherInstallers">
      <summary>
            Invokes only 'Something' - other than infrastructure,  installers for the given environment.
            </summary>
    </member>
    <member name="P:NServiceBus.Installer`1.RunInfrastructureInstallers">
      <summary>
            Gets or sets RunInfrastructureInstallers 
            </summary>
    </member>
    <member name="P:NServiceBus.Installer`1.RunOtherInstallers">
      <summary>
            Gets or sets RunOtherInstallers 
            </summary>
    </member>
    <member name="T:NServiceBus.ConfigureLicenseExtensions">
      <summary>
            Contains extension methods to configure license.
            </summary>
    </member>
    <member name="M:NServiceBus.ConfigureLicenseExtensions.License(NServiceBus.Configure,System.String)">
      <summary>
            Allows user to specify the license string.
            </summary>
      <param name="config">The current <see cref="T:NServiceBus.Configure" />.</param>
      <param name="licenseText">The license text.</param>
      <returns>The current <see cref="T:NServiceBus.Configure" />.</returns>
    </member>
    <member name="M:NServiceBus.ConfigureLicenseExtensions.LicensePath(NServiceBus.Configure,System.String)">
      <summary>
            Allows user to specify the path for the license file.
            </summary>
      <param name="config">The current <see cref="T:NServiceBus.Configure" />.</param>
      <param name="licenseFile">A relative or absolute path to the license file.</param>
      <returns>The current <see cref="T:NServiceBus.Configure" />.</returns>
    </member>
    <member name="M:NServiceBus.Licensing.LicenseManager.Parse(System.String)">
      <summary>
            Initializes the licensing system with the given license
            </summary>
      <param name="licenseText">
      </param>
    </member>
    <member name="M:NServiceBus.Licensing.LicenseManager.PromptUserForLicenseIfTrialHasExpired">
      <summary>
            Prompts the users if their trial license has expired
            </summary>
    </member>
    <member name="M:NServiceBus.Licensing.LicenseManager.ConfigureNServiceBusLicense">
      <summary>
                Set NSeriviceBus license information.
            </summary>
    </member>
    <member name="P:NServiceBus.Licensing.LicenseManager.CurrentLicense">
      <summary>
                Get current NServiceBus licensing information
            </summary>
    </member>
    <member name="T:NServiceBus.Licensing.LicenseType">
      <summary>
            License types.
            </summary>
    </member>
    <member name="T:NServiceBus.Licensing.StringLicenseValidator">
      <summary>
            Validates content of a license file
            </summary>
    </member>
    <member name="M:NServiceBus.Licensing.StringLicenseValidator.#ctor(System.String,System.String)">
      <summary>
            Creates a new instance of <seealso cref="T:NServiceBus.Licensing.StringLicenseValidator" /></summary>
      <param name="publicKey">public key</param>
      <param name="license">license content</param>
    </member>
    <member name="P:NServiceBus.Licensing.StringLicenseValidator.License">
      <summary>
            License content
            </summary>
    </member>
    <member name="T:NServiceBus.Licensing.License">
      <summary>
            NServiceBus License information
            </summary>
    </member>
    <member name="T:NServiceBus.Config.Logging">
      <summary>
            Logging ConfigurationSection
            </summary>
    </member>
    <member name="P:NServiceBus.Config.Logging.Threshold">
      <summary>
            The minimal logging level above which all calls to the log will be written
            </summary>
    </member>
    <member name="T:NServiceBus.SetLoggingLibrary">
      <summary>
            Class containing extension method to allow users to use Log4Net for logging
            </summary>
    </member>
    <member name="M:NServiceBus.SetLoggingLibrary.Log4Net(NServiceBus.Configure)">
      <summary>
            Use Log4Net for logging with the Console Appender at the level of All.
            </summary>
    </member>
    <member name="M:NServiceBus.SetLoggingLibrary.Log4Net``1(NServiceBus.Configure,System.Action{``0})">
      <summary>
            Use Log4Net for logging with your own appender type, initializing it as necessary.
            Will call 'ActivateOptions()' on the appender for you.
            If you don't specify a threshold, will default to Level.Debug.
            If you don't specify layout, uses this as a default: %d [%t] %-5p %c [%x] &lt;%X{auth}&gt; - %m%n
            </summary>
    </member>
    <member name="M:NServiceBus.SetLoggingLibrary.Log4Net(NServiceBus.Configure,System.Object)">
      <summary>
            Use Log4Net for logging passing in a pre-configured appender.
            Will call 'ActivateOptions()' on the appender for you.
            If you don't specify a threshold, will default to Level.Debug.
            If you don't specify layout, uses this as a default: %d [%t] %-5p %c [%x] &lt;%X{auth}&gt; - %m%n
            </summary>
    </member>
    <member name="M:NServiceBus.SetLoggingLibrary.Log4Net">
      <summary>
            Configure NServiceBus to use Log4Net without setting a specific appender.
            </summary>
    </member>
    <member name="M:NServiceBus.SetLoggingLibrary.Log4Net(System.Action)">
      <summary>
            Configure NServiceBus to use Log4Net and specify your own configuration.
            Use 'log4net.Config.XmlConfigurator.Configure' as the parameter to get the configuration from the app.config.
            </summary>
    </member>
    <member name="T:NServiceBus.MessageInterfaces.IMessageMapper">
      <summary>
            Enables looking up interfaced mapped to generated concrete types
            and vice versa.
            </summary>
    </member>
    <member name="M:NServiceBus.MessageInterfaces.IMessageMapper.Initialize(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
            Initializes the mapper with the given types to be scanned.
            </summary>
      <param name="types">
      </param>
    </member>
    <member name="M:NServiceBus.MessageInterfaces.IMessageMapper.GetMappedTypeFor(System.Type)">
      <summary>
            If the given type is an interface, returns the generated concrete type.
            If the given type is concerete, returns the interface it was generated from.
            </summary>
      <param name="t">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.MessageInterfaces.IMessageMapper.GetMappedTypeFor(System.String)">
      <summary>
            Looks up the type mapped for the given name.
            </summary>
      <param name="typeName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper">
      <summary>
            Uses reflection to map between interfaces and their generated concrete implementations.
            </summary>
    </member>
    <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.Initialize(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
            Scans the given types generating concrete classes for interfaces.
            </summary>
      <param name="types">
      </param>
    </member>
    <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.InitType(System.Type,System.Reflection.Emit.ModuleBuilder)">
      <summary>
            Generates a concrete implementation of the given type if it is an interface.
            </summary>
      <param name="t">
      </param>
      <param name="moduleBuilder">
      </param>
    </member>
    <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.GetNewTypeName(System.Type)">
      <summary>
            Generates a new full name for a type to be generated for the given type.
            </summary>
      <param name="t">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.CreateTypeFrom(System.Type,System.Reflection.Emit.ModuleBuilder)">
      <summary>
            Generates the concrete implementation of the given type.
            Only properties on the given type are generated in the concrete implementation.
            </summary>
      <param name="t">
      </param>
      <param name="moduleBuilder">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.AddCustomAttributeToProperty(System.Object,System.Reflection.Emit.PropertyBuilder)">
      <summary>
            Given a custom attribute and property builder, adds an instance of custom attribute
            to the property builder
            </summary>
      <param name="customAttribute">
      </param>
      <param name="propBuilder">
      </param>
    </member>
    <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.GetAllProperties(System.Type)">
      <summary>
            Returns all properties on the given type, going up the inheritance
            hierarchy.
            </summary>
      <param name="t">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.GetMappedTypeFor(System.Type)">
      <summary>
            If the given type is concrete, returns the interface it was generated to support.
            If the given type is an interface, returns the concrete class generated to implement it.
            </summary>
      <param name="t">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.GetMappedTypeFor(System.String)">
      <summary>
            Returns the type mapped to the given name.
            </summary>
      <param name="typeName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.CreateInstance``1(System.Action{``0})">
      <summary>
            Calls the generic CreateInstance and performs the given
            action on the result.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="action">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.CreateInstance``1">
      <summary>
            Calls the non-generic CreateInstance and returns its result
            cast to T.
            </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.CreateInstance(System.Type)">
      <summary>
            If the given type is an interface, finds its generated concrete
            implementation, instantiates it, and returns the result.
            </summary>
      <param name="t">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.ObjectBuilder.Common.Config.ConfigureCommon">
      <summary>
            Utility configuration class for implementers of IContainer.
            </summary>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.Common.Config.ConfigureCommon.With(NServiceBus.Configure,NServiceBus.ObjectBuilder.Common.IContainer)">
      <summary>
            Sets the Builder property of the given Configure object to an instance of CommonObjectBuilder.
            Then, the given builder object is inserted in the relevant place of the builder chain.
            Finally, the given actions are performed on the instance of CommonObjectBuilder.
            </summary>
      <param name="config">
      </param>
      <param name="container">
      </param>
    </member>
    <member name="T:NServiceBus.ObjectBuilder.Common.Config.ConfigureContainer">
      <summary>
             Extension methods to specify a custom container type and/or instance
            </summary>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.Common.Config.ConfigureContainer.UsingContainer``1(NServiceBus.Configure)">
      <summary>
             Provide a custom IContainer type for use by NServiceBus
            </summary>
      <param name="configure">Configuration instance</param>
      <typeparam name="T">IContainer type</typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.Common.Config.ConfigureContainer.UsingContainer``1(NServiceBus.Configure,``0)">
      <summary>
             Provide a custom IContainer instance for use by NServiceBus
            </summary>
      <param name="configure">Configuration instance</param>
      <param name="container">IContainer instance</param>
      <typeparam name="T">IContainer type</typeparam>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.SyncConfig">
      <summary>
            Class for holding extension methods to NServiceBus.Configure
            </summary>
    </member>
    <member name="M:NServiceBus.SyncConfig.MarkConfigured">
      <summary>
            Notify that configuration of ConfigureCommon occurred.
            </summary>
    </member>
    <member name="M:NServiceBus.SyncConfig.Synchronization(NServiceBus.Configure)">
      <summary>
            Use this for multi-threaded rich clients. Specifies that message processing
            will occur within a synchronization domain (make sure that you only have one).
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NServiceBus.SyncConfig.Synchronize">
      <summary>
            Indicates whether the synchronization has been requested.
            </summary>
    </member>
    <member name="T:NServiceBus.ObjectBuilder.Common.CommonObjectBuilder">
      <summary>
            Implementation of IBuilder, serving as a facade that container specific implementations
            of IContainer should run behind.
            </summary>
    </member>
    <member name="P:NServiceBus.ObjectBuilder.Common.CommonObjectBuilder.Container">
      <summary>
            The container that will be used to create objects and configure components.
            </summary>
    </member>
    <member name="P:NServiceBus.ObjectBuilder.Common.CommonObjectBuilder.Synchronized">
      <summary>
            Used for multi-threaded rich clients to build and dispatch
            in a synchronization domain.
            </summary>
    </member>
    <member name="T:NServiceBus.ObjectBuilder.Common.IContainer">
      <summary>
            Abstraction of a container.
            </summary>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.Build(System.Type)">
      <summary>
            Returns an instantiation of the given type.
            </summary>
      <param name="typeToBuild">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.BuildChildContainer">
      <summary>
            Returns a child instance of the container to facilitate deterministic disposal
            of all resources built by the child container.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.BuildAll(System.Type)">
      <summary>
            Returns a list of objects instantiated because their type is compatible
            with the given type.
            </summary>
      <param name="typeToBuild">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.Configure(System.Type,NServiceBus.DependencyLifecycle)">
      <summary>
            Configures the call model of the given component type.
            </summary>
      <param name="component">Type to be configured</param>
      <param name="dependencyLifecycle">The desired lifecycle for this type</param>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.ConfigureProperty(System.Type,System.String,System.Object)">
      <summary>
            Sets the value to be configured for the given property of the 
            given component type.
            </summary>
      <param name="component">
      </param>
      <param name="property">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.RegisterSingleton(System.Type,System.Object)">
      <summary>
            Registers the given instance as the singleton that will be returned
            for the given type.
            </summary>
      <param name="lookupType">
      </param>
      <param name="instance">
      </param>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.HasComponent(System.Type)">
      <summary>
            Indicates if a component of the given type has been configured.
            </summary>
      <param name="componentType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.ObjectBuilder.Common.SynchronizedInvoker">
      <summary>
            Invokes methods and actions within a synchronization domain.
            </summary>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.Common.SynchronizedInvoker.BuildAndDispatch(System.Type,System.Action{System.Object})">
      <summary>
            Uses the container to create the given type and then calls the given
            action on the object created.
            </summary>
      <param name="typeToBuild">
      </param>
      <param name="action">
      </param>
    </member>
    <member name="P:NServiceBus.ObjectBuilder.Common.SynchronizedInvoker.Container">
      <summary>
            The container used to instantiate components.
            </summary>
    </member>
    <member name="T:NServiceBus.ObjectBuilder.ComponentCallModelEnum">
      <summary>
            Represent the various call models for a component.
            </summary>
    </member>
    <member name="F:NServiceBus.ObjectBuilder.ComponentCallModelEnum.None">
      <summary>
            Accept the default call model of the underlying technology. This rougly maps to the
            InstancePerUnitOfWork lifecycle in our new lifycycle definitions
            </summary>
    </member>
    <member name="F:NServiceBus.ObjectBuilder.ComponentCallModelEnum.Singleton">
      <summary>
            Only one instance of the component will ever be called. This maps to the
            SingleInstance lifecycle in our new lifycycle definitions
            </summary>
    </member>
    <member name="F:NServiceBus.ObjectBuilder.ComponentCallModelEnum.Singlecall">
      <summary>
            Each call on the component will be performed on a new instance.  This maps to the
            InstancePerCall lifecycle in our new lifycycle definitions
            </summary>
    </member>
    <member name="T:NServiceBus.DependencyLifecycle">
      <summary>
            Represent the various lifecycles available for coponents configured in the container
            </summary>
    </member>
    <member name="F:NServiceBus.DependencyLifecycle.SingleInstance">
      <summary>
            The same instance will be returned each time
            </summary>
    </member>
    <member name="F:NServiceBus.DependencyLifecycle.InstancePerUnitOfWork">
      <summary>
            The instance will be singleton for the duration of the unit of work. In practice this means 
            the processing of a single transport message
            </summary>
    </member>
    <member name="F:NServiceBus.DependencyLifecycle.InstancePerCall">
      <summary>
            A new instance will be returned fro each call
            </summary>
    </member>
    <member name="T:NServiceBus.ObjectBuilder.IBuilder">
      <summary>
            Used to instantiate types, so that all configured dependencies
            and property values are set.
            An abstraction on top of dependency injection frameworks.
            </summary>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IBuilder.Build(System.Type)">
      <summary>
            Creates an instance of the given type, injecting it with all defined dependencies.
            </summary>
      <param name="typeToBuild">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IBuilder.CreateChildBuilder">
      <summary>
            Creates an instance of a child builder which is used to facilitate deterministic
            disposal of all resources created by the child builder.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IBuilder.Build``1">
      <summary>
            Creates an instance of the given type, injecting it with all defined dependencies.
            </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IBuilder.BuildAll``1">
      <summary>
            For each type that is compatible with T, an instance is created with all dependencies injected, and yeilded to the caller.
            </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IBuilder.BuildAll(System.Type)">
      <summary>
            For each type that is compatible with the given type, an instance is created with all dependencies injected.
            </summary>
      <param name="typeToBuild">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IBuilder.BuildAndDispatch(System.Type,System.Action{System.Object})">
      <summary>
            Builds an instance of the defined type injecting it with all defined dependencies
            and invokes the given action on the instance.
            </summary>
      <param name="typeToBuild">
      </param>
      <param name="action">
      </param>
    </member>
    <member name="T:NServiceBus.ObjectBuilder.IComponentConfig">
      <summary>
            Used to configure the values to be set for the various
            properties on a component.
            </summary>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IComponentConfig.ConfigureProperty(System.String,System.Object)">
      <summary>
            Configures the value of the named property of the component.
            </summary>
      <param name="name">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.ObjectBuilder.IComponentConfig`1">
      <summary>
            Strongly typed version of IComponentConfig
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IComponentConfig`1.ConfigureProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
      <summary>
            Configures the value of the property like so:
            ConfigureProperty(o =&gt; o.Property, value);
            </summary>
      <param name="property">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.ObjectBuilder.IConfigureComponents">
      <summary>
            Used to configure components in the container.
            Should primarily be used at startup/initialization time.
            </summary>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureComponent(System.Type,NServiceBus.DependencyLifecycle)">
      <summary>
            Configures the given type. Can be used to configure all kinds of properties.
            </summary>
      <param name="concreteComponent">
      </param>
      <param name="dependencyLifecycle">Defines lifecyle sematnics for the given type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureComponent``1(NServiceBus.DependencyLifecycle)">
      <summary>
            Configures the given type, allowing to fluently configure properties.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="dependencyLifecycle">Defines lifecyle sematnics for the given type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureComponent``1(System.Func{``0},NServiceBus.DependencyLifecycle)">
      <summary>
            Configures the given type, allowing to fluently configure properties.
            </summary>
      <typeparam name="T">Type to configure</typeparam>
      <param name="componentFactory">Factory method that returns the given type</param>
      <param name="dependencyLifecycle">Defines lifecyle sematnics for the given type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureComponent(System.Type,NServiceBus.ObjectBuilder.ComponentCallModelEnum)">
      <summary>
            Configures the given type. Can be used to configure all kinds of properties. This method is deprecated use the signature
            that contains the DependecyLifecyle enum instead
            </summary>
      <param name="concreteComponent">
      </param>
      <param name="callModel">Defines whether the type should have singleton or single call sematnics.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureComponent``1(NServiceBus.ObjectBuilder.ComponentCallModelEnum)">
      <summary>
            Configures the given type, allowing to fluently configure properties. This method is deprecated use the signature
            that contains the DependecyLifecyle enum instead
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="callModel">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
      <summary>
            Configures the given property of the given type to be injected with the given value.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="property">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.RegisterSingleton(System.Type,System.Object)">
      <summary>
            Registers the given instance as the singleton that will be returned
            for the given type.
            </summary>
      <param name="lookupType">
      </param>
      <param name="instance">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.RegisterSingleton``1(System.Object)">
      <summary>
            Registers the given instance as the singleton that will be returned
            for the given type.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="instance">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.HasComponent``1">
      <summary>
            Indicates if a component of the given type has been configured.
            </summary>
      <typeparam name="T">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.HasComponent(System.Type)">
      <summary>
            Indicates if a component of the given type has been configured.
            </summary>
      <param name="componentType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.ConfigureInMemorySagaPersister">
      <summary>
            Contains extension methods to NServiceBus.Configure for the in memory saga persister.
            </summary>
    </member>
    <member name="M:NServiceBus.ConfigureInMemorySagaPersister.InMemorySagaPersister(NServiceBus.Configure)">
      <summary>
            Use the in memory saga persister implementation.
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.SagaPersisters.InMemory.InMemorySagaPersister">
      <summary>
            In memory implementation of ISagaPersister for quick development.
            </summary>
    </member>
    <member name="T:NServiceBus.Sagas.Impl.AutoCorrelateSagaOnReplyMutator">
      <summary>
            Promotes the saga id and type headers on replies(bus.Reply|bus.Return) so that the saga can be 
            correlated without the user having to add mappings for it. This replaces the ISagaMessage feature
            </summary>
    </member>
    <member name="M:NServiceBus.Sagas.Impl.AutoCorrelateSagaOnReplyMutator.MutateIncoming(NServiceBus.Unicast.Transport.TransportMessage)">
      <summary>
            Stores the original saga id and type of the incoming message
            </summary>
      <param name="transportMessage">
      </param>
    </member>
    <member name="M:NServiceBus.Sagas.Impl.AutoCorrelateSagaOnReplyMutator.MutateOutgoing(System.Object[],NServiceBus.Unicast.Transport.TransportMessage)">
      <summary>
            Promotes the id and type of the originating saga if the is a reply
            </summary>
      <param name="messages">
      </param>
      <param name="transportMessage">
      </param>
    </member>
    <member name="T:NServiceBus.Sagas.Impl.Configure">
      <summary>
            Object that scans types and stores meta-data to be used for type lookups at runtime by sagas.
            </summary>
    </member>
    <member name="M:NServiceBus.Sagas.Impl.Configure.With(NServiceBus.ObjectBuilder.IConfigureComponents,NServiceBus.ObjectBuilder.IBuilder)">
      <summary>
            Starts the configuration process for the saga infrastructure.
            </summary>
      <param name="configurer">
      </param>
      <param name="builder">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Sagas.Impl.Configure.SagasIn(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
            Scans for types relevant to the saga infrastructure.
            These include implementers of <see cref="T:NServiceBus.Saga.ISaga" /> and <see cref="T:NServiceBus.Saga.IFindSagas`1" />.
            </summary>
      <param name="types">
      </param>
    </member>
    <member name="M:NServiceBus.Sagas.Impl.Configure.CreateAdditionalFindersAsNecessary">
      <summary>
            Creates an <see cref="T:NServiceBus.Sagas.Impl.Finders.NullSagaFinder`1" /> for each saga type that doesn't have a finder configured.
            </summary>
    </member>
    <member name="M:NServiceBus.Sagas.Impl.Configure.GetSagaTypeToStartIfMessageNotFoundByFinder(System.Object,NServiceBus.Saga.IFinder)">
      <summary>
            Gets the saga type to instantiate and invoke if an existing saga couldn't be found by
            the given finder using the given message.
            </summary>
      <param name="message">
      </param>
      <param name="finder">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Sagas.Impl.Configure.GetSagaTypesForMessageType(System.Type)">
      <summary>
            Finds the types of sagas that can handle the given concrete message type.
            </summary>
      <param name="messageType">A concrete type for a message object</param>
      <returns>The list of saga types.</returns>
    </member>
    <member name="M:NServiceBus.Sagas.Impl.Configure.GetSagaTypeForSagaEntityType(System.Type)">
      <summary>
            Returns the saga type configured for the given entity type.
            </summary>
      <param name="sagaEntityType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Sagas.Impl.Configure.GetSagaEntityTypeForSagaType(System.Type)">
      <summary>
            Returns the entity type configured for the given saga type.
            </summary>
      <param name="sagaType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Sagas.Impl.Configure.IsMessageTypeHandledBySaga(System.Type)">
      <summary>
            Indicates if a saga has been configured to handle the given message type.
            </summary>
      <param name="messageType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Sagas.Impl.Configure.GetFindByMethodForFinder(NServiceBus.Saga.IFinder,System.Object)">
      <summary>
            Gets a reference to the generic "FindBy" method of the given finder
            for the given message type using a hashtable lookup rather than reflection.
            </summary>
      <param name="finder">
      </param>
      <param name="message">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Sagas.Impl.Configure.GetFindersFor(System.Object)">
      <summary>
            Returns a list of finder object capable of using the given message.
            </summary>
      <param name="m">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Sagas.Impl.Configure.GetSagaDataTypes">
      <summary>
            Returns the list of saga types configured.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:NServiceBus.Sagas.Impl.Configure.SagasWereFound">
      <summary>
            Returns true if a saga type was found in the types passed in to <see cref="M:NServiceBus.Sagas.Impl.Configure.SagasIn(System.Collections.Generic.IEnumerable{System.Type})" />.
            </summary>
    </member>
    <member name="T:NServiceBus.ConfigureSagas">
      <summary>
            Contains extension methods to NServiceBus.Configure.
            </summary>
    </member>
    <member name="M:NServiceBus.ConfigureSagas.Sagas(NServiceBus.Configure)">
      <summary>
            Configure this endpoint to support sagas.
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Sagas.Impl.ConfigureHowToFindSagaWithMessageDispatcher">
      <summary>
            Class used to bridge the dependency between Saga{T} in NServiceBus.dll and
            the Configure class found in this project in NServiceBus.Core.dll.
            </summary>
    </member>
    <member name="T:NServiceBus.Sagas.Impl.Finders.HeaderSagaIdFinder`1">
      <summary>
            Finds sagas based on the sagaid header
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:NServiceBus.Sagas.Impl.Finders.HeaderSagaIdFinder`1.FindBy(System.Object)">
      <summary>
            Returns the saga 
            </summary>
      <param name="message">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NServiceBus.Sagas.Impl.Finders.HeaderSagaIdFinder`1.SagaPersister">
      <summary>
            Injected persister
            </summary>
    </member>
    <member name="T:NServiceBus.Sagas.Impl.GuidCombGenerator">
      <summary>
            Generates <see cref="T:System.Guid" /> values 
            using a strategy suggested Jimmy Nilsson's 
            <a href="http://www.informit.com/articles/article.asp?p=25862">article</a>
            on <a href="http://www.informit.com">informit.com</a>. 
            </summary>
      <remarks>
        <p>
            The <c>comb</c> algorithm is designed to make the use of GUIDs as Primary Keys, Foreign Keys, 
            and Indexes nearly as efficient as ints.
            </p>
        <p>
            This code was modifed based on Donald Mull's contributor to the
            NHibernate source.
            </p>
      </remarks>
    </member>
    <member name="M:NServiceBus.Sagas.Impl.GuidCombGenerator.Generate">
      <summary>
            Generate a new <see cref="T:System.Guid" /> using the comb algorithm.
            </summary>
    </member>
    <member name="T:NServiceBus.Sagas.Impl.Finders.NullSagaFinder`1">
      <summary>
            Catch-all finder to return null - so that we can later check
            for whether a new saga should be created.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:NServiceBus.Sagas.Impl.Finders.NullSagaFinder`1.FindBy(System.Object)">
      <summary>
            Returns null.
            </summary>
      <param name="message">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Sagas.Impl.MessageExtensions">
      <summary>
            Helpers 
            </summary>
    </member>
    <member name="M:NServiceBus.Sagas.Impl.MessageExtensions.IsTimeoutMessage(System.Object)">
      <summary>
            True if this is a timeout message
            </summary>
      <param name="message">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Sagas.Impl.MessageExtensions.TimeoutHasExpired(System.Object)">
      <summary>
            True if the timeout for this message has expired
            </summary>
      <param name="message">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Sagas.Impl.OriginatingSagaHeaderMutator">
      <summary>
            Adds the originating saga headers to outgoing messages
            </summary>
    </member>
    <member name="M:NServiceBus.Sagas.Impl.OriginatingSagaHeaderMutator.MutateOutgoing(System.Object[],NServiceBus.Unicast.Transport.TransportMessage)">
      <summary>
            Set the header if we run in the context of a saga
            </summary>
      <param name="messages">
      </param>
      <param name="transportMessage">
      </param>
    </member>
    <member name="T:NServiceBus.Sagas.Impl.Finders.PropertySagaFinder`2">
      <summary>
            Finds the given type of saga by looking it up based on the given property.
            </summary>
      <typeparam name="TSaga">
      </typeparam>
      <typeparam name="TMessage">
      </typeparam>
    </member>
    <member name="M:NServiceBus.Sagas.Impl.Finders.PropertySagaFinder`2.FindBy(`1)">
      <summary>
            Uses the saga persister to find the saga.
            </summary>
      <param name="message">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NServiceBus.Sagas.Impl.Finders.PropertySagaFinder`2.SagaPersister">
      <summary>
            Injected persister
            </summary>
    </member>
    <member name="P:NServiceBus.Sagas.Impl.Finders.PropertySagaFinder`2.SagaProperty">
      <summary>
            Property of the saga that will be used for lookup.
            </summary>
    </member>
    <member name="P:NServiceBus.Sagas.Impl.Finders.PropertySagaFinder`2.MessageProperty">
      <summary>
            Property of the message whose value will be used for the lookup.
            </summary>
    </member>
    <member name="T:NServiceBus.Sagas.Impl.ReplyingToNullOriginatorDispatcher">
      <summary>
            Class used to bridge the dependency between Saga{T} in NServiceBus.dll and
            which doesn't have access to Common.Logging and the level of logging
            known in the Configure class found in this project in NServiceBus.Core.dll.
            </summary>
    </member>
    <member name="T:NServiceBus.Sagas.Impl.SagaContext">
      <summary>
            Context class that holds the current saga beeing processed
            </summary>
    </member>
    <member name="F:NServiceBus.Sagas.Impl.SagaContext.Current">
      <summary>
            The saga
            </summary>
    </member>
    <member name="T:NServiceBus.Sagas.Impl.SagaDispatcherFactory">
      <summary>
            Dispatch factory that can dispatch messages to sagas
            </summary>
    </member>
    <member name="M:NServiceBus.Sagas.Impl.SagaDispatcherFactory.GetDispatcher(System.Type,NServiceBus.ObjectBuilder.IBuilder,System.Object)">
      <summary>
            Get Dispatcher
            </summary>
      <param name="messageHandlerType">Type of the message Handler</param>
      <param name="builder">Builder</param>
      <param name="message">Message</param>
      <returns>Saga Dispatcher</returns>
    </member>
    <member name="M:NServiceBus.Sagas.Impl.SagaDispatcherFactory.CanDispatch(System.Type)">
      <summary>
            Dispatcher factory filters on handler type
            </summary>
      <param name="handler">handler</param>
      <returns>returns true if can be dispatched</returns>
    </member>
    <member name="P:NServiceBus.Sagas.Impl.SagaDispatcherFactory.Persister">
      <summary>
            Get or Set Saga Persister
            </summary>
    </member>
    <member name="P:NServiceBus.Sagas.Impl.SagaDispatcherFactory.Bus">
      <summary>
            The unicast bus
            </summary>
    </member>
    <member name="T:NServiceBus.ConfigureBinarySerializer">
      <summary>
            Contains extension methods to NServiceBus.Configure.
            </summary>
    </member>
    <member name="M:NServiceBus.ConfigureBinarySerializer.BinarySerializer(NServiceBus.Configure)">
      <summary>
            Use binary serialization.
            Note that this does not support interface-based messages.
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Serializers.Binary.MessageSerializer">
      <summary>
            Binary implementation of the message serializer.
            </summary>
    </member>
    <member name="M:NServiceBus.Serializers.Binary.MessageSerializer.Serialize(System.Object[],System.IO.Stream)">
      <summary>
            Serializes the given messages to the given stream.
            </summary>
      <param name="messages">
      </param>
      <param name="stream">
      </param>
    </member>
    <member name="M:NServiceBus.Serializers.Binary.MessageSerializer.Deserialize(System.IO.Stream)">
      <summary>
            Deserializes the given stream returning an array of messages.
            </summary>
      <param name="stream">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Serializers.Binary.SimpleMessageMapper">
      <summary>
            Simple implementation of message mapper for binary serialization.
            </summary>
    </member>
    <member name="T:NServiceBus.ConfigureXmlSerializer">
      <summary>
            Contains extension methods to NServiceBus.Configure.
            </summary>
    </member>
    <member name="M:NServiceBus.ConfigureXmlSerializer.XmlSerializer(NServiceBus.Configure)">
      <summary>
            Use XML serialization that supports interface-based messages.
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ConfigureXmlSerializer.XmlSerializer(NServiceBus.Configure,System.String)">
      <summary>
            Use XML serialization that supports interface-based messages.
            Optionally set the namespace to be used in the XML.
            </summary>
      <param name="config">
      </param>
      <param name="nameSpace">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ConfigureXmlSerializer.XmlSerializer(NServiceBus.Configure,System.Boolean)">
      <summary>
            Use XML serialization that supports interface-based messages.
            Optionally set the namespace to be used in the XML.
            </summary>
      <param name="config">
      </param>
      <param name="sanitizeInput">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ConfigureXmlSerializer.XmlSerializer(NServiceBus.Configure,System.String,System.Boolean)">
      <summary>
            Use XML serialization that supports interface-based messages.
            Optionally set the namespace to be used in the XML.
            </summary>
      <param name="config">
      </param>
      <param name="sanitizeInput">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Serializers.XML.Config.MessageTypesInitializer">
      <summary>
            Initializes the mapper and the serializer with the found message types
            </summary>
    </member>
    <member name="T:NServiceBus.Serializers.XML.Config.SetXmlSerializerAsDefault">
      <summary>
            Makes sure that we default to XML if users hasn't requested another serializer
            </summary>
    </member>
    <member name="T:NServiceBus.Serializers.XML.XmlMessageSerializer">
      <summary>
            Implementation of the message serializer over XML supporting interface-based messages.
            </summary>
    </member>
    <member name="F:NServiceBus.Serializers.XML.XmlMessageSerializer.namespacesToPrefix">
      <summary>
            Used for serialization
            </summary>
    </member>
    <member name="F:NServiceBus.Serializers.XML.XmlMessageSerializer.prefixesToNamespaces">
      <summary>
            Used for deserialization
            </summary>
    </member>
    <member name="M:NServiceBus.Serializers.XML.XmlMessageSerializer.InitType(System.Type)">
      <summary>
            Scans the given type storing maps to fields and properties to save on reflection at runtime.
            </summary>
      <param name="t">
      </param>
    </member>
    <member name="M:NServiceBus.Serializers.XML.XmlMessageSerializer.GetAllPropertiesForType(System.Type,System.Boolean)">
      <summary>
            Gets a PropertyInfo for each property of the given type.
            </summary>
      <param name="t">
      </param>
      <param name="isKeyValuePair">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Serializers.XML.XmlMessageSerializer.GetAllFieldsForType(System.Type)">
      <summary>
            Gets a FieldInfo for each field in the given type.
            </summary>
      <param name="t">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Serializers.XML.XmlMessageSerializer.Deserialize(System.IO.Stream)">
      <summary>
            Deserializes the given stream to an array of messages which are returned.
            </summary>
      <param name="stream">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Serializers.XML.XmlMessageSerializer.Serialize(System.Object[],System.IO.Stream)">
      <summary>
            Serializes the given messages to the given stream.
            </summary>
      <param name="messages">
      </param>
      <param name="stream">
      </param>
    </member>
    <member name="M:NServiceBus.Serializers.XML.XmlMessageSerializer.#ctor(NServiceBus.MessageInterfaces.IMessageMapper)">
      <summary>
            Initializes an instace of a NServiceBus.Serializers.XML.XmlMessageSerializer
            </summary>
      <param name="mapper">Message Mapper</param>
    </member>
    <member name="M:NServiceBus.Serializers.XML.XmlMessageSerializer.Initialize(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
            Initialized the serializer with the given message types
            </summary>
      <param name="types">
      </param>
    </member>
    <member name="P:NServiceBus.Serializers.XML.XmlMessageSerializer.Namespace">
      <summary>
            The namespace to place in outgoing XML.
            </summary>
    </member>
    <member name="P:NServiceBus.Serializers.XML.XmlMessageSerializer.SanitizeInput">
      <summary>
            If true, then the serializer will use a sanitizing stream to skip invalid characters from the stream before parsing
            </summary>
    </member>
    <member name="T:NServiceBus.Serializers.XML.XmlSanitizingStream">
      <summary>
            A StreamReader that excludes XML-illegal characters while reading.
            </summary>
    </member>
    <member name="F:NServiceBus.Serializers.XML.XmlSanitizingStream.EOF">
      <summary>
            The charactet that denotes the end of a file has been reached.
            </summary>
    </member>
    <member name="M:NServiceBus.Serializers.XML.XmlSanitizingStream.#ctor(System.IO.Stream)">
      <summary>Create an instance of XmlSanitizingStream.</summary>
      <param name="streamToSanitize">
            The stream to sanitize of illegal XML characters.
            </param>
    </member>
    <member name="M:NServiceBus.Serializers.XML.XmlSanitizingStream.IsLegalXmlChar(System.String,System.Int32)">
      <summary>
            Get whether an integer represents a legal XML 1.0 or 1.1 character. See
            the specification at w3.org for these characters.
            </summary>
      <param name="xmlVersion">
            The version number as a string. Use "1.0" for XML 1.0 character
            validation, and use "1.1" for XML 1.1 character validation.
            </param>
    </member>
    <member name="M:NServiceBus.Serializers.XML.XmlSanitizingStream.IsLegalXmlChar(System.Int32)">
      <summary>
            Get whether an integer represents a legal XML 1.0 character. See the  
            specification at w3.org for these characters.
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Config.ConfigUnicastBus">
      <summary>
            Inherits NServiceBus.Configure providing UnicastBus specific configuration on top of it.
            </summary>
    </member>
    <member name="F:NServiceBus.Unicast.Config.ConfigUnicastBus.typesToEndpoints">
      <summary>
            A map of which message types (belonging to the given assemblies) are owned 
            by which endpoint.
            </summary>
    </member>
    <member name="F:NServiceBus.Unicast.Config.ConfigUnicastBus.busConfig">
      <summary>
            Used to configure the bus.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.Configure(NServiceBus.Configure)">
      <summary>
            Wrap the given configure object storing its builder and configurer.
            </summary>
      <param name="config">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.LoadMessageHandlers">
      <summary>
            Loads all message handler assemblies in the runtime directory.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.LoadMessageHandlers``1">
      <summary>
            Loads all message handler assemblies in the runtime directory
            and specifies that handlers in the given assembly should run
            before all others.
            
            Use First{T} to indicate the type to load from.
            </summary>
      <typeparam name="TFirst">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.LoadMessageHandlers``1(NServiceBus.First{``0})">
      <summary>
            Loads all message handler assemblies in the runtime directory
            and specifies that the handlers in the given 'order' are to 
            run before all others and in the order specified.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="order">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.ConfigureMessageHandlersIn(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>
            Scans the given types for types that are message handlers
            then uses the Configurer to configure them into the container as single call components,
            finally passing them to the bus as its MessageHandlerTypes.
            </summary>
      <param name="types">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.PropogateReturnAddressOnSend(System.Boolean)">
      <summary>
            Set this if you want this endpoint to serve as something of a proxy;
            recipients of messages sent by this endpoint will see the address
            of endpoints that sent the incoming messages.
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.ForwardReceivedMessagesTo(System.String)">
      <summary>
            Forwards all received messages to a given endpoint (queue@machine).
            This is useful as an auditing/debugging mechanism.
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.DoNotAutoSubscribe">
      <summary>
            Instructs the bus not to automatically subscribe to messages that
            it has handlers for (given those messages belong to a different endpoint).
            
            This is needed only if you require fine-grained control over the subscribe/unsubscribe process.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.DoNotAutoSubscribeSagas">
      <summary>
            Instructs the bus not to automatically subscribe sagas to messages that
            it has handlers for (given those messages belong to a different endpoint).
            
            This is needed only if you require fine-grained control over the subscribe/unsubscribe process.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.AllowSubscribeToSelf">
      <summary>
            Allow the bus to subscribe to itself
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.SkipDeserialization">
      <summary>
            Causes the bus to not deserialize incoming messages. This means that no handlers are called and 
            you need to be subscribed to the ITransport.TransportMessageReceived event to handle the messages
            your self.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.DefaultDispatcherFactory``1">
      <summary>
            Allow the bus to subscribe to itself
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.IsMessageHandler(System.Type)">
      <summary>
            Returns true if the given type is a message handler.
            </summary>
      <param name="t">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.GetMessageTypeFromMessageHandler(System.Type)">
      <summary>
            Returns the message type handled by the given message handler type.
            </summary>
      <param name="t">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.ConfigureUnicastBus">
      <summary>
            Contains extension methods to NServiceBus.Configure.
            </summary>
    </member>
    <member name="M:NServiceBus.ConfigureUnicastBus.UnicastBus(NServiceBus.Configure)">
      <summary>
            Use unicast messaging (your best option on nServiceBus right now).
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ConfigureUnicastBus.GetTimeoutManagerAddress(NServiceBus.Configure)">
      <summary>
            Return Timeout Manager Address. Uses "TimeoutManagerAddress" parameter form config file if defined, if not, uses "EndpointName.Timeouts".
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Config.MessageEndpointMapping">
      <summary>
            A configuration element representing which message types map to which endpoint.
            </summary>
    </member>
    <member name="M:NServiceBus.Config.MessageEndpointMapping.Configure(System.Action{System.Type,NServiceBus.Address})">
      <summary>
            Uses the configuration properties to configure the endpoint mapping
            </summary>
      <param name="mapTypeToEndpoint">
      </param>
    </member>
    <member name="P:NServiceBus.Config.MessageEndpointMapping.Messages">
      <summary>
            A string defining the message assembly, or single message type.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.MessageEndpointMapping.Endpoint">
      <summary>
            The endpoint named according to "queue@machine".
            </summary>
    </member>
    <member name="P:NServiceBus.Config.MessageEndpointMapping.AssemblyName">
      <summary>
            The message assembly for the endpoint mapping.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.MessageEndpointMapping.TypeFullName">
      <summary>
            The fully qualified name of the message type. Define this if you want to map a single message type to the endpoint.
            </summary>
      <remarks>Type will take preference above namespace</remarks>
    </member>
    <member name="P:NServiceBus.Config.MessageEndpointMapping.Namespace">
      <summary>
            The message type. Define this if you want to map all the types in the namespace to the endpoint.
            </summary>
      <remarks>Sub-namespaces will not be mapped.</remarks>
    </member>
    <member name="T:NServiceBus.Config.MessageEndpointMappingCollection">
      <summary>
            A configuration element collection of MessageEndpointMappings.
            </summary>
    </member>
    <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.CreateNewElement">
      <summary>
            Creates a new MessageEndpointMapping.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.CreateNewElement(System.String)">
      <summary>
            Creates a new MessageEndpointMapping, setting its Message property to the given name.
            </summary>
      <param name="elementName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.GetElementKey(System.Configuration.ConfigurationElement)">
      <summary>
            Returns the Messages property of the given MessageEndpointMapping element.
            </summary>
      <param name="element">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.IndexOf(NServiceBus.Config.MessageEndpointMapping)">
      <summary>
            Calls BaseIndexOf on the given mapping.
            </summary>
      <param name="mapping">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.Add(NServiceBus.Config.MessageEndpointMapping)">
      <summary>
            Calls BaseAdd.
            </summary>
      <param name="mapping">
      </param>
    </member>
    <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.BaseAdd(System.Configuration.ConfigurationElement)">
      <summary>
            Calls BaseAdd with true as the additional parameter.
            </summary>
      <param name="element">
      </param>
    </member>
    <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.Remove(NServiceBus.Config.MessageEndpointMapping)">
      <summary>
            If the mapping exists, calls BaseRemove on it.
            </summary>
      <param name="mapping">
      </param>
    </member>
    <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.RemoveAt(System.Int32)">
      <summary>
            Calls BaseRemoveAt.
            </summary>
      <param name="index">
      </param>
    </member>
    <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.Remove(System.String)">
      <summary>
            Calls BaseRemove.
            </summary>
      <param name="name">
      </param>
    </member>
    <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.Clear">
      <summary>
            Calls BaseClear.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.CollectionType">
      <summary>
            Returns AddRemoveClearMap.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.AddElementName">
      <summary>
            Calls the base AddElementName.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.ClearElementName">
      <summary>
            Calls the base ClearElementName.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.RemoveElementName">
      <summary>
            Returns the base RemoveElementName.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.Count">
      <summary>
            Returns the base Count.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.Item(System.Int32)">
      <summary>
            Gets/sets the MessageEndpointMapping at the given index.
            </summary>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.Item(System.String)">
      <summary>
            Gets the MessageEndpointMapping for the given name.
            </summary>
      <param name="Name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Config.UnicastBusConfig">
      <summary>
            A configuration section for UnicastBus specific settings.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.UnicastBusConfig.DistributorControlAddress">
      <summary>
            Gets/sets the address for sending control messages to the distributor.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.UnicastBusConfig.DistributorDataAddress">
      <summary>
            Gets/sets the distributor's data address - used as the return address of messages sent by this endpoint.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.UnicastBusConfig.ForwardReceivedMessagesTo">
      <summary>
            Gets/sets the address to which messages received will be forwarded.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.UnicastBusConfig.TimeToBeReceivedOnForwardedMessages">
      <summary>
            Gets/sets the time to be received set on forwarded messages
            </summary>
    </member>
    <member name="P:NServiceBus.Config.UnicastBusConfig.TimeoutManagerAddress">
      <summary>
            Gets/sets the address that the timeout manager will use to send and receive messages.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.UnicastBusConfig.MessageEndpointMappings">
      <summary>
            Contains the mappings from message types (or groups of them) to endpoints.
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Distributor.Distributor">
      <summary>
            Provides functionality for distributing messages from a bus
            to multiple workers when using a unicast transport.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Distributor.Distributor.Start">
      <summary>
            Starts the Distributor.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Distributor.Distributor.Stop">
      <summary>
            Stops the Distributor.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Distributor.Distributor.messageBusTransport_TransportMessageReceived(System.Object,NServiceBus.Unicast.Transport.TransportMessageReceivedEventArgs)">
      <summary>
            Handles reciept of a message on the bus to distribute for.
            </summary>
      <param name="sender">
      </param>
      <param name="e">
      </param>
      <remarks>
            This method checks whether a worker is available to handle the message and
            forwards it if one is found.
            </remarks>
    </member>
    <member name="M:NServiceBus.Unicast.Distributor.Distributor.Rollback">
      <summary>
            Rolls back the message that arrived on the MessageBusTransport.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Distributor.Distributor.DataTransportInputQueue">
      <summary>
            Sets the address of the datainput queue for this distributor
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Distributor.Distributor.MessageBusTransport">
      <summary>
            Sets the transport that will be used
            to access the bus containing messages to distribute.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Distributor.Distributor.MessageSender">
      <summary>
            Object used to send messages.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Distributor.Distributor.WorkerManager">
      <summary>
            Sets the <see cref="T:NServiceBus.Unicast.Distributor.IWorkerAvailabilityManager" /> implementation that will be
            used to determine whether or not a worker is available.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Distributor.Distributor.MillisToWaitIfCannotDispatchToWorker">
      <summary>
            Milliseconds to sleep if no workers are available.
            Prevents needless CPU churn.
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Distributor.IWorkerAvailabilityManager">
      <summary>
            Defines a manager class that determines the availability
            of a worker for the <see cref="T:NServiceBus.Unicast.Distributor.Distributor" />.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Distributor.IWorkerAvailabilityManager.Start">
      <summary>
             Start the worker availability manager
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Distributor.IWorkerAvailabilityManager.WorkerAvailable(NServiceBus.Address,System.Int32)">
      <summary>
            Signal that a worker is available to receive a dispatched message.
            </summary>
      <param name="address">
            The address of the worker that will accept the dispatched message.
            </param>
      <param name="capacity">The number of messages that this worker is ready to process</param>
    </member>
    <member name="M:NServiceBus.Unicast.Distributor.IWorkerAvailabilityManager.PopAvailableWorker">
      <summary>
            Pops the next available worker from the available worker list
            and returns its address.
            </summary>
      <returns>The address of the next available worker.</returns>
    </member>
    <member name="M:NServiceBus.Unicast.Distributor.IWorkerAvailabilityManager.ClearAvailabilityForWorker(NServiceBus.Address)">
      <summary>
            Removes all entries from the worker availability list
            with the specified address.
            </summary>
      <param name="address">
            The address of the worker to remove from the availability list.
            </param>
    </member>
    <member name="T:NServiceBus.Unicast.BusAsyncResult">
      <summary>
            Implementation of IAsyncResult returned when registering a callback.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.BusAsyncResult.#ctor(System.AsyncCallback,System.Object)">
      <summary>
            Creates a new object storing the given callback and state.
            </summary>
      <param name="callback">
      </param>
      <param name="state">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.BusAsyncResult.Complete(System.Int32,System.Object[])">
      <summary>
            Stores the given error code and messages, 
            releases any blocked threads,
            and invokes the previously given callback.
            </summary>
      <param name="errorCode">
      </param>
      <param name="messages">
      </param>
    </member>
    <member name="P:NServiceBus.Unicast.BusAsyncResult.AsyncState">
      <summary>
            Returns a completion result containing the error code, messages, and state.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.BusAsyncResult.AsyncWaitHandle">
      <summary>
            Returns a handle suitable for blocking threads.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.BusAsyncResult.CompletedSynchronously">
      <summary>
            Returns false.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.BusAsyncResult.IsCompleted">
      <summary>
            Returns if the operation has completed.
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Callback">
      <summary>
            Implementation of the ICallback interface for the unicast bus/
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Callback.#ctor(System.String)">
      <summary>
            Creates a new instance of the callback object storing the given message id.
            </summary>
      <param name="messageId">
      </param>
    </member>
    <member name="P:NServiceBus.Unicast.Callback.MessageId">
      <summary>
            Returns the message id this object was constructed with.
            </summary>
    </member>
    <member name="E:NServiceBus.Unicast.Callback.Registered">
      <summary>
            Event raised when the Register method is called.
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.BusAsyncResultEventArgs">
      <summary>
            Argument passed in the Registered event of the Callback object.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.BusAsyncResultEventArgs.Result">
      <summary>
            Gets/sets the IAsyncResult.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.BusAsyncResultEventArgs.MessageId">
      <summary>
            Gets/sets the message id.
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.IMessageDispatcherFactory">
      <summary>
            Returns the action to dispatch the given message to the handler
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.IMessageDispatcherFactory.GetDispatcher(System.Type,NServiceBus.ObjectBuilder.IBuilder,System.Object)">
      <summary>
            Returns the action that will dipatch this message
            </summary>
      <param name="messageHandlerType">
      </param>
      <param name="builder">
      </param>
      <param name="toHandle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.IMessageDispatcherFactory.CanDispatch(System.Type)">
      <summary>
            Returns true if the factory is able to dispatch this type
            </summary>
      <param name="handler">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Unicast.DefaultDispatcherFactory">
      <summary>
            The default dispatch factory
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.HandlerInvocationCache">
      <summary>
            Helper that optimize the invokation of the handle methods
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.HandlerInvocationCache.Invoke(System.Type,System.Object,System.Object)">
      <summary>
            Invokes the handle method of the given handler passing the message
            </summary>
      <param name="interfaceType">The method that implements the interface type to execute.</param>
      <param name="handler">The handler instance.</param>
      <param name="message">The message instance.</param>
    </member>
    <member name="M:NServiceBus.Unicast.HandlerInvocationCache.CacheMethodForHandler(System.Type,System.Type)">
      <summary>
            Registers the method in the cache
            </summary>
      <param name="handler">The object type.</param>
      <param name="messageType">the message type.</param>
    </member>
    <member name="T:NServiceBus.Unicast.IUnicastBus">
      <summary>
            Extension of the IBus interface for working with a distributor.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.IUnicastBus.ClearTimeoutsFor(System.Guid)">
      <summary>
            Clears any existing timeouts for the given saga
            </summary>
      <param name="sagaId">
      </param>
    </member>
    <member name="E:NServiceBus.Unicast.IUnicastBus.NoSubscribersForMessage">
      <summary>
            Event raised by the Publish method when no subscribers are
            registered for the message being published.
            </summary>
    </member>
    <member name="E:NServiceBus.Unicast.IUnicastBus.ClientSubscribed">
      <summary>
            Event raised when a client has been subscribed to a message type.
            </summary>
    </member>
    <member name="E:NServiceBus.Unicast.IUnicastBus.MessagesSent">
      <summary>
            Event raised when the bus sends multiple messages across the wire.
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.IWantToRunWhenTheBusStarts">
      <summary>
            Implement this interface if you want to be called when the bus starts up
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.IWantToRunWhenTheBusStarts.Run">
      <summary>
            Method called on start up
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.MessageContext">
      <summary>
            Implementation of IMessageContext
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.MessageContext.#ctor(NServiceBus.Unicast.Transport.TransportMessage)">
      <summary>
            Initializes message context from the transport message.
            </summary>
      <param name="transportMessage">
      </param>
    </member>
    <member name="T:NServiceBus.Unicast.MessageEventArgs">
      <summary>
            Data containing a message for raising in events.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.MessageEventArgs.#ctor(System.Object)">
      <summary>
            Instantiates a new object containing the given message.
            </summary>
      <param name="msg">
      </param>
    </member>
    <member name="P:NServiceBus.Unicast.MessageEventArgs.Message">
      <summary>
            The message.
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.MessagesEventArgs">
      <summary>
            Data containing multiple messages for raising in events.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.MessagesEventArgs.#ctor(System.Object[])">
      <summary>
            Instantiate an event arg referencing multiple messages.
            </summary>
      <param name="messages">
      </param>
    </member>
    <member name="P:NServiceBus.Unicast.MessagesEventArgs.Messages">
      <summary>
            The messages that were sent.
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.MessagingBestPractices">
      <summary>
            Enforce messaging rules
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.MessagingBestPractices.AssertIsValidForSend(System.Type,NServiceBus.Unicast.Transport.MessageIntentEnum)">
      <summary>
            Enforce messaging rules. Make sure, the message can be used within the Bus.Send.
            </summary>
      <param name="messageType">Event, Command or message</param>
      <param name="messageIntent">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.MessagingBestPractices.AssertIsValidForReply(System.Collections.Generic.IEnumerable{System.Object})">
      <summary>
            Enforce messaging rules. Make sure, the message can be used by Bus.Reply.
            </summary>
      <param name="messages">Collection of messages to enforce messaging rules on.</param>
    </member>
    <member name="M:NServiceBus.Unicast.MessagingBestPractices.AssertIsValidForReply(System.Type)">
      <summary>
            Enforce messaging rules. Make sure, the message can be used by Bus.Reply.
            </summary>
      <param name="messageType">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.MessagingBestPractices.AssertIsValidForPubSub(System.Type)">
      <summary>
            Enforce messaging rules. Make sure, the message can be used by pubsub bus methods (subscribe, unsubscribe and publish)..
            </summary>
      <param name="messageType">
      </param>
    </member>
    <member name="T:NServiceBus.Unicast.SubscriptionEventArgs">
      <summary>
            Contains which client subscribed to which message
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.SubscriptionEventArgs.SubscriberAddress">
      <summary>
            The address of the subscriber.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.SubscriptionEventArgs.SubscriberReturnAddress">
      <summary>
            The address of the subscriber.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.SubscriptionEventArgs.MessageType">
      <summary>
            The type of message the client subscribed to.
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.SubscriptionsManager">
      <summary>
            Manages subscriptions and predicates for messages published by other endpoints
            and subscribed to by the local bus.
            </summary>
      <remarks>
            Thread safe.
            </remarks>
    </member>
    <member name="M:NServiceBus.Unicast.SubscriptionsManager.GetConditionsForMessage(System.Object)">
      <summary>
            Gets the list of conditions associated with a message.
            </summary>
      <param name="message">The message to get conditions for.</param>
      <returns>A list of conditions that are associated with type of message provided.</returns>
    </member>
    <member name="M:NServiceBus.Unicast.SubscriptionsManager.AddConditionForSubscriptionToMessageType(System.Type,System.Predicate{System.Object})">
      <summary>
            Adds a condition to a message type.
            </summary>
      <param name="messageType">The message type to add a condition to.</param>
      <param name="condition">The condition to add.</param>
      <remarks>
            All conditions added to a message type must be met if the messages of that type 
            are to be published to a subscriber.</remarks>
    </member>
    <member name="T:NServiceBus.Unicast.UnicastBus">
      <summary>
            A unicast implementation of <see cref="T:NServiceBus.IBus" /> for NServiceBus.
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.UnicastBus.MessageReceivedDelegate">
      <summary>
            A delegate for a method that will handle the <see cref="E:NServiceBus.Unicast.UnicastBus.MessageReceived" />
            event.
            </summary>
      <param name="message">The message received.</param>
    </member>
    <member name="F:NServiceBus.Unicast.UnicastBus.SubscriptionMessageType">
      <summary>
            Header entry key for the given message type that is being subscribed to, when message intent is subscribe or unsubscribe.
            </summary>
    </member>
    <member name="F:NServiceBus.Unicast.UnicastBus.transport">
      <summary>
            A reference to the transport.
            </summary>
    </member>
    <member name="F:NServiceBus.Unicast.UnicastBus._handleCurrentMessageLaterWasCalled">
      <summary>
            ThreadStatic variable indicating if the current message was already
            marked to be handled later so we don't do this more than once.
            </summary>
    </member>
    <member name="F:NServiceBus.Unicast.UnicastBus.subscriptionsManager">
      <summary>
            Gets/sets the subscription manager to use for the bus.
            </summary>
    </member>
    <member name="F:NServiceBus.Unicast.UnicastBus.modules">
      <summary>
            Thread-static list of message modules, needs to be initialized for every transport message
            </summary>
    </member>
    <member name="F:NServiceBus.Unicast.UnicastBus.messageIdToAsyncResultLookup">
      <summary>
            Map of message IDs to Async Results - useful for cleanup in case of timeouts.
            </summary>
    </member>
    <member name="F:NServiceBus.Unicast.UnicastBus.messageTypeToDestinationLookup">
      <remarks>
            Accessed by multiple threads - needs appropriate locking
            </remarks>
    </member>
    <member name="F:NServiceBus.Unicast.UnicastBus._messageBeingHandled">
      <remarks>
            ThreadStatic
            </remarks>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.ClearTimeoutsFor(System.Guid)">
      <summary>
            Clear Timeouts For the saga
            </summary>
      <param name="sagaId">Id of the Saga for clearing the timeouts</param>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.CreateInstance``1">
      <summary>
            Creates an instance of the specified type.
            Used primarily for instantiating interface-based messages.
            </summary>
      <typeparam name="T">The type to instantiate.</typeparam>
      <returns>An instance of the specified type.</returns>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.CreateInstance``1(System.Action{``0})">
      <summary>
            Creates an instance of the specified type.
            Used primarily for instantiating interface-based messages.
            </summary>
      <typeparam name="T">The type to instantiate.</typeparam>
      <param name="action">An action to perform on the result</param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.CreateInstance(System.Type)">
      <summary>
            Creates an instance of the specified type.
            Used primarily for instantiating interface-based messages.
            </summary>
      <param name="messageType">The type to instantiate.</param>
      <returns>An instance of the specified type.</returns>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.Publish``1(System.Action{``0})">
      <summary>
            Creates an instance of the requested message type (T), 
            performing the given action on the created message,
            and then publishing it.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="messageConstructor">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.Publish``1(``0[])">
      <summary>
            Publishes the messages to all subscribers of the first message's type.
            </summary>
      <param name="messages">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.Subscribe``1">
      <summary>
            Subscribes to the given type - T.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.Subscribe(System.Type)">
      <summary>
            Subscribes to receive published messages of the specified type.
            </summary>
      <param name="messageType">The type of message to subscribe to.</param>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.Subscribe``1(System.Predicate{``0})">
      <summary>
            Subscribes to the given type T, registering a condition that all received
            messages of that type should comply with, otherwise discarding them.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="condition">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.Subscribe(System.Type,System.Predicate{System.Object})">
      <summary>
            Subscribes to receive published messages of the specified type if
            they meet the provided condition.
            </summary>
      <param name="messageType">The type of message to subscribe to.</param>
      <param name="condition">The condition under which to receive the message.</param>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.Unsubscribe``1">
      <summary>
            Unsubscribes from the given type of message - T.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.Unsubscribe(System.Type)">
      <summary>
            Unsubscribes from receiving published messages of the specified type.
            </summary>
      <param name="messageType">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.Defer(System.TimeSpan,System.Object[])">
      <summary>
            Defer
            </summary>
      <param name="delay">Delay</param>
      <param name="messages">Messages</param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.Defer(System.DateTime,System.Object[])">
      <summary>
            Defer
            </summary>
      <param name="processAt">processAt</param>
      <param name="messages">messages</param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.Dispose">
      <summary>
            Tells the transport to dispose.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.HandleMessage(NServiceBus.ObjectBuilder.IBuilder,NServiceBus.Unicast.Transport.TransportMessage)">
      <summary>
            Handles a received message.
            </summary>
      <param name="builder">The builder used to construct the objects necessary to handle the message.</param>
      <param name="m">The received message.</param>
      <remarks>
            run by multiple threads so must be thread safe
            public for testing
            </remarks>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.DispatchMessageToHandlersBasedOnType(NServiceBus.ObjectBuilder.IBuilder,System.Object)">
      <summary>
            Finds the message handlers associated with the message type and dispatches
            the message to the found handlers.
            </summary>
      <param name="builder">The builder used to construct the handlers.</param>
      <param name="toHandle">The message to dispatch to the handlers.</param>
      <param name="messageType">The message type by which to locate the correct handlers.</param>
      <returns>
      </returns>
      <remarks>
            If during the dispatch, a message handler calls the DoNotContinueDispatchingCurrentMessageToHandlers method,
            this prevents the message from being further dispatched.
            This includes generic message handlers (of IMessage), and handlers for the specific messageType.
            </remarks>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.GetInnermostException(System.Exception)">
      <summary>
            Gets the inner most exception from an exception stack.
            </summary>
      <param name="e">The exception to get the inner most exception for.</param>
      <returns>The innermost exception.</returns>
      <remarks>
            If the exception has no inner exceptions the provided exception will be returned.
            </remarks>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.HandleCorellatedMessage(NServiceBus.Unicast.Transport.TransportMessage,System.Object[])">
      <summary>
            If the message contains a correlationId, attempts to
            invoke callbacks for that Id.
            </summary>
      <param name="msg">The message to evaluate.</param>
      <param name="messages">The logical messages in the transport message.</param>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.TransportMessageReceived(System.Object,NServiceBus.Unicast.Transport.TransportMessageReceivedEventArgs)">
      <summary>
            Handles the <see cref="E:NServiceBus.Unicast.Transport.ITransport.TransportMessageReceived" /> event from the <see cref="T:NServiceBus.Unicast.Transport.ITransport" /> used
            for the bus.
            </summary>
      <param name="sender">The sender of the event.</param>
      <param name="e">The arguments for the event.</param>
      <remarks>
            When the transport passes up the <see cref="T:NServiceBus.Unicast.Transport.TransportMessage" /> its received,
            the bus checks for initializiation, 
            sets the message as that which is currently being handled for the current thread
            and, depending on <see cref="P:NServiceBus.Unicast.UnicastBus.DisableMessageHandling" />, attempts to handle the message.
            </remarks>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.HandledSubscriptionMessage(NServiceBus.Unicast.Transport.TransportMessage,NServiceBus.Unicast.Subscriptions.ISubscriptionStorage,NServiceBus.IAuthorizeSubscriptions)">
      <summary>
            Handles subscribe and unsubscribe requests managing the given subscription storage.
            Returns true if the message was a subscription message.
            </summary>
      <param name="msg">
      </param>
      <param name="subscriptionStorage">
      </param>
      <param name="subscriptionAuthorizer">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.ForwardMessageIfNecessary(NServiceBus.Unicast.Transport.TransportMessage)">
      <summary>
            Sends the Msg to the address found in the field <see cref="P:NServiceBus.Unicast.UnicastBus.ForwardReceivedMessagesTo" />
            if it isn't null.
            </summary>
      <param name="m">The message to forward</param>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.RegisterMessageType(System.Type,NServiceBus.Address)">
      <summary>
            Registers a message type to a destination.
            </summary>
      <param name="messageType">A message type implementing <see cref="T:NServiceBus.IMessage" />.</param>
      <param name="address">The address of the destination the message type is registered to.</param>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.MapTransportMessageFor(System.Object[],NServiceBus.Unicast.Transport.TransportMessage)">
      <summary>
            Wraps the provided messages in an NServiceBus envelope, does not include destination.
            Invokes message mutators.
            </summary>
      <param name="rawMessages">The messages to wrap.</param>
            /// <param name="result">The envelope in which the messages are placed.</param><returns>The envelope containing the messages.</returns></member>
    <member name="M:NServiceBus.Unicast.UnicastBus.IfTypeIsMessageHandlerThenLoad(System.Type)">
      <summary>
            Evaluates a type and loads it if it implements IMessageHander{T}.
            </summary>
      <param name="handler">The type to evaluate.</param>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.GetMessageTypesIfIsMessageHandler(System.Type)">
      <summary>
            If the type is a message handler, returns all the message types that it handles
            </summary>
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.GetHandlerTypes(System.Type)">
      <summary>
            Gets a list of handler types associated with a message type.
            </summary>
      <param name="messageType">The type of message to get the handlers for.</param>
      <returns>The list of handler types associated with the message type.</returns>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.GetMessageTypesHandledOnThisEndpoint">
      <summary>
            Returns all the message types which have handlers configured for them.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.GetAddressForMessages(System.Object[])">
      <summary>
            Uses the first message in the array to pass to <see cref="M:NServiceBus.Unicast.UnicastBus.GetAddressForMessageType(System.Type)" />.
            </summary>
      <param name="messages">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.GetAddressForMessageType(System.Type)">
      <summary>
            Gets the destination address for a message type.
            </summary>
      <param name="messageType">The message type to get the destination for.</param>
      <returns>The address of the destination associated with the message type.</returns>
    </member>
    <member name="M:NServiceBus.Unicast.UnicastBus.AssertBusIsStarted">
      <summary>
            Throws an exception if the bus hasn't begun the startup process.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.AutoSubscribe">
      <summary>
            When set, when starting up, the bus performs 
            a subscribe operation for message types for which it has
            handlers and that are owned by a different endpoint.
            Default is true.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.DoNotAutoSubscribeSagas">
      <summary>
            True if the sagas shouldn't be autosubscribed
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.DisableMessageHandling">
      <summary>
            Should be used by programmer, not administrator.
            Disables the handling of incoming messages.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.Transport">
      <summary>
            Should be used by programmer, not administrator.
            Sets an <see cref="T:NServiceBus.Unicast.Transport.ITransport" /> implementation to use as the
            listening endpoint for the bus.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.MessageSender">
      <summary>
            Message queue used to send messages.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.MasterNodeAddress">
      <summary>
            Information regarding the current master node
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.TimeoutManagerAddress">
      <summary>
            Information regarding the current TimeoutManager node
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.SubscriptionStorage">
      <summary>
            Should be used by programmer, not administrator.
            Gets and sets an <see cref="T:NServiceBus.Unicast.Subscriptions.ISubscriptionStorage" /> implementation to
            be used for subscription storage for the bus.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.MessageSerializer">
      <summary>
            Should be used by the programmer, not the administrator.
            Gets and sets an <see cref="T:NServiceBus.Serialization.IMessageSerializer" /> implementation to
            be used for subscription storage for the bus.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.Builder">
      <summary>
            Should be used by programmer, not administrator.
            Sets <see cref="T:NServiceBus.ObjectBuilder.IBuilder" /> implementation that will be used to 
            dynamically instantiate and execute message handlers.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.MessageMapper">
      <summary>
            Gets/sets the message mapper.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.PropogateReturnAddressOnSend">
      <summary>
            Should be used by programmer, not administrator.
            Sets whether or not the return address of a received message 
            should be propogated when the message is forwarded. This field is
            used primarily for the Distributor.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.ForwardReceivedMessagesTo">
      <summary>
            Should be used by administrator, not programmer.
            Sets the address to which all messages received on this bus will be 
            forwarded to (not including subscription messages). 
            This is primarily useful for smart client scenarios 
            where both client and server software are installed on the mobile
            device. The server software will have this field set to the address
            of the real server.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.TimeToBeReceivedOnForwardedMessages">
      <summary>
            The TTR to set on forwarded messages. 
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.MessageOwners">
      <summary>
            Should be used by administrator, not programmer.
            Sets the message types associated with the bus.
            </summary>
      <remarks>
            This property accepts a dictionary where the key can be the name of a type implementing
            <see cref="T:NServiceBus.IMessage" /> or the name of an assembly that contains message types.  The value 
            of each entry is the address of the owner of the message type defined in the key.
            If an assembly is specified then all the the types in the assembly implementing <see cref="T:NServiceBus.IMessage" /> 
            will be registered against the address defined in the value of the entry.
            </remarks>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.MessageHandlerAssemblies">
      <summary>
            Sets the list of assemblies which contain a message handlers
            for the bus.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.MessageHandlerTypes">
      <summary>
            Sets the types that will be scanned for message handlers.
            Those found will be invoked in the same order as given.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.SubscriptionAuthorizer">
      <summary>
            Object that will be used to authorize subscription requests.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.FailureManager">
      <summary>
            Object that will be used to manage failures.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.AllowSubscribeToSelf">
      <summary>
            Gets or Set AllowSubscribeToSelf 
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.DoNotStartTransport">
      <summary>
            Allow disabling the unicast bus.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.InputAddress">
      <summary>
            The address this bus will use as it's main input
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.MessageDispatcherMappings">
      <summary>
            The list of message dispatcher factories to use
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.UnicastBus.SkipDeserialization">
      <summary>
            True if no deseralization should be performed. This means that no handlers will be called
            </summary>
    </member>
    <member name="E:NServiceBus.Unicast.UnicastBus.MessageReceived">
      <summary>
            Event raised when a message is received.
            </summary>
    </member>
    <member name="E:NServiceBus.Unicast.UnicastBus.MessagesSent">
      <summary>
            Event raised when messages are sent.
            </summary>
    </member>
    <member name="E:NServiceBus.Unicast.UnicastBus.NoSubscribersForMessage">
      <summary>
            Event raised when no subscribers found for the published message.
            </summary>
    </member>
    <member name="E:NServiceBus.Unicast.UnicastBus.ClientSubscribed">
      <summary>
            Event raised when client subscribed to a message type.
            </summary>
    </member>
    <member name="E:NServiceBus.Unicast.UnicastBus.Started">
      <summary>
            Implementation of IStartableBus.Started event.
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.BuilderExtensions">
      <summary>
            Extansion methods for IBuilder
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.BuilderExtensions.ForEach``1(NServiceBus.ObjectBuilder.IBuilder,System.Action{``0})">
      <summary>
            Applies the action on the instances of T
            </summary>
      <param name="builder">
      </param>
      <param name="action">
      </param>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="T:NServiceBus.Unicast.Subscriptions.ISubscriptionStorage">
      <summary>
            Defines storage for subscriptions
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.ISubscriptionStorage.Subscribe(NServiceBus.Address,System.Collections.Generic.IEnumerable{NServiceBus.Unicast.Subscriptions.MessageType})">
      <summary>
            Subscribes the given client address to messages of the given types.
            </summary>
      <param name="client">
      </param>
      <param name="messageTypes">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.ISubscriptionStorage.Unsubscribe(NServiceBus.Address,System.Collections.Generic.IEnumerable{NServiceBus.Unicast.Subscriptions.MessageType})">
      <summary>
            Unsubscribes the given client address from messages of the given types.
            </summary>
      <param name="client">
      </param>
      <param name="messageTypes">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.ISubscriptionStorage.GetSubscriberAddressesForMessage(System.Collections.Generic.IEnumerable{NServiceBus.Unicast.Subscriptions.MessageType})">
      <summary>
            Returns a list of addresses of subscribers that previously requested to be notified
            of messages of the given message types.
            </summary>
      <param name="messageTypes">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.ISubscriptionStorage.Init">
      <summary>
            Notifies the subscription storage that now is the time to perform
            any initialization work
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Subscriptions.MessageType">
      <summary>
            Representation of a message type that clients can be subscribed to
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.#ctor(System.Type)">
      <summary>
            Initializes the message type from the given type
            </summary>
      <param name="type">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.#ctor(System.String)">
      <summary>
            Initializes the message type from the given string. 
            </summary>
      <param name="messageTypeString">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.#ctor(System.String,System.String)">
      <summary>
            Initializes the message type from the given string. 
            </summary>
      <param name="typeName">
      </param>
      <param name="versionString">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.#ctor(System.String,System.Version)">
      <summary>
            Initializes the message type from the given string. 
            </summary>
      <param name="typeName">
      </param>
      <param name="version">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.ToString">
      <summary>
            Overriden to append Version along with Type Name
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.Equals(NServiceBus.Unicast.Subscriptions.MessageType)">
      <summary>
            Equality, only major version is used
            </summary>
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.Equals(System.Object)">
      <summary>
            Equality, only Type is same
            </summary>
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.GetHashCode">
      <summary>
            Gets Hash Code
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.op_Equality(NServiceBus.Unicast.Subscriptions.MessageType,NServiceBus.Unicast.Subscriptions.MessageType)">
      <summary>
            Equality
            </summary>
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.op_Inequality(NServiceBus.Unicast.Subscriptions.MessageType,NServiceBus.Unicast.Subscriptions.MessageType)">
      <summary>
            Equality
            </summary>
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NServiceBus.Unicast.Subscriptions.MessageType.TypeName">
      <summary>
            TypeName of the message
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Subscriptions.MessageType.Version">
      <summary>
            Version of the message
            </summary>
    </member>
    <member name="T:NServiceBus.ConfigureInMemorySubscriptionStorage">
      <summary>
            Contains extension methods to NServiceBus.Configure.
            </summary>
    </member>
    <member name="M:NServiceBus.ConfigureInMemorySubscriptionStorage.InMemorySubscriptionStorage(NServiceBus.Configure)">
      <summary>
            Stores subscription data in memory.
            This storage are for development scenarios only
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Unicast.Subscriptions.InMemory.InMemorySubscriptionStorage">
      <summary>
            In memory implementation of the subscription storage
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Subscriptions.Msmq.Config.Installer">
      <summary>
            Class responssible for installing the MSMQ subscription storage.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.Msmq.Config.Installer.Install(System.Security.Principal.WindowsIdentity)">
      <summary>
            Installs the queue.
            </summary>
      <param name="identity">
      </param>
    </member>
    <member name="T:NServiceBus.ConfigureMsmqSubscriptionStorage">
      <summary>
            Contains extension methods to NServiceBus.Configure.
            </summary>
    </member>
    <member name="M:NServiceBus.ConfigureMsmqSubscriptionStorage.MsmqSubscriptionStorage(NServiceBus.Configure)">
      <summary>
            Stores subscription data using MSMQ.
            If multiple machines need to share the same list of subscribers,
            you should not choose this option - prefer the DbSubscriptionStorage
            in that case.
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ConfigureMsmqSubscriptionStorage.MsmqSubscriptionStorage(NServiceBus.Configure,System.String)">
      <summary>
            Stores subscription data using MSMQ.
            If multiple machines need to share the same list of subscribers,
            you should not choose this option - prefer the DbSubscriptionStorage
            in that case.
            </summary>
      <param name="config">
      </param>
      <param name="endpointName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:NServiceBus.ConfigureMsmqSubscriptionStorage.Queue">
      <summary>
            Queue used to store subscriptions.
            </summary>
    </member>
    <member name="T:NServiceBus.Config.MsmqSubscriptionStorageConfig">
      <summary>
            Contains the properties representing the MsmqSubscriptionStorage configuration section.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.MsmqSubscriptionStorageConfig.Queue">
      <summary>
            The queue where subscription data will be stored.
            Use the "queue@machine" convention.
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Subscriptions.Msmq.Entry">
      <summary>
            Describes an entry in the list of subscriptions.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Subscriptions.Msmq.Entry.MessageType">
      <summary>
            Gets the message type for the subscription entry.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Subscriptions.Msmq.Entry.Subscriber">
      <summary>
            Gets the subscription request message.
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Subscriptions.Msmq.MsmqSubscriptionStorage">
      <summary>
            Provides functionality for managing message subscriptions
            using MSMQ.
            </summary>
    </member>
    <member name="F:NServiceBus.Unicast.Subscriptions.Msmq.MsmqSubscriptionStorage.lookup">
      <summary>
            lookup from subscriber, to message type, to message id
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.Msmq.MsmqSubscriptionStorage.ConfigurationIsWrong">
      <summary>
            Checks if configuration is wrong - endpoint isn't transactional and
            object isn't configured to handle own transactions.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.Msmq.MsmqSubscriptionStorage.Add(NServiceBus.Address,NServiceBus.Unicast.Subscriptions.MessageType)">
      <summary>
            Adds a message to the subscription store.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.Msmq.MsmqSubscriptionStorage.Remove(NServiceBus.Address,NServiceBus.Unicast.Subscriptions.MessageType)">
      <summary>
            Removes a message from the subscription store.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.Msmq.MsmqSubscriptionStorage.GetTransactionType">
      <summary>
            Returns the transaction type (automatic or single) that should be used
            based on the configuration of enlisting into external transactions.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Subscriptions.Msmq.MsmqSubscriptionStorage.AddToLookup(NServiceBus.Address,NServiceBus.Unicast.Subscriptions.MessageType,System.String)">
      <summary>
            Adds a message to the lookup to find message from
            subscriber, to message type, to message id
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Subscriptions.Msmq.MsmqSubscriptionStorage.DontUseExternalTransaction">
      <summary>
            Gets/sets whether or not to use a trasaction started outside the 
            subscription store.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Subscriptions.Msmq.MsmqSubscriptionStorage.Queue">
      <summary>
            Sets the address of the queue where subscription messages will be stored.
            For a local queue, just use its name - msmq specific info isn't needed.
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Transport.ControlMessage">
      <summary>
            Helper for creating control messages
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Transport.ControlMessage.Create(NServiceBus.Address)">
      <summary>
            Creates Transport Message
            </summary>
      <returns>Transport Message</returns>
    </member>
    <member name="T:NServiceBus.Unicast.Transport.TransportMessageExtensions">
      <summary>
            Extensions to make the usage if control messages easier
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Transport.TransportMessageExtensions.IsControlMessage(NServiceBus.Unicast.Transport.TransportMessage)">
      <summary>
            True if the transport message is a control message
            </summary>
      <param name="transportMessage">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Unicast.Transport.FailedMessageProcessingEventArgs">
      <summary>
            Defives the event data for the failed message processing event
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Transport.FailedMessageProcessingEventArgs.#ctor(System.Exception)">
      <summary>
            Initialized the event arg with the actual exception
            </summary>
      <param name="ex">
      </param>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.FailedMessageProcessingEventArgs.Reason">
      <summary>
            The exception that caused the processing to fail
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Transport.ITransport">
      <summary>
            Defines the basic functionality of a transport to be used by NServiceBus.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Transport.ITransport.Start(System.String)">
      <summary>
            Starts the transport.
            </summary>
      <param name="inputqueue">
            The adress of a local queue that should be used as input channel for this transport
            </param>
    </member>
    <member name="M:NServiceBus.Unicast.Transport.ITransport.Start(NServiceBus.Address)">
      <summary>
            Starts the transport listening for messages on the given local address.
            </summary>
      <param name="localAddress">
      </param>
    </member>
    <member name="M:NServiceBus.Unicast.Transport.ITransport.ChangeNumberOfWorkerThreads(System.Int32)">
      <summary>
            Changes the number of worker threads running in the transport.
            This may stop active worker threads; those threads will finish
            processing their current message and then exit.
            </summary>
      <param name="targetNumberOfWorkerThreads">
            The requested number of active worker threads after
            the necessary threads have been stopped or started.
            </param>
    </member>
    <member name="M:NServiceBus.Unicast.Transport.ITransport.AbortHandlingCurrentMessage">
      <summary>
            Causes the current message being handled to return to the queue.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.ITransport.NumberOfWorkerThreads">
      <summary>
            Gets the number of worker threads currently running in the transport.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.ITransport.MaxThroughputPerSecond">
      <summary>
            Throttling receiving messages rate. You can't set the value than the value specified at your license.
            </summary>
    </member>
    <member name="E:NServiceBus.Unicast.Transport.ITransport.TransportMessageReceived">
      <summary>
            Raised when a message is received.
            </summary>
    </member>
    <member name="E:NServiceBus.Unicast.Transport.ITransport.StartedMessageProcessing">
      <summary>
            Raised when a message is available but before <see cref="E:NServiceBus.Unicast.Transport.ITransport.TransportMessageReceived" /> is raised.
            </summary>
    </member>
    <member name="E:NServiceBus.Unicast.Transport.ITransport.FinishedMessageProcessing">
      <summary>
            Raised after message processing was completed, even in case of an exception in message processing.
            </summary>
    </member>
    <member name="E:NServiceBus.Unicast.Transport.ITransport.FailedMessageProcessing">
      <summary>
            Raised if an exception was encountered at any point in the processing - including
            when the transaction commits.
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Transport.MessageIntentEnum">
      <summary>
             Enumeration defining different kinds of message intent like Send and Publish.
            </summary>
    </member>
    <member name="F:NServiceBus.Unicast.Transport.MessageIntentEnum.Init">
      <summary>
            Initialization - Here just for compatibility with NServiceBus V2.6
            </summary>
    </member>
    <member name="F:NServiceBus.Unicast.Transport.MessageIntentEnum.Send">
      <summary>
             Regular point-to-point send
            </summary>
    </member>
    <member name="F:NServiceBus.Unicast.Transport.MessageIntentEnum.Publish">
      <summary>
             Publish, not a regular point-to-point send
            </summary>
    </member>
    <member name="F:NServiceBus.Unicast.Transport.MessageIntentEnum.Subscribe">
      <summary>
            Subscribe
            </summary>
    </member>
    <member name="F:NServiceBus.Unicast.Transport.MessageIntentEnum.Unsubscribe">
      <summary>
            Unsubscribe
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Transport.StartedMessageProcessingEventArgs">
      <summary>
            Defines the arguments passed to the event handler of the
            <see cref="E:NServiceBus.Unicast.Transport.ITransport.StartedMessageProcessing" /> event.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Transport.StartedMessageProcessingEventArgs.#ctor(NServiceBus.Unicast.Transport.TransportMessage)">
      <summary>
            Initializes a new TransportMessageReceivedEventArgs.
            </summary>
      <param name="m">The message that was received.</param>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.StartedMessageProcessingEventArgs.Message">
      <summary>
            Gets the message received.
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Transport.TransportHeaderKeys">
      <summary>
            COntains transport message headers
            </summary>
    </member>
    <member name="F:NServiceBus.Unicast.Transport.TransportHeaderKeys.OriginalId">
      <summary>
            Header key for setting/getting the ID of the message as it was when it failed processing.
            </summary>
    </member>
    <member name="F:NServiceBus.Unicast.Transport.TransportHeaderKeys.IdForCorrelation">
      <summary>
            Used for correlation id message.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Transport.TransportHeaderKeys.GetOriginalId(NServiceBus.Unicast.Transport.TransportMessage)">
      <summary>
            Return OriginalId if present. If not return Transport message Id.
            </summary>
      <param name="transportMessage">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Unicast.Transport.TransportHeaderKeys.GetIdForCorrelation(NServiceBus.Unicast.Transport.TransportMessage)">
      <summary>
            Returns IdForCorrelation if not null, otherwise, return Transport message Id.
            </summary>
      <param name="transportMessage">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Unicast.Transport.TransportMessage">
      <summary>
            An envelope used by NServiceBus to package messages for transmission.
            </summary>
      <remarks>
            All messages sent and received by NServiceBus are wrapped in this class. 
            More than one message can be bundled in the envelope to be transmitted or 
            received by the bus.
            </remarks>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.TransportMessage.Id">
      <summary>
            Gets/sets the identifier of this message bundle.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.TransportMessage.IdForCorrelation">
      <summary>
            Gets/sets the identifier that is copied to <see cref="P:NServiceBus.Unicast.Transport.TransportMessage.CorrelationId" />.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.TransportMessage.CorrelationId">
      <summary>
            Gets/sets the uniqe identifier of another message bundle
            this message bundle is associated with.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.TransportMessage.ReturnAddress">
      <summary>
            Gets/sets the return address of the message bundle.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.TransportMessage.ReplyToAddress">
      <summary>
            Gets/sets the reply-to address of the message bundle - replaces 'ReturnAddress'.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.TransportMessage.Recoverable">
      <summary>
            Gets/sets whether or not the message is supposed to
            be guaranteed deliverable.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.TransportMessage.MessageIntent">
      <summary>
            Indicates to the infrastructure the message intent (publish, or regular send).
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.TransportMessage.TimeToBeReceived">
      <summary>
            Gets/sets the maximum time limit in which the message bundle
            must be received.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.TransportMessage.TimeSent">
      <summary>
            Gets/sets the time that the message was sent by the source machine.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.TransportMessage.Headers">
      <summary>
            Gets/sets other applicative out-of-band information.
            </summary>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.TransportMessage.Body">
      <summary>
            Gets/sets a byte array to the body content of the message
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Transport.TransportMessageHandlingFailedException">
      <summary>
            Exception used to transport exceptions encountered in messagehandlers
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Transport.TransportMessageHandlingFailedException.#ctor(System.Exception)">
      <summary>
            Constructor
            </summary>
      <param name="originalException">
      </param>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.TransportMessageHandlingFailedException.OriginalException">
      <summary>
            The exception that got thrown from the messagehandler
            </summary>
    </member>
    <member name="T:NServiceBus.Unicast.Transport.TransportMessageReceivedEventArgs">
      <summary>
            Defines the arguments passed to the event handler of the
            <see cref="E:NServiceBus.Unicast.Transport.ITransport.TransportMessageReceived" /> event.
            </summary>
    </member>
    <member name="M:NServiceBus.Unicast.Transport.TransportMessageReceivedEventArgs.#ctor(NServiceBus.Unicast.Transport.TransportMessage)">
      <summary>
            Initializes a new TransportMessageReceivedEventArgs.
            </summary>
      <param name="m">The message that was received.</param>
    </member>
    <member name="P:NServiceBus.Unicast.Transport.TransportMessageReceivedEventArgs.Message">
      <summary>
            Gets the message received.
            </summary>
    </member>
    <member name="T:NServiceBus.ConfigureMsmqTransport">
      <summary>
            Contains extension methods to NServiceBus.Configure.
            </summary>
    </member>
    <member name="M:NServiceBus.ConfigureMsmqTransport.DoNotCreateQueues(NServiceBus.Configure)">
      <summary>
            If queues configured do not exist, will cause them not to be created on startup.
            </summary>
      <param name="config">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Config.MsmqTransportConfig">
      <summary>
            Contains the properties representing the MsmqTransport configuration section.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.MsmqTransportConfig.InputQueue">
      <summary>
            The queue to receive messages from in the format
            "queue@machine".
            </summary>
    </member>
    <member name="P:NServiceBus.Config.MsmqTransportConfig.ErrorQueue">
      <summary>
            The queue to which to forward messages that could not be processed
            in the format "queue@machine".
            </summary>
    </member>
    <member name="P:NServiceBus.Config.MsmqTransportConfig.NumberOfWorkerThreads">
      <summary>
            The number of worker threads that can process messages in parallel.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.MsmqTransportConfig.MaxRetries">
      <summary>
            The maximum number of times to retry processing a message
            when it fails before moving it to the error queue.
            </summary>
    </member>
    <member name="P:NServiceBus.Config.MsmqTransportConfig.DoNotCreateQueues">
      <summary>
            Indicates that queues should not be created.
            </summary>
    </member>
    <member name="T:NServiceBus.DateTimeExtensions">
      <summary>
            Common date time extensions
            </summary>
    </member>
    <member name="M:NServiceBus.DateTimeExtensions.ToWireFormattedString(System.DateTime)">
      <summary>
            Converts the date time to a string suitable for transport over the wire
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.DateTimeExtensions.ToUtcDateTime(System.String)">
      <summary>
            Converts the date time to a string suitable for transport over the wire
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Utils.HeaderInfo">
      <summary>
            Represents the structure of header information passed in a TransportMessage.
            </summary>
    </member>
    <member name="P:NServiceBus.Utils.HeaderInfo.Key">
      <summary>
            The key used to lookup the value in the header collection.
            </summary>
    </member>
    <member name="P:NServiceBus.Utils.HeaderInfo.Value">
      <summary>
            The value stored under the key in the header collection.
            </summary>
    </member>
    <member name="T:NServiceBus.Utils.MsmqUtilities">
      <summary>
             MSMQ-related utility functions
            </summary>
    </member>
    <member name="M:NServiceBus.Utils.MsmqUtilities.AccountToBeAssignedQueuePermissions(System.String)">
      <summary>
            Sets the account to be assigned queue permissions.
            </summary>
      <param name="account">Account to be used.</param>
    </member>
    <member name="M:NServiceBus.Utils.MsmqUtilities.CreateQueueIfNecessary(NServiceBus.Address,System.String)">
      <summary>
             Utility method for creating a queue if it does not exist.
            </summary>
      <param name="address">
      </param>
      <param name="account">The account to be given permissions to the queue</param>
    </member>
    <member name="M:NServiceBus.Utils.MsmqUtilities.CreateQueue(System.String,System.String)">
      <summary>
             Create named message queue
            </summary>
      <param name="queueName">
      </param>
      <param name="account">The account to be given permissions to the queue</param>
    </member>
    <member name="M:NServiceBus.Utils.MsmqUtilities.SetPermissionsForQueue(System.String,System.String)">
      <summary>
            Sets default permissions for queue.
            </summary>
      <param name="queue">
      </param>
      <param name="account">
      </param>
    </member>
    <member name="M:NServiceBus.Utils.MsmqUtilities.GetFullPath(System.String)">
      <summary>
            Turns a '@' separated value into a full path.
            Format is 'queue@machine', or 'queue@ipaddress'
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Utils.MsmqUtilities.GetFullPath(NServiceBus.Address)">
      <summary>
            Turns a '@' separated value into a full path.
            Format is 'queue@machine', or 'queue@ipaddress'
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Utils.MsmqUtilities.GetReturnAddress(System.String,System.String)">
      <summary>
            Gets the name of the return address from the provided value.
            If the target includes a machine name, uses the local machine name in the returned value
            otherwise uses the local IP address in the returned value.
            </summary>
      <param name="value">
      </param>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Utils.MsmqUtilities.GetReturnAddress(NServiceBus.Address,NServiceBus.Address)">
      <summary>
            Gets the name of the return address from the provided value.
            If the target includes a machine name, uses the local machine name in the returned value
            otherwise uses the local IP address in the returned value.
            </summary>
      <param name="value">
      </param>
      <param name="target">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Utils.MsmqUtilities.GetFullPathWithoutPrefix(System.String)">
      <summary>
            Returns the full path without Format or direct os
            from a '@' separated path.
            </summary>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Utils.MsmqUtilities.GetFullPathWithoutPrefix(NServiceBus.Address)">
      <summary>
            Returns the full path without Format or direct os
            from an address.
            </summary>
      <param name="address">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Utils.MsmqUtilities.GetMachineNameFromLogicalName(System.String)">
      <summary>
            Returns the machine name from a '@' separated full logical name,
            or the Environment.MachineName otherwise.
            </summary>
      <param name="logicalName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Utils.MsmqUtilities.GetQueueNameFromLogicalName(System.String)">
      <summary>
            Returns the queue name from a '@' separated full logical name.
            </summary>
      <param name="logicalName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Utils.MsmqUtilities.QueueIsLocal(System.String)">
      <summary>
            Checks whether or not a queue is local by its path.
            </summary>
      <param name="value">The path to the queue to check.</param>
      <returns>true if the queue is local, otherwise false.</returns>
    </member>
    <member name="M:NServiceBus.Utils.MsmqUtilities.GetIndependentAddressForQueue(System.Messaging.MessageQueue)">
      <summary>
            Gets an independent address for the queue in the form:
            queue@machine.
            </summary>
      <param name="q">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Utils.MsmqUtilities.GetNumberOfPendingMessages(System.String)">
      <summary>
            Returns the number of messages in the queue.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Utils.MsmqUtilities.Convert(System.Messaging.Message)">
      <summary>
            Converts an MSMQ message to a TransportMessage.
            </summary>
      <param name="m">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Utils.MsmqUtilities.ExtractMsmqMessageLabelInformationForBackwardCompatibility(System.Messaging.Message,NServiceBus.Unicast.Transport.TransportMessage)">
      <summary>
            For backward compatibility, extract the V2.6 MSMQ label content (IdForCorrelation and WindowsIdentityName) 
            into the V3.X transport message.
            </summary>
      <param name="msmqMsg">Received MSMQ message</param>
      <param name="result">Transport message to be filled from MSMQ message label</param>
    </member>
    <member name="M:NServiceBus.Utils.MsmqUtilities.Convert(NServiceBus.Unicast.Transport.TransportMessage)">
      <summary>
            Converts a TransportMessage to an Msmq message.
            Doesn't set the ResponseQueue of the result.
            </summary>
      <param name="message">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Utils.MsmqUtilities.FillLabelForBackwardsCompatabilityWhileSending(NServiceBus.Unicast.Transport.TransportMessage,System.Messaging.Message)">
      <summary>
            Fill MSMQ message's label to be compatible with NServiceBus V2.6
            </summary>
      <param name="transportMessage">
      </param>
      <param name="msmqMessage">
      </param>
    </member>
    <member name="T:NServiceBus.Utils.TransactionWrapper">
      <summary>
            Provides functionality for executing a callback in a transaction.
            </summary>
    </member>
    <member name="M:NServiceBus.Utils.TransactionWrapper.RunInTransaction(System.Action)">
      <summary>
            Executes the provided delegate method in a transaction.
            </summary>
      <param name="callback">The method to call.</param>
    </member>
    <member name="M:NServiceBus.Utils.TransactionWrapper.RunInTransaction(System.Action,System.Transactions.IsolationLevel,System.TimeSpan)">
      <summary>
            Executes the provided delegate method in a transaction.
            </summary>
      <param name="callback">The delegate method to call.</param>
      <param name="isolationLevel">The isolation level of the transaction.</param>
      <param name="transactionTimeout">The timeout period of the transaction.</param>
    </member>
    <member name="T:NServiceBus.Utils.WorkerThread">
      <summary>
            Represents a worker thread that will repeatedly execute a callback.
            </summary>
    </member>
    <member name="M:NServiceBus.Utils.WorkerThread.#ctor(System.Action)">
      <summary>
            Initializes a new WorkerThread for the specified method to run.
            </summary>
      <param name="methodToRunInLoop">The delegate method to execute in a loop.</param>
    </member>
    <member name="M:NServiceBus.Utils.WorkerThread.Start">
      <summary>
            Starts the worker thread.
            </summary>
    </member>
    <member name="M:NServiceBus.Utils.WorkerThread.Stop">
      <summary>
            Stops the worker thread.
            </summary>
    </member>
    <member name="M:NServiceBus.Utils.WorkerThread.Loop">
      <summary>
            Executes the delegate method until the <see cref="M:NServiceBus.Utils.WorkerThread.Stop" />
            method is called.
            </summary>
    </member>
    <member name="P:NServiceBus.Utils.WorkerThread.StopRequested">
      <summary>
            Gets whether or not a stop request has been received.
            </summary>
    </member>
    <member name="E:NServiceBus.Utils.WorkerThread.Stopped">
      <summary>
            Event raised when the worker thread has stopped.
            </summary>
    </member>
    <member name="T:NServiceBus.Utils.Reflection.LateBoundMethod">
      <summary>
            Late Bound Method
            </summary>
      <param name="target">Target object</param>
      <param name="arguments">Arguments</param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Utils.Reflection.LateBoundProperty">
      <summary>
            Late Bound Property
            </summary>
      <param name="target">Target Object</param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Utils.Reflection.LateBoundField">
      <summary>
            Late Bound Field
            </summary>
      <param name="target">Target Objects </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Utils.Reflection.LateBoundFieldSet">
      <summary>
            Late Bound Field Set
            </summary>
      <param name="target">Target Object</param>
      <param name="value">
      </param>
    </member>
    <member name="T:NServiceBus.Utils.Reflection.LateBoundPropertySet">
      <summary>
            Late Bound Property Set
            </summary>
      <param name="target">Target Object</param>
      <param name="value">
      </param>
    </member>
    <member name="T:NServiceBus.Utils.Reflection.DelegateFactory">
      <summary>
            Delegate Factory
            </summary>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.DelegateFactory.Create(System.Reflection.MethodInfo)">
      <summary>
            Create Late Bound methods
            </summary>
      <param name="method">MethodInfo</param>
      <returns>LateBoundMethod</returns>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.DelegateFactory.Create(System.Reflection.PropertyInfo)">
      <summary>
            Creates LateBoundProperty
            </summary>
      <param name="property">PropertyInfo</param>
      <returns>LateBoundProperty</returns>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.DelegateFactory.Create(System.Reflection.FieldInfo)">
      <summary>
            LateBoundField
            </summary>
      <param name="field">FieldInfo</param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.DelegateFactory.CreateSet(System.Reflection.FieldInfo)">
      <summary>
            Create filed set 
            </summary>
      <param name="field">FieldInfo</param>
      <returns>LateBoundFieldSet</returns>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.DelegateFactory.CreateSet(System.Reflection.PropertyInfo)">
      <summary>
            Creates Property Set 
            </summary>
      <param name="property">PropertyInfo</param>
      <returns>LateBoundPropertySet</returns>
    </member>
    <member name="T:NServiceBus.Utils.Reflection.ExtensionMethods">
      <summary>
            Contains extension methods
            </summary>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.ExtensionMethods.IsGenericallyEquivalent(System.Type,System.Type,System.Type)">
      <summary>
            Useful for finding if a type is (for example) IMessageHandler{T} where T : IMessage.
            </summary>
      <param name="type">
      </param>
      <param name="openGenericType">
      </param>
      <param name="genericArg">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.ExtensionMethods.GetGenericallyContainedType(System.Type,System.Type,System.Type)">
      <summary>
            Returns the enclosed generic type given that the type is GenericallyEquivalent.
            </summary>
      <param name="type">
      </param>
      <param name="openGenericType">
      </param>
      <param name="genericArg">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.ExtensionMethods.IsSimpleType(System.Type)">
      <summary>
            Returns true if the type can be serialized as is.
            </summary>
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.ExtensionMethods.SerializationFriendlyName(System.Type)">
      <summary>
            Takes the name of the given type and makes it friendly for serialization
            by removing problematic characters.
            </summary>
      <param name="t">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Utils.Reflection.Reflect">
      <summary>
            Provides strong-typed reflection for static members of any type or calling 
            object constructors (to retrieve the constructor <see cref="T:System.Reflection.MethodInfo" />).
            </summary>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.Reflect.#ctor">
      <summary>
            Initializes the reflector class.
            </summary>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.Reflect.GetConstructor(System.Linq.Expressions.Expression{System.Action})">
      <summary>
            Gets the constructor represented in the lambda expression.
            </summary>
      <exception cref="T:System.ArgumentNullException">The <paramref name="constructor" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="constructor" /> is not a lambda expression or it does not represent a constructor invocation.</exception>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.Reflect.GetMethod(System.Linq.Expressions.Expression{System.Action})">
      <summary>
            Gets the method represented by the lambda expression.
            </summary>
      <exception cref="T:System.ArgumentNullException">The <paramref name="method" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="method" /> is not a lambda expression or it does not represent a method invocation.</exception>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.Reflect.GetProperty(System.Linq.Expressions.Expression{System.Func{System.Object}})">
      <summary>
            Gets the property represented by the lambda expression.
            </summary>
      <exception cref="T:System.ArgumentNullException">The <paramref name="property" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="property" /> is not a lambda expression or it does not represent a property access.</exception>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.Reflect.GetField(System.Linq.Expressions.Expression{System.Func{System.Object}})">
      <summary>
            Gets the field represented by the lambda expression.
            </summary>
      <exception cref="T:System.ArgumentNullException">The <paramref name="field" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="field" /> is not a lambda expression or it does not represent a field access.</exception>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.Reflect.GetMethodInfo(System.Linq.Expressions.Expression)">
      <summary>
            Returns a MethodInfo for an expression containing a call to a method.
            </summary>
      <param name="method">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.Reflect.GetMemberInfo(System.Linq.Expressions.Expression)">
      <summary>
            Returns a MemberInfo for an expression containing a call to a property.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.Reflect.GetMemberInfo(System.Linq.Expressions.Expression,System.Boolean)">
      <summary>
            Returns a MemberInfo for an expression containing a call to a property.
            </summary>
      <param name="member">
      </param>
      <param name="checkForSingleDot">Checks that the member expression doesn't have more than one dot like a.Prop.Val</param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.Utils.Reflection.Reflect`1">
      <summary>
            Provides strong-typed reflection of the <typeparamref name="TTarget" /> 
            type.
            </summary>
      <typeparam name="TTarget">Type to reflect.</typeparam>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.Reflect`1.GetMethod(System.Linq.Expressions.Expression{System.Action{`0}})">
      <summary>
            Gets the method represented by the lambda expression.
            </summary>
      <exception cref="T:System.ArgumentNullException">The <paramref name="method" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="method" /> is not a lambda expression or it does not represent a method invocation.</exception>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.Reflect`1.GetMethod``1(System.Linq.Expressions.Expression{System.Action{`0,``0}})">
      <summary>
            Gets the method represented by the lambda expression.
            </summary>
      <exception cref="T:System.ArgumentNullException">The <paramref name="method" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="method" /> is not a lambda expression or it does not represent a method invocation.</exception>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.Reflect`1.GetMethod``2(System.Linq.Expressions.Expression{System.Action{`0,``0,``1}})">
      <summary>
            Gets the method represented by the lambda expression.
            </summary>
      <exception cref="T:System.ArgumentNullException">The <paramref name="method" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="method" /> is not a lambda expression or it does not represent a method invocation.</exception>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.Reflect`1.GetMethod``3(System.Linq.Expressions.Expression{System.Action{`0,``0,``1,``2}})">
      <summary>
            Gets the method represented by the lambda expression.
            </summary>
      <exception cref="T:System.ArgumentNullException">The <paramref name="method" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="method" /> is not a lambda expression or it does not represent a method invocation.</exception>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.Reflect`1.GetProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
      <summary>
            Gets the property represented by the lambda expression.
            </summary>
      <exception cref="T:System.ArgumentNullException">The <paramref name="property" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="property" /> is not a lambda expression or it does not represent a property access.</exception>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.Reflect`1.GetProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)">
      <summary>
            Gets the property represented by the lambda expression.        
            </summary>
      <param name="property">
      </param>
      <param name="checkForSingleDot">If checkForSingleDot is true, then the property expression is checked to see that only a single dot is present.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Utils.Reflection.Reflect`1.GetField(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
      <summary>
            Gets the field represented by the lambda expression.
            </summary>
      <exception cref="T:System.ArgumentNullException">The <paramref name="field" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="field" /> is not a lambda expression or it does not represent a field access.</exception>
    </member>
    <member name="T:Common.Logging.Configuration.ArgUtils">
      <summary>
            Various utility methods for using during factory and logger instance configuration
            </summary>
      <author>Erich Eichinger</author>
    </member>
    <member name="T:Common.Logging.Configuration.ArgUtils.ParseHandler`1">
      <summary>
            A delegate converting a string representation into the target type
            </summary>
    </member>
    <member name="T:Common.Logging.Configuration.ArgUtils.Action">
      <summary>
            An anonymous action delegate with no arguments and no return value.
            </summary>
      <seealso cref="M:Common.Logging.Configuration.ArgUtils.Guard(Common.Logging.Configuration.ArgUtils.Action,System.String,System.Object[])" />
    </member>
    <member name="T:Common.Logging.Configuration.ArgUtils.Function`1">
      <summary>
            An anonymous action delegate with no arguments and no return value.
            </summary>
      <seealso cref="M:Common.Logging.Configuration.ArgUtils.Guard``1(Common.Logging.Configuration.ArgUtils.Function{``0},System.String,System.Object[])" />
    </member>
    <member name="M:Common.Logging.Configuration.ArgUtils.RegisterTypeParser``1(Common.Logging.Configuration.ArgUtils.ParseHandler{``0})">
      <summary>
            Adds the parser to the list of known type parsers.
            </summary>
      <remarks>
            .NET intrinsic types are pre-registerd: short, int, long, float, double, decimal, bool
            </remarks>
    </member>
    <member name="M:Common.Logging.Configuration.ArgUtils.GetValue(System.Collections.Specialized.NameValueCollection,System.String)">
      <summary>
            Retrieves the named value from the specified <see cref="T:System.Collections.Specialized.NameValueCollection" />.
            </summary>
      <param name="values">may be null</param>
      <param name="name">the value's key</param>
      <returns>if <paramref name="values" /> is not null, the value returned by values[name]. <c>null</c> otherwise.</returns>
    </member>
    <member name="M:Common.Logging.Configuration.ArgUtils.GetValue(System.Collections.Specialized.NameValueCollection,System.String,System.String)">
      <summary>
            Retrieves the named value from the specified <see cref="T:System.Collections.Specialized.NameValueCollection" />.
            </summary>
      <param name="values">may be null</param>
      <param name="name">the value's key</param>
      <param name="defaultValue">the default value, if not found</param>
      <returns>if <paramref name="values" /> is not null, the value returned by values[name]. <c>null</c> otherwise.</returns>
    </member>
    <member name="M:Common.Logging.Configuration.ArgUtils.Coalesce(System.String[])">
      <summary>
            Returns the first nonnull, nonempty value among its arguments.
            </summary>
      <remarks>
            Returns <c>null</c>, if the initial list was null or empty.
            </remarks>
      <seealso cref="M:Common.Logging.Configuration.ArgUtils.Coalesce``1(System.Predicate{``0},``0[])" />
    </member>
    <member name="M:Common.Logging.Configuration.ArgUtils.Coalesce``1(System.Predicate{``0},``0[])">
      <summary>
            Returns the first nonnull, nonempty value among its arguments.
            </summary>
      <remarks>
            Also 
            </remarks>
    </member>
    <member name="M:Common.Logging.Configuration.ArgUtils.TryParseEnum``1(``0,System.String)">
      <summary>
            Tries parsing <paramref name="stringValue" /> into an enum of the type of <paramref name="defaultValue" />.
            </summary>
      <param name="defaultValue">the default value to return if parsing fails</param>
      <param name="stringValue">the string value to parse</param>
      <returns>the successfully parsed value, <paramref name="defaultValue" /> otherwise.</returns>
    </member>
    <member name="M:Common.Logging.Configuration.ArgUtils.TryParse``1(``0,System.String)">
      <summary>
            Tries parsing <paramref name="stringValue" /> into the specified return type.
            </summary>
      <param name="defaultValue">the default value to return if parsing fails</param>
      <param name="stringValue">the string value to parse</param>
      <returns>the successfully parsed value, <paramref name="defaultValue" /> otherwise.</returns>
    </member>
    <member name="M:Common.Logging.Configuration.ArgUtils.AssertNotNull``1(System.String,``0)">
      <summary>
            Throws a <see cref="T:System.ArgumentNullException" /> if <paramref name="val" /> is <c>null</c>.
            </summary>
    </member>
    <member name="M:Common.Logging.Configuration.ArgUtils.AssertNotNull``1(System.String,``0,System.String,System.Object[])">
      <summary>
            Throws a <see cref="T:System.ArgumentNullException" /> if <paramref name="val" /> is <c>null</c>.
            </summary>
    </member>
    <member name="M:Common.Logging.Configuration.ArgUtils.AssertIsAssignable``1(System.String,System.Type)">
      <summary>
            Throws a <see cref="T:System.ArgumentOutOfRangeException" /> if an object of type <paramref name="valType" /> is not
            assignable to type <typeparam name="T"></typeparam>.
            </summary>
    </member>
    <member name="M:Common.Logging.Configuration.ArgUtils.AssertIsAssignable``1(System.String,System.Type,System.String,System.Object[])">
      <summary>
            Throws a <see cref="T:System.ArgumentOutOfRangeException" /> if an object of type <paramref name="valType" /> is not
            assignable to type <typeparam name="T"></typeparam>.
            </summary>
    </member>
    <member name="M:Common.Logging.Configuration.ArgUtils.Guard(Common.Logging.Configuration.ArgUtils.Action,System.String,System.Object[])">
      <summary>
            Ensures any exception thrown by the given <paramref name="action" /> is wrapped with an
            <see cref="T:Common.Logging.ConfigurationException" />. 
            </summary>
      <remarks>
            If <paramref name="action" /> already throws a ConfigurationException, it will not be wrapped.
            </remarks>
      <param name="action">the action to execute</param>
      <param name="messageFormat">the message to be set on the thrown <see cref="T:Common.Logging.ConfigurationException" /></param>
      <param name="args">args to be passed to <see cref="M:System.String.Format(System.String,System.Object[])" /> to format the message</param>
    </member>
    <member name="M:Common.Logging.Configuration.ArgUtils.Guard``1(Common.Logging.Configuration.ArgUtils.Function{``0},System.String,System.Object[])">
      <summary>
            Ensures any exception thrown by the given <paramref name="function" /> is wrapped with an
            <see cref="T:Common.Logging.ConfigurationException" />. 
            </summary>
      <remarks>
            If <paramref name="function" /> already throws a ConfigurationException, it will not be wrapped.
            </remarks>
      <param name="function">the action to execute</param>
      <param name="messageFormat">the message to be set on the thrown <see cref="T:Common.Logging.ConfigurationException" /></param>
      <param name="args">args to be passed to <see cref="M:System.String.Format(System.String,System.Object[])" /> to format the message</param>
    </member>
    <member name="T:Common.Logging.IConfigurationReader">
      <summary>
            Interface for basic operations to read .NET application configuration information.
            </summary>
      <remarks>Provides a simple abstraction to handle BCL API differences between .NET 1.x and 2.0. Also
            useful for testing scenarios.</remarks>
      <author>Mark Pollack</author>
    </member>
    <member name="M:Common.Logging.IConfigurationReader.GetSection(System.String)">
      <summary>
            Parses the configuration section and returns the resulting object.
            </summary>
      <remarks>
        <p>
            Primary purpose of this method is to allow us to parse and 
            load configuration sections using the same API regardless
            of the .NET framework version.
            </p>
      </remarks>
      <param name="sectionName">Name of the configuration section.</param>
      <returns>Object created by a corresponding <see cref="T:System.Configuration.IConfigurationSectionHandler" />.</returns>
      <see cref="T:Common.Logging.ConfigurationSectionHandler" />
    </member>
    <member name="T:Common.Logging.Configuration.DefaultConfigurationReader">
      <summary>
            Implementation of <see cref="T:Common.Logging.IConfigurationReader" /> that uses the standard .NET 
            configuration APIs, ConfigurationSettings in 1.x and ConfigurationManager in 2.0
            </summary>
      <author>Mark Pollack</author>
    </member>
    <member name="M:Common.Logging.Configuration.DefaultConfigurationReader.GetSection(System.String)">
      <summary>
            Parses the configuration section and returns the resulting object.
            </summary>
      <param name="sectionName">Name of the configuration section.</param>
      <returns>
            Object created by a corresponding <see cref="T:System.Configuration.IConfigurationSectionHandler" />.
            </returns>
      <remarks>
        <p>
            Primary purpose of this method is to allow us to parse and
            load configuration sections using the same API regardless
            of the .NET framework version.
            </p>
      </remarks>
      <see cref="T:Common.Logging.ConfigurationSectionHandler" />
    </member>
    <member name="T:Common.Logging.Configuration.LogSetting">
      <summary>
            Container used to hold configuration information from config file.
            </summary>
      <author>Gilles Bayon</author>
    </member>
    <member name="M:Common.Logging.Configuration.LogSetting.#ctor(System.Type,System.Collections.Specialized.NameValueCollection)">
      <summary>
      </summary>
      <param name="factoryAdapterType">
            The <see cref="T:Common.Logging.ILoggerFactoryAdapter" /> type 
            that will be used for creating <see cref="T:Common.Logging.ILog" /></param>
      <param name="properties">
            Additional user supplied properties that are passed to the 
            <paramref name="factoryAdapterType" />'s constructor.
            </param>
    </member>
    <member name="P:Common.Logging.Configuration.LogSetting.FactoryAdapterType">
      <summary>
            The <see cref="T:Common.Logging.ILoggerFactoryAdapter" /> type that will be used for creating <see cref="T:Common.Logging.ILog" />
            instances.
            </summary>
    </member>
    <member name="P:Common.Logging.Configuration.LogSetting.Properties">
      <summary>
            Additional user supplied properties that are passed to the <see cref="P:Common.Logging.Configuration.LogSetting.FactoryAdapterType" />'s constructor.
            </summary>
    </member>
    <member name="T:Common.Logging.Configuration.NamespaceDoc">
      <summary>
            This namespace contains various utility classes.
            </summary>
    </member>
    <member name="T:Common.Logging.ILoggerFactoryAdapter">
      <summary>
            LoggerFactoryAdapter interface is used internally by LogManager
            Only developers wishing to write new Common.Logging adapters need to
            worry about this interface.
            </summary>
      <author>Gilles Bayon</author>
    </member>
    <member name="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.Type)">
      <summary>
            Get a ILog instance by type.
            </summary>
      <param name="type">The type to use for the logger</param>
      <returns>
      </returns>
    </member>
    <member name="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.String)">
      <summary>
            Get a ILog instance by name.
            </summary>
      <param name="name">The name of the logger</param>
      <returns>
      </returns>
    </member>
    <member name="T:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter">
      <summary>
            An implementation of <see cref="T:Common.Logging.ILoggerFactoryAdapter" /> that caches loggers handed out by this factory.
            </summary>
      <remarks>
            Implementors just need to override <see cref="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.CreateLogger(System.String)" />.
            </remarks>
      <author>Erich Eichinger</author>
    </member>
    <member name="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.#ctor(System.Boolean)">
      <summary>
            Creates a new 
            </summary>
      <param name="caseSensitiveLoggerCache">
      </param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.ClearLoggerCache">
      <summary>
            Purges all loggers from cache
            </summary>
    </member>
    <member name="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.CreateLogger(System.String)">
      <summary>
            Create the specified named logger instance
            </summary>
      <remarks>
            Derived factories need to implement this method to create the
            actual logger instance.
            </remarks>
    </member>
    <member name="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.GetLogger(System.Type)">
      <summary>
            Get a ILog instance by <see cref="T:System.Type" />.
            </summary>
      <param name="type">Usually the <see cref="T:System.Type" /> of the current class.</param>
      <returns>
            An ILog instance either obtained from the internal cache or created by a call to <see cref="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.CreateLogger(System.String)" />.
            </returns>
    </member>
    <member name="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.GetLogger(System.String)">
      <summary>
            Get a ILog instance by name.
            </summary>
      <param name="name">Usually a <see cref="T:System.Type" />'s Name or FullName property.</param>
      <returns>
            An ILog instance either obtained from the internal cache or created by a call to <see cref="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.CreateLogger(System.String)" />.
            </returns>
    </member>
    <member name="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.GetLoggerInternal(System.String)">
      <summary>
            Get or create a ILog instance by name.
            </summary>
      <param name="name">Usually a <see cref="T:System.Type" />'s Name or FullName property.</param>
      <returns>
            An ILog instance either obtained from the internal cache or created by a call to <see cref="M:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter.CreateLogger(System.String)" />.
            </returns>
    </member>
    <member name="T:Common.Logging.ILog">
      <summary>
            A simple logging interface abstracting logging APIs. 
            </summary>
      <remarks>
        <para>
            Implementations should defer calling a message's <see cref="M:System.Object.ToString" /> until the message really needs
            to be logged to avoid performance penalties.
            </para>
        <para>
            Each <see cref="T:Common.Logging.ILog" /> log method offers to pass in a <see cref="T:System.Action`1" /> instead of the actual message.
            Using this style has the advantage to defer possibly expensive message argument evaluation and formatting (and formatting arguments!) until the message gets
            actually logged. If the message is not logged at all (e.g. due to <see cref="T:Common.Logging.LogLevel" /> settings), 
            you won't have to pay the peformance penalty of creating the message.
            </para>
      </remarks>
      <example>
            The example below demonstrates using callback style for creating the message, where the call to the 
            <see cref="M:System.Random.NextDouble" /> and the underlying <see cref="M:System.String.Format(System.String,System.Object[])" /> only happens, if level <see cref="F:Common.Logging.LogLevel.Debug" /> is enabled:
            <code>
            Log.Debug( m=&gt;m("result is {0}", random.NextDouble()) );
            Log.Debug(delegate(m) { m("result is {0}", random.NextDouble()); });
            </code></example>
      <seealso cref="T:System.Action`1" />
      <author>Mark Pollack</author>
      <author>Bruno Baia</author>
      <author>Erich Eichinger</author>
    </member>
    <member name="M:Common.Logging.ILog.Trace(System.Object)">
      <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Trace" /> level.
            </summary>
      <param name="message">The message object to log.</param>
    </member>
    <member name="M:Common.Logging.ILog.Trace(System.Object,System.Exception)">
      <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Trace" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
    </member>
    <member name="M:Common.Logging.ILog.TraceFormat(System.String,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">the list of format arguments</param>
    </member>
    <member name="M:Common.Logging.ILog.TraceFormat(System.String,System.Exception,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">the list of format arguments</param>
    </member>
    <member name="M:Common.Logging.ILog.TraceFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">
      </param>
    </member>
    <member name="M:Common.Logging.ILog.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">
      </param>
    </member>
    <member name="M:Common.Logging.ILog.Trace(System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.ILog.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack trace.</param>
    </member>
    <member name="M:Common.Logging.ILog.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.ILog.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack trace.</param>
    </member>
    <member name="M:Common.Logging.ILog.Debug(System.Object)">
      <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Debug" /> level.
            </summary>
      <param name="message">The message object to log.</param>
    </member>
    <member name="M:Common.Logging.ILog.Debug(System.Object,System.Exception)">
      <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Debug" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
    </member>
    <member name="M:Common.Logging.ILog.DebugFormat(System.String,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">the list of format arguments</param>
    </member>
    <member name="M:Common.Logging.ILog.DebugFormat(System.String,System.Exception,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">the list of format arguments</param>
    </member>
    <member name="M:Common.Logging.ILog.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">
      </param>
    </member>
    <member name="M:Common.Logging.ILog.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">
      </param>
    </member>
    <member name="M:Common.Logging.ILog.Debug(System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.ILog.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack trace.</param>
    </member>
    <member name="M:Common.Logging.ILog.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.ILog.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack Debug.</param>
    </member>
    <member name="M:Common.Logging.ILog.Info(System.Object)">
      <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Info" /> level.
            </summary>
      <param name="message">The message object to log.</param>
    </member>
    <member name="M:Common.Logging.ILog.Info(System.Object,System.Exception)">
      <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Info" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
    </member>
    <member name="M:Common.Logging.ILog.InfoFormat(System.String,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">the list of format arguments</param>
    </member>
    <member name="M:Common.Logging.ILog.InfoFormat(System.String,System.Exception,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">the list of format arguments</param>
    </member>
    <member name="M:Common.Logging.ILog.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">
      </param>
    </member>
    <member name="M:Common.Logging.ILog.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">
      </param>
    </member>
    <member name="M:Common.Logging.ILog.Info(System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.ILog.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack trace.</param>
    </member>
    <member name="M:Common.Logging.ILog.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.ILog.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack Info.</param>
    </member>
    <member name="M:Common.Logging.ILog.Warn(System.Object)">
      <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Warn" /> level.
            </summary>
      <param name="message">The message object to log.</param>
    </member>
    <member name="M:Common.Logging.ILog.Warn(System.Object,System.Exception)">
      <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Warn" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
    </member>
    <member name="M:Common.Logging.ILog.WarnFormat(System.String,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">the list of format arguments</param>
    </member>
    <member name="M:Common.Logging.ILog.WarnFormat(System.String,System.Exception,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">the list of format arguments</param>
    </member>
    <member name="M:Common.Logging.ILog.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">
      </param>
    </member>
    <member name="M:Common.Logging.ILog.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">
      </param>
    </member>
    <member name="M:Common.Logging.ILog.Warn(System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.ILog.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack trace.</param>
    </member>
    <member name="M:Common.Logging.ILog.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.ILog.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack Warn.</param>
    </member>
    <member name="M:Common.Logging.ILog.Error(System.Object)">
      <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Error" /> level.
            </summary>
      <param name="message">The message object to log.</param>
    </member>
    <member name="M:Common.Logging.ILog.Error(System.Object,System.Exception)">
      <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Error" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
    </member>
    <member name="M:Common.Logging.ILog.ErrorFormat(System.String,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">the list of format arguments</param>
    </member>
    <member name="M:Common.Logging.ILog.ErrorFormat(System.String,System.Exception,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">the list of format arguments</param>
    </member>
    <member name="M:Common.Logging.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">
      </param>
    </member>
    <member name="M:Common.Logging.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">
      </param>
    </member>
    <member name="M:Common.Logging.ILog.Error(System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.ILog.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack trace.</param>
    </member>
    <member name="M:Common.Logging.ILog.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.ILog.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack Error.</param>
    </member>
    <member name="M:Common.Logging.ILog.Fatal(System.Object)">
      <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level.
            </summary>
      <param name="message">The message object to log.</param>
    </member>
    <member name="M:Common.Logging.ILog.Fatal(System.Object,System.Exception)">
      <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
    </member>
    <member name="M:Common.Logging.ILog.FatalFormat(System.String,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">the list of format arguments</param>
    </member>
    <member name="M:Common.Logging.ILog.FatalFormat(System.String,System.Exception,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">the list of format arguments</param>
    </member>
    <member name="M:Common.Logging.ILog.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">
      </param>
    </member>
    <member name="M:Common.Logging.ILog.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">
      </param>
    </member>
    <member name="M:Common.Logging.ILog.Fatal(System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.ILog.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack trace.</param>
    </member>
    <member name="M:Common.Logging.ILog.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.ILog.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack Fatal.</param>
    </member>
    <member name="P:Common.Logging.ILog.IsTraceEnabled">
      <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Trace" /> level.
            </summary>
    </member>
    <member name="P:Common.Logging.ILog.IsDebugEnabled">
      <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Debug" /> level.
            </summary>
    </member>
    <member name="P:Common.Logging.ILog.IsErrorEnabled">
      <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Error" /> level.
            </summary>
    </member>
    <member name="P:Common.Logging.ILog.IsFatalEnabled">
      <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Fatal" /> level.
            </summary>
    </member>
    <member name="P:Common.Logging.ILog.IsInfoEnabled">
      <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Info" /> level.
            </summary>
    </member>
    <member name="P:Common.Logging.ILog.IsWarnEnabled">
      <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Warn" /> level.
            </summary>
    </member>
    <member name="T:Common.Logging.Factory.AbstractLogger">
      <summary>
            Provides base implementation common for most logger adapters
            </summary>
      <author>Erich Eichinger</author>
    </member>
    <member name="T:Common.Logging.Factory.AbstractLogger.WriteHandler">
      <summary>
            Represents a method responsible for writing a message to the log system.
            </summary>
    </member>
    <member name="F:Common.Logging.Factory.AbstractLogger.Write">
      <summary>
            Holds the method for writing a message to the log system.
            </summary>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.#ctor">
      <summary>
            Creates a new logger instance using <see cref="M:Common.Logging.Factory.AbstractLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)" /> for 
            writing log events to the underlying log system.
            </summary>
      <seealso cref="M:Common.Logging.Factory.AbstractLogger.GetWriteHandler" />
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.GetWriteHandler">
      <summary>
            Override this method to use a different method than <see cref="M:Common.Logging.Factory.AbstractLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)" /> 
            for writing log events to the underlying log system.
            </summary>
      <remarks>
            Usually you don't need to override thise method. The default implementation returns
            <c>null</c> to indicate that the default handler <see cref="M:Common.Logging.Factory.AbstractLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)" /> should be 
            used.
            </remarks>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)">
      <summary>
            Actually sends the message to the underlying log system.
            </summary>
      <param name="level">the level of this log event.</param>
      <param name="message">the message to log</param>
      <param name="exception">the exception to log (may be null)</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Trace(System.Object)">
      <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Trace" /> level.
            </summary>
      <param name="message">The message object to log.</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Trace(System.Object,System.Exception)">
      <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Trace" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack trace.</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">
      </param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">
      </param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.String,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">the list of format arguments</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.TraceFormat(System.String,System.Exception,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">the list of format arguments</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Trace(System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack trace.</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Trace" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack trace.</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Debug(System.Object)">
      <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Debug" /> level.
            </summary>
      <param name="message">The message object to log.</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Debug(System.Object,System.Exception)">
      <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Debug" /> level including
            the stack Debug of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack Debug.</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">
      </param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">
      </param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.String,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">the list of format arguments</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.DebugFormat(System.String,System.Exception,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">the list of format arguments</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Debug(System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack Debug.</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Debug" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack Debug.</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Info(System.Object)">
      <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Info" /> level.
            </summary>
      <param name="message">The message object to log.</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Info(System.Object,System.Exception)">
      <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Info" /> level including
            the stack Info of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack Info.</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">
      </param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">
      </param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.String,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">the list of format arguments</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.InfoFormat(System.String,System.Exception,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">the list of format arguments</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Info(System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack Info.</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Info" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack Info.</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Warn(System.Object)">
      <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Warn" /> level.
            </summary>
      <param name="message">The message object to log.</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Warn(System.Object,System.Exception)">
      <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Warn" /> level including
            the stack Warn of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack Warn.</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting Warnrmation.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">
      </param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting Warnrmation.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">
      </param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.String,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">the list of format arguments</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.WarnFormat(System.String,System.Exception,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">the list of format arguments</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Warn(System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack Warn.</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Warn" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack Warn.</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Error(System.Object)">
      <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Error" /> level.
            </summary>
      <param name="message">The message object to log.</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Error(System.Object,System.Exception)">
      <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Error" /> level including
            the stack Error of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack Error.</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting Errorrmation.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">
      </param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting Errorrmation.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">
      </param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.String,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">the list of format arguments</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.ErrorFormat(System.String,System.Exception,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">the list of format arguments</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Error(System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack Error.</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Error" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack Error.</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Object)">
      <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level.
            </summary>
      <param name="message">The message object to log.</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Object,System.Exception)">
      <summary>
            Log a message object with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level including
            the stack Fatal of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
      <param name="message">The message object to log.</param>
      <param name="exception">The exception to log, including its stack Fatal.</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting Fatalrmation.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">
      </param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting Fatalrmation.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">
      </param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.String,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">the list of format arguments</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.FatalFormat(System.String,System.Exception,System.Object[])">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">the list of format arguments</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack Fatal.</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.Factory.AbstractLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Log a message with the <see cref="F:Common.Logging.LogLevel.Fatal" /> level using a callback to obtain the message
            </summary>
      <remarks>
            Using this method avoids the cost of creating a message and evaluating message arguments 
            that probably won't be logged due to loglevel settings.
            </remarks>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack Fatal.</param>
    </member>
    <member name="P:Common.Logging.Factory.AbstractLogger.IsTraceEnabled">
      <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Trace" /> level.
            </summary>
      <remarks>
            Override this in your derived class to comply with the underlying logging system
            </remarks>
    </member>
    <member name="P:Common.Logging.Factory.AbstractLogger.IsDebugEnabled">
      <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Debug" /> level.
            </summary>
      <remarks>
            Override this in your derived class to comply with the underlying logging system
            </remarks>
    </member>
    <member name="P:Common.Logging.Factory.AbstractLogger.IsInfoEnabled">
      <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Info" /> level.
            </summary>
      <remarks>
            Override this in your derived class to comply with the underlying logging system
            </remarks>
    </member>
    <member name="P:Common.Logging.Factory.AbstractLogger.IsWarnEnabled">
      <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Warn" /> level.
            </summary>
      <remarks>
            Override this in your derived class to comply with the underlying logging system
            </remarks>
    </member>
    <member name="P:Common.Logging.Factory.AbstractLogger.IsErrorEnabled">
      <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Error" /> level.
            </summary>
      <remarks>
            Override this in your derived class to comply with the underlying logging system
            </remarks>
    </member>
    <member name="P:Common.Logging.Factory.AbstractLogger.IsFatalEnabled">
      <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Fatal" /> level.
            </summary>
      <remarks>
            Override this in your derived class to comply with the underlying logging system
            </remarks>
    </member>
    <member name="T:Common.Logging.Factory.NamespaceDoc">
      <summary>
            This namespace contains convenience base classes for implementing your own <see cref="T:Common.Logging.ILoggerFactoryAdapter" />s.
            </summary>
    </member>
    <member name="T:Common.Logging.Simple.AbstractSimpleLogger">
      <summary>
            Abstract class providing a standard implementation of simple loggers.
            </summary>
      <author>Erich Eichinger</author>
    </member>
    <member name="M:Common.Logging.Simple.AbstractSimpleLogger.#ctor(System.String,Common.Logging.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.String)">
      <summary>
            Creates and initializes a the simple logger.
            </summary>
      <param name="logName">The name, usually type name of the calling class, of the logger.</param>
      <param name="logLevel">The current logging threshold. Messages recieved that are beneath this threshold will not be logged.</param>
      <param name="showlevel">Include level in the log message.</param>
      <param name="showDateTime">Include the current time in the log message.</param>
      <param name="showLogName">Include the instance name in the log message.</param>
      <param name="dateTimeFormat">The date and time format to use in the log message.</param>
    </member>
    <member name="M:Common.Logging.Simple.AbstractSimpleLogger.FormatOutput(System.Text.StringBuilder,Common.Logging.LogLevel,System.Object,System.Exception)">
      <summary>
            Appends the formatted message to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="stringBuilder">the <see cref="T:System.Text.StringBuilder" /> that receíves the formatted message.</param>
      <param name="level">
      </param>
      <param name="message">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Common.Logging.Simple.AbstractSimpleLogger.IsLevelEnabled(Common.Logging.LogLevel)">
      <summary>
            Determines if the given log level is currently enabled.
            </summary>
      <param name="level">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:Common.Logging.Simple.AbstractSimpleLogger.Name">
      <summary>
            The name of the logger.
            </summary>
    </member>
    <member name="P:Common.Logging.Simple.AbstractSimpleLogger.ShowLevel">
      <summary>
            Include the current log level in the log message.
            </summary>
    </member>
    <member name="P:Common.Logging.Simple.AbstractSimpleLogger.ShowDateTime">
      <summary>
            Include the current time in the log message.
            </summary>
    </member>
    <member name="P:Common.Logging.Simple.AbstractSimpleLogger.ShowLogName">
      <summary>
            Include the instance name in the log message.
            </summary>
    </member>
    <member name="P:Common.Logging.Simple.AbstractSimpleLogger.CurrentLogLevel">
      <summary>
            The current logging threshold. Messages recieved that are beneath this threshold will not be logged.
            </summary>
    </member>
    <member name="P:Common.Logging.Simple.AbstractSimpleLogger.DateTimeFormat">
      <summary>
            The date and time format to use in the log message.
            </summary>
    </member>
    <member name="P:Common.Logging.Simple.AbstractSimpleLogger.HasDateTimeFormat">
      <summary>
            Determines Whether <see cref="P:Common.Logging.Simple.AbstractSimpleLogger.DateTimeFormat" /> is set.
            </summary>
    </member>
    <member name="P:Common.Logging.Simple.AbstractSimpleLogger.IsTraceEnabled">
      <summary>
            Returns <see langword="true" /> if the current <see cref="T:Common.Logging.LogLevel" /> is greater than or
            equal to <see cref="F:Common.Logging.LogLevel.Trace" />. If it is, all messages will be sent to <see cref="P:System.Console.Out" />.
            </summary>
    </member>
    <member name="P:Common.Logging.Simple.AbstractSimpleLogger.IsDebugEnabled">
      <summary>
            Returns <see langword="true" /> if the current <see cref="T:Common.Logging.LogLevel" /> is greater than or
            equal to <see cref="F:Common.Logging.LogLevel.Debug" />. If it is, all messages will be sent to <see cref="P:System.Console.Out" />.
            </summary>
    </member>
    <member name="P:Common.Logging.Simple.AbstractSimpleLogger.IsInfoEnabled">
      <summary>
            Returns <see langword="true" /> if the current <see cref="T:Common.Logging.LogLevel" /> is greater than or
            equal to <see cref="F:Common.Logging.LogLevel.Info" />. If it is, only messages with a <see cref="T:Common.Logging.LogLevel" /> of
            <see cref="F:Common.Logging.LogLevel.Info" />, <see cref="F:Common.Logging.LogLevel.Warn" />, <see cref="F:Common.Logging.LogLevel.Error" />, and 
            <see cref="F:Common.Logging.LogLevel.Fatal" /> will be sent to <see cref="P:System.Console.Out" />.
            </summary>
    </member>
    <member name="P:Common.Logging.Simple.AbstractSimpleLogger.IsWarnEnabled">
      <summary>
            Returns <see langword="true" /> if the current <see cref="T:Common.Logging.LogLevel" /> is greater than or
            equal to <see cref="F:Common.Logging.LogLevel.Warn" />. If it is, only messages with a <see cref="T:Common.Logging.LogLevel" /> of
            <see cref="F:Common.Logging.LogLevel.Warn" />, <see cref="F:Common.Logging.LogLevel.Error" />, and <see cref="F:Common.Logging.LogLevel.Fatal" /> 
            will be sent to <see cref="P:System.Console.Out" />.
            </summary>
    </member>
    <member name="P:Common.Logging.Simple.AbstractSimpleLogger.IsErrorEnabled">
      <summary>
            Returns <see langword="true" /> if the current <see cref="T:Common.Logging.LogLevel" /> is greater than or
            equal to <see cref="F:Common.Logging.LogLevel.Error" />. If it is, only messages with a <see cref="T:Common.Logging.LogLevel" /> of
            <see cref="F:Common.Logging.LogLevel.Error" /> and <see cref="F:Common.Logging.LogLevel.Fatal" /> will be sent to <see cref="P:System.Console.Out" />.
            </summary>
    </member>
    <member name="P:Common.Logging.Simple.AbstractSimpleLogger.IsFatalEnabled">
      <summary>
            Returns <see langword="true" /> if the current <see cref="T:Common.Logging.LogLevel" /> is greater than or
            equal to <see cref="F:Common.Logging.LogLevel.Fatal" />. If it is, only messages with a <see cref="T:Common.Logging.LogLevel" /> of
            <see cref="F:Common.Logging.LogLevel.Fatal" /> will be sent to <see cref="P:System.Console.Out" />.
            </summary>
    </member>
    <member name="T:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter">
      <summary>
            Base factory implementation for creating simple <see cref="T:Common.Logging.ILog" /> instances.
            </summary>
      <remarks>Default settings are LogLevel.All, showDateTime = true, showLogName = true, and no DateTimeFormat.
            The keys in the NameValueCollection to configure this adapter are the following
            <list type="bullet"><item>level</item><item>showDateTime</item><item>showLogName</item><item>dateTimeFormat</item></list></remarks>
      <seealso cref="P:Common.Logging.LogManager.Adapter" />
      <seealso cref="T:Common.Logging.ConfigurationSectionHandler" />
      <author>Gilles Bayon</author>
      <author>Mark Pollack</author>
      <author>Erich Eichinger</author>
    </member>
    <member name="M:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter" /> class.
            </summary>
      <remarks>
            Looks for level, showDateTime, showLogName, dateTimeFormat items from 
            <paramref name="properties" /> for use when the GetLogger methods are called.
            <see cref="T:Common.Logging.ConfigurationSectionHandler" /> for more information on how to use the 
            standard .NET application configuraiton file (App.config/Web.config) 
            to configure this adapter.
            </remarks>
      <param name="properties">The name value collection, typically specified by the user in 
            a configuration section named common/logging.</param>
    </member>
    <member name="M:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.CreateLogger(System.String)">
      <summary>
            Create the specified logger instance
            </summary>
    </member>
    <member name="M:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.CreateLogger(System.String,Common.Logging.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.String)">
      <summary>
            Derived factories need to implement this method to create the
            actual logger instance.
            </summary>
      <returns>a new logger instance. Must never be <c>null</c>!</returns>
    </member>
    <member name="P:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.Level">
      <summary>
            The default <see cref="T:Common.Logging.LogLevel" /> to use when creating new <see cref="T:Common.Logging.ILog" /> instances.
            </summary>
    </member>
    <member name="P:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.ShowLevel">
      <summary>
            The default setting to use when creating new <see cref="T:Common.Logging.ILog" /> instances.
            </summary>
    </member>
    <member name="P:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.ShowDateTime">
      <summary>
            The default setting to use when creating new <see cref="T:Common.Logging.ILog" /> instances.
            </summary>
    </member>
    <member name="P:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.ShowLogName">
      <summary>
            The default setting to use when creating new <see cref="T:Common.Logging.ILog" /> instances.
            </summary>
    </member>
    <member name="P:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter.DateTimeFormat">
      <summary>
            The default setting to use when creating new <see cref="T:Common.Logging.ILog" /> instances.
            </summary>
    </member>
    <member name="T:Common.Logging.Simple.CapturingLogger">
      <summary>
            A logger created by <see cref="T:Common.Logging.Simple.CapturingLoggerFactoryAdapter" /> that 
            sends all log events to the owning adapter's <see cref="M:Common.Logging.Simple.CapturingLoggerFactoryAdapter.AddEvent(Common.Logging.Simple.CapturingLoggerEvent)" /></summary>
      <author>Erich Eichinger</author>
    </member>
    <member name="F:Common.Logging.Simple.CapturingLogger.Owner">
      <summary>
            The adapter that created this logger instance.
            </summary>
    </member>
    <member name="F:Common.Logging.Simple.CapturingLogger.LastEvent">
      <summary>
             Allows to retrieve the last logged event instance captured by this logger
            </summary>
    </member>
    <member name="M:Common.Logging.Simple.CapturingLogger.#ctor(Common.Logging.Simple.CapturingLoggerFactoryAdapter,System.String)">
      <summary>
            Create a new logger instance.
            </summary>
    </member>
    <member name="M:Common.Logging.Simple.CapturingLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)">
      <summary>
            Create a new <see cref="T:Common.Logging.Simple.CapturingLoggerEvent" /> and send it to <see cref="M:Common.Logging.Simple.CapturingLoggerFactoryAdapter.AddEvent(Common.Logging.Simple.CapturingLoggerEvent)" /></summary>
      <param name="level">
      </param>
      <param name="message">
      </param>
      <param name="exception">
      </param>
    </member>
    <member name="T:Common.Logging.Simple.CapturingLoggerEvent">
      <summary>
            A logging event captured by <see cref="T:Common.Logging.Simple.CapturingLogger" /></summary>
      <author>Erich Eichinger</author>
    </member>
    <member name="F:Common.Logging.Simple.CapturingLoggerEvent.Source">
      <summary>
            The logger that logged this event
            </summary>
    </member>
    <member name="F:Common.Logging.Simple.CapturingLoggerEvent.Level">
      <summary>
            The level used to log this event
            </summary>
    </member>
    <member name="F:Common.Logging.Simple.CapturingLoggerEvent.MessageObject">
      <summary>
            The raw message object
            </summary>
    </member>
    <member name="F:Common.Logging.Simple.CapturingLoggerEvent.Exception">
      <summary>
            A logged exception
            </summary>
    </member>
    <member name="M:Common.Logging.Simple.CapturingLoggerEvent.#ctor(Common.Logging.Simple.CapturingLogger,Common.Logging.LogLevel,System.Object,System.Exception)">
      <summary>
            Create a new event instance
            </summary>
    </member>
    <member name="P:Common.Logging.Simple.CapturingLoggerEvent.RenderedMessage">
      <summary>
            Retrieves the formatted message text
            </summary>
    </member>
    <member name="T:Common.Logging.Simple.CapturingLoggerFactoryAdapter">
      <summary>
            An adapter, who's loggers capture all log events and send them to <see cref="M:Common.Logging.Simple.CapturingLoggerFactoryAdapter.AddEvent(Common.Logging.Simple.CapturingLoggerEvent)" />. 
            Retrieve the list of log events from <see cref="F:Common.Logging.Simple.CapturingLoggerFactoryAdapter.LoggerEvents" />.
            </summary>
      <remarks>
            This logger factory is mainly for debugging and test purposes.
            <example>
            This is an example how you might use this adapter for testing:
            <code>
            // configure for capturing
            CapturingLoggerFactoryAdapter adapter = new CapturingLoggerFactoryAdapter();
            LogManager.Adapter = adapter;
            
            // reset capture state
            adapter.Clear();
            // log something
            ILog log = LogManager.GetCurrentClassLogger();
            log.DebugFormat("Current Time:{0}", DateTime.Now);
            
            // check logged data
            Assert.AreEqual(1, adapter.LoggerEvents.Count);
            Assert.AreEqual(LogLevel.Debug, adapter.LastEvent.Level);
            </code></example></remarks>
      <author>Erich Eichinger</author>
    </member>
    <member name="F:Common.Logging.Simple.CapturingLoggerFactoryAdapter.LoggerEvents">
      <summary>
            Holds the list of logged events.
            </summary>
      <remarks>
            To access this collection in a multithreaded application, put a lock on the list instance.
            </remarks>
    </member>
    <member name="M:Common.Logging.Simple.CapturingLoggerFactoryAdapter.Clear">
      <summary>
            Clears all captured events
            </summary>
    </member>
    <member name="M:Common.Logging.Simple.CapturingLoggerFactoryAdapter.ClearLastEvent">
      <summary>
            Resets the <see cref="P:Common.Logging.Simple.CapturingLoggerFactoryAdapter.LastEvent" /> to <c>null</c>.
            </summary>
    </member>
    <member name="M:Common.Logging.Simple.CapturingLoggerFactoryAdapter.AddEvent(Common.Logging.Simple.CapturingLoggerEvent)">
      <summary>
        <see cref="T:Common.Logging.Simple.CapturingLogger" /> instances send their captured log events to this method.
            </summary>
    </member>
    <member name="M:Common.Logging.Simple.CapturingLoggerFactoryAdapter.GetLogger(System.Type)">
      <summary>
            Get a <see cref="T:Common.Logging.Simple.CapturingLogger" /> instance for the given type.
            </summary>
    </member>
    <member name="M:Common.Logging.Simple.CapturingLoggerFactoryAdapter.GetLogger(System.String)">
      <summary>
            Get a <see cref="T:Common.Logging.Simple.CapturingLogger" /> instance for the given name.
            </summary>
    </member>
    <member name="P:Common.Logging.Simple.CapturingLoggerFactoryAdapter.LastEvent">
      <summary>
            Holds the last log event received from any of this adapter's loggers.
            </summary>
    </member>
    <member name="T:Common.Logging.Simple.CommonLoggingTraceListener">
      <summary>
            A <see cref="T:System.Diagnostics.TraceListener" /> implementation sending all <see cref="T:System.Diagnostics.Trace">System.Diagnostics.Trace</see> output to 
            the Common.Logging infrastructure.
            </summary>
      <remarks>
            This listener captures all output sent by calls to <see cref="T:System.Diagnostics.Trace">System.Diagnostics.Trace</see> and
            and <see cref="T:System.Diagnostics.TraceSource" /> and sends it to an <see cref="T:Common.Logging.ILog" /> instance.<br />
            The <see cref="T:Common.Logging.ILog" /> instance to be used is obtained by calling
            <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" />. The name of the logger is created by passing 
            this listener's <see cref="P:System.Diagnostics.TraceListener.Name" /> and any <c>source</c> or <c>category</c> passed 
            into this listener (see <see cref="M:System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)" /> or <see cref="M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" /> for example).
            </remarks>
      <example>
            The snippet below shows how to add and configure this listener to your app.config:
            <code lang="XML">
            &lt;system.diagnostics&gt;
              &lt;sharedListeners&gt;
                &lt;add name="Diagnostics"
                     type="Common.Logging.Simple.CommonLoggingTraceListener, Common.Logging"
                     initializeData="DefaultTraceEventType=Information; LoggerNameFormat={listenerName}.{sourceName}"&gt;
                  &lt;filter type="System.Diagnostics.EventTypeFilter" initializeData="Information"/&gt;
                &lt;/add&gt;
              &lt;/sharedListeners&gt;
              &lt;trace&gt;
                &lt;listeners&gt;
                  &lt;add name="Diagnostics" /&gt;
                &lt;/listeners&gt;
              &lt;/trace&gt;
            &lt;/system.diagnostics&gt;
            </code></example>
      <author>Erich Eichinger</author>
    </member>
    <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.#ctor">
      <summary>
            Creates a new instance with the default name "Diagnostics" and <see cref="T:Common.Logging.LogLevel" /> "Trace".
            </summary>
    </member>
    <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.#ctor(System.String)">
      <summary>
            Creates a new instance initialized with properties from the <paramref name="initializeData" />. string.
            </summary>
      <remarks>
        <paramref name="initializeData" /> is a semicolon separated string of name/value pairs, where each pair has
            the form <c>key=value</c>. E.g.
            "<c>Name=MyLoggerName;LogLevel=Debug</c>"
            </remarks>
      <param name="initializeData">a semicolon separated list of name/value pairs.</param>
    </member>
    <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>
            Creates a new instance initialized with the specified properties.
            </summary>
      <param name="properties">name/value configuration properties.</param>
    </member>
    <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.Log(System.Diagnostics.TraceEventType,System.String,System.Int32,System.String,System.Object[])">
      <summary>
            Logs the given message to the Common.Logging infrastructure.
            </summary>
      <param name="eventType">the eventType</param>
      <param name="source">the <see cref="T:System.Diagnostics.TraceSource" /> name or category name passed into e.g. <see cref="M:System.Diagnostics.Trace.Write(System.Object,System.String)" />.</param>
      <param name="id">the id of this event</param>
      <param name="format">the message format</param>
      <param name="args">the message arguments</param>
    </member>
    <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.Write(System.Object)">
      <summary>
            Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" />.
            </summary>
    </member>
    <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.Write(System.Object,System.String)">
      <summary>
            Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" />.
            </summary>
    </member>
    <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.Write(System.String)">
      <summary>
            Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" />.
            </summary>
    </member>
    <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.Write(System.String,System.String)">
      <summary>
            Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" />.
            </summary>
    </member>
    <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.WriteLine(System.Object)">
      <summary>
            Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" />.
            </summary>
    </member>
    <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.WriteLine(System.Object,System.String)">
      <summary>
            Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" />.
            </summary>
    </member>
    <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.WriteLine(System.String)">
      <summary>
            Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" />.
            </summary>
    </member>
    <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.WriteLine(System.String,System.String)">
      <summary>
            Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" /></summary>
    </member>
    <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)">
      <summary>
            Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" /></summary>
    </member>
    <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
      <summary>
            Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" /></summary>
    </member>
    <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
      <summary>
            Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" /></summary>
    </member>
    <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
      <summary>
            Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" /></summary>
    </member>
    <member name="M:Common.Logging.Simple.CommonLoggingTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
      <summary>
            Writes message to logger provided by <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" /></summary>
    </member>
    <member name="P:Common.Logging.Simple.CommonLoggingTraceListener.DefaultTraceEventType">
      <summary>
            Sets the default <see cref="T:System.Diagnostics.TraceEventType" /> to use for logging
            all events emitted by <see cref="T:System.Diagnostics.Trace" /><c>.Write(...)</c> and
            <see cref="T:System.Diagnostics.Trace" /><c>.WriteLine(...)</c> methods.
            </summary>
      <remarks>
            This listener captures all output sent by calls to <see cref="T:System.Diagnostics.Trace" /> and
            sends it to an <see cref="T:Common.Logging.ILog" /> instance using the <see cref="T:Common.Logging.LogLevel" /> specified
            on <see cref="T:Common.Logging.LogLevel" />.
            </remarks>
    </member>
    <member name="P:Common.Logging.Simple.CommonLoggingTraceListener.LoggerNameFormat">
      <summary>
            Format to use for creating the logger name. Defaults to "{listenerName}.{sourceName}".
            </summary>
      <remarks>
            Available placeholders are:
            <list type="bullet"><item>{listenerName}: the configured name of this listener instance.</item><item>{sourceName}: the trace source name an event originates from (see e.g. <see cref="M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />.</item></list></remarks>
    </member>
    <member name="T:Common.Logging.Simple.ConsoleOutLogger">
      <summary>
            Sends log messages to <see cref="P:System.Console.Out" />.
            </summary>
      <author>Gilles Bayon</author>
    </member>
    <member name="M:Common.Logging.Simple.ConsoleOutLogger.#ctor(System.String,Common.Logging.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.String)">
      <summary>
            Creates and initializes a logger that writes messages to <see cref="P:System.Console.Out" />.
            </summary>
      <param name="logName">The name, usually type name of the calling class, of the logger.</param>
      <param name="logLevel">The current logging threshold. Messages recieved that are beneath this threshold will not be logged.</param>
      <param name="showLevel">Include the current log level in the log message.</param>
      <param name="showDateTime">Include the current time in the log message.</param>
      <param name="showLogName">Include the instance name in the log message.</param>
      <param name="dateTimeFormat">The date and time format to use in the log message.</param>
    </member>
    <member name="M:Common.Logging.Simple.ConsoleOutLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)">
      <summary>
            Do the actual logging by constructing the log message using a <see cref="T:System.Text.StringBuilder" /> then
            sending the output to <see cref="P:System.Console.Out" />.
            </summary>
      <param name="level">The <see cref="T:Common.Logging.LogLevel" /> of the message.</param>
      <param name="message">The log message.</param>
      <param name="e">An optional <see cref="T:System.Exception" /> associated with the message.</param>
    </member>
    <member name="T:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter">
      <summary>
            Factory for creating <see cref="T:Common.Logging.ILog" /> instances that write data to <see cref="P:System.Console.Out" />.
            </summary>
      <seealso cref="T:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter" />
      <seealso cref="P:Common.Logging.LogManager.Adapter" />
      <seealso cref="T:Common.Logging.ConfigurationSectionHandler" />
      <author>Gilles Bayon</author>
      <author>Mark Pollack</author>
      <author>Erich Eichinger</author>
    </member>
    <member name="M:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter" /> class using default 
            settings.
            </summary>
    </member>
    <member name="M:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter" /> class.
            </summary>
      <remarks>
            Looks for level, showDateTime, showLogName, dateTimeFormat items from 
            <paramref name="properties" /> for use when the GetLogger methods are called.
            <see cref="T:Common.Logging.ConfigurationSectionHandler" /> for more information on how to use the 
            standard .NET application configuraiton file (App.config/Web.config) 
            to configure this adapter.
            </remarks>
      <param name="properties">The name value collection, typically specified by the user in 
            a configuration section named common/logging.</param>
    </member>
    <member name="M:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter.CreateLogger(System.String,Common.Logging.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.String)">
      <summary>
            Creates a new <see cref="T:Common.Logging.Simple.ConsoleOutLogger" /> instance.
            </summary>
    </member>
    <member name="T:Common.Logging.Simple.NamespaceDoc">
      <summary>
            This namespace contains out-of-the-box adapters to intrinsic systems, namely
            <see cref="T:Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter" /> and <see cref="T:Common.Logging.Simple.TraceLoggerFactoryAdapter" />.
            </summary>
    </member>
    <member name="T:Common.Logging.Simple.NoOpLogger">
      <summary>
            Silently ignores all log messages.
            </summary>
      <author>Gilles Bayon</author>
      <author>Erich Eichinger</author>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Trace(System.Object)">
      <summary>
            Ignores message.
            </summary>
      <param name="message">
      </param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Trace(System.Object,System.Exception)">
      <summary>
            Ignores message.
            </summary>
      <param name="message">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.TraceFormat(System.String,System.Object[])">
      <summary>
            Ignores message.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">
      </param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.TraceFormat(System.String,System.Exception,System.Object[])">
      <summary>
            Ignores message.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">the list of message format arguments</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.TraceFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Ignores message.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">the list of message format arguments</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.TraceFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
      <summary>
            Ignores message.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">the list of message format arguments</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Trace(System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Ignores message.
            </summary>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Trace(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Ignores message.
            </summary>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack trace.</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Ignores message.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Trace(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Ignores message.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack trace.</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Debug(System.Object)">
      <summary>
            Ignores message.
            </summary>
      <param name="message">
      </param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Debug(System.Object,System.Exception)">
      <summary>
            Ignores message.
            </summary>
      <param name="message">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.DebugFormat(System.String,System.Object[])">
      <summary>
            Ignores message.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">
      </param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.DebugFormat(System.String,System.Exception,System.Object[])">
      <summary>
            Ignores message.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">the list of message format arguments</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Ignores message.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">the list of message format arguments</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.DebugFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
      <summary>
            Ignores message.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">the list of message format arguments</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Debug(System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Ignores message.
            </summary>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Debug(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Ignores message.
            </summary>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack Debug.</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Ignores message.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Debug(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Ignores message.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack Debug.</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Info(System.Object)">
      <summary>
            Ignores message.
            </summary>
      <param name="message">
      </param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Info(System.Object,System.Exception)">
      <summary>
            Ignores message.
            </summary>
      <param name="message">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.InfoFormat(System.String,System.Object[])">
      <summary>
            Ignores message.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">
      </param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.InfoFormat(System.String,System.Exception,System.Object[])">
      <summary>
            Ignores message.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">the list of message format arguments</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Ignores message.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">the list of message format arguments</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.InfoFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
      <summary>
            Ignores message.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">the list of message format arguments</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Info(System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Ignores message.
            </summary>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Info(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Ignores message.
            </summary>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack Info.</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Ignores message.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Info(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Ignores message.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack Info.</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Warn(System.Object)">
      <summary>
            Ignores message.
            </summary>
      <param name="message">
      </param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Warn(System.Object,System.Exception)">
      <summary>
            Ignores message.
            </summary>
      <param name="message">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.WarnFormat(System.String,System.Object[])">
      <summary>
            Ignores message.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">
      </param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.WarnFormat(System.String,System.Exception,System.Object[])">
      <summary>
            Ignores message.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">the list of message format arguments</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Ignores message.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting Warnrmation.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">the list of message format arguments</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.WarnFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
      <summary>
            Ignores message.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting Warnrmation.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">the list of message format arguments</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Warn(System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Ignores message.
            </summary>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Warn(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Ignores message.
            </summary>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack Warn.</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Ignores message.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Warn(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Ignores message.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack Warn.</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Error(System.Object)">
      <summary>
            Ignores message.
            </summary>
      <param name="message">
      </param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Error(System.Object,System.Exception)">
      <summary>
            Ignores message.
            </summary>
      <param name="message">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.ErrorFormat(System.String,System.Object[])">
      <summary>
            Ignores message.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">
      </param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.ErrorFormat(System.String,System.Exception,System.Object[])">
      <summary>
            Ignores message.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">the list of message format arguments</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Ignores message.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting Errorrmation.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">the list of message format arguments</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.ErrorFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
      <summary>
            Ignores message.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting Errorrmation.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">the list of message format arguments</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Error(System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Ignores message.
            </summary>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Error(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Ignores message.
            </summary>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack Error.</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Ignores message.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Error(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Ignores message.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack Error.</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Fatal(System.Object)">
      <summary>
            Ignores message.
            </summary>
      <param name="message">
      </param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Fatal(System.Object,System.Exception)">
      <summary>
            Ignores message.
            </summary>
      <param name="message">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.FatalFormat(System.String,System.Object[])">
      <summary>
            Ignores message.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">
      </param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.FatalFormat(System.String,System.Exception,System.Object[])">
      <summary>
            Ignores message.
            </summary>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">the list of message format arguments</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Ignores message.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting Fatalrmation.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">the list of message format arguments</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.FatalFormat(System.IFormatProvider,System.String,System.Exception,System.Object[])">
      <summary>
            Ignores message.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting Fatalrmation.</param>
      <param name="format">The format of the message object to log.<see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="exception">The exception to log.</param>
      <param name="args">the list of message format arguments</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Ignores message.
            </summary>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Fatal(System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Ignores message.
            </summary>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack Fatal.</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler})">
      <summary>
            Ignores message.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLogger.Fatal(System.IFormatProvider,System.Action{Common.Logging.FormatMessageHandler},System.Exception)">
      <summary>
            Ignores message.
            </summary>
      <param name="formatProvider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information.</param>
      <param name="formatMessageCallback">A callback used by the logger to obtain the message if log level is matched</param>
      <param name="exception">The exception to log, including its stack Fatal.</param>
    </member>
    <member name="P:Common.Logging.Simple.NoOpLogger.IsTraceEnabled">
      <summary>
            Always returns <see langword="false" />.
            </summary>
    </member>
    <member name="P:Common.Logging.Simple.NoOpLogger.IsDebugEnabled">
      <summary>
            Always returns <see langword="false" />.
            </summary>
    </member>
    <member name="P:Common.Logging.Simple.NoOpLogger.IsInfoEnabled">
      <summary>
            Always returns <see langword="false" />.
            </summary>
    </member>
    <member name="P:Common.Logging.Simple.NoOpLogger.IsWarnEnabled">
      <summary>
            Always returns <see langword="false" />.
            </summary>
    </member>
    <member name="P:Common.Logging.Simple.NoOpLogger.IsErrorEnabled">
      <summary>
            Always returns <see langword="false" />.
            </summary>
    </member>
    <member name="P:Common.Logging.Simple.NoOpLogger.IsFatalEnabled">
      <summary>
            Always returns <see langword="false" />.
            </summary>
    </member>
    <member name="T:Common.Logging.Simple.NoOpLoggerFactoryAdapter">
      <summary>
            Factory for creating <see cref="T:Common.Logging.ILog" /> instances that silently ignores
            logging requests.
            </summary>
      <seealso cref="P:Common.Logging.LogManager.Adapter" />
      <seealso cref="T:Common.Logging.ConfigurationSectionHandler" />
      <author>Gilles Bayon</author>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLoggerFactoryAdapter.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLoggerFactoryAdapter.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:Common.Logging.Simple.NoOpLoggerFactoryAdapter.GetLogger(System.Type)">
      <summary>
            Get a ILog instance by type 
            </summary>
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Common.Logging.Simple.TraceLogger">
      <summary>
            Logger sending everything to the trace output stream using <see cref="T:System.Diagnostics.Trace" />.
            </summary>
      <remarks>
            Beware not to use <see cref="T:Common.Logging.Simple.CommonLoggingTraceListener" /> in combination with this logger as 
            this would result in an endless loop for obvious reasons!
            </remarks>
      <seealso cref="P:Common.Logging.LogManager.Adapter" />
      <seealso cref="T:Common.Logging.ConfigurationSectionHandler" />
      <author>Gilles Bayon</author>
      <author>Erich Eichinger</author>
    </member>
    <member name="T:Common.Logging.Simple.TraceLogger.FormatOutputMessage">
      <summary>
            Used to defer message formatting until it is really needed.
            </summary>
      <remarks>
            This class also improves performance when multiple 
            <see cref="T:System.Diagnostics.TraceListener" />s are configured.
            </remarks>
    </member>
    <member name="M:Common.Logging.Simple.TraceLogger.#ctor(System.Boolean,System.String,Common.Logging.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.String)">
      <summary>
            Creates a new TraceLogger instance.
            </summary>
      <param name="useTraceSource">whether to use <see cref="T:System.Diagnostics.TraceSource" /> or <see cref="T:System.Diagnostics.Trace" /> for logging.</param>
      <param name="logName">the name of this logger</param>
      <param name="logLevel">the default log level to use</param>
      <param name="showLevel">Include the current log level in the log message.</param>
      <param name="showDateTime">Include the current time in the log message.</param>
      <param name="showLogName">Include the instance name in the log message.</param>
      <param name="dateTimeFormat">The date and time format to use in the log message.</param>
    </member>
    <member name="M:Common.Logging.Simple.TraceLogger.IsLevelEnabled(Common.Logging.LogLevel)">
      <summary>
            Determines if the given log level is currently enabled.
            checks <see cref="P:System.Diagnostics.TraceSource.Switch" /> if <see cref="P:Common.Logging.Simple.TraceLoggerFactoryAdapter.UseTraceSource" /> is true.
            </summary>
    </member>
    <member name="M:Common.Logging.Simple.TraceLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)">
      <summary>
            Do the actual logging.
            </summary>
      <param name="level">
      </param>
      <param name="message">
      </param>
      <param name="e">
      </param>
    </member>
    <member name="M:Common.Logging.Simple.TraceLogger.OnDeserialization(System.Object)">
      <summary>
            Called after deserialization completed.
            </summary>
    </member>
    <member name="T:Common.Logging.Simple.TraceLoggerFactoryAdapter">
      <summary>
            Factory for creating <see cref="T:Common.Logging.ILog" /> instances that send 
            everything to the <see cref="T:System.Diagnostics.Trace" /> output stream.
            </summary>
      <remarks>
            Beware not to use <see cref="T:Common.Logging.Simple.CommonLoggingTraceListener" /> in combination with this logger factory
            as this would result in an endless loop for obvious reasons!
            </remarks>
      <seealso cref="T:Common.Logging.Simple.AbstractSimpleLoggerFactoryAdapter" />
      <seealso cref="P:Common.Logging.LogManager.Adapter" />
      <seealso cref="T:Common.Logging.ConfigurationSectionHandler" />
      <author>Gilles Bayon</author>
      <author>Mark Pollack</author>
      <author>Erich Eichinger</author>
    </member>
    <member name="M:Common.Logging.Simple.TraceLoggerFactoryAdapter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Common.Logging.Simple.TraceLoggerFactoryAdapter" /> class using default settings.
            </summary>
    </member>
    <member name="M:Common.Logging.Simple.TraceLoggerFactoryAdapter.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:Common.Logging.Simple.TraceLoggerFactoryAdapter" /> class.
            </summary>
      <remarks>
            Looks for level, showDateTime, showLogName, dateTimeFormat items from 
            <paramref name="properties" /> for use when the GetLogger methods are called.
            <see cref="T:Common.Logging.ConfigurationSectionHandler" /> for more information on how to use the 
            standard .NET application configuraiton file (App.config/Web.config) 
            to configure this adapter.
            </remarks>
      <param name="properties">The name value collection, typically specified by the user in 
            a configuration section named common/logging.</param>
    </member>
    <member name="M:Common.Logging.Simple.TraceLoggerFactoryAdapter.CreateLogger(System.String,Common.Logging.LogLevel,System.Boolean,System.Boolean,System.Boolean,System.String)">
      <summary>
            Creates a new <see cref="T:Common.Logging.Simple.TraceLogger" /> instance.
            </summary>
    </member>
    <member name="P:Common.Logging.Simple.TraceLoggerFactoryAdapter.UseTraceSource">
      <summary>
            Whether to use <see cref="T:System.Diagnostics.Trace" />.<c>TraceXXXX(string,object[])</c> methods for logging
            or <see cref="T:System.Diagnostics.TraceSource" />.
            </summary>
    </member>
    <member name="T:Common.Logging.ConfigurationException">
      <summary>
            The exception that is thrown when a configuration system error has occurred with Common.Logging
            </summary>
      <author>Mark Pollack</author>
    </member>
    <member name="M:Common.Logging.ConfigurationException.#ctor">
      <summary>Creates a new instance of the ObjectsException class.</summary>
    </member>
    <member name="M:Common.Logging.ConfigurationException.#ctor(System.String)">
      <summary>
            Creates a new instance of the ConfigurationException class. with the specified message.
            </summary>
      <param name="message">
            A message about the exception.
            </param>
    </member>
    <member name="M:Common.Logging.ConfigurationException.#ctor(System.String,System.Exception)">
      <summary>
            Creates a new instance of the ConfigurationException class with the specified message
            and root cause.
            </summary>
      <param name="message">
            A message about the exception.
            </param>
      <param name="rootCause">
            The root exception that is being wrapped.
            </param>
    </member>
    <member name="M:Common.Logging.ConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new instance of the ConfigurationException class.
            </summary>
      <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" />
            that holds the serialized object data about the exception being thrown.
            </param>
      <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" />
            that contains contextual information about the source or destination.
            </param>
    </member>
    <member name="T:Common.Logging.ConfigurationSectionHandler">
      <summary>
            Used in an application's configuration file (App.Config or Web.Config) to configure the logging subsystem.
            </summary>
      <example>
            An example configuration section that writes log messages to the Console using the
            built-in Console Logger.
            <code lang="XML">
            &lt;configuration&gt;
                &lt;configSections&gt;
                  &lt;sectionGroup name="common"&gt;
                    &lt;section name="logging" type="Common.Logging.ConfigurationSectionHandler, Common.Logging" /&gt;
                  &lt;/sectionGroup&gt; 
                &lt;/configSections&gt;
                &lt;common&gt;
                  &lt;logging&gt;
                    &lt;factoryAdapter type="Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter, Common.Logging"&gt;
                      &lt;arg key="showLogName" value="true" /&gt;
                      &lt;arg key="showDataTime" value="true" /&gt;
                      &lt;arg key="level" value="ALL" /&gt;
                      &lt;arg key="dateTimeFormat" value="yyyy/MM/dd HH:mm:ss:fff" /&gt;
                    &lt;/factoryAdapter&gt;
                  &lt;/logging&gt;
                &lt;/common&gt;
            &lt;/configuration&gt;
            </code></example>
    </member>
    <member name="M:Common.Logging.ConfigurationSectionHandler.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:Common.Logging.ConfigurationSectionHandler.ReadConfiguration(System.Xml.XmlNode)">
      <summary>
            Retrieves the <see cref="T:System.Type" /> of the logger the use by looking at the logFactoryAdapter element
            of the logging configuration element.
            </summary>
      <param name="section">
      </param>
      <returns>
            A <see cref="T:Common.Logging.Configuration.LogSetting" /> object containing the specified type that implements 
            <see cref="T:Common.Logging.ILoggerFactoryAdapter" /> along with zero or more properties that will be 
            passed to the logger factory adapter's constructor as an <see cref="T:System.Collections.IDictionary" />.
            </returns>
    </member>
    <member name="M:Common.Logging.ConfigurationSectionHandler.Create(Common.Logging.Configuration.LogSetting,System.Object,System.Xml.XmlNode)">
      <summary>
            Verifies that the logFactoryAdapter element appears once in the configuration section.
            </summary>
      <param name="parent">settings of a parent section - atm this must always be null</param>
      <param name="configContext">Additional information about the configuration process.</param>
      <param name="section">The configuration section to apply an XPath query too.</param>
      <returns>
            A <see cref="T:Common.Logging.Configuration.LogSetting" /> object containing the specified logFactoryAdapter type
            along with user supplied configuration properties.
            </returns>
    </member>
    <member name="T:Common.Logging.FormatMessageHandler">
      <summary>
             The type of method that is passed into e.g. <see cref="M:Common.Logging.ILog.Debug(System.Action{Common.Logging.FormatMessageHandler})" /> 
             and allows the callback method to "submit" it's message to the underlying output system.
            </summary>
      <param name="format">the format argument as in <see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <param name="args">the argument list as in <see cref="M:System.String.Format(System.String,System.Object[])" /></param>
      <seealso cref="T:Common.Logging.ILog" />
      <author>Erich Eichinger</author>
    </member>
    <member name="T:Common.Logging.LogLevel">
      <summary>
            The 7 possible logging levels
            </summary>
      <author>Gilles Bayon</author>
    </member>
    <member name="F:Common.Logging.LogLevel.All">
      <summary>
            All logging levels
            </summary>
    </member>
    <member name="F:Common.Logging.LogLevel.Trace">
      <summary>
            A trace logging level
            </summary>
    </member>
    <member name="F:Common.Logging.LogLevel.Debug">
      <summary>
            A debug logging level
            </summary>
    </member>
    <member name="F:Common.Logging.LogLevel.Info">
      <summary>
            A info logging level
            </summary>
    </member>
    <member name="F:Common.Logging.LogLevel.Warn">
      <summary>
            A warn logging level
            </summary>
    </member>
    <member name="F:Common.Logging.LogLevel.Error">
      <summary>
            An error logging level
            </summary>
    </member>
    <member name="F:Common.Logging.LogLevel.Fatal">
      <summary>
            A fatal logging level
            </summary>
    </member>
    <member name="F:Common.Logging.LogLevel.Off">
      <summary>
            Do not log anything.
            </summary>
    </member>
    <member name="T:Common.Logging.LogManager">
      <summary>
            Use the LogManager's <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" /> or <see cref="M:Common.Logging.LogManager.GetLogger(System.Type)" /> 
            methods to obtain <see cref="T:Common.Logging.ILog" /> instances for logging.
            </summary>
      <remarks>
            For configuring the underlying log system using application configuration, see the example 
            at <see cref="T:Common.Logging.ConfigurationSectionHandler" />. 
            For configuring programmatically, see the example section below.
            </remarks>
      <example>
            The example below shows the typical use of LogManager to obtain a reference to a logger
            and log an exception:
            <code>
            
            ILog log = LogManager.GetLogger(this.GetType());
            ...
            try 
            { 
              /* .... */ 
            }
            catch(Exception ex)
            {
              log.ErrorFormat("Hi {0}", ex, "dude");
            }
            
            </code>
            The example below shows programmatic configuration of the underlying log system:
            <code>
            
            // create properties
            NameValueCollection properties = new NameValueCollection();
            properties["showDateTime"] = "true";
            
            // set Adapter
            Common.Logging.LogManager.Adapter = new 
            Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter(properties);
            
            </code></example>
      <seealso cref="T:Common.Logging.ILog" />
      <seealso cref="P:Common.Logging.LogManager.Adapter" />
      <seealso cref="T:Common.Logging.ILoggerFactoryAdapter" />
      <seealso cref="T:Common.Logging.ConfigurationSectionHandler" />
      <author>Gilles Bayon</author>
    </member>
    <member name="F:Common.Logging.LogManager.COMMON_LOGGING_SECTION">
      <summary>
            The name of the default configuration section to read settings from.
            </summary>
      <remarks>
            You can always change the source of your configuration settings by setting another <see cref="T:Common.Logging.IConfigurationReader" /> instance
            on <see cref="P:Common.Logging.LogManager.ConfigurationReader" />.
            </remarks>
    </member>
    <member name="M:Common.Logging.LogManager.Reset">
      <summary>
            Reset the <see cref="N:Common.Logging" /> infrastructure to its default settings. This means, that configuration settings
            will be re-read from section <c>&lt;common/logging&gt;</c> of your <c>app.config</c>.
            </summary>
      <remarks>
            This is mainly used for unit testing, you wouldn't normally use this in your applications.<br /><b>Note:</b><see cref="T:Common.Logging.ILog" /> instances already handed out from this LogManager are not(!) affected. 
            Resetting LogManager only affects new instances being handed out.
            </remarks>
    </member>
    <member name="M:Common.Logging.LogManager.Reset(Common.Logging.IConfigurationReader)">
      <summary>
            Reset the <see cref="N:Common.Logging" /> infrastructure to its default settings. This means, that configuration settings
            will be re-read from section <c>&lt;common/logging&gt;</c> of your <c>app.config</c>.
            </summary>
      <remarks>
            This is mainly used for unit testing, you wouldn't normally use this in your applications.<br /><b>Note:</b><see cref="T:Common.Logging.ILog" /> instances already handed out from this LogManager are not(!) affected. 
            Resetting LogManager only affects new instances being handed out.
            </remarks>
      <param name="reader">
            the <see cref="T:Common.Logging.IConfigurationReader" /> instance to obtain settings for 
            re-initializing the LogManager.
            </param>
    </member>
    <member name="M:Common.Logging.LogManager.GetCurrentClassLogger">
      <summary>
            Gets the logger by calling <see cref="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.Type)" />
            on the currently configured <see cref="P:Common.Logging.LogManager.Adapter" /> using the type of the calling class.
            </summary>
      <remarks>
            This method needs to inspect the <see cref="T:System.Diagnostics.StackTrace" /> in order to determine the calling 
            class. This of course comes with a performance penalty, thus you shouldn't call it too
            often in your application.
            </remarks>
      <seealso cref="M:Common.Logging.LogManager.GetLogger(System.Type)" />
      <returns>the logger instance obtained from the current <see cref="P:Common.Logging.LogManager.Adapter" /></returns>
    </member>
    <member name="M:Common.Logging.LogManager.GetLogger``1">
      <summary>
            Gets the logger by calling <see cref="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.Type)" />
            on the currently configured <see cref="P:Common.Logging.LogManager.Adapter" /> using the specified type.
            </summary>
      <returns>the logger instance obtained from the current <see cref="P:Common.Logging.LogManager.Adapter" /></returns>
    </member>
    <member name="M:Common.Logging.LogManager.GetLogger(System.Type)">
      <summary>
            Gets the logger by calling <see cref="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.Type)" />
            on the currently configured <see cref="P:Common.Logging.LogManager.Adapter" /> using the specified type.
            </summary>
      <param name="type">The type.</param>
      <returns>the logger instance obtained from the current <see cref="P:Common.Logging.LogManager.Adapter" /></returns>
    </member>
    <member name="M:Common.Logging.LogManager.GetLogger(System.String)">
      <summary>
            Gets the logger by calling <see cref="M:Common.Logging.ILoggerFactoryAdapter.GetLogger(System.String)" />
            on the currently configured <see cref="P:Common.Logging.LogManager.Adapter" /> using the specified name.
            </summary>
      <param name="name">The name.</param>
      <returns>the logger instance obtained from the current <see cref="P:Common.Logging.LogManager.Adapter" /></returns>
    </member>
    <member name="M:Common.Logging.LogManager.BuildLoggerFactoryAdapter">
      <summary>
            Builds the logger factory adapter.
            </summary>
      <returns>a factory adapter instance. Is never <c>null</c>.</returns>
    </member>
    <member name="M:Common.Logging.LogManager.BuildLoggerFactoryAdapterFromLogSettings(Common.Logging.Configuration.LogSetting)">
      <summary>
            Builds a <see cref="T:Common.Logging.ILoggerFactoryAdapter" /> instance from the given <see cref="T:Common.Logging.Configuration.LogSetting" />
            using <see cref="T:System.Activator" />.
            </summary>
      <param name="setting">
      </param>
      <returns>the <see cref="T:Common.Logging.ILoggerFactoryAdapter" /> instance. Is never <c>null</c></returns>
    </member>
    <member name="P:Common.Logging.LogManager.ConfigurationReader">
      <summary>
            Gets the configuration reader used to initialize the LogManager.
            </summary>
      <remarks>Primarily used for testing purposes but maybe useful to obtain configuration
            information from some place other than the .NET application configuration file.</remarks>
      <value>The configuration reader.</value>
    </member>
    <member name="P:Common.Logging.LogManager.Adapter">
      <summary>
            Gets or sets the adapter.
            </summary>
      <value>The adapter.</value>
    </member>
    <member name="T:Common.Logging.NamespaceDoc">
      <summary>
            This namespace contains all core classes making up the Common.Logging framework.
            </summary>
    </member>
    <member name="T:AssemblyDoc">
      <summary>
            This assembly contains the core functionality of the Common.Logging framework.
            In particular, checkout <see cref="T:Common.Logging.LogManager" /> and <see cref="T:Common.Logging.ILog" /> for usage information.
            </summary>
    </member>
    <member name="T:CoverageExcludeAttribute">
      <summary>
            Indicates classes or members to be ignored by NCover
            </summary>
      <remarks>
            Note, the name is chosen, because TestDriven.NET uses it as //ea argument to "Test With... Coverage"
            </remarks>
      <author>Erich Eichinger</author>
    </member>
    <member name="T:NamespaceDoc">
      <summary>
        <h1>Overview</h1>
        <para>
            There are a variety of logging implementations for .NET currently in use, log4net, Enterprise 
            Library Logging, NLog, to name the most popular. The downside of having differerent implementation 
            is that they do not share a common interface and therefore impose a particular logging 
            implementation on the users of your library. To solve this dependency problem the Common.Logging 
            library introduces a simple abstraction to allow you to select a specific logging implementation at 
            runtime.
            </para>
        <para>
            The library is based on work done by the developers of IBatis.NET and it's usage is inspired by 
            log4net. Many thanks to the developers of those projects!
            </para>
        <h1>Usage</h1>
        <para>
            The core logging library Common.Logging provides the base logging <see cref="T:Common.Logging.ILog" /> interface as 
            well as the global <see cref="T:Common.Logging.LogManager" /> that you use to instrument your code:
            </para>
        <code lang="C#">
            ILog log = LogManager.GetLogger(this.GetType());  
            
            log.DebugFormat("Hi {0}", "dude");
            </code>
        <para>
            To output the information logged, you need to tell Common.Logging, what underlying logging system 
            to use. Common.Logging already includes simple console and trace based logger implementations 
            usable out of the box. Adding the following configuration snippet to your app.config causes 
            Common.Logging to output all information to the console:
            </para>
        <code lang="XML">
            &lt;configuration&gt; 
                &lt;configSections&gt; 
                  &lt;sectionGroup name="common"&gt; 
                    &lt;section name="logging" type="Common.Logging.ConfigurationSectionHandler, Common.Logging" /&gt; 
                  &lt;/sectionGroup&gt;  
                &lt;/configSections&gt; 
                 
                &lt;common&gt; 
                  &lt;logging&gt; 
                    &lt;factoryAdapter type="Common.Logging.Simple.ConsoleOutLoggerFactoryAdapter, Common.Logging"&gt; 
                      &lt;arg key="level" value="DEBUG" /&gt; 
                    &lt;/factoryAdapter&gt; 
                  &lt;/logging&gt; 
                &lt;/common&gt; 
            &lt;/configuration&gt; 
            </code>
        <h1>Customizing</h1>
        <para>
            In the case you want to integrate your own logging system that is not supported by Common.Logging yet, it is easily 
            possible to implement your own plugin by implementing <see cref="T:Common.Logging.ILoggerFactoryAdapter" />.
            For convenience there is a base <see cref="T:Common.Logging.Factory.AbstractCachingLoggerFactoryAdapter" /> implementation available that usually 
            makes implementing your own adapter a breeze.
            </para>
        <h1>&lt;system.diagnostics&gt; Integration</h1>
        <para>
            If your code already uses the .NET framework's built-in <a href="http://msdn.microsoft.com/library/system.diagnostics.trace.aspx">System.Diagnostics.Trace</a>
            system, you can use <see cref="T:Common.Logging.Simple.CommonLoggingTraceListener" /> to redirect all trace output to the 
            Common.Logging infrastructure.
            </para>
      </summary>
    </member>
    <member name="T:Common.Logging.Log4Net.CommonLoggingAppender">
      <summary>
            Routes log events to Common.Logging infrastructure.
            </summary>
      <example>
            To route all events logged using log4net to Common.Logging, you need to configure this appender as shown below:
            <code>
            &lt;log4net&gt;
                &lt;appender name="CommonLoggingAppender" 
                          type="Common.Logging.Log4Net.CommonLoggingAppender, Common.Logging.Log4Net"&gt;
                    &lt;layout type="log4net.Layout.PatternLayout, log4net"&gt;
                        &lt;param name="ConversionPattern" value="%level - %class.%method: %message" /&gt;
                    &lt;/layout&gt;
                &lt;/appender&gt;
            
                &lt;root&gt;
                    &lt;level value="ALL" /&gt;
                    &lt;appender-ref ref="CommonLoggingAppender" /&gt;
                &lt;/root&gt;
            &lt;/log4net&gt;
            </code></example>
      <author>Erich Eichinger</author>
    </member>
    <member name="T:Common.Logging.Log4Net.CommonLoggingAppender.ExceptionAwareLayout">
      <summary>
            Wrapper class that prevents exceptions from being rendered in the message
            </summary>
    </member>
    <member name="M:Common.Logging.Log4Net.CommonLoggingAppender.GetClosestLevel(log4net.Core.Level)">
      <summary>
            Gets the closest level supported by Common.Logging of the given log4net level
            </summary>
    </member>
    <member name="M:Common.Logging.Log4Net.CommonLoggingAppender.Append(log4net.Core.LoggingEvent)">
      <summary>
            Sends the given log event to Common.Logging
            </summary>
    </member>
    <member name="P:Common.Logging.Log4Net.CommonLoggingAppender.Layout">
      <summary>
             Get or set the layout for this appender
            </summary>
    </member>
    <member name="T:Common.Logging.Log4Net.Log4NetLogger">
      <summary>
            Concrete implementation of <see cref="T:Common.Logging.ILog" /> interface specific to log4net 1.2.10.
            </summary>
      <remarks>
            Log4net is capable of outputting extended debug information about where the current 
            message was generated: class name, method name, file, line, etc. Log4net assumes that the location
            information should be gathered relative to where Debug() was called. 
            When using Common.Logging, Debug() is called in Common.Logging.Log4Net.Log4NetLogger. This means that
            the location information will indicate that Common.Logging.Log4Net.Log4NetLogger always made
            the call to Debug(). We need to know where Common.Logging.ILog.Debug()
            was called. To do this we need to use the log4net.ILog.Logger.Log method and pass in a Type telling
            log4net where in the stack to begin looking for location information.
            </remarks>
      <author>Gilles Bayon</author>
      <author>Erich Eichinger</author>
    </member>
    <member name="M:Common.Logging.Log4Net.Log4NetLogger.#ctor(log4net.Core.ILoggerWrapper)">
      <summary>
            Constructor
            </summary>
      <param name="log">
      </param>
    </member>
    <member name="M:Common.Logging.Log4Net.Log4NetLogger.WriteInternal(Common.Logging.LogLevel,System.Object,System.Exception)">
      <summary>
            Sends the message to the underlying log4net system.
            </summary>
      <param name="logLevel">the level of this log event.</param>
      <param name="message">the message to log</param>
      <param name="exception">the exception to log (may be null)</param>
    </member>
    <member name="P:Common.Logging.Log4Net.Log4NetLogger.IsTraceEnabled">
      <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Trace" /> level.
            </summary>
    </member>
    <member name="P:Common.Logging.Log4Net.Log4NetLogger.IsDebugEnabled">
      <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Debug" /> level.
            </summary>
    </member>
    <member name="P:Common.Logging.Log4Net.Log4NetLogger.IsInfoEnabled">
      <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Info" /> level.
            </summary>
    </member>
    <member name="P:Common.Logging.Log4Net.Log4NetLogger.IsWarnEnabled">
      <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Warn" /> level.
            </summary>
    </member>
    <member name="P:Common.Logging.Log4Net.Log4NetLogger.IsErrorEnabled">
      <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Error" /> level.
            </summary>
    </member>
    <member name="P:Common.Logging.Log4Net.Log4NetLogger.IsFatalEnabled">
      <summary>
            Checks if this logger is enabled for the <see cref="F:Common.Logging.LogLevel.Fatal" /> level.
            </summary>
    </member>
    <member name="T:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter">
      <summary>
            Concrete subclass of ILoggerFactoryAdapter specific to log4net 1.2.10.
            </summary>
      <remarks>
            The following configuration property values may be configured:
            <list type="bullet"><item><c>configType</c>: <c>INLINE|FILE|FILE-WATCH|EXTERNAL</c></item><item><c>configFile</c>: log4net configuration file path in case of FILE or FILE-WATCH</item></list>
            The configType values have the following implications:
            <list type="bullet"><item>INLINE: simply calls <c>XmlConfigurator.Configure()</c></item><item>FILE: calls <c>XmlConfigurator.Configure(System.IO.FileInfo)</c> using <c>configFile</c>.</item><item>FILE-WATCH: calls <c>XmlConfigurator.ConfigureAndWatch(System.IO.FileInfo)</c> using <c>configFile</c>.</item><item>EXTERNAL: does nothing and expects log4net to be configured elsewhere.</item><item>&lt;any&gt;: calls <c>BasicConfigurator.Configure()</c></item></list></remarks>
      <example>
            The following snippet shows how to configure EntLib logging for Common.Logging:
            <code>
            &lt;configuration&gt;
              &lt;configSections&gt;
                  &lt;section name="logging" type="Common.Logging.ConfigurationSectionHandler, Common.Logging" /&gt;
              &lt;/configSections&gt;
              &lt;common&gt;
                &lt;logging&gt;
                  &lt;factoryAdapter type="Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter, Common.Logging.Log4Net"&gt;
                    &lt;arg key="configType" value="FILE" /&gt;
                    &lt;arg key="configFile" value="~/log4net.config" /&gt;
                  &lt;/factoryAdapter&gt;
                &lt;/logging&gt;
              &lt;/common&gt;
            &lt;/configuration&gt;
            </code></example>
      <author>Gilles Bayon</author>
      <author>Erich Eichinger</author>
    </member>
    <member name="T:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime">
      <summary>
            Abstract interface to the underlying log4net runtime
            </summary>
    </member>
    <member name="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime.XmlConfiguratorConfigure">
      <summary>Calls <see cref="M:log4net.Config.XmlConfigurator.Configure" /></summary>
    </member>
    <member name="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime.XmlConfiguratorConfigure(System.String)">
      <summary>Calls <see cref="M:log4net.Config.XmlConfigurator.Configure(System.IO.FileInfo)" /></summary>
    </member>
    <member name="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime.XmlConfiguratorConfigureAndWatch(System.String)">
      <summary>Calls <see cref="M:log4net.Config.XmlConfigurator.ConfigureAndWatch(System.IO.FileInfo)" /></summary>
    </member>
    <member name="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime.BasicConfiguratorConfigure">
      <summary>Calls <see cref="M:log4net.Config.BasicConfigurator.Configure" /></summary>
    </member>
    <member name="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime.GetLogger(System.String)">
      <summary>Calls <see cref="M:Common.Logging.LogManager.GetLogger(System.String)" /></summary>
    </member>
    <member name="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>
            Constructor
            </summary>
      <param name="properties">configuration properties, see <see cref="T:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter" /> for more.</param>
    </member>
    <member name="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.#ctor(System.Collections.Specialized.NameValueCollection,Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime)">
      <summary>
            Constructor accepting configuration properties and an arbitrary 
            <see cref="T:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.ILog4NetRuntime" /> instance.
            </summary>
      <param name="properties">configuration properties, see <see cref="T:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter" /> for more.</param>
      <param name="runtime">a log4net runtime adapter</param>
    </member>
    <member name="M:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter.CreateLogger(System.String)">
      <summary>
            Create a ILog instance by name 
            </summary>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Common.Logging.Log4Net.NamespaceDoc">
      <summary>
        <para>
            This namespace contains the implementations to plug log4net 1.2.10 into Common.Logging.
            </para>
        <para>For an example on how to configure
            <list type="bullet"><item>Common.Logging to render its output to log4net, see <see cref="T:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter" />.</item><item>log4net to render its output to Common.Logging use <see cref="T:Common.Logging.Log4Net.CommonLoggingAppender" />.</item></list></para>
      </summary>
    </member>
    <member name="T:Common.Logging.Log4Net252960.AssemblyDoc">
      <summary>
        <para>This assembly contains the adapter to the log4net 1.2.10 library</para>
        <para>For an example on how to configure
            <list type="bullet"><item>Common.Logging to render its output to log4net, see <see cref="T:Common.Logging.Log4Net.Log4NetLoggerFactoryAdapter" />.</item><item>log4net to render its output to Common.Logging use <see cref="T:Common.Logging.Log4Net.CommonLoggingAppender" />.</item></list></para>
      </summary>
    </member>
    <member name="T:Autofac.Core.IRegistrationSource">
      <summary>
            Allows registrations to be made on-the-fly when unregistered
            services are requested (lazy registrations.)
            </summary>
    </member>
    <member name="M:Autofac.Core.IRegistrationSource.RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.IComponentRegistration}})">
      <summary>
            Retrieve registrations for an unregistered service, to be used
            by the container.
            </summary>
      <param name="service">The service that was requested.</param>
      <param name="registrationAccessor">A function that will return existing registrations for a service.</param>
      <returns>Registrations providing the service.</returns>
      <remarks>
            If the source is queried for service s, and it returns a component that implements both s and s', then it
            will not be queried again for either s or s'. This means that if the source can return other implementations
            of s', it should return these, plus the transitive closure of other components implementing their 
            additional services, along with the implementation of s. It is not an error to return components
            that do not implement <paramref name="service" />.
            </remarks>
    </member>
    <member name="P:Autofac.Core.IRegistrationSource.IsAdapterForIndividualComponents">
      <summary>
            Gets whether the registrations provided by this source are 1:1 adapters on top
            of other components (I.e. like Meta, Func or Owned.)
            </summary>
    </member>
    <member name="T:Autofac.Features.LazyDependencies.LazyRegistrationSource">
      <summary>
            Support the <see cref="T:System.Lazy`1" /> 
            type automatically whenever type T is registered with the container.
            When a dependency of a lazy type is used, the instantiation of the underlying
            component will be delayed until the Value property is first accessed.
            </summary>
    </member>
    <member name="T:Autofac.Features.LazyDependencies.LazyWithMetadataRegistrationSource">
      <summary>
            Support the <see cref="T:System.Lazy`2" />
            types automatically whenever type T is registered with the container.
            Metadata values come from the component registration's metadata.
            When a dependency of a lazy type is used, the instantiation of the underlying
            component will be delayed until the Value property is first accessed.
            </summary>
    </member>
    <member name="T:Autofac.Features.Metadata.Meta`2">
      <summary>
            Provides a value along with metadata describing the value.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
      <typeparam name="TMetadata">An interface to which metadata values can be bound.</typeparam>
    </member>
    <member name="M:Autofac.Features.Metadata.Meta`2.#ctor(`0,`1)">
      <summary>
            Create a new instance.
            </summary>
      <param name="value">The value described by the instance.</param>
      <param name="metadata">The metadata describing the value.</param>
    </member>
    <member name="P:Autofac.Features.Metadata.Meta`2.Value">
      <summary>
            The value described by <see cref="P:Autofac.Features.Metadata.Meta`2.Metadata" />.
            </summary>
    </member>
    <member name="P:Autofac.Features.Metadata.Meta`2.Metadata">
      <summary>
            Metadata describing the value.
            </summary>
    </member>
    <member name="T:Autofac.Features.Metadata.StronglyTypedMetaRegistrationSource">
      <summary>
            Support the <see cref="T:Autofac.Features.Metadata.Meta`2" />
            types automatically whenever type T is registered with the container.
            Metadata values come from the component registration's metadata.
            </summary>
    </member>
    <member name="T:Autofac.Features.GeneratedFactories.FactoryGenerator">
      <summary>
            Generates context-bound closures that represent factories from
            a set of heuristics based on delegate type signatures.
            </summary>
    </member>
    <member name="M:Autofac.Features.GeneratedFactories.FactoryGenerator.#ctor(System.Type,Autofac.Core.Service,Autofac.Features.GeneratedFactories.ParameterMapping)">
      <summary>
            Create a factory generator.
            </summary>
      <param name="service">The service that will be activated in
            order to create the products of the factory.</param>
      <param name="delegateType">The delegate to provide as a factory.</param>
      <param name="parameterMapping">The parameter mapping mode to use.</param>
    </member>
    <member name="M:Autofac.Features.GeneratedFactories.FactoryGenerator.#ctor(System.Type,Autofac.Core.IComponentRegistration,Autofac.Features.GeneratedFactories.ParameterMapping)">
      <summary>
            Create a factory generator.
            </summary>
      <param name="productRegistration">The component that will be activated in
            order to create the products of the factory.</param>
      <param name="delegateType">The delegate to provide as a factory.</param>
      <param name="parameterMapping">The parameter mapping mode to use.</param>
    </member>
    <member name="M:Autofac.Features.GeneratedFactories.FactoryGenerator.GenerateFactory(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Generates a factory delegate that closes over the provided context.
            </summary>
      <param name="context">The context in which the factory will be used.</param>
      <param name="parameters">Parameters provided to the resolve call for the factory itself.</param>
      <returns>A factory delegate that will work within the context.</returns>
    </member>
    <member name="M:Autofac.Features.GeneratedFactories.FactoryGenerator.GenerateFactory``1(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Generates a factory delegate that closes over the provided context.
            </summary>
      <param name="context">The context in which the factory will be used.</param>
      <param name="parameters">Parameters provided to the resolve call for the factory itself.</param>
      <returns>A factory delegate that will work within the context.</returns>
    </member>
    <member name="T:Autofac.Builder.ReflectionActivatorData">
      <summary>
            Builder for reflection-based activators.
            </summary>
    </member>
    <member name="M:Autofac.Builder.ReflectionActivatorData.#ctor(System.Type)">
      <summary>
            Specify a reflection activator for the given type.
            </summary>
      <param name="implementor">Type that will be activated.</param>
    </member>
    <member name="P:Autofac.Builder.ReflectionActivatorData.ImplementationType">
      <summary>
            Get the implementation type.
            </summary>
    </member>
    <member name="P:Autofac.Builder.ReflectionActivatorData.ConstructorFinder">
      <summary>
            The constructor finder for the registration.
            </summary>
    </member>
    <member name="P:Autofac.Builder.ReflectionActivatorData.ConstructorSelector">
      <summary>
            The constructor selector for the registration.
            </summary>
    </member>
    <member name="P:Autofac.Builder.ReflectionActivatorData.ConfiguredParameters">
      <summary>
            The explicitly bound constructor parameters.
            </summary>
    </member>
    <member name="P:Autofac.Builder.ReflectionActivatorData.ConfiguredProperties">
      <summary>
            The explicitly bound properties.
            </summary>
    </member>
    <member name="T:Autofac.Builder.IConcreteActivatorData">
      <summary>
            Activator data that can provide an IInstanceActivator instance.
            </summary>
    </member>
    <member name="P:Autofac.Builder.IConcreteActivatorData.Activator">
      <summary>
            The instance activator based on the provided data.
            </summary>
    </member>
    <member name="T:Autofac.Builder.ConcreteReflectionActivatorData">
      <summary>
            Reflection activator data for concrete types.
            </summary>
    </member>
    <member name="M:Autofac.Builder.ConcreteReflectionActivatorData.#ctor(System.Type)">
      <summary>
            Specify a reflection activator for the given type.
            </summary>
      <param name="implementor">Type that will be activated.</param>
    </member>
    <member name="P:Autofac.Builder.ConcreteReflectionActivatorData.Activator">
      <summary>
            The instance activator based on the provided data.
            </summary>
    </member>
    <member name="T:Autofac.Builder.ContainerBuildOptions">
      <summary>
            Parameterises the construction of a container by a <see cref="T:Autofac.ContainerBuilder" />.
            </summary>
    </member>
    <member name="F:Autofac.Builder.ContainerBuildOptions.None">
      <summary>
            No options.
            </summary>
    </member>
    <member name="F:Autofac.Builder.ContainerBuildOptions.Default">
      <summary>
            Standard container construction.
            </summary>
    </member>
    <member name="F:Autofac.Builder.ContainerBuildOptions.ExcludeDefaultModules">
      <summary>
            Prevents inclusion of standard modules like support for
            relationship types including <see cref="T:System.Collections.Generic.IEnumerable`1" /> etc.
            </summary>
    </member>
    <member name="F:Autofac.Builder.ContainerBuildOptions.IgnoreStartableComponents">
      <summary>
            Does not call <see cref="M:Autofac.IStartable.Start" /> on components implementing
            this interface (useful for module testing.)
            </summary>
    </member>
    <member name="T:Autofac.Builder.IRegistrationBuilder`3">
      <summary>
            Data structure used to construct registrations.
            </summary>
      <typeparam name="TLimit">The most specific type to which instances of the registration
            can be cast.</typeparam>
      <typeparam name="TActivatorData">Activator builder type.</typeparam>
      <typeparam name="TRegistrationStyle">Registration style type.</typeparam>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.ExternallyOwned">
      <summary>
            Configure the component so that instances are never disposed by the container.
            </summary>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.OwnedByLifetimeScope">
      <summary>
            Configure the component so that instances that support IDisposable are
            disposed by the container (default.)
            </summary>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerDependency">
      <summary>
            Configure the component so that every dependent component or call to Resolve()
            gets a new, unique instance (default.)
            </summary>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.SingleInstance">
      <summary>
            Configure the component so that every dependent component or call to Resolve()
            gets the same, shared instance.
            </summary>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerLifetimeScope">
      <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a single ILifetimeScope gets the same, shared instance. Dependent components in
            different lifetime scopes will get different instances.
            </summary>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerMatchingLifetimeScope(System.Object)">
      <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope tagged with the provided tag value gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the tagged scope will
            share the parent's instance. If no appropriately tagged scope can be found in the
            hierarchy an <see cref="T:Autofac.Core.DependencyResolutionException" /> is thrown.
            </summary>
      <param name="lifetimeScopeTag">Tag applied to matching lifetime scopes.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerOwned``1">
      <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope created by an owned instance gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the owned instance scope will
            share the parent's instance. If no appropriate owned instance scope can be found in the
            hierarchy an <see cref="T:Autofac.Core.DependencyResolutionException" /> is thrown.
            </summary>
      <typeparam name="TService">Service type.</typeparam>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerOwned(System.Type)">
      <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope created by an owned instance gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the owned instance scope will
            share the parent's instance. If no appropriate owned instance scope can be found in the
            hierarchy an <see cref="T:Autofac.Core.DependencyResolutionException" /> is thrown.
            </summary>
      <param name="serviceType">Service type.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerOwned``1(System.Object)">
      <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope created by an owned instance gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the owned instance scope will
            share the parent's instance. If no appropriate owned instance scope can be found in the
            hierarchy an <see cref="T:Autofac.Core.DependencyResolutionException" /> is thrown.
            </summary>
      <typeparam name="TService">The service type provided by the component.</typeparam>
      <param name="serviceKey">Key to associate with the component.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerOwned(System.Object,System.Type)">
      <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope created by an owned instance gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the owned instance scope will
            share the parent's instance. If no appropriate owned instance scope can be found in the
            hierarchy an <see cref="T:Autofac.Core.DependencyResolutionException" /> is thrown.
            </summary>
      <param name="serviceKey">Key to associate with the component.</param>
      <param name="serviceType">The service type provided by the component.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.As``1">
      <summary>
            Configure the services that the component will provide. The generic parameter(s) to As()
            will be exposed as TypedService instances.
            </summary>
      <typeparam name="TService">Service type.</typeparam>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.As``2">
      <summary>
            Configure the services that the component will provide. The generic parameter(s) to As()
            will be exposed as TypedService instances.
            </summary>
      <typeparam name="TService1">Service type.</typeparam>
      <typeparam name="TService2">Service type.</typeparam>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.As``3">
      <summary>
            Configure the services that the component will provide. The generic parameter(s) to As()
            will be exposed as TypedService instances.
            </summary>
      <typeparam name="TService1">Service type.</typeparam>
      <typeparam name="TService2">Service type.</typeparam>
      <typeparam name="TService3">Service type.</typeparam>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.As(System.Type[])">
      <summary>
            Configure the services that the component will provide.
            </summary>
      <param name="services">Service types to expose.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.As(Autofac.Core.Service[])">
      <summary>
            Configure the services that the component will provide.
            </summary>
      <param name="services">Services to expose.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.Named(System.String,System.Type)">
      <summary>
            Provide a textual name that can be used to retrieve the component.
            </summary>
      <param name="serviceName">Named service to associate with the component.</param>
      <param name="serviceType">The service type provided by the component.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.Named``1(System.String)">
      <summary>
            Provide a textual name that can be used to retrieve the component.
            </summary>
      <param name="serviceName">Named service to associate with the component.</param>
      <typeparam name="TService">The service type provided by the component.</typeparam>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.Keyed(System.Object,System.Type)">
      <summary>
            Provide a key that can be used to retrieve the component.
            </summary>
      <param name="serviceKey">Key to associate with the component.</param>
      <param name="serviceType">The service type provided by the component.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.Keyed``1(System.Object)">
      <summary>
            Provide a key that can be used to retrieve the component.
            </summary>
      <param name="serviceKey">Key to associate with the component.</param>
      <typeparam name="TService">The service type provided by the component.</typeparam>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.OnPreparing(System.Action{Autofac.Core.PreparingEventArgs})">
      <summary>
            Add a handler for the Preparing event. This event allows manipulating of the parameters
            that will be provided to the component.
            </summary>
      <param name="handler">The event handler.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.OnActivating(System.Action{Autofac.Core.IActivatingEventArgs{`0}})">
      <summary>
            Add a handler for the Activating event.
            </summary>
      <param name="handler">The event handler.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.OnActivated(System.Action{Autofac.Core.IActivatedEventArgs{`0}})">
      <summary>
            Add a handler for the Activated event.
            </summary>
      <param name="handler">The event handler.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.PropertiesAutowired(Autofac.PropertyWiringFlags)">
      <summary>
            Configure the component so that any properties whose types are registered in the
            container will be wired to instances of the appropriate service.
            </summary>
      <param name="wiringFlags">Set wiring options such as circular dependency wiring support.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.WithMetadata(System.String,System.Object)">
      <summary>
            Associates data with the component.
            </summary>
      <param name="key">Key by which the data can be located.</param>
      <param name="value">The data value.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.WithMetadata(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
      <summary>
            Associates data with the component.
            </summary>
      <param name="properties">The extended properties to associate with the component.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.IRegistrationBuilder`3.WithMetadata``1(System.Action{Autofac.Builder.MetadataConfiguration{``0}})">
      <summary>
            Associates data with the component.
            </summary>
      <typeparam name="TMetadata">A type with properties whose names correspond to the
            property names to configure.</typeparam>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="P:Autofac.Builder.IRegistrationBuilder`3.ActivatorData">
      <summary>
            The activator data.
            </summary>
    </member>
    <member name="P:Autofac.Builder.IRegistrationBuilder`3.RegistrationStyle">
      <summary>
            The registration style.
            </summary>
    </member>
    <member name="P:Autofac.Builder.IRegistrationBuilder`3.RegistrationData">
      <summary>
            The registration data.
            </summary>
    </member>
    <member name="T:Autofac.Builder.MetadataConfiguration`1">
      <summary>
            Used with the WithMetadata configuration method to
            associate key-value pairs with an <see cref="T:Autofac.Core.IComponentRegistration" />.
            </summary>
      <typeparam name="TMetadata">Interface with properties whose names correspond to
            the property keys.</typeparam>
      <remarks>This feature was suggested by OJ Reeves (@TheColonial).</remarks>
    </member>
    <member name="M:Autofac.Builder.MetadataConfiguration`1.For``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
      <summary>
            Set one of the property values.
            </summary>
      <typeparam name="TProperty">The type of the property.</typeparam>
      <param name="propertyAccessor">An expression that accesses the property to set.</param>
      <param name="value">The property value to set.</param>
    </member>
    <member name="T:Autofac.Core.IComponentRegistry">
      <summary>
            Provides component registrations according to the services they provide.
            </summary>
    </member>
    <member name="M:Autofac.Core.IComponentRegistry.TryGetRegistration(Autofac.Core.Service,Autofac.Core.IComponentRegistration@)">
      <summary>
            Attempts to find a default registration for the specified service.
            </summary>
      <param name="service">The service to look up.</param>
      <param name="registration">The default registration for the service.</param>
      <returns>True if a registration exists.</returns>
    </member>
    <member name="M:Autofac.Core.IComponentRegistry.IsRegistered(Autofac.Core.Service)">
      <summary>
            Determines whether the specified service is registered.
            </summary>
      <param name="service">The service to test.</param>
      <returns>True if the service is registered.</returns>
    </member>
    <member name="M:Autofac.Core.IComponentRegistry.Register(Autofac.Core.IComponentRegistration)">
      <summary>
            Register a component.
            </summary>
      <param name="registration">The component registration.</param>
    </member>
    <member name="M:Autofac.Core.IComponentRegistry.Register(Autofac.Core.IComponentRegistration,System.Boolean)">
      <summary>
            Register a component.
            </summary>
      <param name="registration">The component registration.</param>
      <param name="preserveDefaults">If true, existing defaults for the services provided by the
            component will not be changed.</param>
    </member>
    <member name="M:Autofac.Core.IComponentRegistry.RegistrationsFor(Autofac.Core.Service)">
      <summary>
            Selects from the available registrations after ensuring that any
            dynamic registration sources that may provide <paramref name="service" />
            have been invoked.
            </summary>
      <param name="service">The service for which registrations are sought.</param>
      <returns>Registrations supporting <paramref name="service" />.</returns>
    </member>
    <member name="M:Autofac.Core.IComponentRegistry.AddRegistrationSource(Autofac.Core.IRegistrationSource)">
      <summary>
            Add a registration source that will provide registrations on-the-fly.
            </summary>
      <param name="source">The source to register.</param>
    </member>
    <member name="P:Autofac.Core.IComponentRegistry.Registrations">
      <summary>
            Enumerate the registered components.
            </summary>
    </member>
    <member name="P:Autofac.Core.IComponentRegistry.Sources">
      <summary>
            Gets the registration sources that are used by the registry.
            </summary>
    </member>
    <member name="P:Autofac.Core.IComponentRegistry.HasLocalComponents">
      <summary>
            True if the registry contains its own components; false if it is forwarding
            registrations from another external registry.
            </summary>
      <remarks>This property is used when walking up the scope tree looking for
            registrations for a new customised scope. (See issue 336.)</remarks>
    </member>
    <member name="E:Autofac.Core.IComponentRegistry.Registered">
      <summary>
            Fired whenever a component is registered - either explicitly or via a
            <see cref="T:Autofac.Core.IRegistrationSource" />.
            </summary>
    </member>
    <member name="E:Autofac.Core.IComponentRegistry.RegistrationSourceAdded">
      <summary>
            Fired when an <see cref="T:Autofac.Core.IRegistrationSource" /> is added to the registry.
            </summary>
    </member>
    <member name="T:Autofac.Core.Registration.CopyOnWriteRegistry">
      <summary>
            Delegates registration lookups to a specified registry. When write operations are applied,
            initialises a new 'writeable' registry.
            </summary>
      <remarks>
            Safe for concurrent access by multiple readers. Write operations are single-threaded.
            </remarks>
    </member>
    <member name="T:Autofac.Features.Variance.ContravariantRegistrationSource">
      <summary>
            Enables contravariant <code>Resolve()</code> for interfaces that have a single contravariant ('in') parameter.
            </summary>
      <example>
            interface IHandler&lt;in TCommand&gt;
            {
                void Handle(TCommand command);
            }
            
            class Command { }
            
            class DerivedCommand : Command { }
            
            class CommandHandler : IHandler&lt;Command&gt; { ... }
            
            var builder = new ContainerBuilder();
            builder.RegisterSource(new ContravariantRegistrationSource());
            builder.RegisterType&lt;CommandHandler&gt;();
            var container = builder.Build();
            // Source enables this line, even though IHandler&lt;Command&gt; is the
            // actual registered type.
            var handler = container.Resolve&lt;IHandler&lt;DerivedCommand&gt;&gt;();
            handler.Handle(new DerivedCommand());
            </example>
    </member>
    <member name="M:Autofac.Features.Variance.ContravariantRegistrationSource.RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.IComponentRegistration}})">
      <summary>
            Retrieve registrations for an unregistered service, to be used
            by the container.
            </summary>
      <param name="service">The service that was requested.</param>
      <param name="registrationAccessor">A function that will return existing registrations for a service.</param>
      <returns>Registrations providing the service.</returns>
      <remarks>
            If the source is queried for service s, and it returns a component that implements both s and s', then it
            will not be queried again for either s or s'. This means that if the source can return other implementations
            of s', it should return these, plus the transitive closure of other components implementing their 
            additional services, along with the implementation of s. It is not an error to return components
            that do not implement <paramref name="service" />.
            </remarks>
    </member>
    <member name="P:Autofac.Features.Variance.ContravariantRegistrationSource.IsAdapterForIndividualComponents">
      <summary>
            Gets whether the registrations provided by this source are 1:1 adapters on top
            of other components (I.e. like Meta, Func or Owned.)
            </summary>
    </member>
    <member name="T:Autofac.PropertyWiringFlags">
      <summary>
            Options that can be applied when autowiring properties on a component. (Multiple options can
            be specified using bitwise 'or' - e.g. AllowCircularDependencies | PreserveSetValues.
            </summary>
    </member>
    <member name="F:Autofac.PropertyWiringFlags.Default">
      <summary>
            Default behavior. Circular dependencies are not allowed; existing non-default
            property values are overwritten.
            </summary>
    </member>
    <member name="F:Autofac.PropertyWiringFlags.AllowCircularDependencies">
      <summary>
            Allows property-property and property-constructor circular dependency wiring.
            This flag moves property wiring from the Activating to the Activated event.
            </summary>
    </member>
    <member name="F:Autofac.PropertyWiringFlags.PreserveSetValues">
      <summary>
            If specified, properties that already have a non-default value will be left
            unchanged in the wiring operation.
            </summary>
    </member>
    <member name="T:Autofac.Builder.RegistrationBuilder">
      <summary>
            Static factory methods to simplify the creation and handling of IRegistrationBuilder{L,A,R}.
            </summary>
      <example>
            To create an <see cref="T:Autofac.Core.IComponentRegistration" /> for a specific type, use:
            <code>
            var cr = RegistrationBuilder.ForType(t).CreateRegistration();
            </code>
            The full builder syntax is supported:
            <code>
            var cr = RegistrationBuilder.ForType(t).Named("foo").ExternallyOwned().CreateRegistration();
            </code></example>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder.ForDelegate``1(System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},``0})">
      <summary>
            Creates a registration builder for the provided delegate.
            </summary>
      <typeparam name="T">Instance type returned by delegate.</typeparam>
      <param name="delegate">Delegate to register.</param>
      <returns>A registration builder.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder.ForDelegate(System.Type,System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object})">
      <summary>
            Creates a registration builder for the provided delegate.
            </summary>
      <param name="delegate">Delegate to register.</param>
      <param name="limitType">Most specific type return value of delegate can be cast to.</param>
      <returns>A registration builder.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder.ForType``1">
      <summary>
            Creates a registration builder for the provided type.
            </summary>
      <typeparam name="TImplementor">Implementation type to register.</typeparam>
      <returns>A registration builder.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder.ForType(System.Type)">
      <summary>
            Creates a registration builder for the provided type.
            </summary>
      <param name="implementationType">Implementation type to register.</param>
      <returns>A registration builder.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder.CreateRegistration``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
      <summary>
            Create an <see cref="T:Autofac.Core.IComponentRegistration" /> from a <see cref="T:Autofac.Builder.RegistrationBuilder" />.
            (There is no need to call
            this method when registering components through a <see cref="T:Autofac.ContainerBuilder" />.)
            </summary>
      <remarks>
            When called on the result of one of the <see cref="T:Autofac.ContainerBuilder" /> methods,
            the returned registration will be different from the one the builder itself registers
            in the container.
            </remarks>
      <example>
        <code>
            var registration = RegistrationBuilder.ForType&lt;Foo&gt;().CreateRegistration();
            </code>
      </example>
      <typeparam name="TLimit">
      </typeparam>
      <typeparam name="TActivatorData">
      </typeparam>
      <typeparam name="TSingleRegistrationStyle">
      </typeparam>
      <param name="rb">The registration builder.</param>
      <returns>An IComponentRegistration.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder.CreateRegistration(System.Guid,Autofac.Builder.RegistrationData,Autofac.Core.IInstanceActivator,System.Collections.Generic.IEnumerable{Autofac.Core.Service})">
      <summary>
            Create an IComponentRegistration from data.
            </summary>
      <param name="id">Id of the registration.</param>
      <param name="data">Registration data.</param>
      <param name="activator">Activator.</param>
      <param name="services">Services provided by the registration.</param>
      <returns>An IComponentRegistration.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder.CreateRegistration(System.Guid,Autofac.Builder.RegistrationData,Autofac.Core.IInstanceActivator,System.Collections.Generic.IEnumerable{Autofac.Core.Service},Autofac.Core.IComponentRegistration)">
      <summary>
            Create an IComponentRegistration from data.
            </summary>
      <param name="id">Id of the registration.</param>
      <param name="data">Registration data.</param>
      <param name="activator">Activator.</param>
      <param name="services">Services provided by the registration.</param>
      <param name="target">Optional; target registration.</param>
      <returns>An IComponentRegistration.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder.RegisterSingleComponent``3(Autofac.Core.IComponentRegistry,Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
      <summary>
            Register a component in the component registry. This helper method is necessary
            in order to execute OnRegistered hooks and respect PreserveDefaults. 
            </summary>
      <remarks>Hoping to refactor this out.</remarks>
      <typeparam name="TLimit">
      </typeparam>
      <typeparam name="TActivatorData">
      </typeparam>
      <typeparam name="TSingleRegistrationStyle">
      </typeparam>
      <param name="cr">Component registry to make registration in.</param>
      <param name="rb">Registration builder with data for new registration.</param>
    </member>
    <member name="T:Autofac.Builder.RegistrationBuilderResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Builder.RegistrationBuilderResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Builder.RegistrationBuilderResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Builder.RegistrationBuilderResources.ComponentDoesNotSupportService">
      <summary>
              Looks up a localized string similar to The type '{0}' is not assignable to service '{1}'..
            </summary>
    </member>
    <member name="T:Autofac.Builder.RegistrationExtensions">
      <summary>
            Adds registration syntax for less commonly-used features.
            </summary>
      <remarks>
            These features are in this namespace because they will remain accessible to
            applications originally written against Autofac 1.4. In Autofac 2, this functionality
            is implicitly provided and thus making explicit registrations is rarely necessary.
            </remarks>
    </member>
    <member name="M:Autofac.Builder.RegistrationExtensions.RegisterGeneratedFactory(Autofac.ContainerBuilder,System.Type)">
      <summary>
            Registers a factory delegate.
            </summary>
      <param name="builder">Container builder.</param>
      <param name="delegateType">Factory type to generate.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
      <remarks>Factory delegates are provided automatically in Autofac 2,
            and this method is generally not required.</remarks>
    </member>
    <member name="M:Autofac.Builder.RegistrationExtensions.RegisterGeneratedFactory(Autofac.ContainerBuilder,System.Type,Autofac.Core.Service)">
      <summary>
            Registers a factory delegate.
            </summary>
      <param name="builder">Container builder.</param>
      <param name="delegateType">Factory type to generate.</param>
      <param name="service">The service that the delegate will return instances of.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
      <remarks>Factory delegates are provided automatically in Autofac 2, and
            this method is generally not required.</remarks>
    </member>
    <member name="M:Autofac.Builder.RegistrationExtensions.RegisterGeneratedFactory``1(Autofac.ContainerBuilder,Autofac.Core.Service)">
      <summary>
            Registers a factory delegate.
            </summary>
      <typeparam name="TDelegate">The type of the delegate.</typeparam>
      <param name="builder">Container builder.</param>
      <param name="service">The service that the delegate will return instances of.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
      <remarks>Factory delegates are provided automatically in Autofac 2,
            and this method is generally not required.</remarks>
    </member>
    <member name="M:Autofac.Builder.RegistrationExtensions.RegisterGeneratedFactory``1(Autofac.ContainerBuilder)">
      <summary>
            Registers a factory delegate.
            </summary>
      <typeparam name="TDelegate">The type of the delegate.</typeparam>
      <param name="builder">Container builder.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
      <remarks>Factory delegates are provided automatically in Autofac 2,
            and this method is generally not required.</remarks>
    </member>
    <member name="M:Autofac.Builder.RegistrationExtensions.NamedParameterMapping``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
      <summary>
            Changes the parameter mapping mode of the supplied delegate type to match
            parameters by name.
            </summary>
      <typeparam name="TDelegate">Factory delegate type</typeparam>
      <typeparam name="TGeneratedFactoryActivatorData">Activator data type</typeparam>
      <typeparam name="TSingleRegistrationStyle">Registration style</typeparam>
      <param name="registration">Registration to change parameter mapping mode of.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationExtensions.PositionalParameterMapping``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
      <summary>
            Changes the parameter mapping mode of the supplied delegate type to match
            parameters by position.
            </summary>
      <typeparam name="TDelegate">Factory delegate type</typeparam>
      <typeparam name="TGeneratedFactoryActivatorData">Activator data type</typeparam>
      <typeparam name="TSingleRegistrationStyle">Registration style</typeparam>
      <param name="registration">Registration to change parameter mapping mode of.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationExtensions.TypedParameterMapping``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
      <summary>
            Changes the parameter mapping mode of the supplied delegate type to match
            parameters by type.
            </summary>
      <typeparam name="TDelegate">Factory delegate type</typeparam>
      <typeparam name="TGeneratedFactoryActivatorData">Activator data type</typeparam>
      <typeparam name="TSingleRegistrationStyle">Registration style</typeparam>
      <param name="registration">Registration to change parameter mapping mode of.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationExtensions.RegisterCollection(Autofac.ContainerBuilder,System.String,System.Type)">
      <summary>
            Registers the type as a collection. If no services or names are specified, the
            default services will be IList&lt;T&gt;, ICollection&lt;T&gt;, and IEnumerable&lt;T&gt;        
            </summary>
      <param name="elementType">The type of the collection elements.</param>
      <param name="builder">Container builder.</param>
      <param name="collectionName">A unique name for the collection that can be passed to MemberOf().</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
      <remarks>Collections are provided automatically in Autofac 2,
            and this method is generally not required.</remarks>
    </member>
    <member name="M:Autofac.Builder.RegistrationExtensions.RegisterCollection``1(Autofac.ContainerBuilder,System.String)">
      <summary>
            Registers the type as a collection. If no services or names are specified, the
            default services will be IList&lt;T&gt;, ICollection&lt;T&gt;, and IEnumerable&lt;T&gt;        
            </summary>
      <typeparam name="T">The type of the collection elements.</typeparam>
      <param name="builder">Container builder.</param>
      <param name="collectionName">A unique name for the collection that can be passed to MemberOf().</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
      <remarks>Collections are provided automatically in Autofac 2,
            and this method is generally not required.</remarks>
    </member>
    <member name="M:Autofac.Builder.RegistrationExtensions.MemberOf``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.String)">
      <summary>
            Include the element explicitly in a collection configured using RegisterCollection.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TSingleRegistrationStyle">Registration style.</typeparam>
      <typeparam name="TActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to export.</param>
      <param name="collectionName">The collection name, as passed to RegisterCollection.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="T:Autofac.ContainerBuilderResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.ContainerBuilderResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.ContainerBuilderResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.ContainerBuilderResources.BuildCanOnlyBeCalledOnce">
      <summary>
              Looks up a localized string similar to Build() or Update() can only be called once on a ContainerBuilder..
            </summary>
    </member>
    <member name="T:Autofac.Core.Activators.Delegate.DelegateActivatorResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Delegate.DelegateActivatorResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Delegate.DelegateActivatorResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Delegate.DelegateActivatorResources.NullFromActivationDelegateFor">
      <summary>
              Looks up a localized string similar to A delegate registered to create instances of '{0}' returned null..
            </summary>
    </member>
    <member name="T:Autofac.Core.Activators.Reflection.BindingFlagsConstructorFinderResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.BindingFlagsConstructorFinderResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.BindingFlagsConstructorFinderResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.BindingFlagsConstructorFinderResources.HasBindingFlags">
      <summary>
              Looks up a localized string similar to {0} binding flags.
            </summary>
    </member>
    <member name="T:Autofac.Core.Activators.Reflection.ConstructorParameterBindingResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.ConstructorParameterBindingResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.ConstructorParameterBindingResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.ConstructorParameterBindingResources.BoundConstructor">
      <summary>
              Looks up a localized string similar to Bound constructor '{0}'..
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.ConstructorParameterBindingResources.CannotInstantitate">
      <summary>
              Looks up a localized string similar to The binding cannot be instantiated..
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.ConstructorParameterBindingResources.ExceptionDuringInstantiation">
      <summary>
              Looks up a localized string similar to An exception was thrown while invoking the constructor '{0}' on type '{1}'..
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.ConstructorParameterBindingResources.NonBindableConstructor">
      <summary>
              Looks up a localized string similar to Cannot resolve parameter '{1}' of constructor '{0}'..
            </summary>
    </member>
    <member name="T:Autofac.Core.Parameter">
      <summary>
            Used in order to provide a value to a constructor parameter or property on an instance
            being created by the container.
            </summary>
      <remarks>
            Not all parameters can be applied to all sites.
            </remarks>
    </member>
    <member name="M:Autofac.Core.Parameter.CanSupplyValue(System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Func{System.Object}@)">
      <summary>
            Returns true if the parameter is able to provide a value to a particular site.
            </summary>
      <param name="pi">Constructor, method, or property-mutator parameter.</param>
      <param name="context">The component context in which the value is being provided.</param>
      <param name="valueProvider">If the result is true, the valueProvider parameter will
            be set to a function that will lazily retrieve the parameter value. If the result is false,
            will be set to null.</param>
      <returns>True if a value can be supplied; otherwise, false.</returns>
    </member>
    <member name="T:Autofac.Core.Activators.Reflection.DefaultValueParameter">
      <summary>
            Provides parameters that have a default value, set with an optional parameter
            declaration in C# or VB.
            </summary>
    </member>
    <member name="M:Autofac.Core.Activators.Reflection.DefaultValueParameter.CanSupplyValue(System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Func{System.Object}@)">
      <summary>
            Returns true if the parameter is able to provide a value to a particular site.
            </summary>
      <param name="pi">Constructor, method, or property-mutator parameter.</param>
      <param name="context">The component context in which the value is being provided.</param>
      <param name="valueProvider">If the result is true, the valueProvider parameter will
            be set to a function that will lazily retrieve the parameter value. If the result is false,
            will be set to null.</param>
      <returns>True if a value can be supplied; otherwise, false.</returns>
    </member>
    <member name="T:Autofac.Core.ContainerResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Core.ContainerResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Core.ContainerResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Core.ContainerResources.SelfRegistrationCannotBeActivated">
      <summary>
              Looks up a localized string similar to The container's self-registration of context interfaces should never be activated as it is hard-wired into the LifetimeScope class..
            </summary>
    </member>
    <member name="T:Autofac.Core.Diagnostics.IContainerAwareComponent">
      <summary>
            Marks a module as container-aware (for the purposes of attaching to diagnostic events.)
            </summary>
    </member>
    <member name="M:Autofac.Core.Diagnostics.IContainerAwareComponent.SetContainer(Autofac.IContainer)">
      <summary>
            Initialise the module with the container into which it is being registered.
            </summary>
      <param name="container">The container.</param>
    </member>
    <member name="T:Autofac.Core.IActivatedEventArgs`1">
      <summary>
            Fired when the activation process for a new instance is complete.
            </summary>
    </member>
    <member name="P:Autofac.Core.IActivatedEventArgs`1.Context">
      <summary>
            The context in which the activation occurred.
            </summary>
    </member>
    <member name="P:Autofac.Core.IActivatedEventArgs`1.Component">
      <summary>
            The component providing the instance.
            </summary>
    </member>
    <member name="P:Autofac.Core.IActivatedEventArgs`1.Parameters">
      <summary>
            The paramters provided when resolved.
            </summary>
    </member>
    <member name="P:Autofac.Core.IActivatedEventArgs`1.Instance">
      <summary>
            The instance that will be used to satisfy the request.
            </summary>
    </member>
    <member name="T:Autofac.Core.IActivatingEventArgs`1">
      <summary>
            Fired after the construction of an instance but before that instance
            is shared with any other or any members are invoked on it.
            </summary>
    </member>
    <member name="M:Autofac.Core.IActivatingEventArgs`1.ReplaceInstance(System.Object)">
      <summary>
            The instance can be replaced if needed, e.g. by an interface proxy.
            </summary>
      <param name="instance">The object to use instead of the activated instance.</param>
    </member>
    <member name="P:Autofac.Core.IActivatingEventArgs`1.Context">
      <summary>
            The context in which the activation occurred.
            </summary>
    </member>
    <member name="P:Autofac.Core.IActivatingEventArgs`1.Component">
      <summary>
            The component providing the instance.
            </summary>
    </member>
    <member name="P:Autofac.Core.IActivatingEventArgs`1.Instance">
      <summary>
            The instance that will be used to satisfy the request.
            </summary>
    </member>
    <member name="P:Autofac.Core.IActivatingEventArgs`1.Parameters">
      <summary>
            The parameters supplied to the activator.
            </summary>
    </member>
    <member name="T:Autofac.Core.IServiceWithType">
      <summary>
            Interface supported by services that carry type information.
            </summary>
    </member>
    <member name="M:Autofac.Core.IServiceWithType.ChangeType(System.Type)">
      <summary>
            Return a new service of the same kind, but carrying
            <paramref name="newType" /> as the <see cref="P:Autofac.Core.IServiceWithType.ServiceType" />.
            </summary>
      <param name="newType">The new service type.</param>
      <returns>A new service with the service type.</returns>
    </member>
    <member name="P:Autofac.Core.IServiceWithType.ServiceType">
      <summary>
            Gets the type of the service.
            </summary>
      <value>The type of the service.</value>
    </member>
    <member name="T:Autofac.Core.Service">
      <summary>
            Services are the lookup keys used to locate component instances.
            </summary>
    </member>
    <member name="M:Autofac.Core.Service.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Autofac.Core.Service.op_Equality(Autofac.Core.Service,Autofac.Core.Service)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="lhs">The LHS.</param>
      <param name="rhs">The RHS.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Autofac.Core.Service.op_Inequality(Autofac.Core.Service,Autofac.Core.Service)">
      <summary>
            Implements the operator !=.
            </summary>
      <param name="lhs">The LHS.</param>
      <param name="rhs">The RHS.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:Autofac.Core.Service.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception>
    </member>
    <member name="M:Autofac.Core.Service.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:Autofac.Core.Service.Description">
      <summary>
            Gets a human-readable description of the service.
            </summary>
      <value>The description.</value>
    </member>
    <member name="T:Autofac.Core.KeyedService">
      <summary>
            Identifies a service using a key in addition to its type.
            </summary>
    </member>
    <member name="M:Autofac.Core.KeyedService.#ctor(System.Object,System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.KeyedService" /> class.
            </summary>
      <param name="serviceKey">Key of the service.</param>
      <param name="serviceType">Type of the service.</param>
    </member>
    <member name="M:Autofac.Core.KeyedService.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception>
    </member>
    <member name="M:Autofac.Core.KeyedService.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Autofac.Core.KeyedService.ChangeType(System.Type)">
      <summary>
            Return a new service of the same kind, but carrying
            <paramref name="newType" /> as the <see cref="P:Autofac.Core.KeyedService.ServiceType" />.
            </summary>
      <param name="newType">The new service type.</param>
      <returns>A new service with the service type.</returns>
    </member>
    <member name="P:Autofac.Core.KeyedService.ServiceKey">
      <summary>
            Gets or sets the key of the service.
            </summary>
      <value>The key of the service.</value>
    </member>
    <member name="P:Autofac.Core.KeyedService.ServiceType">
      <summary>
            Gets the type of the service.
            </summary>
      <value>The type of the service.</value>
    </member>
    <member name="P:Autofac.Core.KeyedService.Description">
      <summary>
            Gets a human-readable description of the service.
            </summary>
      <value>The description.</value>
    </member>
    <member name="T:Autofac.Core.Lifetime.LifetimeScopeBeginningEventArgs">
      <summary>
            Describes when a lifetime scope is beginning.
            </summary>
    </member>
    <member name="M:Autofac.Core.Lifetime.LifetimeScopeBeginningEventArgs.#ctor(Autofac.ILifetimeScope)">
      <summary>
            Create an instance of the <see cref="T:Autofac.Core.Lifetime.LifetimeScopeBeginningEventArgs" /> class.
            </summary>
      <param name="lifetimeScope">The lifetime scope that is beginning.</param>
    </member>
    <member name="P:Autofac.Core.Lifetime.LifetimeScopeBeginningEventArgs.LifetimeScope">
      <summary>
            The lifetime scope that is beginning.
            </summary>
    </member>
    <member name="T:Autofac.Core.Lifetime.LifetimeScopeEndingEventArgs">
      <summary>
            Describes when a lifetime scope is ending.
            </summary>
    </member>
    <member name="M:Autofac.Core.Lifetime.LifetimeScopeEndingEventArgs.#ctor(Autofac.ILifetimeScope)">
      <summary>
            Create an instance of the <see cref="T:Autofac.Core.Lifetime.LifetimeScopeEndingEventArgs" /> class.
            </summary>
      <param name="lifetimeScope">The lifetime scope that is ending.</param>
    </member>
    <member name="P:Autofac.Core.Lifetime.LifetimeScopeEndingEventArgs.LifetimeScope">
      <summary>
            The lifetime scope that is ending.
            </summary>
    </member>
    <member name="T:Autofac.Core.Lifetime.LifetimeScopeResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Core.Lifetime.LifetimeScopeResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Lifetime.LifetimeScopeResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Lifetime.LifetimeScopeResources.ScopeIsDisposed">
      <summary>
              Looks up a localized string similar to Instances cannot be resolved and nested lifetimes cannot be created from this LifetimeScope as it has already been disposed..
            </summary>
    </member>
    <member name="T:Autofac.Core.RegistrationSourceAddedEventArgs">
      <summary>
            Fired when an <see cref="T:Autofac.Core.IRegistrationSource" /> is added to the registry.
            </summary>
    </member>
    <member name="M:Autofac.Core.RegistrationSourceAddedEventArgs.#ctor(Autofac.Core.IComponentRegistry,Autofac.Core.IRegistrationSource)">
      <summary>
            Construct an instance of the <see cref="T:Autofac.Core.RegistrationSourceAddedEventArgs" /> class.
            </summary>
      <param name="componentRegistry">The registry to which the source was added.</param>
      <param name="registrationSource">The source that was added.</param>
      <exception cref="T:System.ArgumentNullException">
      </exception>
    </member>
    <member name="P:Autofac.Core.RegistrationSourceAddedEventArgs.RegistrationSource">
      <summary>
            The registry to which the source was added.
            </summary>
    </member>
    <member name="P:Autofac.Core.RegistrationSourceAddedEventArgs.ComponentRegistry">
      <summary>
            The source that was added.
            </summary>
    </member>
    <member name="T:Autofac.Core.Resolving.IInstanceLookup">
      <summary>
            Represents the process of finding a component during a resolve operation.
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.IInstanceLookup.ComponentRegistration">
      <summary>
            The component for which an instance is to be looked up.
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.IInstanceLookup.ActivationScope">
      <summary>
            The scope in which the instance will be looked up.
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.IInstanceLookup.Parameters">
      <summary>
            The parameters provided for new instance creation.
            </summary>
    </member>
    <member name="E:Autofac.Core.Resolving.IInstanceLookup.InstanceLookupEnding">
      <summary>
            Raised when the lookup phase of the operation is ending.
            </summary>
    </member>
    <member name="E:Autofac.Core.Resolving.IInstanceLookup.CompletionBeginning">
      <summary>
            Raised when the completion phase of an instance lookup operation begins.
            </summary>
    </member>
    <member name="E:Autofac.Core.Resolving.IInstanceLookup.CompletionEnding">
      <summary>
            Raised when the completion phase of an instance lookup operation ends.
            </summary>
    </member>
    <member name="T:Autofac.Core.Resolving.InstanceLookupCompletionBeginningEventArgs">
      <summary>
            Raised when the completion phase of an instance lookup operation begins.
            </summary>
    </member>
    <member name="M:Autofac.Core.Resolving.InstanceLookupCompletionBeginningEventArgs.#ctor(Autofac.Core.Resolving.IInstanceLookup)">
      <summary>
            Create an instance of the <see cref="T:Autofac.Core.Resolving.InstanceLookupCompletionBeginningEventArgs" /> class.
            </summary>
      <param name="instanceLookup">The instance lookup that is beginning the completion phase.</param>
    </member>
    <member name="P:Autofac.Core.Resolving.InstanceLookupCompletionBeginningEventArgs.InstanceLookup">
      <summary>
            The instance lookup operation that is beginning the completion phase.
            </summary>
    </member>
    <member name="T:Autofac.Core.Resolving.InstanceLookupCompletionEndingEventArgs">
      <summary>
            Raised when the completion phase of an instance lookup operation ends.
            </summary>
    </member>
    <member name="M:Autofac.Core.Resolving.InstanceLookupCompletionEndingEventArgs.#ctor(Autofac.Core.Resolving.IInstanceLookup)">
      <summary>
            Create an instance of the <see cref="T:Autofac.Core.Resolving.InstanceLookupCompletionEndingEventArgs" /> class.
            </summary>
      <param name="instanceLookup">The instance lookup that is ending the completion phase.</param>
    </member>
    <member name="P:Autofac.Core.Resolving.InstanceLookupCompletionEndingEventArgs.InstanceLookup">
      <summary>
            The instance lookup operation that is ending the completion phase.
            </summary>
    </member>
    <member name="T:Autofac.Core.Resolving.InstanceLookupEndingEventArgs">
      <summary>
            Fired when an instance is looked up.
            </summary>
    </member>
    <member name="M:Autofac.Core.Resolving.InstanceLookupEndingEventArgs.#ctor(Autofac.Core.Resolving.IInstanceLookup,System.Boolean)">
      <summary>
            Create an instance of the <see cref="T:Autofac.Core.Resolving.InstanceLookupBeginningEventArgs" /> class.
            </summary>
      <param name="instanceLookup">The instance lookup that is ending.</param>
      <param name="newInstanceActivated">True if a new instance was created as part of the operation.</param>
    </member>
    <member name="P:Autofac.Core.Resolving.InstanceLookupEndingEventArgs.NewInstanceActivated">
      <summary>
            True if a new instance was created as part of the operation.
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.InstanceLookupEndingEventArgs.InstanceLookup">
      <summary>
            The instance lookup operation that is ending.
            </summary>
    </member>
    <member name="T:Autofac.Core.Resolving.InstanceLookupBeginningEventArgs">
      <summary>
            Fired when instance lookup is complete.
            </summary>
    </member>
    <member name="M:Autofac.Core.Resolving.InstanceLookupBeginningEventArgs.#ctor(Autofac.Core.Resolving.IInstanceLookup)">
      <param name="instanceLookup">The instance lookup that is ending.</param>
    </member>
    <member name="P:Autofac.Core.Resolving.InstanceLookupBeginningEventArgs.InstanceLookup">
      <summary>
            The instance lookup operation that is beginning.
            </summary>
    </member>
    <member name="T:Autofac.Core.Resolving.ResolveOperationBeginningEventArgs">
      <summary>
            Describes the commencement of a new resolve operation.
            </summary>
    </member>
    <member name="M:Autofac.Core.Resolving.ResolveOperationBeginningEventArgs.#ctor(Autofac.Core.Resolving.IResolveOperation)">
      <summary>
            Create an instance of the <see cref="T:Autofac.Core.Resolving.ResolveOperationBeginningEventArgs" /> class.
            </summary>
      <param name="resolveOperation">The resolve operation that is beginning.</param>
    </member>
    <member name="P:Autofac.Core.Resolving.ResolveOperationBeginningEventArgs.ResolveOperation">
      <summary>
            The resolve operation that is beginning.
            </summary>
    </member>
    <member name="T:Autofac.Util.Disposable">
      <summary>
            Base class for disposable objects.
            </summary>
    </member>
    <member name="M:Autofac.Util.Disposable.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Autofac.Util.Disposable.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:Autofac.Util.Disposable.IsDisposed">
      <summary>
            Returns true if the current instance has been disposed; otherwise false;
            </summary>
    </member>
    <member name="T:Autofac.Core.IComponentRegistration">
      <summary>
            Describes a logical component within the container.
            </summary>
    </member>
    <member name="M:Autofac.Core.IComponentRegistration.RaisePreparing(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter}@)">
      <summary>
            Called by the container when an instance is required.
            </summary>
      <param name="context">The context in which the instance will be activated.</param>
      <param name="parameters">Parameters for activation. These may be modified by the event handler.</param>
    </member>
    <member name="M:Autofac.Core.IComponentRegistration.RaiseActivating(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object@)">
      <summary>
            Called by the container once an instance has been constructed.
            </summary>
      <param name="context">The context in which the instance was activated.</param>
      <param name="parameters">The parameters supplied to the activator.</param>
      <param name="instance">The instance.</param>
    </member>
    <member name="M:Autofac.Core.IComponentRegistration.RaiseActivated(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object)">
      <summary>
            Called by the container once an instance has been fully constructed, including
            any requested objects that depend on the instance.
            </summary>
      <param name="context">The context in which the instance was activated.</param>
      <param name="parameters">The parameters supplied to the activator.</param>
      <param name="instance">The instance.</param>
    </member>
    <member name="P:Autofac.Core.IComponentRegistration.Id">
      <summary>
            A unique identifier for this component (shared in all sub-contexts.)
            This value also appears in Services.
            </summary>
    </member>
    <member name="P:Autofac.Core.IComponentRegistration.Activator">
      <summary>
            The activator used to create instances.
            </summary>
    </member>
    <member name="P:Autofac.Core.IComponentRegistration.Lifetime">
      <summary>
            The lifetime associated with the component.
            </summary>
    </member>
    <member name="P:Autofac.Core.IComponentRegistration.Sharing">
      <summary>
            Whether the component instances are shared or not.
            </summary>
    </member>
    <member name="P:Autofac.Core.IComponentRegistration.Ownership">
      <summary>
            Whether the instances of the component should be disposed by the container.
            </summary>
    </member>
    <member name="P:Autofac.Core.IComponentRegistration.Services">
      <summary>
            The services provided by the component.
            </summary>
    </member>
    <member name="P:Autofac.Core.IComponentRegistration.Metadata">
      <summary>
            Additional data associated with the component.
            </summary>
    </member>
    <member name="P:Autofac.Core.IComponentRegistration.Target">
      <summary>
            The component registration upon which this registration is based.
            </summary>
    </member>
    <member name="E:Autofac.Core.IComponentRegistration.Preparing">
      <summary>
            Fired when a new instance is required. The instance can be
            provided in order to skip the regular activator, by setting the Instance property in
            the provided event arguments.
            </summary>
    </member>
    <member name="E:Autofac.Core.IComponentRegistration.Activating">
      <summary>
            Fired when a new instance is being activated. The instance can be
            wrapped or switched at this time by setting the Instance property in
            the provided event arguments.
            </summary>
    </member>
    <member name="E:Autofac.Core.IComponentRegistration.Activated">
      <summary>
            Fired when the activation process for a new instance is complete.
            </summary>
    </member>
    <member name="T:Autofac.Core.Registration.ComponentRegistrationLifetimeDecorator">
      <summary>
            Wraps a component registration, switching its lifetime.
            </summary>
    </member>
    <member name="T:Autofac.Core.Registration.ComponentRegistrationResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentRegistrationResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentRegistrationResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentRegistrationResources.ToStringFormat">
      <summary>
              Looks up a localized string similar to Activator = {0}, Services = [{1}], Lifetime = {2}, Sharing = {3}, Ownership = {4}.
            </summary>
    </member>
    <member name="T:Autofac.Core.Registration.ExternalRegistrySource">
      <summary>
            Pulls registrations from another component registry.
            Excludes most auto-generated registrations - currently has issues with
            collection registrations.
            </summary>
    </member>
    <member name="M:Autofac.Core.Registration.ExternalRegistrySource.#ctor(Autofac.Core.IComponentRegistry)">
      <summary>
            Create an external registry source that draws components from
            <paramref name="registry" />.
            </summary>
      <param name="registry">Component registry to pull registrations from.</param>
    </member>
    <member name="M:Autofac.Core.Registration.ExternalRegistrySource.RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.IComponentRegistration}})">
      <summary>
            Retrieve registrations for an unregistered service, to be used
            by the container.
            </summary>
      <param name="service">The service that was requested.</param>
      <param name="registrationAccessor">A function that will return existing registrations for a service.</param>
      <returns>Registrations providing the service.</returns>
    </member>
    <member name="P:Autofac.Core.Registration.ExternalRegistrySource.IsAdapterForIndividualComponents">
      <summary>
            In this case because the components that are adapted do not come from the same
            logical scope, we must return false to avoid duplicating them.
            </summary>
    </member>
    <member name="T:Autofac.Core.Registration.ComponentRegistry">
      <summary>
            Maps services onto the components that provide them.
            </summary>
      <remarks>
            The component registry provides services directly from components,
            and also uses <see cref="T:Autofac.Core.IRegistrationSource" /> to generate components
            on-the-fly or as adapters for other components. A component registry
            is normally used through a <see cref="T:Autofac.ContainerBuilder" />, and not
            directly by application code.
            </remarks>
    </member>
    <member name="F:Autofac.Core.Registration.ComponentRegistry._synchRoot">
      <summary>
            Protects instance variables from concurrent access.
            </summary>
    </member>
    <member name="F:Autofac.Core.Registration.ComponentRegistry._dynamicRegistrationSources">
      <summary>
            External registration sources.
            </summary>
    </member>
    <member name="F:Autofac.Core.Registration.ComponentRegistry._registrations">
      <summary>
            All registrations.
            </summary>
    </member>
    <member name="F:Autofac.Core.Registration.ComponentRegistry._serviceInfo">
      <summary>
            Keeps track of the status of registered services.
            </summary>
    </member>
    <member name="M:Autofac.Core.Registration.ComponentRegistry.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:Autofac.Core.Registration.ComponentRegistry.TryGetRegistration(Autofac.Core.Service,Autofac.Core.IComponentRegistration@)">
      <summary>
            Attempts to find a default registration for the specified service.
            </summary>
      <param name="service">The service to look up.</param>
      <param name="registration">The default registration for the service.</param>
      <returns>True if a registration exists.</returns>
    </member>
    <member name="M:Autofac.Core.Registration.ComponentRegistry.IsRegistered(Autofac.Core.Service)">
      <summary>
            Determines whether the specified service is registered.
            </summary>
      <param name="service">The service to test.</param>
      <returns>True if the service is registered.</returns>
    </member>
    <member name="M:Autofac.Core.Registration.ComponentRegistry.Register(Autofac.Core.IComponentRegistration)">
      <summary>
            Register a component.
            </summary>
      <param name="registration">The component registration.</param>
    </member>
    <member name="M:Autofac.Core.Registration.ComponentRegistry.Register(Autofac.Core.IComponentRegistration,System.Boolean)">
      <summary>
            Register a component.
            </summary>
      <param name="registration">The component registration.</param>
      <param name="preserveDefaults">If true, existing defaults for the services provided by the
            component will not be changed.</param>
    </member>
    <member name="M:Autofac.Core.Registration.ComponentRegistry.RegistrationsFor(Autofac.Core.Service)">
      <summary>
            Selects from the available registrations after ensuring that any
            dynamic registration sources that may provide <paramref name="service" />
            have been invoked.
            </summary>
      <param name="service">The service for which registrations are sought.</param>
      <returns>Registrations supporting <paramref name="service" />.</returns>
    </member>
    <member name="M:Autofac.Core.Registration.ComponentRegistry.AddRegistrationSource(Autofac.Core.IRegistrationSource)">
      <summary>
            Add a registration source that will provide registrations on-the-fly.
            </summary>
      <param name="source">The source to register.</param>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentRegistry.Registrations">
      <summary>
            Enumerate the registered components.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentRegistry.Sources">
      <summary>
            Gets the registration sources that are used by the registry.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentRegistry.HasLocalComponents">
      <summary>
            True if the registry contains its own components; false if it is forwarding
            registrations from another external registry.
            </summary>
      <remarks>This property is used when walking up the scope tree looking for
            registrations for a new customised scope. (See issue 336.)</remarks>
    </member>
    <member name="E:Autofac.Core.Registration.ComponentRegistry.Registered">
      <summary>
            Fired whenever a component is registered - either explicitly or via a
            <see cref="T:Autofac.Core.IRegistrationSource" />.
            </summary>
    </member>
    <member name="E:Autofac.Core.Registration.ComponentRegistry.RegistrationSourceAdded">
      <summary>
            Fired when an <see cref="T:Autofac.Core.IRegistrationSource" /> is added to the registry.
            </summary>
    </member>
    <member name="T:Autofac.Core.Registration.ScopeRestrictedRegistry">
      <summary>
            Switches components with a RootScopeLifetime (singletons) with
            decorators exposing MatchingScopeLifetime targeting the specified scope.
            </summary>
    </member>
    <member name="T:Autofac.Core.Registration.ServiceRegistrationInfo">
      <summary>
            Tracks the services known to the registry.
            </summary>
    </member>
    <member name="F:Autofac.Core.Registration.ServiceRegistrationInfo._sourcesToQuery">
      <summary>
            Used for bookkeeping so that the same source is not queried twice (may be null.)
            </summary>
    </member>
    <member name="M:Autofac.Core.Registration.ServiceRegistrationInfo.#ctor(Autofac.Core.Service)">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.ServiceRegistrationInfo" /> class.
            </summary>
      <param name="service">The tracked service.</param>
    </member>
    <member name="P:Autofac.Core.Registration.ServiceRegistrationInfo.IsInitialized">
      <summary>
            The first time a service is requested, initialization (e.g. reading from sources)
            happens. This value will then be set to true. Calling many methods on this type before
            initialisation is an error.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ServiceRegistrationInfo.Implementations">
      <summary>
            The known implementations.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ServiceRegistrationInfo.IsRegistered">
      <summary>
            True if any implementations are known.
            </summary>
    </member>
    <member name="T:Autofac.Core.Registration.ServiceRegistrationInfoResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ServiceRegistrationInfoResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ServiceRegistrationInfoResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ServiceRegistrationInfoResources.NotDuringInitialisation">
      <summary>
              Looks up a localized string similar to The operation is only valid during intialisation..
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ServiceRegistrationInfoResources.NotInitialised">
      <summary>
              Looks up a localized string similar to The operation is not valid until the object is initalised..
            </summary>
    </member>
    <member name="T:Autofac.Core.Resolving.ComponentActivationResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.ComponentActivationResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.ComponentActivationResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.ComponentActivationResources.ActivationAlreadyExecuted">
      <summary>
              Looks up a localized string similar to The activation has already been executed..
            </summary>
    </member>
    <member name="T:Autofac.Core.Resolving.ResolveOperationEndingEventArgs">
      <summary>
            Describes the commencement of a new resolve operation.
            </summary>
    </member>
    <member name="M:Autofac.Core.Resolving.ResolveOperationEndingEventArgs.#ctor(Autofac.Core.Resolving.IResolveOperation,System.Exception)">
      <summary>
            Create an instance of the <see cref="T:Autofac.Core.Resolving.ResolveOperationBeginningEventArgs" /> class.
            </summary>
      <param name="resolveOperation">The resolve operation that is ending.</param>
      <param name="exception">If included, the exception causing the operation to end; otherwise, null.</param>
    </member>
    <member name="P:Autofac.Core.Resolving.ResolveOperationEndingEventArgs.Exception">
      <summary>
            The exception causing the operation to end, or null.
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.ResolveOperationEndingEventArgs.ResolveOperation">
      <summary>
            The resolve operation that is ending.
            </summary>
    </member>
    <member name="T:Autofac.Core.ServiceResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Core.ServiceResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Core.ServiceResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Core.ServiceResources.MustOverrideEquals">
      <summary>
              Looks up a localized string similar to Subclasses of Autofac.Service must override Object.Equals().
            </summary>
    </member>
    <member name="P:Autofac.Core.ServiceResources.MustOverrideGetHashCode">
      <summary>
              Looks up a localized string similar to Subclasses of Autofac.Service must override Object.GetHashCode().
            </summary>
    </member>
    <member name="T:Autofac.Features.Collections.CollectionRegistrationSourceResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Features.Collections.CollectionRegistrationSourceResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Features.Collections.CollectionRegistrationSourceResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Features.Collections.CollectionRegistrationSourceResources.CollectionRegistrationSourceDescription">
      <summary>
              Looks up a localized string similar to Collection Support (Arrays and Generic Collection Interfaces).
            </summary>
    </member>
    <member name="T:Autofac.Features.LazyDependencies.LazyRegistrationSourceResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Features.LazyDependencies.LazyRegistrationSourceResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Features.LazyDependencies.LazyRegistrationSourceResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Features.LazyDependencies.LazyRegistrationSourceResources.LazyRegistrationSourceDescription">
      <summary>
              Looks up a localized string similar to Lazy&lt;T&gt; Support.
            </summary>
    </member>
    <member name="P:Autofac.Features.LazyDependencies.LazyRegistrationSourceResources.LazyWithMetadataRegistrationSourceDescription">
      <summary>
              Looks up a localized string similar to Lazy&lt;T, TMetadata&gt; Support.
            </summary>
    </member>
    <member name="T:Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData">
      <summary>
            Describes the basic requirements for generating a lightweight adapter.
            </summary>
    </member>
    <member name="M:Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData.#ctor(Autofac.Core.Service,System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object,System.Object})">
      <summary>
            Create an instance of <see cref="T:Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData" />.
            </summary>
      <param name="fromService">The service that will be adapted from.</param>
      <param name="adapter">The adapter function.</param>
    </member>
    <member name="P:Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData.Adapter">
      <summary>
            The adapter function.
            </summary>
    </member>
    <member name="P:Autofac.Features.LightweightAdapters.LightweightAdapterActivatorData.FromService">
      <summary>
            The service to be adapted from.
            </summary>
    </member>
    <member name="T:Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationSourceResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationSourceResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationSourceResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationSourceResources.AdapterFromToDescription">
      <summary>
              Looks up a localized string similar to Lightweight Adapter from {0} to {1}.
            </summary>
    </member>
    <member name="P:Autofac.Features.LightweightAdapters.LightweightAdapterRegistrationSourceResources.FromAndToMustDiffer">
      <summary>
              Looks up a localized string similar to The service {0} cannot be both the adapter's from and to parameters - these must differ..
            </summary>
    </member>
    <member name="T:Autofac.Features.Collections.CollectionRegistrationExtensions">
      <summary>
            Internal implementation of the RegisterCollection/MemberOf-style collection feature.
            </summary>
    </member>
    <member name="T:Autofac.Builder.DynamicRegistrationStyle">
      <summary>
            Registration style for dynamic registrations.
            </summary>
    </member>
    <member name="T:Autofac.Features.GeneratedFactories.GeneratedFactoryActivatorData">
      <summary>
            Data used to create factory activators.
            </summary>
    </member>
    <member name="M:Autofac.Features.GeneratedFactories.GeneratedFactoryActivatorData.#ctor(System.Type,Autofac.Core.Service)">
      <summary>
            Create a new GeneratedFactoryActivatorData
            </summary>
      <param name="delegateType">The type of the factory.</param>
      <param name="productService">The service used to provide the products of the factory.</param>
    </member>
    <member name="P:Autofac.Features.GeneratedFactories.GeneratedFactoryActivatorData.ParameterMapping">
      <summary>
            Determines how the parameters of the delegate type are passed on
            to the generated Resolve() call as Parameter objects.
            For Func-based delegates, this defaults to ByType. Otherwise, the
            parameters will be mapped by name.
            </summary>
    </member>
    <member name="P:Autofac.Features.GeneratedFactories.GeneratedFactoryActivatorData.Activator">
      <summary>
            Activator data that can provide an IInstanceActivator instance.
            </summary>
    </member>
    <member name="T:Autofac.Builder.IHideObjectMembers">
      <summary>
            Hides standard Object members to make fluent interfaces
            easier to read.
            Based on blog post by @kzu here:
            http://www.clariusconsulting.net/blogs/kzu/archive/2008/03/10/58301.aspx
            </summary>
    </member>
    <member name="M:Autofac.Builder.IHideObjectMembers.GetType">
      <summary>
            Standard System.Object member.
            </summary>
      <returns>Standard result.</returns>
    </member>
    <member name="M:Autofac.Builder.IHideObjectMembers.GetHashCode">
      <summary>
            Standard System.Object member.
            </summary>
      <returns>Standard result.</returns>
    </member>
    <member name="M:Autofac.Builder.IHideObjectMembers.ToString">
      <summary>
            Standard System.Object member.
            </summary>
      <returns>Standard result.</returns>
    </member>
    <member name="M:Autofac.Builder.IHideObjectMembers.Equals(System.Object)">
      <summary>
            Standard System.Object member.
            </summary>
      <param name="other">The other.</param>
      <returns>Standard result.</returns>
    </member>
    <member name="T:Autofac.Features.GeneratedFactories.ParameterMapping">
      <summary>
            Determines how the parameters of the delegate type are passed on
            to the generated Resolve() call as Parameter objects.
            </summary>
    </member>
    <member name="F:Autofac.Features.GeneratedFactories.ParameterMapping.Adaptive">
      <summary>
            Chooses parameter mapping based on the factory type.
            For Func-based factories this is equivalent to ByType, for all
            others ByName will be used.
            </summary>
    </member>
    <member name="F:Autofac.Features.GeneratedFactories.ParameterMapping.ByName">
      <summary>
            Pass the parameters supplied to the delegate through to the
            underlying registration as NamedParameters based on the parameter
            names in the delegate type's formal argument list.
            </summary>
    </member>
    <member name="F:Autofac.Features.GeneratedFactories.ParameterMapping.ByType">
      <summary>
            Pass the parameters supplied to the delegate through to the
            underlying registration as TypedParameters based on the parameter
            types in the delegate type's formal argument list.
            </summary>
    </member>
    <member name="F:Autofac.Features.GeneratedFactories.ParameterMapping.ByPosition">
      <summary>
            Pass the parameters supplied to the delegate through to the
            underlying registration as PositionalParameters based on the parameter
            indices in the delegate type's formal argument list.
            </summary>
    </member>
    <member name="T:Autofac.Features.Indexed.IIndex`2">
      <summary>
            Provides components by lookup operations via an index (key) type.
            </summary>
      <typeparam name="TKey">The type of the index.</typeparam>
      <typeparam name="TValue">The service provided by the indexed components.</typeparam>
      <example>
            Retrieving a value given a key:
            <code>
            IIndex&lt;AccountType, IRenderer&gt; accountRenderers = // ...
            var renderer = accountRenderers[AccountType.User];
            </code></example>
    </member>
    <member name="M:Autofac.Features.Indexed.IIndex`2.TryGetValue(`0,`1@)">
      <summary>
            Get the value associated with <paramref name="key" /> if any is available.
            </summary>
      <param name="key">The key to look up.</param>
      <param name="value">The retrieved value.</param>
      <returns>True if a value associated with the key exists.</returns>
    </member>
    <member name="P:Autofac.Features.Indexed.IIndex`2.Item(`0)">
      <summary>
            Get the value associated with <paramref name="key" />.
            </summary>
      <param name="key">The value to retrieve.</param>
      <returns>The associated value.</returns>
    </member>
    <member name="M:Autofac.Features.Indexed.KeyedServiceIndex`2.#ctor(Autofac.IComponentContext)">
      <summary>
      </summary>
    </member>
    <member name="M:Autofac.Features.Indexed.KeyedServiceIndex`2.TryGetValue(`0,`1@)">
      <summary>
      </summary>
    </member>
    <member name="P:Autofac.Features.Indexed.KeyedServiceIndex`2.Item(`0)">
      <summary>
      </summary>
    </member>
    <member name="T:Autofac.Features.Metadata.MetaRegistrationSource">
      <summary>
            Support the <see cref="T:Autofac.Features.Metadata.Meta`1" />
            types automatically whenever type T is registered with the container.
            Metadata values come from the component registration's metadata.
            </summary>
    </member>
    <member name="T:Autofac.Features.Metadata.Meta`1">
      <summary>
            Provides a value along with a dictionary of metadata describing the value.
            </summary>
      <typeparam name="T">The type of the value.</typeparam>
    </member>
    <member name="M:Autofac.Features.Metadata.Meta`1.#ctor(`0,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Create a new instance.
            </summary>
      <param name="value">The value described by the instance.</param>
      <param name="metadata">The metadata describing the value.</param>
    </member>
    <member name="P:Autofac.Features.Metadata.Meta`1.Value">
      <summary>
            The value described by <see cref="P:Autofac.Features.Metadata.Meta`1.Metadata" />.
            </summary>
    </member>
    <member name="P:Autofac.Features.Metadata.Meta`1.Metadata">
      <summary>
            Metadata describing the value.
            </summary>
    </member>
    <member name="T:Autofac.Features.Metadata.MetaRegistrationSourceResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Features.Metadata.MetaRegistrationSourceResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Features.Metadata.MetaRegistrationSourceResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Features.Metadata.MetaRegistrationSourceResources.MetaRegistrationSourceDescription">
      <summary>
              Looks up a localized string similar to Meta&lt;T&gt; Support.
            </summary>
    </member>
    <member name="P:Autofac.Features.Metadata.MetaRegistrationSourceResources.StronglyTypedMetaRegistrationSourceDescription">
      <summary>
              Looks up a localized string similar to Meta&lt;T, TMetadata&gt; Support.
            </summary>
    </member>
    <member name="T:Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorDataResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorDataResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorDataResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorDataResources.DecoratedServiceIsNotOpenGeneric">
      <summary>
              Looks up a localized string similar to The service '{0}' is not an open generic type..
            </summary>
    </member>
    <member name="T:Autofac.Features.OpenGenerics.OpenGenericRegistrationSourceResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericRegistrationSourceResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericRegistrationSourceResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericRegistrationSourceResources.OpenGenericRegistrationSourceDescription">
      <summary>
              Looks up a localized string similar to {0} providing {1}.
            </summary>
    </member>
    <member name="T:Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorData">
      <summary>
            Describes the activator for an open generic decorator.
            </summary>
    </member>
    <member name="M:Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorData.#ctor(System.Type,Autofac.Core.IServiceWithType)">
      <summary>
            Construct an <see cref="T:Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorData" />.
            </summary>
      <param name="implementor">The decorator type.</param>
      <param name="fromService">The open generic service type to decorate.</param>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericDecoratorActivatorData.FromService">
      <summary>
            The open generic service type to decorate.
            </summary>
    </member>
    <member name="T:Autofac.Features.OpenGenerics.OpenGenericDecoratorRegistrationSourceResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericDecoratorRegistrationSourceResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericDecoratorRegistrationSourceResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericDecoratorRegistrationSourceResources.FromAndToMustDiffer">
      <summary>
              Looks up a localized string similar to The service {0} cannot be both the adapter's from and to parameters - these must differ..
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericDecoratorRegistrationSourceResources.OpenGenericDecoratorRegistrationSourceImplFromTo">
      <summary>
              Looks up a localized string similar to Open Generic Decorator {0} from {1} to {2}.
            </summary>
    </member>
    <member name="T:Autofac.Features.OpenGenerics.OpenGenericRegistrationExtensionsResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericRegistrationExtensionsResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericRegistrationExtensionsResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericRegistrationExtensionsResources.ImplementorMustBeOpenGenericType">
      <summary>
              Looks up a localized string similar to The type {0} is not an open generic type definition..
            </summary>
    </member>
    <member name="T:Autofac.Features.OpenGenerics.OpenGenericServiceBinderResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericServiceBinderResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericServiceBinderResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericServiceBinderResources.ImplementorMustBeOpenGenericTypeDefinition">
      <summary>
              Looks up a localized string similar to The implementation type '{0}' is not an open generic type definition..
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericServiceBinderResources.InterfaceIsNotImplemented">
      <summary>
              Looks up a localized string similar to The implementation type '{0}' does not support the interface '{1}'..
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericServiceBinderResources.ServiceTypeMustBeOpenGenericTypeDefinition">
      <summary>
              Looks up a localized string similar to The service '{0}' is not an open generic type definition..
            </summary>
    </member>
    <member name="P:Autofac.Features.OpenGenerics.OpenGenericServiceBinderResources.TypesAreNotConvertible">
      <summary>
              Looks up a localized string similar to The service '{1}' is not assignable from implementation type '{0}'..
            </summary>
    </member>
    <member name="T:Autofac.Features.OwnedInstances.OwnedInstanceRegistrationSourceResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Features.OwnedInstances.OwnedInstanceRegistrationSourceResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Features.OwnedInstances.OwnedInstanceRegistrationSourceResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Features.OwnedInstances.OwnedInstanceRegistrationSourceResources.OwnedInstanceRegistrationSourceDescription">
      <summary>
              Looks up a localized string similar to Owned&lt;T&gt; Support.
            </summary>
    </member>
    <member name="T:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource">
      <summary>
            Provides registrations on-the-fly for any concrete type not already registered with
            the container.
            </summary>
    </member>
    <member name="M:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource" /> class.
            </summary>
    </member>
    <member name="M:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource.#ctor(System.Func{System.Type,System.Boolean})">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource" /> class.
            </summary>
      <param name="predicate">A predicate that selects types the source will register.</param>
    </member>
    <member name="M:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource.RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.IComponentRegistration}})">
      <summary>
            Retrieve registrations for an unregistered service, to be used
            by the container.
            </summary>
      <param name="service">The service that was requested.</param>
      <param name="registrationAccessor">A function that will return existing registrations for a service.</param>
      <returns>Registrations providing the service.</returns>
    </member>
    <member name="M:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSource.IsAdapterForIndividualComponents">
      <summary>
            Gets whether the registrations provided by this source are 1:1 adapters on top
            of other components (I.e. like Meta, Func or Owned.)
            </summary>
    </member>
    <member name="T:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSourceResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSourceResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSourceResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Features.ResolveAnything.AnyConcreteTypeNotAlreadyRegisteredSourceResources.AnyConcreteTypeNotAlreadyRegisteredSourceDescription">
      <summary>
              Looks up a localized string similar to "Resolve Anything" Support.
            </summary>
    </member>
    <member name="T:Autofac.Features.Scanning.ScanningActivatorData">
      <summary>
            Activation data for types located by scanning assemblies.
            </summary>
    </member>
    <member name="M:Autofac.Features.Scanning.ScanningActivatorData.#ctor">
      <summary>
            Create an instance of <see cref="T:Autofac.Features.Scanning.ScanningActivatorData" />.
            </summary>
    </member>
    <member name="P:Autofac.Features.Scanning.ScanningActivatorData.Filters">
      <summary>
            The filters applied to the types from the scanned assembly.
            </summary>
    </member>
    <member name="P:Autofac.Features.Scanning.ScanningActivatorData.ConfigurationActions">
      <summary>
            Additional actions to be performed on the concrete type registrations.
            </summary>
    </member>
    <member name="P:Autofac.Features.Scanning.ScanningActivatorData.PostScanningCallbacks">
      <summary>
            Actions to be called once the scanning operation is complete.
            </summary>
    </member>
    <member name="T:Autofac.Core.ActivatedEventArgs`1">
      <summary>
            Fired when the activation process for a new instance is complete.
            </summary>
    </member>
    <member name="M:Autofac.Core.ActivatedEventArgs`1.#ctor(Autofac.IComponentContext,Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},`0)">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.ActivatedEventArgs`1" /> class.
            </summary>
      <param name="context">The context.</param>
      <param name="component">The component.</param>
      <param name="parameters">The parameters.</param>
      <param name="instance">The instance.</param>
    </member>
    <member name="P:Autofac.Core.ActivatedEventArgs`1.Context">
      <summary>
            The context in which the activation occurred.
            </summary>
    </member>
    <member name="P:Autofac.Core.ActivatedEventArgs`1.Component">
      <summary>
            The component providing the instance.
            </summary>
    </member>
    <member name="P:Autofac.Core.ActivatedEventArgs`1.Parameters">
      <summary>
            The paramters provided when resolved.
            </summary>
    </member>
    <member name="P:Autofac.Core.ActivatedEventArgs`1.Instance">
      <summary>
            The instance that will be used to satisfy the request.
            </summary>
    </member>
    <member name="T:Autofac.Core.ActivatingEventArgs`1">
      <summary>
            Fired after the construction of an instance but before that instance
            is shared with any other or any members are invoked on it.
            </summary>
    </member>
    <member name="M:Autofac.Core.ActivatingEventArgs`1.#ctor(Autofac.IComponentContext,Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},`0)">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.ActivatedEventArgs`1" /> class.
            </summary>
      <param name="context">The context.</param>
      <param name="component">The component.</param>
      <param name="parameters">The parameters.</param>
      <param name="instance">The instance.</param>
    </member>
    <member name="P:Autofac.Core.ActivatingEventArgs`1.Context">
      <summary>
            The context in which the activation occurred.
            </summary>
    </member>
    <member name="P:Autofac.Core.ActivatingEventArgs`1.Component">
      <summary>
            The component providing the instance.
            </summary>
    </member>
    <member name="P:Autofac.Core.ActivatingEventArgs`1.Instance">
      <summary>
            The instance that will be used to satisfy the request.
            </summary>
      <remarks>
            The instance can be replaced if needed, e.g. by an interface proxy.
            </remarks>
    </member>
    <member name="P:Autofac.Core.ActivatingEventArgs`1.Parameters">
      <summary>
            The parameters supplied to the activator.
            </summary>
    </member>
    <member name="T:Autofac.Core.Activators.InstanceActivator">
      <summary>
            Base class for instance activators.
            </summary>
    </member>
    <member name="M:Autofac.Core.Activators.InstanceActivator.#ctor(System.Type)">
      <summary>
            Create an instance activator that will return instances compatible
            with <paramref name="limitType" />.
            </summary>
      <param name="limitType">Most derived type to which instances can be cast.</param>
    </member>
    <member name="M:Autofac.Core.Activators.InstanceActivator.ToString">
      <summary>
            Gets a string representation of the activator.
            </summary>
      <returns>A string describing the activator.</returns>
    </member>
    <member name="P:Autofac.Core.Activators.InstanceActivator.LimitType">
      <summary>
            The most specific type that the component instances are known to be castable to.
            </summary>
    </member>
    <member name="T:Autofac.Core.IInstanceActivator">
      <summary>
            Activates component instances.
            </summary>
    </member>
    <member name="M:Autofac.Core.IInstanceActivator.ActivateInstance(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Activate an instance in the provided context.
            </summary>
      <param name="context">Context in which to activate instances.</param>
      <param name="parameters">Parameters to the instance.</param>
      <returns>The activated instance.</returns>
      <remarks>
            The context parameter here should probably be ILifetimeScope in order to reveal Disposer,
            but will wait until implementing a concrete use case to make the decision
            </remarks>
    </member>
    <member name="P:Autofac.Core.IInstanceActivator.LimitType">
      <summary>
            The most specific type that the component instances are known to be castable to.
            </summary>
    </member>
    <member name="T:Autofac.Core.Activators.Delegate.DelegateActivator">
      <summary>
            Activate instances using a delegate.
            </summary>
    </member>
    <member name="M:Autofac.Core.Activators.Delegate.DelegateActivator.#ctor(System.Type,System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object})">
      <summary>
            Create a delegate activator.
            </summary>
      <param name="limitType">The most specific type to which activated instances can be cast.</param>
      <param name="activationFunction">Activation delegate.</param>
    </member>
    <member name="M:Autofac.Core.Activators.Delegate.DelegateActivator.ActivateInstance(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Activate an instance in the provided context.
            </summary>
      <param name="context">Context in which to activate instances.</param>
      <param name="parameters">Parameters to the instance.</param>
      <returns>The activated instance.</returns>
      <remarks>
            The context parameter here should probably be ILifetimeScope in order to reveal Disposer,
            but will wait until implementing a concrete use case to make the decision
            </remarks>
    </member>
    <member name="T:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator">
      <summary>
            Provides a pre-constructed instance.
            </summary>
    </member>
    <member name="M:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator.#ctor(System.Object)">
      <summary>
            Provide the specified instance.
            </summary>
      <param name="instance">The instance to provide.</param>
    </member>
    <member name="M:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator.ActivateInstance(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Activate an instance in the provided context.
            </summary>
      <param name="context">Context in which to activate instances.</param>
      <param name="parameters">Parameters to the instance.</param>
      <returns>The activated instance.</returns>
      <remarks>
            The context parameter here should probably be ILifetimeScope in order to reveal Disposer,
            but will wait until implementing a concrete use case to make the decision
            </remarks>
    </member>
    <member name="M:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator.DisposeInstance">
      <summary>
            Determines whether the activator disposes the instance that it holds.
            Necessary because otherwise instances that are never resolved will never be
            disposed.
            </summary>
    </member>
    <member name="T:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivatorResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivatorResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivatorResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivatorResources.InstanceAlreadyActivated">
      <summary>
              Looks up a localized string similar to The provided instance has already been used in an activation request. Did you combine a provided instance with non-root/single-instance lifetime/sharing?.
            </summary>
    </member>
    <member name="T:Autofac.Core.Activators.Reflection.AutowiringParameter">
      <summary>
            Supplies values based on the target parameter type.
            </summary>
    </member>
    <member name="M:Autofac.Core.Activators.Reflection.AutowiringParameter.CanSupplyValue(System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Func{System.Object}@)">
      <summary>
            Returns true if the parameter is able to provide a value to a particular site.
            </summary>
      <param name="pi">Constructor, method, or property-mutator parameter.</param>
      <param name="context">The component context in which the value is being provided.</param>
      <param name="valueProvider">If the result is true, the valueProvider parameter will
            be set to a function that will lazily retrieve the parameter value. If the result is false,
            will be set to null.</param>
      <returns>True if a value can be supplied; otherwise, false.</returns>
    </member>
    <member name="T:Autofac.Core.Activators.Reflection.IConstructorFinder">
      <summary>
            Find suitable constructors from which to select.
            </summary>
    </member>
    <member name="M:Autofac.Core.Activators.Reflection.IConstructorFinder.FindConstructors(System.Type)">
      <summary>
            Finds suitable constructors on the target type.
            </summary>
      <param name="targetType">Type to search for constructors.</param>
      <returns>Suitable constructors.</returns>
    </member>
    <member name="T:Autofac.Core.Activators.Reflection.BindingFlagsConstructorFinder">
      <summary>
            Finds constructors based on their binding flags.
            </summary>
    </member>
    <member name="M:Autofac.Core.Activators.Reflection.BindingFlagsConstructorFinder.#ctor(System.Reflection.BindingFlags)">
      <summary>
            Create an instance matching constructors with the supplied binding flags.
            </summary>
      <param name="bindingFlags">Binding flags to match.</param>
    </member>
    <member name="M:Autofac.Core.Activators.Reflection.BindingFlagsConstructorFinder.FindConstructors(System.Type)">
      <summary>
            Finds suitable constructors on the target type.
            </summary>
      <param name="targetType">Type to search for constructors.</param>
      <returns>Suitable constructors.</returns>
    </member>
    <member name="M:Autofac.Core.Activators.Reflection.BindingFlagsConstructorFinder.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:Autofac.Core.Activators.Reflection.ConstructorParameterBinding">
      <summary>
            Binds a constructor to the parameters that will be used when it is invoked.
            </summary>
    </member>
    <member name="M:Autofac.Core.Activators.Reflection.ConstructorParameterBinding.#ctor(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},Autofac.IComponentContext)">
      <summary>
            Construct a new ConstructorParameterBinding.
            </summary>
      <param name="ci">ConstructorInfo to bind.</param>
      <param name="availableParameters">Available parameters.</param>
      <param name="context">Context in which to construct instance.</param>
    </member>
    <member name="M:Autofac.Core.Activators.Reflection.ConstructorParameterBinding.Instantiate">
      <summary>
            Invoke the constructor with the parameter bindings.
            </summary>
      <returns>The constructed instance.</returns>
    </member>
    <member name="M:Autofac.Core.Activators.Reflection.ConstructorParameterBinding.ToString">
      <summary>Returns a System.String that represents the current System.Object.</summary>
      <returns>A System.String that represents the current System.Object.</returns>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.ConstructorParameterBinding.TargetConstructor">
      <summary>
            The constructor on the target type. The actual constructor used
            might differ, e.g. if using a dynamic proxy.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.ConstructorParameterBinding.CanInstantiate">
      <summary>
            True if the binding is valid.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.ConstructorParameterBinding.Description">
      <summary>
            Describes the constructor parameter binding.
            </summary>
    </member>
    <member name="T:Autofac.Core.Activators.Reflection.IConstructorSelector">
      <summary>
            Selects the best constructor from a set of available constructors.
            </summary>
    </member>
    <member name="M:Autofac.Core.Activators.Reflection.IConstructorSelector.SelectConstructorBinding(Autofac.Core.Activators.Reflection.ConstructorParameterBinding[])">
      <summary>
            Selects the best constructor from the available constructors.
            </summary>
      <param name="constructorBindings">Available constructors.</param>
      <returns>The best constructor.</returns>
    </member>
    <member name="T:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelector">
      <summary>
            Selects a constructor based on its signature.
            </summary>
    </member>
    <member name="M:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelector.#ctor(System.Type[])">
      <summary>
            Match constructors with the provided signature.
            </summary>
      <param name="signature">Signature to match.</param>
    </member>
    <member name="M:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelector.SelectConstructorBinding(Autofac.Core.Activators.Reflection.ConstructorParameterBinding[])">
      <summary>
            Selects the best constructor from the available constructors.
            </summary>
      <param name="constructorBindings">Available constructors.</param>
      <returns>The best constructor.</returns>
    </member>
    <member name="T:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelectorResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelectorResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelectorResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelectorResources.AtLeastOneBindingRequired">
      <summary>
              Looks up a localized string similar to At least one binding must be provided in order to select a constructor..
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelectorResources.RequiredConstructorNotAvailable">
      <summary>
              Looks up a localized string similar to The required constructor on type '{0}'  with signature '{1}' is unavailable..
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelectorResources.TooManyConstructorsMatch">
      <summary>
              Looks up a localized string similar to More than one constructor matches the signature '{0}'..
            </summary>
    </member>
    <member name="T:Autofac.Core.Activators.Reflection.MostParametersConstructorSelector">
      <summary>
            Selects the constructor with the most parameters.
            </summary>
    </member>
    <member name="M:Autofac.Core.Activators.Reflection.MostParametersConstructorSelector.SelectConstructorBinding(Autofac.Core.Activators.Reflection.ConstructorParameterBinding[])">
      <summary>
            Selects the best constructor from the available constructors.
            </summary>
      <param name="constructorBindings">Available constructors.</param>
      <returns>The best constructor.</returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException">A single unambiguous match could not be chosen.</exception>
    </member>
    <member name="T:Autofac.Core.Activators.Reflection.ReflectionActivator">
      <summary>
            Uses reflection to activate instances of a type.
            </summary>
    </member>
    <member name="M:Autofac.Core.Activators.Reflection.ReflectionActivator.#ctor(System.Type,Autofac.Core.Activators.Reflection.IConstructorFinder,Autofac.Core.Activators.Reflection.IConstructorSelector,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Create an activator for the provided type.
            </summary>
      <param name="implementationType">Type to activate.</param>
      <param name="constructorFinder">Constructor finder.</param>
      <param name="constructorSelector">Constructor selector.</param>
      <param name="configuredParameters">Parameters configured explicitly for this instance.</param>
      <param name="configuredProperties">Properties configured explicitly for this instance.</param>
    </member>
    <member name="M:Autofac.Core.Activators.Reflection.ReflectionActivator.ActivateInstance(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Activate an instance in the provided context.
            </summary>
      <param name="context">Context in which to activate instances.</param>
      <param name="parameters">Parameters to the instance.</param>
      <returns>The activated instance.</returns>
      <remarks>
            The context parameter here should probably be ILifetimeScope in order to reveal Disposer,
            but will wait until implementing a concrete use case to make the decision
            </remarks>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.ReflectionActivator.ConstructorFinder">
      <summary>
            The constructor finder.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.ReflectionActivator.ConstructorSelector">
      <summary>
            The constructor selector.
            </summary>
    </member>
    <member name="T:Autofac.Core.Activators.Reflection.ReflectionActivatorResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.ReflectionActivatorResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.ReflectionActivatorResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.ReflectionActivatorResources.NoConstructorsAvailable">
      <summary>
              Looks up a localized string similar to No constructors on type '{0}' can be found with '{1}'..
            </summary>
    </member>
    <member name="P:Autofac.Core.Activators.Reflection.ReflectionActivatorResources.NoConstructorsBindable">
      <summary>
              Looks up a localized string similar to None of the constructors found with '{0}' on type '{1}' can be invoked with the available services and parameters:{2}.
            </summary>
    </member>
    <member name="T:Autofac.Core.ConstantParameter">
      <summary>
            Base class for parameters that provide a constant value.
            </summary>
    </member>
    <member name="M:Autofac.Core.ConstantParameter.#ctor(System.Object,System.Predicate{System.Reflection.ParameterInfo})">
      <summary>
            Create a constant parameter that will apply to parameters matching
            the supplied predicate.
            </summary>
      <param name="value">
      </param>
      <param name="predicate">
      </param>
    </member>
    <member name="M:Autofac.Core.ConstantParameter.CanSupplyValue(System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Func{System.Object}@)">
      <summary>
            Returns true if the parameter is able to provide a value to a particular site.
            </summary>
      <param name="pi">Constructor, method, or property-mutator parameter.</param>
      <param name="context">The component context in which the value is being provided.</param>
      <param name="valueProvider">If the result is true, the valueProvider parameter will
            be set to a function that will lazily retrieve the parameter value. If the result is false,
            will be set to null.</param>
      <returns>True if a value can be supplied; otherwise, false.</returns>
    </member>
    <member name="P:Autofac.Core.ConstantParameter.Value">
      <summary>
            The value of the parameter.
            </summary>
    </member>
    <member name="T:Autofac.IComponentContext">
      <summary>
            The context in which a service can be accessed or a component's
            dependencies resolved. Disposal of a context will dispose any owned
            components.
            </summary>
    </member>
    <member name="M:Autofac.IComponentContext.ResolveComponent(Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Resolve an instance of the provided registration within the context.
            </summary>
      <param name="registration">The registration.</param>
      <param name="parameters">Parameters for the instance.</param>
      <returns>
            The component instance.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="P:Autofac.IComponentContext.ComponentRegistry">
      <summary>
            Associates services with the components that provide them.
            </summary>
    </member>
    <member name="T:Autofac.ILifetimeScope">
      <summary>
            An <see cref="T:Autofac.ILifetimeScope" /> tracks the instantiation of component instances.
            It defines a boundary in which instances are shared and configured.
            Disposing an <see cref="T:Autofac.ILifetimeScope" /> will dispose the components that were
            resolved through it.
            </summary>
      <example>
        <code>
            // See IContainer for definition of the container variable
            using (var requestScope = container.BeginLifetimeScope())
            {
                // Note that handler is resolved from requestScope, not
                // from the container:
                
                var handler = requestScope.Resolve&lt;IRequestHandler&gt;();
                handler.Handle(request);
                
                // When requestScope is disposed, all resources used in processing
                // the request will be released.
            }
            </code>
      </example>
      <remarks>
            All long-running applications should resolve components via an
            <see cref="T:Autofac.ILifetimeScope" />. Choosing the duration of the lifetime is application-
            specific. The standard Autofac WCF and ASP.NET/MVC integrations are already configured
            to create and release <see cref="T:Autofac.ILifetimeScope" />s as appropriate. For example, the
            ASP.NET integration will create and release an <see cref="T:Autofac.ILifetimeScope" /> per HTTP
            request.
            Most <see cref="T:Autofac.ILifetimeScope" /> functionality is provided by extension methods
            on the inherited <see cref="T:Autofac.IComponentContext" /> interface.
            </remarks>
      <seealso cref="T:Autofac.IContainer" />
      <seealso cref="T:Autofac.IComponentContext" />
      <seealso cref="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerMatchingLifetimeScope(System.Object)" />
      <seealso cref="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerLifetimeScope" />
      <seealso cref="T:Autofac.Core.InstanceSharing" />
      <seealso cref="T:Autofac.Core.IComponentLifetime" />
    </member>
    <member name="M:Autofac.ILifetimeScope.BeginLifetimeScope">
      <summary>
            Begin a new nested scope. Component instances created via the new scope
            will be disposed along with it.
            </summary>
      <returns>A new lifetime scope.</returns>
    </member>
    <member name="M:Autofac.ILifetimeScope.BeginLifetimeScope(System.Object)">
      <summary>
            Begin a new nested scope. Component instances created via the new scope
            will be disposed along with it.
            </summary>
      <param name="tag">The tag applied to the <see cref="T:Autofac.ILifetimeScope" />.</param>
      <returns>A new lifetime scope.</returns>
    </member>
    <member name="M:Autofac.ILifetimeScope.BeginLifetimeScope(System.Action{Autofac.ContainerBuilder})">
      <summary>
            Begin a new nested scope, with additional components available to it.
            Component instances created via the new scope
            will be disposed along with it.
            </summary>
      <remarks>
            The components registered in the sub-scope will be treated as though they were
            registered in the root scope, i.e., SingleInstance() components will live as long
            as the root scope.
            </remarks>
      <param name="configurationAction">Action on a <see cref="T:Autofac.ContainerBuilder" />
            that adds component registations visible only in the new scope.</param>
      <returns>A new lifetime scope.</returns>
    </member>
    <member name="M:Autofac.ILifetimeScope.BeginLifetimeScope(System.Object,System.Action{Autofac.ContainerBuilder})">
      <summary>
            Begin a new nested scope, with additional components available to it.
            Component instances created via the new scope
            will be disposed along with it.
            </summary>
      <remarks>
            The components registered in the sub-scope will be treated as though they were
            registered in the root scope, i.e., SingleInstance() components will live as long
            as the root scope.
            </remarks>
      <param name="tag">The tag applied to the <see cref="T:Autofac.ILifetimeScope" />.</param>
      <param name="configurationAction">Action on a <see cref="T:Autofac.ContainerBuilder" />
            that adds component registations visible only in the new scope.</param>
      <returns>A new lifetime scope.</returns>
    </member>
    <member name="P:Autofac.ILifetimeScope.Disposer">
      <summary>
            The disposer associated with this <see cref="T:Autofac.ILifetimeScope" />.
            Component instances can be associated with it manually if required.
            </summary>
      <remarks>Typical usage does not require interaction with this member- it
            is used when extending the container.</remarks>
    </member>
    <member name="P:Autofac.ILifetimeScope.Tag">
      <summary>
            The tag applied to the <see cref="T:Autofac.ILifetimeScope" />.
            </summary>
      <remarks>Tags allow a level in the lifetime hierarchy to be identified.
            In most applications, tags are not necessary.</remarks>
      <seealso cref="M:Autofac.Builder.IRegistrationBuilder`3.InstancePerMatchingLifetimeScope(System.Object)" />
    </member>
    <member name="E:Autofac.ILifetimeScope.ChildLifetimeScopeBeginning">
      <summary>
            Fired when a new scope based on the current scope is beginning.
            </summary>
    </member>
    <member name="E:Autofac.ILifetimeScope.CurrentScopeEnding">
      <summary>
            Fired when this scope is ending.
            </summary>
    </member>
    <member name="E:Autofac.ILifetimeScope.ResolveOperationBeginning">
      <summary>
            Fired when a resolve operation is beginning in this scope.
            </summary>
    </member>
    <member name="T:Autofac.IContainer">
      <summary>
            Creates, wires dependencies and manages lifetime for a set of components.
            Most instances of <see cref="T:Autofac.IContainer" /> are created 
            by a <see cref="T:Autofac.ContainerBuilder" />.
            </summary>
      <example>
        <code>
            // See ContainerBuilder for the definition of the builder variable
            using (var container = builder.Build())
            {
                var program = container.Resolve&lt;Program&gt;();
                program.Run();
            }
            </code>
      </example>
      <remarks>
            Most <see cref="T:Autofac.IContainer" /> functionality is provided by extension methods
            on the inherited <see cref="T:Autofac.IComponentContext" /> interface.
            </remarks>
      <seealso cref="T:Autofac.ILifetimeScope" />
      <seealso cref="T:Autofac.IComponentContext" />
      <seealso cref="T:Autofac.ResolutionExtensions" />
      <seealso cref="T:Autofac.ContainerBuilder" />
    </member>
    <member name="T:Autofac.Core.Container">
      <summary>
            Standard container implementation.
            </summary>
    </member>
    <member name="M:Autofac.Core.Container.#ctor">
      <summary>
            Create a new container.
            </summary>
    </member>
    <member name="M:Autofac.Core.Container.BeginLifetimeScope">
      <summary>
            Begin a new sub-scope. Instances created via the sub-scope
            will be disposed along with it.
            </summary>
      <returns>A new lifetime scope.</returns>
    </member>
    <member name="M:Autofac.Core.Container.BeginLifetimeScope(System.Object)">
      <summary>
            Begin a new sub-scope. Instances created via the sub-scope
            will be disposed along with it.
            </summary>
      <param name="tag">The tag applied to the <see cref="T:Autofac.ILifetimeScope" />.</param>
      <returns>A new lifetime scope.</returns>
    </member>
    <member name="M:Autofac.Core.Container.BeginLifetimeScope(System.Action{Autofac.ContainerBuilder})">
      <summary>
            Begin a new nested scope, with additional components available to it.
            Component instances created via the new scope
            will be disposed along with it.
            </summary>
      <param name="configurationAction">Action on a <see cref="T:Autofac.ContainerBuilder" />
            that adds component registations visible only in the new scope.</param>
      <returns>A new lifetime scope.</returns>
    </member>
    <member name="M:Autofac.Core.Container.BeginLifetimeScope(System.Object,System.Action{Autofac.ContainerBuilder})">
      <summary>
            Begin a new nested scope, with additional components available to it.
            Component instances created via the new scope
            will be disposed along with it.
            </summary>
      <param name="tag">The tag applied to the <see cref="T:Autofac.ILifetimeScope" />.</param>
      <param name="configurationAction">Action on a <see cref="T:Autofac.ContainerBuilder" />
            that adds component registations visible only in the new scope.</param>
      <returns>A new lifetime scope.</returns>
    </member>
    <member name="M:Autofac.Core.Container.ResolveComponent(Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Resolve an instance of the provided registration within the context.
            </summary>
      <param name="registration">The registration.</param>
      <param name="parameters">Parameters for the instance.</param>
      <returns>
            The component instance.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.Core.Container.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:Autofac.Core.Container.Empty">
      <summary>
            An empty container.
            </summary>
    </member>
    <member name="P:Autofac.Core.Container.Disposer">
      <summary>
            The disposer associated with this container. Instances can be associated
            with it manually if required.
            </summary>
    </member>
    <member name="P:Autofac.Core.Container.Tag">
      <summary>
            Tag applied to the lifetime scope.
            </summary>
      <remarks>The tag applied to this scope and the contexts generated when
            it resolves component dependencies.</remarks>
    </member>
    <member name="P:Autofac.Core.Container.ComponentRegistry">
      <summary>
            Associates services with the components that provide them.
            </summary>
    </member>
    <member name="E:Autofac.Core.Container.ChildLifetimeScopeBeginning">
      <summary>
            Fired when a new scope based on the current scope is beginning.
            </summary>
    </member>
    <member name="E:Autofac.Core.Container.CurrentScopeEnding">
      <summary>
            Fired when this scope is ending.
            </summary>
    </member>
    <member name="E:Autofac.Core.Container.ResolveOperationBeginning">
      <summary>
            Fired when a resolve operation is beginning in this scope.
            </summary>
    </member>
    <member name="T:Autofac.Core.DependencyResolutionException">
      <summary>
            Base exception type thrown whenever the dependency resolution process fails. This is a fatal
            exception, as Autofac is unable to 'roll back' changes to components that may have already
            been made during the operation. For example, 'on activated' handlers may have already been
            fired, or 'single instance' components partially constructed.
            </summary>
    </member>
    <member name="M:Autofac.Core.DependencyResolutionException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.DependencyResolutionException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Autofac.Core.DependencyResolutionException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.DependencyResolutionException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Autofac.Core.DependencyResolutionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="T:Autofac.Core.IDisposer">
      <summary>
            Provided on an object that will dispose of other objects when it is
            itself disposed.
            </summary>
    </member>
    <member name="M:Autofac.Core.IDisposer.AddInstanceForDisposal(System.IDisposable)">
      <summary>
            Adds an object to the disposer. When the disposer is
            disposed, so will the object be.
            </summary>
      <param name="instance">The instance.</param>
    </member>
    <member name="T:Autofac.Core.Disposer">
      <summary>
            Maintains a set of objects to dispose, and disposes them in the reverse order
            from which they were added when the Disposer is itself disposed.
            </summary>
    </member>
    <member name="F:Autofac.Core.Disposer._items">
      <summary>
            Contents all implement IDisposable.
            </summary>
    </member>
    <member name="M:Autofac.Core.Disposer.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:Autofac.Core.Disposer.AddInstanceForDisposal(System.IDisposable)">
      <summary>
            Adds an object to the disposer. When the disposer is
            disposed, so will the object be.
            </summary>
      <param name="instance">The instance.</param>
    </member>
    <member name="T:Autofac.Core.IComponentLifetime">
      <summary>
            Locates the lifetime to which instances of a component should be attached.
            </summary>
    </member>
    <member name="M:Autofac.Core.IComponentLifetime.FindScope(Autofac.Core.ISharingLifetimeScope)">
      <summary>
            Given the most nested scope visible within the resolve operation, find
            the scope for the component.
            </summary>
      <param name="mostNestedVisibleScope">The most nested visible scope.</param>
      <returns>The scope for the component.</returns>
    </member>
    <member name="T:Autofac.Core.IModule">
      <summary>
            Represents a set of components and related functionality
            packaged together.
            </summary>
    </member>
    <member name="M:Autofac.Core.IModule.Configure(Autofac.Core.IComponentRegistry)">
      <summary>
            Apply the module to the component registry.
            </summary>
      <param name="componentRegistry">Component registry to apply configuration to.</param>
    </member>
    <member name="T:Autofac.Core.InstanceOwnership">
      <summary>
            Determines when instances supporting IDisposable are disposed.
            </summary>
    </member>
    <member name="F:Autofac.Core.InstanceOwnership.ExternallyOwned">
      <summary>
            The lifetime scope does not dispose the instances.
            </summary>
    </member>
    <member name="F:Autofac.Core.InstanceOwnership.OwnedByLifetimeScope">
      <summary>
            The instances are disposed when the lifetime scope is disposed.
            </summary>
    </member>
    <member name="T:Autofac.Core.InstanceSharing">
      <summary>
            Determines whether instances are shared within a lifetime scope.
            </summary>
    </member>
    <member name="F:Autofac.Core.InstanceSharing.None">
      <summary>
            Each request for an instance will return a new object.
            </summary>
    </member>
    <member name="F:Autofac.Core.InstanceSharing.Shared">
      <summary>
            Each request for an instance will return the same object.
            </summary>
    </member>
    <member name="T:Autofac.Core.ISharingLifetimeScope">
      <summary>
            Defines a nested structure of lifetimes.
            </summary>
    </member>
    <member name="M:Autofac.Core.ISharingLifetimeScope.GetOrCreateAndShare(System.Guid,System.Func{System.Object})">
      <summary>
            Try to retrieve an instance based on a GUID key. If the instance
            does not exist, invoke <paramref name="creator" /> to create it.
            </summary>
      <param name="id">Key to look up.</param>
      <param name="creator">Creation function.</param>
      <returns>An instance.</returns>
    </member>
    <member name="P:Autofac.Core.ISharingLifetimeScope.RootLifetimeScope">
      <summary>
            The root of the sharing hierarchy.
            </summary>
    </member>
    <member name="P:Autofac.Core.ISharingLifetimeScope.ParentLifetimeScope">
      <summary>
            The parent of this node of the hierarchy, or null.
            </summary>
    </member>
    <member name="T:Autofac.Core.Lifetime.CurrentScopeLifetime">
      <summary>
            Attaches the instance's lifetime to the current lifetime scope.
            </summary>
    </member>
    <member name="M:Autofac.Core.Lifetime.CurrentScopeLifetime.FindScope(Autofac.Core.ISharingLifetimeScope)">
      <summary>
            Given the most nested scope visible within the resolve operation, find
            the scope for the component.
            </summary>
      <param name="mostNestedVisibleScope">The most nested visible scope.</param>
      <returns>The scope for the component.</returns>
    </member>
    <member name="T:Autofac.Core.Lifetime.LifetimeScope">
      <summary>
            Lifetime scope implementation.
            </summary>
    </member>
    <member name="F:Autofac.Core.Lifetime.LifetimeScope._synchRoot">
      <summary>
            Protects shared instances from concurrent access. Other members and the base class are threadsafe.
            </summary>
    </member>
    <member name="F:Autofac.Core.Lifetime.LifetimeScope.RootTag">
      <summary>
            The tag applied to root scopes when no other tag is specified.
            </summary>
    </member>
    <member name="M:Autofac.Core.Lifetime.LifetimeScope.#ctor(Autofac.Core.IComponentRegistry,Autofac.Core.Lifetime.LifetimeScope,System.Object)">
      <summary>
            Create a lifetime scope for the provided components and nested beneath a parent.
            </summary>
      <param name="tag">The tag applied to the <see cref="T:Autofac.ILifetimeScope" />.</param>
      <param name="componentRegistry">Components used in the scope.</param>
      <param name="parent">Parent scope.</param>
    </member>
    <member name="M:Autofac.Core.Lifetime.LifetimeScope.#ctor(Autofac.Core.IComponentRegistry,System.Object)">
      <summary>
            Create a root lifetime scope for the provided components.
            </summary>
      <param name="tag">The tag applied to the <see cref="T:Autofac.ILifetimeScope" />.</param>
      <param name="componentRegistry">Components used in the scope.</param>
    </member>
    <member name="M:Autofac.Core.Lifetime.LifetimeScope.#ctor(Autofac.Core.IComponentRegistry)">
      <summary>
            Create a root lifetime scope for the provided components.
            </summary>
      <param name="componentRegistry">Components used in the scope.</param>
    </member>
    <member name="M:Autofac.Core.Lifetime.LifetimeScope.BeginLifetimeScope">
      <summary>
            Begin a new anonymous sub-scope. Instances created via the sub-scope
            will be disposed along with it.
            </summary>
      <returns>A new lifetime scope.</returns>
    </member>
    <member name="M:Autofac.Core.Lifetime.LifetimeScope.BeginLifetimeScope(System.Object)">
      <summary>
            Begin a new tagged sub-scope. Instances created via the sub-scope
            will be disposed along with it.
            </summary>
      <param name="tag">The tag applied to the <see cref="T:Autofac.ILifetimeScope" />.</param>
      <returns>A new lifetime scope.</returns>
    </member>
    <member name="M:Autofac.Core.Lifetime.LifetimeScope.BeginLifetimeScope(System.Action{Autofac.ContainerBuilder})">
      <summary>
            Begin a new anonymous sub-scope, with additional components available to it.
            Component instances created via the new scope
            will be disposed along with it.
            </summary>
      <param name="configurationAction">Action on a <see cref="T:Autofac.ContainerBuilder" />
            that adds component registations visible only in the new scope.</param>
      <returns>A new lifetime scope.</returns>
      <example>
            IContainer cr = // ...
            using (var lifetime = cr.BeginLifetimeScope(builder =&gt; {
                    builder.RegisterType&lt;Foo&gt;();
                    builder.RegisterType&lt;Bar&gt;().As&lt;IBar&gt;(); })
            {
                var foo = lifetime.Resolve&lt;Foo&gt;();
            }
            </example>
    </member>
    <member name="M:Autofac.Core.Lifetime.LifetimeScope.BeginLifetimeScope(System.Object,System.Action{Autofac.ContainerBuilder})">
      <summary>
            Begin a new tagged sub-scope, with additional components available to it.
            Component instances created via the new scope
            will be disposed along with it.
            </summary>
      <param name="tag">The tag applied to the <see cref="T:Autofac.ILifetimeScope" />.</param>
      <param name="configurationAction">Action on a <see cref="T:Autofac.ContainerBuilder" />
            that adds component registations visible only in the new scope.</param>
      <returns>A new lifetime scope.</returns>
      <example>
            IContainer cr = // ...
            using (var lifetime = cr.BeginLifetimeScope("unitOfWork", builder =&gt; {
                    builder.RegisterType&lt;Foo&gt;();
                    builder.RegisterType&lt;Bar&gt;().As&lt;IBar&gt;(); })
            {
                var foo = lifetime.Resolve&lt;Foo&gt;();
            }
            </example>
    </member>
    <member name="M:Autofac.Core.Lifetime.LifetimeScope.ResolveComponent(Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Resolve an instance of the provided registration within the context.
            </summary>
      <param name="registration">The registration.</param>
      <param name="parameters">Parameters for the instance.</param>
      <returns>
            The component instance.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.Core.Lifetime.LifetimeScope.GetOrCreateAndShare(System.Guid,System.Func{System.Object})">
      <summary>
            Try to retrieve an instance based on a GUID key. If the instance
            does not exist, invoke <paramref name="creator" /> to create it.
            </summary>
      <param name="id">Key to look up.</param>
      <param name="creator">Creation function.</param>
      <returns>An instance.</returns>
    </member>
    <member name="M:Autofac.Core.Lifetime.LifetimeScope.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:Autofac.Core.Lifetime.LifetimeScope.ParentLifetimeScope">
      <summary>
            The parent of this node of the hierarchy, or null.
            </summary>
    </member>
    <member name="P:Autofac.Core.Lifetime.LifetimeScope.RootLifetimeScope">
      <summary>
            The root of the sharing hierarchy.
            </summary>
    </member>
    <member name="P:Autofac.Core.Lifetime.LifetimeScope.Disposer">
      <summary>
            The disposer associated with this container. Instances can be associated
            with it manually if required.
            </summary>
    </member>
    <member name="P:Autofac.Core.Lifetime.LifetimeScope.Tag">
      <summary>
            Tag applied to the lifetime scope.
            </summary>
      <remarks>The tag applied to this scope and the contexts generated when
            it resolves component dependencies.</remarks>
    </member>
    <member name="P:Autofac.Core.Lifetime.LifetimeScope.ComponentRegistry">
      <summary>
            Associates services with the components that provide them.
            </summary>
    </member>
    <member name="E:Autofac.Core.Lifetime.LifetimeScope.ChildLifetimeScopeBeginning">
      <summary>
            Fired when a new scope based on the current scope is beginning.
            </summary>
    </member>
    <member name="E:Autofac.Core.Lifetime.LifetimeScope.CurrentScopeEnding">
      <summary>
            Fired when this scope is ending.
            </summary>
    </member>
    <member name="E:Autofac.Core.Lifetime.LifetimeScope.ResolveOperationBeginning">
      <summary>
            Fired when a resolve operation is beginning in this scope.
            </summary>
    </member>
    <member name="T:Autofac.Core.Lifetime.MatchingScopeLifetime">
      <summary>
            Attaches the component's lifetime to scopes matching a supplied expression.
            </summary>
    </member>
    <member name="M:Autofac.Core.Lifetime.MatchingScopeLifetime.#ctor(System.Linq.Expressions.Expression{System.Func{Autofac.ILifetimeScope,System.Boolean}})">
      <summary>
            Match scopes based on the provided expression.
            </summary>
      <param name="matchExpression">Expression describing scopes that will match.</param>
    </member>
    <member name="M:Autofac.Core.Lifetime.MatchingScopeLifetime.#ctor(System.Object)">
      <summary>
            Match scopes by comparing tags for equality.
            </summary>
      <param name="lifetimeScopeTagToMatch">The tag applied to matching scopes.</param>
    </member>
    <member name="M:Autofac.Core.Lifetime.MatchingScopeLifetime.FindScope(Autofac.Core.ISharingLifetimeScope)">
      <summary>
            Given the most nested scope visible within the resolve operation, find
            the scope for the component.
            </summary>
      <param name="mostNestedVisibleScope">The most nested visible scope.</param>
      <returns>The scope for the component.</returns>
    </member>
    <member name="T:Autofac.Core.Lifetime.MatchingScopeLifetimeResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Core.Lifetime.MatchingScopeLifetimeResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Lifetime.MatchingScopeLifetimeResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Lifetime.MatchingScopeLifetimeResources.MatchingScopeNotFound">
      <summary>
              Looks up a localized string similar to No scope with a Tag matching '{0}' is visible from the scope in which the instance was requested. This generally indicates that a component registered as per-HTTP request is being reqested by a SingleInstance() component (or a similar scenario.) Under the web integration always request dependencies from the DependencyResolver.Current or ILifetimeScopeProvider.RequestLifetime, never from the container itself..
            </summary>
    </member>
    <member name="T:Autofac.Core.Lifetime.RootScopeLifetime">
      <summary>
            Attaches the component's lifetime to the root scope.
            </summary>
    </member>
    <member name="M:Autofac.Core.Lifetime.RootScopeLifetime.FindScope(Autofac.Core.ISharingLifetimeScope)">
      <summary>
            Given the most nested scope visible within the resolve operation, find
            the scope for the component.
            </summary>
      <param name="mostNestedVisibleScope">The most nested visible scope.</param>
      <returns>The scope for the component.</returns>
    </member>
    <member name="T:Autofac.Core.NamedPropertyParameter">
      <summary>
            A property identified by name. When applied to a reflection-based
            component, the name will be matched against property names.
            </summary>
    </member>
    <member name="M:Autofac.Core.NamedPropertyParameter.#ctor(System.String,System.Object)">
      <summary>
            Create a <see cref="T:Autofac.Core.NamedPropertyParameter" /> with the specified constant value.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="value">The property value.</param>
    </member>
    <member name="P:Autofac.Core.NamedPropertyParameter.Name">
      <summary>
            The name of the property.
            </summary>
    </member>
    <member name="T:Autofac.Core.PreparingEventArgs">
      <summary>
            Fired before the activation process to allow parameters to be changed or an alternative
            instance to be provided.
            </summary>
    </member>
    <member name="M:Autofac.Core.PreparingEventArgs.#ctor(Autofac.IComponentContext,Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.PreparingEventArgs" /> class.
            </summary>
      <param name="context">The context.</param>
      <param name="component">The component.</param>
      <param name="parameters">The parameters.</param>
    </member>
    <member name="P:Autofac.Core.PreparingEventArgs.Context">
      <summary>
            The context in which the activation is occurring.
            </summary>
    </member>
    <member name="P:Autofac.Core.PreparingEventArgs.Component">
      <summary>
            The component providing the instance being activated.
            </summary>
    </member>
    <member name="P:Autofac.Core.PreparingEventArgs.Parameters">
      <summary>
            The parameters supplied to the activator.
            </summary>
    </member>
    <member name="T:Autofac.Core.Registration.ComponentNotRegisteredException">
      <summary>
            A service was requested that cannot be provided by the container. To avoid this exception, either register a component
            to provide the required service, check for service registration using IsRegistered(), or use the ResolveOptional()
            method to resolve an optional dependency.
            </summary>
      <remarks>This exception is fatal. See <see cref="T:Autofac.Core.DependencyResolutionException" /> for more information.</remarks>
    </member>
    <member name="M:Autofac.Core.Registration.ComponentNotRegisteredException.#ctor(Autofac.Core.Service)">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" /> class.
            </summary>
      <param name="service">The service.</param>
    </member>
    <member name="M:Autofac.Core.Registration.ComponentNotRegisteredException.#ctor(Autofac.Core.Service,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" /> class.
            </summary>
      <param name="service">The service.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:Autofac.Core.Registration.ComponentNotRegisteredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="T:Autofac.Core.Registration.ComponentNotRegisteredExceptionResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentNotRegisteredExceptionResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentNotRegisteredExceptionResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentNotRegisteredExceptionResources.Message">
      <summary>
              Looks up a localized string similar to The requested service '{0}' has not been registered. To avoid this exception, either register a component to provide the service, check for service registration using IsRegistered(), or use the ResolveOptional() method to resolve an optional dependency..
            </summary>
    </member>
    <member name="T:Autofac.Core.ComponentRegisteredEventArgs">
      <summary>
            Information about the ocurrence of a component being registered
            with a container.
            </summary>
    </member>
    <member name="M:Autofac.Core.ComponentRegisteredEventArgs.#ctor(Autofac.Core.IComponentRegistry,Autofac.Core.IComponentRegistration)">
      <summary>
            Create a new instance with a valid container and component registration.
            </summary>
      <param name="registry">The container into which the registration 
            was made.</param>
      <param name="componentRegistration">The component registration.</param>
    </member>
    <member name="P:Autofac.Core.ComponentRegisteredEventArgs.ComponentRegistry">
      <summary>
            The container into which the registration was made.
            </summary>
    </member>
    <member name="P:Autofac.Core.ComponentRegisteredEventArgs.ComponentRegistration">
      <summary>
            The component registration.
            </summary>
    </member>
    <member name="T:Autofac.Core.Registration.ComponentRegistration">
      <summary>
            Describes a logical component within the container.
            </summary>
    </member>
    <member name="M:Autofac.Core.Registration.ComponentRegistration.#ctor(System.Guid,Autofac.Core.IInstanceActivator,Autofac.Core.IComponentLifetime,Autofac.Core.InstanceSharing,Autofac.Core.InstanceOwnership,System.Collections.Generic.IEnumerable{Autofac.Core.Service},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Create a new component registration.
            </summary>
      <param name="id">Unique identifier for the component.</param>
      <param name="activator">Activator used to activate instances.</param>
      <param name="lifetime">Determines how the component will be associated with its lifetime.</param>
      <param name="sharing">Whether the component is shared within its lifetime scope.</param>
      <param name="ownership">Whether the component instances are disposed at the end of their lifetimes.</param>
      <param name="services">Services the component provides.</param>
      <param name="metadata">Data associated with the component.</param>
    </member>
    <member name="M:Autofac.Core.Registration.ComponentRegistration.#ctor(System.Guid,Autofac.Core.IInstanceActivator,Autofac.Core.IComponentLifetime,Autofac.Core.InstanceSharing,Autofac.Core.InstanceOwnership,System.Collections.Generic.IEnumerable{Autofac.Core.Service},System.Collections.Generic.IDictionary{System.String,System.Object},Autofac.Core.IComponentRegistration)">
      <summary>
            Create a new component registration.
            </summary>
      <param name="id">Unique identifier for the component.</param>
      <param name="activator">Activator used to activate instances.</param>
      <param name="lifetime">Determines how the component will be associated with its lifetime.</param>
      <param name="sharing">Whether the component is shared within its lifetime scope.</param>
      <param name="ownership">Whether the component instances are disposed at the end of their lifetimes.</param>
      <param name="services">Services the component provides.</param>
      <param name="metadata">Data associated with the component.</param>
      <param name="target">The component registration upon which this registration is based.</param>
    </member>
    <member name="M:Autofac.Core.Registration.ComponentRegistration.RaisePreparing(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter}@)">
      <summary>
            Called by the container when an instance is required.
            </summary>
      <param name="context">The context in which the instance will be activated.</param>
      <param name="parameters">Parameters for activation.</param>
    </member>
    <member name="M:Autofac.Core.Registration.ComponentRegistration.RaiseActivating(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object@)">
      <summary>
            Called by the container once an instance has been constructed.
            </summary>
      <param name="context">The context in which the instance was activated.</param>
      <param name="parameters">The parameters supplied to the activator.</param>
      <param name="instance">The instance.</param>
    </member>
    <member name="M:Autofac.Core.Registration.ComponentRegistration.RaiseActivated(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object)">
      <summary>
            Called by the container once an instance has been fully constructed, including
            any requested objects that depend on the instance.
            </summary>
      <param name="context">The context in which the instance was activated.</param>
      <param name="parameters">The parameters supplied to the activator.</param>
      <param name="instance">The instance.</param>
    </member>
    <member name="M:Autofac.Core.Registration.ComponentRegistration.ToString">
      <summary>
            Describes the component in a human-readable form.
            </summary>
      <returns>A description of the component.</returns>
    </member>
    <member name="M:Autofac.Core.Registration.ComponentRegistration.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentRegistration.Target">
      <summary>
            The component registration upon which this registration is based.
            If this registration was created directly by the user, returns this.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentRegistration.Id">
      <summary>
            A unique identifier for this component (shared in all sub-contexts.)
            This value also appears in Services.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentRegistration.Activator">
      <summary>
            The activator used to create instances.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentRegistration.Lifetime">
      <summary>
            The lifetime associated with the component.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentRegistration.Sharing">
      <summary>
            Whether the component instances are shared or not.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentRegistration.Ownership">
      <summary>
            Whether the instances of the component should be disposed by the container.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentRegistration.Services">
      <summary>
            The services provided by the component.
            </summary>
    </member>
    <member name="P:Autofac.Core.Registration.ComponentRegistration.Metadata">
      <summary>
            Additional data associated with the component.
            </summary>
    </member>
    <member name="E:Autofac.Core.Registration.ComponentRegistration.Preparing">
      <summary>
            Fired when a new instance is required. The instance can be
            provided in order to skip the regular activator, by setting the Instance property in
            the provided event arguments.
            </summary>
    </member>
    <member name="E:Autofac.Core.Registration.ComponentRegistration.Activating">
      <summary>
            Fired when a new instance is being activated. The instance can be
            wrapped or switched at this time by setting the Instance property in
            the provided event arguments.
            </summary>
    </member>
    <member name="E:Autofac.Core.Registration.ComponentRegistration.Activated">
      <summary>
            Fired when the activation process for a new instance is complete.
            </summary>
    </member>
    <member name="F:Autofac.Core.Resolving.CircularDependencyDetector.MaxResolveDepth">
      <summary>
            Catch circular dependencies that are triggered by post-resolve processing (e.g. 'OnActivated')
            </summary>
    </member>
    <member name="T:Autofac.Core.Resolving.CircularDependencyDetectorResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.CircularDependencyDetectorResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.CircularDependencyDetectorResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.CircularDependencyDetectorResources.CircularDependency">
      <summary>
              Looks up a localized string similar to Circular component dependency detected: {0}..
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.CircularDependencyDetectorResources.MaxDepthExceeded">
      <summary>
              Looks up a localized string similar to Probable circular dependency between factory-scoped components. Chain includes '{0}'.
            </summary>
    </member>
    <member name="T:Autofac.Core.Resolving.IResolveOperation">
      <summary>
            An <see cref="T:Autofac.Core.Resolving.IResolveOperation" /> is a component context that sequences and monitors the multiple
            activations that go into producing a single requested object graph.
            </summary>
    </member>
    <member name="M:Autofac.Core.Resolving.IResolveOperation.GetOrCreateInstance(Autofac.Core.ISharingLifetimeScope,Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Get or create and share an instance of <paramref name="registration" /> in the <paramref name="currentOperationScope" />.
            </summary>
      <param name="currentOperationScope">The scope in the hierarchy in which the operation will begin.</param>
      <param name="registration">The component to resolve.</param>
      <param name="parameters">Parameters for the component.</param>
      <returns>The component instance.</returns>
    </member>
    <member name="E:Autofac.Core.Resolving.IResolveOperation.CurrentOperationEnding">
      <summary>
            Raised when the entire operation is complete.
            </summary>
    </member>
    <member name="E:Autofac.Core.Resolving.IResolveOperation.InstanceLookupBeginning">
      <summary>
            Raised when an instance is looked up within the operation.
            </summary>
    </member>
    <member name="T:Autofac.Core.Resolving.ResolveOperation">
      <summary>
            A <see cref="T:Autofac.Core.Resolving.ResolveOperation" /> is a component context that sequences and monitors the multiple
            activations that go into producing a single requested object graph.
            </summary>
    </member>
    <member name="M:Autofac.Core.Resolving.ResolveOperation.#ctor(Autofac.Core.ISharingLifetimeScope)">
      <summary>
            Create an instance of <see cref="T:Autofac.Core.Resolving.ResolveOperation" /> in the provided scope.
            </summary>
      <param name="mostNestedLifetimeScope">The most nested scope in which to begin the operation. The operation
            can move upward to less nested scopes as components with wider sharing scopes are activated</param>
    </member>
    <member name="M:Autofac.Core.Resolving.ResolveOperation.ResolveComponent(Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Resolve an instance of the provided registration within the context.
            </summary>
      <param name="registration">The registration.</param>
      <param name="parameters">Parameters for the instance.</param>
      <returns>
            The component instance.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.Core.Resolving.ResolveOperation.Execute(Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Execute the complete resolve operation.
            </summary>
    </member>
    <member name="M:Autofac.Core.Resolving.ResolveOperation.GetOrCreateInstance(Autofac.Core.ISharingLifetimeScope,Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Continue building the object graph by instantiating <paramref name="registration" /> in the
            current <paramref name="currentOperationScope" />.
            </summary>
      <param name="currentOperationScope">The current scope of the operation.</param>
      <param name="registration">The component to activate.</param>
      <param name="parameters">The parameters for the component.</param>
      <returns>The resolved instance.</returns>
      <exception cref="T:System.ArgumentNullException" />
    </member>
    <member name="P:Autofac.Core.Resolving.ResolveOperation.ComponentRegistry">
      <summary>
            Associates services with the components that provide them.
            </summary>
    </member>
    <member name="T:Autofac.Core.Resolving.ResolveOperationResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.ResolveOperationResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.ResolveOperationResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.ResolveOperationResources.ExceptionDuringResolve">
      <summary>
              Looks up a localized string similar to An exception was thrown while executing a resolve operation. See the InnerException for details..
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.ResolveOperationResources.MaxDepthExceeded">
      <summary>
              Looks up a localized string similar to Probable circular dependency between factory-scoped components. Chain includes '{0}'.
            </summary>
    </member>
    <member name="P:Autofac.Core.Resolving.ResolveOperationResources.TemporaryContextDisposed">
      <summary>
              Looks up a localized string similar to This resolve operation has already ended. When registering components using lambdas, the IComponentContext 'c' parameter to the lambda cannot be stored. Instead, either resolve IComponentContext again from 'c', or resolve a Func&lt;&gt; based factory to create subsequent components from..
            </summary>
    </member>
    <member name="T:Autofac.Core.TypedService">
      <summary>
            Identifies a service according to a type to which it can be assigned.
            </summary>
    </member>
    <member name="M:Autofac.Core.TypedService.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.TypedService" /> class.
            </summary>
      <param name="serviceType">Type of the service.</param>
    </member>
    <member name="M:Autofac.Core.TypedService.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception>
    </member>
    <member name="M:Autofac.Core.TypedService.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Autofac.Core.TypedService.ChangeType(System.Type)">
      <summary>
            Return a new service of the same kind, but carrying
            <paramref name="newType" /> as the <see cref="P:Autofac.Core.TypedService.ServiceType" />.
            </summary>
      <param name="newType">The new service type.</param>
      <returns>A new service with the service type.</returns>
    </member>
    <member name="P:Autofac.Core.TypedService.ServiceType">
      <summary>
            Gets the type of the service.
            </summary>
      <value>The type of the service.</value>
    </member>
    <member name="P:Autofac.Core.TypedService.Description">
      <summary>
            Gets a human-readable description of the service.
            </summary>
      <value>The description.</value>
    </member>
    <member name="T:Autofac.Core.UniqueService">
      <summary>
            A handy unique service identifier type - all instances will be regarded as unequal.
            </summary>
    </member>
    <member name="M:Autofac.Core.UniqueService.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.UniqueService" /> class.
            </summary>
    </member>
    <member name="M:Autofac.Core.UniqueService.#ctor(System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.UniqueService" /> class.
            </summary>
      <param name="id">The id.</param>
    </member>
    <member name="M:Autofac.Core.UniqueService.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <exception cref="T:System.NullReferenceException">The <paramref name="obj" /> parameter is null.</exception>
    </member>
    <member name="M:Autofac.Core.UniqueService.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:Autofac.Core.UniqueService.Description">
      <summary>
            Provides a programmer-readable description of the identifying feature of the service.
            </summary>
      <value>
      </value>
    </member>
    <member name="M:Autofac.Features.Collections.CollectionRegistrationSource.RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.IComponentRegistration}})">
      <summary>
            Retrieve registrations for an unregistered service, to be used
            by the container.
            </summary>
      <param name="service">The service that was requested.</param>
      <param name="registrationAccessor">A function that will return existing registrations for a service.</param>
      <returns>Registrations providing the service.</returns>
    </member>
    <member name="T:Autofac.Features.OpenGenerics.OpenGenericRegistrationSource">
      <summary>
            Generates activators for open generic types.
            </summary>
    </member>
    <member name="T:Autofac.Features.OwnedInstances.Owned`1">
      <summary>
            Represents a dependency that can be released by the dependent component.
            </summary>
      <typeparam name="T">The service provided by the dependency.</typeparam>
      <remarks>
        <para>
            Autofac automatically provides instances of <see cref="T:Autofac.Features.OwnedInstances.Owned`1" /> whenever the
            service <typeparamref name="T" /> is registered.
            </para>
        <para>
            It is not necessary for <typeparamref name="T" />, or the underlying component, to implement <see cref="T:System.IDisposable" />.
            Disposing of the <see cref="T:Autofac.Features.OwnedInstances.Owned`1" /> object is the correct way to handle cleanup of the dependency,
            as this will dispose of any other components created indirectly as well.
            </para>
        <para>
            When <see cref="T:Autofac.Features.OwnedInstances.Owned`1" /> is resolved, a new <see cref="T:Autofac.ILifetimeScope" /> is created for the
            underlying <typeparamref name="T" />, and tagged with the service matching <typeparamref name="T" />,
            generally a <see cref="T:Autofac.Core.TypedService" />. This means that shared instances can be tied to this
            scope by registering them as InstancePerMatchingLifetimeScope(new TypedService(typeof(T))).
            </para>
      </remarks>
      <example>
            The component D below is disposable and implements IService:
            <code>
            public class D : IService, IDisposable
            {
              // ...
            }
            </code>
            The dependent component C can dispose of the D instance whenever required by taking a dependency on
            <see cref="T:Autofac.Features.OwnedInstances.Owned`1" />:
            <code>
            public class C
            {
              IService _service;
              
              public C(Owned&lt;IService&gt; service)
              {
                _service = service;
              }
              
              void DoWork()
              {
                _service.Value.DoSomething();
              }
              
              void OnFinished()
              {
                _service.Dispose();
              }
            }
            </code>
            In general, rather than depending on <see cref="T:Autofac.Features.OwnedInstances.Owned`1" /> directly, components will depend on
            System.Func&lt;Owned&lt;T&gt;&gt; in order to create and dispose of other components as required.
            </example>
    </member>
    <member name="M:Autofac.Features.OwnedInstances.Owned`1.#ctor(`0,System.IDisposable)">
      <summary>
            Create an instance of <see cref="T:Autofac.Features.OwnedInstances.Owned`1" />.
            </summary>
      <param name="value">The value representing the instance.</param>
      <param name="lifetime">An IDisposable interface through which ownership can be released.</param>
    </member>
    <member name="M:Autofac.Features.OwnedInstances.Owned`1.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:Autofac.Features.OwnedInstances.Owned`1.Value">
      <summary>
            The owned value.
            </summary>
    </member>
    <member name="T:Autofac.Features.OwnedInstances.OwnedInstanceRegistrationSource">
      <summary>
            Generates registrations for services of type <see cref="T:Autofac.Features.OwnedInstances.Owned`1" /> whenever the service
            T is available.
            </summary>
    </member>
    <member name="M:Autofac.Features.OwnedInstances.OwnedInstanceRegistrationSource.RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.IComponentRegistration}})">
      <summary>
            Retrieve registrations for an unregistered service, to be used
            by the container.
            </summary>
      <param name="service">The service that was requested.</param>
      <param name="registrationAccessor">A function that will return existing registrations for a service.</param>
      <returns>Registrations providing the service.</returns>
    </member>
    <member name="T:Autofac.IStartable">
      <summary>
            When implemented by a component, an instance of the component will be resolved
            and started as soon as the container is built. Autofac will not call the Start()
            method when subsequent instances are resolved. If this behaviour is required, use
            an <code>OnActivated()</code> event handler instead.
            </summary>
      <remarks>
            For equivalent "Stop" functionality, implement <see cref="T:System.IDisposable" />. Autofac
            will always dispose a component before any of its dependencies (except in the presence
            of circular dependencies, in which case the components in the cycle are disposed in
            reverse-construction order.)
            </remarks>
    </member>
    <member name="M:Autofac.IStartable.Start">
      <summary>
            Perform once-off startup processing.
            </summary>
    </member>
    <member name="T:Autofac.Module">
      <summary>
            Base class for user-defined modules. Modules can add a set of releated components
            to a container (<see cref="M:Autofac.Module.Load(Autofac.ContainerBuilder)" />) or attach cross-cutting functionality
            to other components (<see cref="M:Autofac.Module.AttachToComponentRegistration(Autofac.Core.IComponentRegistry,Autofac.Core.IComponentRegistration)" />.
            Modules are given special support in the XML configuration feature - see
            http://code.google.com/p/autofac/wiki/StructuringWithModules.
            </summary>
      <remarks>Provides a user-friendly way to implement <see cref="T:Autofac.Core.IModule" />
            via <see cref="T:Autofac.ContainerBuilder" />.</remarks>
      <example>
            Defining a module:
            <code>
            public class DataAccessModule : Module
            {
                public string ConnectionString { get; set; }
                
                public override void Load(ContainerBuilder moduleBuilder)
                {
                    moduleBuilder.RegisterGeneric(typeof(MyRepository&lt;&gt;))
                        .As(typeof(IRepository&lt;&gt;))
                        .InstancePerMatchingLifetimeScope(WebLifetime.Request);
                    
                    moduleBuilder.Register(c =&gt; new MyDbConnection(ConnectionString))
                        .As&lt;IDbConnection&gt;()
                        .InstancePerMatchingLifetimeScope(WebLifetime.Request);
                }
            }
            </code>
            Using the module:
            <code>
            var builder = new ContainerBuilder();
            builder.RegisterModule(new DataAccessModule { ConnectionString = "..." });
            var container = builder.Build();
            var customers = container.Resolve&lt;IRepository&lt;Customer&gt;&gt;();
            </code></example>
    </member>
    <member name="M:Autofac.Module.Configure(Autofac.Core.IComponentRegistry)">
      <summary>
            Apply the module to the component registry.
            </summary>
      <param name="componentRegistry">Component registry to apply configuration to.</param>
    </member>
    <member name="M:Autofac.Module.Load(Autofac.ContainerBuilder)">
      <summary>
            Override to add registrations to the container.
            </summary>
      <remarks>
            Note that the ContainerBuilder parameter is unique to this module.
            </remarks>
      <param name="builder">The builder through which components can be
            registered.</param>
    </member>
    <member name="M:Autofac.Module.AttachToComponentRegistration(Autofac.Core.IComponentRegistry,Autofac.Core.IComponentRegistration)">
      <summary>
            Override to attach module-specific functionality to a
            component registration.
            </summary>
      <remarks>This method will be called for all existing <i>and future</i> component
            registrations - ordering is not important.</remarks>
      <param name="componentRegistry">The component registry.</param>
      <param name="registration">The registration to attach functionality to.</param>
    </member>
    <member name="M:Autofac.Module.AttachToRegistrationSource(Autofac.Core.IComponentRegistry,Autofac.Core.IRegistrationSource)">
      <summary>
            Override to perform module-specific processing on a registration source.
            </summary>
      <remarks>This method will be called for all existing <i>and future</i> sources
            - ordering is not important.</remarks>
      <param name="componentRegistry">The component registry into which the source was added.</param>
      <param name="registrationSource">The registration source.</param>
    </member>
    <member name="P:Autofac.Module.ThisAssembly">
      <summary>
            The assembly in which the concrete module type is located. To avoid bugs whereby deriving from a module will
            change the target assembly, this property can only be used by modules that inherit directly from
            <see cref="T:Autofac.Module" />.
            </summary>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.ExternallyOwned">
      <summary>
            Configure the component so that instances are never disposed by the container.
            </summary>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.OwnedByLifetimeScope">
      <summary>
            Configure the component so that instances that support IDisposable are
            disposed by the container (default.)
            </summary>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.InstancePerDependency">
      <summary>
            Configure the component so that every dependent component or call to Resolve()
            gets a new, unique instance (default.)
            </summary>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.SingleInstance">
      <summary>
            Configure the component so that every dependent component or call to Resolve()
            gets the same, shared instance.
            </summary>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.InstancePerLifetimeScope">
      <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a single ILifetimeScope gets the same, shared instance. Dependent components in
            different lifetime scopes will get different instances.
            </summary>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.InstancePerMatchingLifetimeScope(System.Object)">
      <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope tagged with the provided tag value gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the tagged scope will
            share the parent's instance. If no appropriately tagged scope can be found in the
            hierarchy an <see cref="T:Autofac.Core.DependencyResolutionException" /> is thrown.
            </summary>
      <param name="lifetimeScopeTag">Tag applied to matching lifetime scopes.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.InstancePerOwned``1">
      <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope created by an owned instance gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the owned instance scope will
            share the parent's instance. If no appropriate owned instance scope can be found in the
            hierarchy an <see cref="T:Autofac.Core.DependencyResolutionException" /> is thrown.
            </summary>
      <typeparam name="TService">The service type provided by the component.</typeparam>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.InstancePerOwned(System.Type)">
      <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope created by an owned instance gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the owned instance scope will
            share the parent's instance. If no appropriate owned instance scope can be found in the
            hierarchy an <see cref="T:Autofac.Core.DependencyResolutionException" /> is thrown.
            </summary>
      <param name="serviceType">The service type provided by the component.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.InstancePerOwned``1(System.Object)">
      <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope created by an owned instance gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the owned instance scope will
            share the parent's instance. If no appropriate owned instance scope can be found in the
            hierarchy an <see cref="T:Autofac.Core.DependencyResolutionException" /> is thrown.
            </summary>
      <typeparam name="TService">The service type provided by the component.</typeparam>
      <param name="serviceKey">Key to associate with the component.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.InstancePerOwned(System.Object,System.Type)">
      <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope created by an owned instance gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the owned instance scope will
            share the parent's instance. If no appropriate owned instance scope can be found in the
            hierarchy an <see cref="T:Autofac.Core.DependencyResolutionException" /> is thrown.
            </summary>
      <param name="serviceKey">Key to associate with the component.</param>
      <param name="serviceType">The service type provided by the component.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.As``1">
      <summary>
            Configure the services that the component will provide. The generic parameter(s) to As()
            will be exposed as TypedService instances.
            </summary>
      <typeparam name="TService">Service type.</typeparam>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.As``2">
      <summary>
            Configure the services that the component will provide. The generic parameter(s) to As()
            will be exposed as TypedService instances.
            </summary>
      <typeparam name="TService1">Service type.</typeparam>
      <typeparam name="TService2">Service type.</typeparam>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.As``3">
      <summary>
            Configure the services that the component will provide. The generic parameter(s) to As()
            will be exposed as TypedService instances.
            </summary>
      <typeparam name="TService1">Service type.</typeparam>
      <typeparam name="TService2">Service type.</typeparam>
      <typeparam name="TService3">Service type.</typeparam>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.As(System.Type[])">
      <summary>
            Configure the services that the component will provide.
            </summary>
      <param name="services">Service types to expose.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.As(Autofac.Core.Service[])">
      <summary>
            Configure the services that the component will provide.
            </summary>
      <param name="services">Services to expose.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.Named(System.String,System.Type)">
      <summary>
            Provide a textual name that can be used to retrieve the component.
            </summary>
      <param name="serviceName">Named service to associate with the component.</param>
      <param name="serviceType">The service type provided by the component.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.Named``1(System.String)">
      <summary>
            Provide a textual name that can be used to retrieve the component.
            </summary>
      <param name="serviceName">Named service to associate with the component.</param>
      <typeparam name="TService">The service type provided by the component.</typeparam>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.Keyed(System.Object,System.Type)">
      <summary>
            Provide a key that can be used to retrieve the component.
            </summary>
      <param name="serviceKey">Key to associate with the component.</param>
      <param name="serviceType">The service type provided by the component.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.Keyed``1(System.Object)">
      <summary>
            Provide a key that can be used to retrieve the component.
            </summary>
      <param name="serviceKey">Key to associate with the component.</param>
      <typeparam name="TService">The service type provided by the component.</typeparam>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.OnPreparing(System.Action{Autofac.Core.PreparingEventArgs})">
      <summary>
            Add a handler for the Preparing event. This event allows manipulating of the parameters
            that will be provided to the component.
            </summary>
      <param name="handler">The event handler.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.OnActivating(System.Action{Autofac.Core.IActivatingEventArgs{`0}})">
      <summary>
            Add a handler for the Activating event.
            </summary>
      <param name="handler">The event handler.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.OnActivated(System.Action{Autofac.Core.IActivatedEventArgs{`0}})">
      <summary>
            Add a handler for the Activated event.
            </summary>
      <param name="handler">The event handler.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.PropertiesAutowired(Autofac.PropertyWiringFlags)">
      <summary>
            Configure the component so that any properties whose types are registered in the
            container will be wired to instances of the appropriate service.
            </summary>
      <param name="wiringFlags">Set wiring options such as circular dependency wiring support.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.WithMetadata(System.String,System.Object)">
      <summary>
            Associates data with the component.
            </summary>
      <param name="key">Key by which the data can be located.</param>
      <param name="value">The data value.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.WithMetadata(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
      <summary>
            Associates data with the component.
            </summary>
      <param name="properties">The extended properties to associate with the component.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.Builder.RegistrationBuilder`3.WithMetadata``1(System.Action{Autofac.Builder.MetadataConfiguration{``0}})">
      <summary>
            Associates data with the component.
            </summary>
      <typeparam name="TMetadata">A type with properties whose names correspond to the
            property names to configure.</typeparam>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="P:Autofac.Builder.RegistrationBuilder`3.ActivatorData">
      <summary>
            The activator data.
            </summary>
    </member>
    <member name="P:Autofac.Builder.RegistrationBuilder`3.RegistrationStyle">
      <summary>
            The registration style.
            </summary>
    </member>
    <member name="P:Autofac.Builder.RegistrationBuilder`3.RegistrationData">
      <summary>
            The registration data.
            </summary>
    </member>
    <member name="T:Autofac.Builder.RegistrationData">
      <summary>
            Data common to all registrations made in the container, both direct (IComponentRegistration)
            and dynamic (IRegistrationSource.)
            </summary>
    </member>
    <member name="M:Autofac.Builder.RegistrationData.#ctor(Autofac.Core.Service)">
      <summary>
            Construct a RegistrationData instance.
            </summary>
      <param name="defaultService">The default service that will be used if no others
            are added.</param>
    </member>
    <member name="M:Autofac.Builder.RegistrationData.AddServices(System.Collections.Generic.IEnumerable{Autofac.Core.Service})">
      <summary>
            Add multiple services for the registration, overriding the default.
            </summary>
      <param name="services">The services to add.</param>
      <remarks>If an empty collection is specified, this will still
            clear the default service.</remarks>
    </member>
    <member name="M:Autofac.Builder.RegistrationData.AddService(Autofac.Core.Service)">
      <summary>
            Add a service to the registration, overriding the default.
            </summary>
      <param name="service">The service to add.</param>
    </member>
    <member name="M:Autofac.Builder.RegistrationData.CopyFrom(Autofac.Builder.RegistrationData,System.Boolean)">
      <summary>
            Copies the contents of another RegistrationData object into this one.
            </summary>
      <param name="that">The data to copy.</param>
      <param name="includeDefaultService">When true, the default service
            will be changed to that of the other.</param>
    </member>
    <member name="M:Autofac.Builder.RegistrationData.ClearServices">
      <summary>
            Empties the configured services.
            </summary>
    </member>
    <member name="P:Autofac.Builder.RegistrationData.Services">
      <summary>
            The services explicitly assigned to the component.
            </summary>
    </member>
    <member name="P:Autofac.Builder.RegistrationData.Ownership">
      <summary>
            The instance ownership assigned to the component.
            </summary>
    </member>
    <member name="P:Autofac.Builder.RegistrationData.Lifetime">
      <summary>
            The lifetime assigned to the component.
            </summary>
    </member>
    <member name="P:Autofac.Builder.RegistrationData.Sharing">
      <summary>
            The sharing mode assigned to the component.
            </summary>
    </member>
    <member name="P:Autofac.Builder.RegistrationData.Metadata">
      <summary>
            Extended properties assigned to the component.
            </summary>
    </member>
    <member name="P:Autofac.Builder.RegistrationData.PreparingHandlers">
      <summary>
            Handlers for the Preparing event.
            </summary>
    </member>
    <member name="P:Autofac.Builder.RegistrationData.ActivatingHandlers">
      <summary>
            Handlers for the Activating event.
            </summary>
    </member>
    <member name="P:Autofac.Builder.RegistrationData.ActivatedHandlers">
      <summary>
            Handlers for the Activated event.
            </summary>
    </member>
    <member name="T:Autofac.RegistrationExtensions">
      <summary>
            Adds registration syntax to the <see cref="T:Autofac.ContainerBuilder" /> type.
            </summary>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterModule(Autofac.ContainerBuilder,Autofac.Core.IModule)">
      <summary>
            Add a module to the container.
            </summary>
      <param name="builder">The builder to register the module with.</param>
      <param name="module">The module to add.</param>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterModule``1(Autofac.ContainerBuilder)">
      <summary>
            Add a module to the container.
            </summary>
      <param name="builder">The builder to register the module with.</param>
      <typeparam name="TModule">The module to add.</typeparam>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterComponent(Autofac.ContainerBuilder,Autofac.Core.IComponentRegistration)">
      <summary>
            Add a component to the container.
            </summary>
      <param name="builder">The builder to register the component with.</param>
      <param name="registration">The component to add.</param>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterSource(Autofac.ContainerBuilder,Autofac.Core.IRegistrationSource)">
      <summary>
            Add a registration source to the container.
            </summary>
      <param name="builder">The builder to register the registration source via.</param>
      <param name="registrationSource">The registration source to add.</param>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterInstance``1(Autofac.ContainerBuilder,``0)">
      <summary>
            Register an instance as a component.
            </summary>
      <typeparam name="T">The type of the instance.</typeparam>
      <param name="builder">Container builder.</param>
      <param name="instance">The instance to register.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
      <remarks>If no services are explicitly specified for the instance, the
            static type <typeparamref name="T" /> will be used as the default service (i.e. *not* <code>instance.GetType()</code>).</remarks>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterType``1(Autofac.ContainerBuilder)">
      <summary>
            Register a component to be created through reflection.
            </summary>
      <typeparam name="TImplementor">The type of the component implementation.</typeparam>
      <param name="builder">Container builder.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterType(Autofac.ContainerBuilder,System.Type)">
      <summary>
            Register a component to be created through reflection.
            </summary>
      <param name="implementationType">The type of the component implementation.</param>
      <param name="builder">Container builder.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.Register``1(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,``0})">
      <summary>
            Register a delegate as a component.
            </summary>
      <typeparam name="T">The type of the instance.</typeparam>
      <param name="builder">Container builder.</param>
      <param name="delegate">The delegate to register.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.Register``1(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},``0})">
      <summary>
            Register a delegate as a component.
            </summary>
      <typeparam name="T">The type of the instance.</typeparam>
      <param name="builder">Container builder.</param>
      <param name="delegate">The delegate to register.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterGeneric(Autofac.ContainerBuilder,System.Type)">
      <summary>
            Register an un-parameterised generic type, e.g. Repository&lt;&gt;.
            Concrete types will be made as they are requested, e.g. with Resolve&lt;Repository&lt;int&gt;&gt;().
            </summary>
      <param name="builder">Container builder.</param>
      <param name="implementor">The open generic implementation type.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.PreserveExistingDefaults``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2})">
      <summary>
            Specifies that the component being registered should only be made the default for services
            that have not already been registered.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TSingleRegistrationStyle">Registration style.</typeparam>
      <typeparam name="TActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set service mapping on.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.PreserveExistingDefaults``2(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.ScanningActivatorData,``1})">
      <summary>
            Specifies that the components being registered should only be made the default for services
            that have not already been registered.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TRegistrationStyle">Registration style.</typeparam>
      <param name="registration">Registration to set service mapping on.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterAssemblyTypes(Autofac.ContainerBuilder,System.Reflection.Assembly[])">
      <summary>
            Register the types in an assembly.
            </summary>
      <param name="builder">Container builder.</param>
      <param name="assemblies">The assemblies from which to register types.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.Where``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Boolean})">
      <summary>
            Specifies a subset of types to register from a scanned assembly.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TRegistrationStyle">Registration style.</typeparam>
      <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to filter types from.</param>
      <param name="predicate">Predicate that returns true for types to register.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.As``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Collections.Generic.IEnumerable{Autofac.Core.Service}})">
      <summary>
            Specifies how a type from a scanned assembly is mapped to a service.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TRegistrationStyle">Registration style.</typeparam>
      <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set service mapping on.</param>
      <param name="serviceMapping">Function mapping types to services.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.As``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,Autofac.Core.Service})">
      <summary>
            Specifies how a type from a scanned assembly is mapped to a service.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TRegistrationStyle">Registration style.</typeparam>
      <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set service mapping on.</param>
      <param name="serviceMapping">Function mapping types to services.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.As``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Type})">
      <summary>
            Specifies how a type from a scanned assembly is mapped to a service.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TRegistrationStyle">Registration style.</typeparam>
      <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set service mapping on.</param>
      <param name="serviceMapping">Function mapping types to services.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.As``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Type}})">
      <summary>
            Specifies how a type from a scanned assembly is mapped to a service.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TRegistrationStyle">Registration style.</typeparam>
      <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set service mapping on.</param>
      <param name="serviceMapping">Function mapping types to services.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.AsSelf``1(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle})">
      <summary>
            Specifies that a type from a scanned assembly provides its own concrete type as a service.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <param name="registration">Registration to set service mapping on.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.AsSelf``2(Autofac.Builder.IRegistrationBuilder{``0,``1,Autofac.Builder.SingleRegistrationStyle})">
      <summary>
            Specifies that a type provides its own concrete type as a service.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TConcreteActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set service mapping on.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.AsSelf``1(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Builder.ReflectionActivatorData,Autofac.Builder.DynamicRegistrationStyle})">
      <summary>
            Specifies that a type provides its own concrete type as a service.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <param name="registration">Registration to set service mapping on.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.WithMetadata``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}})">
      <summary>
            Specify how a type from a scanned assembly provides metadata.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TRegistrationStyle">Registration style.</typeparam>
      <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set metadata on.</param>
      <param name="metadataMapping">A function mapping the type to a list of metadata items.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.WithMetadataFrom``1(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle})">
      <summary>
            Use the properties of an attribute (or interface implemented by an attribute) on the scanned type
            to provide metadata values.
            </summary>
      <remarks>Inherited attributes are supported; however, there must be at most one matching attribute
            in the inheritance chain.</remarks>
      <typeparam name="TAttribute">The attribute applied to the scanned type.</typeparam>
      <param name="registration">Registration to set metadata on.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.WithMetadata``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.String,System.Func{System.Type,System.Object})">
      <summary>
            Specify how a type from a scanned assembly provides metadata.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TRegistrationStyle">Registration style.</typeparam>
      <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set service mapping on.</param>
      <param name="metadataKey">Key of the metadata item.</param>
      <param name="metadataValueMapping">A function retrieving the value of the item from the component type.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.Named``1(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle},System.Func{System.Type,System.String})">
      <summary>
            Specifies how a type from a scanned assembly is mapped to a named service.
            </summary>
      <param name="registration">Registration to set service mapping on.</param>
      <typeparam name="TService">Service type provided by the component.</typeparam>
      <param name="serviceNameMapping">Function mapping types to service names.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.Named``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.String},System.Type)">
      <summary>
            Specifies how a type from a scanned assembly is mapped to a named service.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TRegistrationStyle">Registration style.</typeparam>
      <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set service mapping on.</param>
      <param name="serviceType">Service type provided by the component.</param>
      <param name="serviceNameMapping">Function mapping types to service names.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.Keyed``1(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle},System.Func{System.Type,System.Object})">
      <summary>
            Specifies how a type from a scanned assembly is mapped to a keyed service.
            </summary>
      <param name="registration">Registration to set service mapping on.</param>
      <typeparam name="TService">Service type provided by the component.</typeparam>
      <param name="serviceKeyMapping">Function mapping types to service keys.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.Keyed``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Type,System.Object},System.Type)">
      <summary>
            Specifies how a type from a scanned assembly is mapped to a keyed service.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TRegistrationStyle">Registration style.</typeparam>
      <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set service mapping on.</param>
      <param name="serviceType">Service type provided by the component.</param>
      <param name="serviceKeyMapping">Function mapping types to service keys.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.AsImplementedInterfaces``1(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle})">
      <summary>
            Specifies that a type from a scanned assembly is registered as providing all of its
            implemented interfaces.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <param name="registration">Registration to set service mapping on.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.AsImplementedInterfaces``2(Autofac.Builder.IRegistrationBuilder{``0,``1,Autofac.Builder.SingleRegistrationStyle})">
      <summary>
            Specifies that a type is registered as providing all of its implemented interfaces.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TConcreteActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set service mapping on.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.AsImplementedInterfaces``1(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Builder.ReflectionActivatorData,Autofac.Builder.DynamicRegistrationStyle})">
      <summary>
            Specifies that a type is registered as providing all of its implemented interfaces.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <param name="registration">Registration to set service mapping on.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.FindConstructorsWith``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Reflection.BindingFlags)">
      <summary>
            Set the policy used to find candidate constructors on the implementation type.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
      <typeparam name="TStyle">Registration style.</typeparam>
      <param name="registration">Registration to set policy on.</param>
      <param name="bindingFlags">Binding flags used when searching for constructors.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.FindConstructorsWith``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Autofac.Core.Activators.Reflection.IConstructorFinder)">
      <summary>
            Set the policy used to find candidate constructors on the implementation type.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
      <typeparam name="TStyle">Registration style.</typeparam>
      <param name="registration">Registration to set policy on.</param>
      <param name="constructorFinder">Policy to be used when searching for constructors.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.UsingConstructor``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Type[])">
      <summary>
            Set the policy used to select from available constructors on the implementation type.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
      <typeparam name="TStyle">Registration style.</typeparam>
      <param name="registration">Registration to set policy on.</param>
      <param name="signature">Constructor signature to match.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.UsingConstructor``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Autofac.Core.Activators.Reflection.IConstructorSelector)">
      <summary>
            Set the policy used to select from available constructors on the implementation type.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TStyle">Registration style.</typeparam>
      <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set policy on.</param>
      <param name="constructorSelector">Policy to be used when selecting a constructor.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.WithParameter``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.String,System.Object)">
      <summary>
            Configure an explicit value for a constructor parameter.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TStyle">Registration style.</typeparam>
      <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set parameter on.</param>
      <param name="parameterName">Name of a constructor parameter on the target type.</param>
      <param name="parameterValue">Value to supply to the parameter.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.WithParameter``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Autofac.Core.Parameter)">
      <summary>
            Configure an explicit value for a constructor parameter.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TStyle">Registration style.</typeparam>
      <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set parameter on.</param>
      <param name="parameter">The parameter to supply to the constructor.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.WithParameter``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Func{System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Boolean},System.Func{System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Object})">
      <summary>
            Configure an explicit value for a constructor parameter.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TStyle">Registration style.</typeparam>
      <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set parameter on.</param>
      <param name="parameterSelector">A predicate selecting the parameter to set.</param>
      <param name="valueProvider">
      </param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.WithParameters``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Configure explicit values for constructor parameters.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TStyle">Registration style.</typeparam>
      <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set parameter on.</param>
      <param name="parameters">The parameters to supply to the constructor.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.WithProperty``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.String,System.Object)">
      <summary>
            Configure an explicit value for a property.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TStyle">Registration style.</typeparam>
      <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set property on.</param>
      <param name="propertyName">Name of a property on the target type.</param>
      <param name="propertyValue">Value to supply to the property.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.WithProperty``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Autofac.Core.Parameter)">
      <summary>
            Configure an explicit value for a property.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TStyle">Registration style.</typeparam>
      <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set parameter on.</param>
      <param name="property">The property to supply.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.WithProperties``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Configure explicit values for properties.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TStyle">Registration style.</typeparam>
      <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set parameter on.</param>
      <param name="properties">The properties to supply.</param>
      <returns>A registration builder allowing further configuration of the component.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.Targeting``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},Autofac.Core.IComponentRegistration)">
      <summary>
            Sets the target of the registration (used for metadata generation.)
            </summary>
      <typeparam name="TLimit">The type of the limit.</typeparam>
      <typeparam name="TActivatorData">The type of the activator data.</typeparam>
      <typeparam name="TSingleRegistrationStyle">Registration style</typeparam>
      <param name="registration">Registration to set target for.</param>
      <param name="target">The target.</param>
      <returns>
            Registration builder allowing the registration to be configured.
            </returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.OnRegistered``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Action{Autofac.Core.ComponentRegisteredEventArgs})">
      <summary>
            Provide a handler to be called when the component is registered.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TSingleRegistrationStyle">Registration style.</typeparam>
      <typeparam name="TActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration add handler to.</param>
      <param name="handler">The handler.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.OnRegistered``2(Autofac.Builder.IRegistrationBuilder{``0,Autofac.Features.Scanning.ScanningActivatorData,``1},System.Action{Autofac.Core.ComponentRegisteredEventArgs})">
      <summary>
            Provide a handler to be called when the component is registred.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TRegistrationStyle">Registration style.</typeparam>
      <param name="registration">Registration add handler to.</param>
      <param name="handler">The handler.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.AsClosedTypesOf``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Type)">
      <summary>
            Specifies that a type from a scanned assembly is registered if it implements an interface
            that closes the provided open generic interface type.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TRegistrationStyle">Registration style.</typeparam>
      <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to set service mapping on.</param>
      <param name="openGenericServiceType">The open generic interface or base class type for which implementations will be found.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.AssignableTo``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Type)">
      <summary>
            Filters the scanned types to include only those assignable to the provided
            type.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TRegistrationStyle">Registration style.</typeparam>
      <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to filter types from.</param>
      <param name="type">The type or interface which all classes must be assignable from.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.AssignableTo``1(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle})">
      <summary>
            Filters the scanned types to include only those assignable to the provided
            type.
            </summary>
      <param name="registration">Registration to filter types from.</param>
      <typeparam name="T">The type or interface which all classes must be assignable from.</typeparam>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.Except``1(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle})">
      <summary>
            Filters the scanned types to exclude the provided type.
            </summary>
      <param name="registration">Registration to filter types from.</param>
      <typeparam name="T">The concrete type to exclude.</typeparam>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.Except``1(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle},System.Action{Autofac.Builder.IRegistrationBuilder{``0,Autofac.Builder.ConcreteReflectionActivatorData,Autofac.Builder.SingleRegistrationStyle}})">
      <summary>
            Filters the scanned types to exclude the provided type, providing specific configuration for
            the excluded type.
            </summary>
      <param name="registration">Registration to filter types from.</param>
      <param name="customisedRegistration">Registration for the excepted type.</param>
      <typeparam name="T">The concrete type to exclude.</typeparam>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.InNamespaceOf``1(Autofac.Builder.IRegistrationBuilder{System.Object,Autofac.Features.Scanning.ScanningActivatorData,Autofac.Builder.DynamicRegistrationStyle})">
      <summary>
            Filters the scanned types to include only those in the namespace of the provided type
            or one of its sub-namespaces.
            </summary>
      <param name="registration">Registration to filter types from.</param>
      <typeparam name="T">A type in the target namespace.</typeparam>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.InNamespace``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.String)">
      <summary>
            Filters the scanned types to include only those in the provided namespace
            or one of its sub-namespaces.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TRegistrationStyle">Registration style.</typeparam>
      <typeparam name="TScanningActivatorData">Activator data type.</typeparam>
      <param name="registration">Registration to filter types from.</param>
      <param name="ns">The namespace from which types will be selected.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterAdapter``2(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},``0,``1})">
      <summary>
            Adapt all components implementing service <typeparamref name="TFrom" />
            to provide <typeparamref name="TTo" /> using the provided <paramref name="adapter" />
            function.
            </summary>
      <typeparam name="TFrom">Service type to adapt from.</typeparam>
      <typeparam name="TTo">Service type to adapt to. Must not be the
            same as <typeparamref name="TFrom" />.</typeparam>
      <param name="builder">Container builder.</param>
      <param name="adapter">Function adapting <typeparamref name="TFrom" /> to
            service <typeparamref name="TTo" />, given the context and parameters.</param>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterAdapter``2(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,``0,``1})">
      <summary>
            Adapt all components implementing service <typeparamref name="TFrom" />
            to provide <typeparamref name="TTo" /> using the provided <paramref name="adapter" />
            function.
            </summary>
      <typeparam name="TFrom">Service type to adapt from.</typeparam>
      <typeparam name="TTo">Service type to adapt to. Must not be the
            same as <typeparamref name="TFrom" />.</typeparam>
      <param name="builder">Container builder.</param>
      <param name="adapter">Function adapting <typeparamref name="TFrom" /> to
            service <typeparamref name="TTo" />, given the context.</param>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterAdapter``2(Autofac.ContainerBuilder,System.Func{``0,``1})">
      <summary>
            Adapt all components implementing service <typeparamref name="TFrom" />
            to provide <typeparamref name="TTo" /> using the provided <paramref name="adapter" />
            function.
            </summary>
      <typeparam name="TFrom">Service type to adapt from.</typeparam>
      <typeparam name="TTo">Service type to adapt to. Must not be the
            same as <typeparamref name="TFrom" />.</typeparam>
      <param name="builder">Container builder.</param>
      <param name="adapter">Function adapting <typeparamref name="TFrom" /> to
            service <typeparamref name="TTo" />.</param>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterGenericDecorator(Autofac.ContainerBuilder,System.Type,System.Type,System.Object,System.Object)">
      <summary>
            Decorate all components implementing open generic service <paramref name="decoratedServiceType" />.
            The <paramref name="fromKey" /> and <paramref name="toKey" /> parameters must be different values.
            </summary>
      <param name="builder">Container builder.</param>
      <param name="decoratedServiceType">Service type being decorated. Must be an open generic type.</param>
      <param name="fromKey">Service key or name associated with the components being decorated.</param>
      <param name="toKey">Service key or name given to the decorated components.</param>
      <param name="decoratorType">The type of the decorator. Must be an open generic type, and accept a parameter
            of type <paramref name="decoratedServiceType" />, which will be set to the instance being decorated.</param>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterDecorator``1(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},``0,``0},System.Object,System.Object)">
      <summary>
            Decorate all components implementing service <typeparamref name="TService" />
            using the provided <paramref name="decorator" /> function.
            The <paramref name="fromKey" /> and <paramref name="toKey" /> parameters must be different values.
            </summary>
      <typeparam name="TService">Service type being decorated.</typeparam>
      <param name="builder">Container builder.</param>
      <param name="decorator">Function decorating a component instance that provides
            <typeparamref name="TService" />, given the context and parameters.</param>
      <param name="fromKey">Service key or name associated with the components being decorated.</param>
      <param name="toKey">Service key or name given to the decorated components.</param>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterDecorator``1(Autofac.ContainerBuilder,System.Func{Autofac.IComponentContext,``0,``0},System.Object,System.Object)">
      <summary>
            Decorate all components implementing service <typeparamref name="TService" />
            using the provided <paramref name="decorator" /> function.
            The <paramref name="fromKey" /> and <paramref name="toKey" /> parameters must be different values.
            </summary>
      <typeparam name="TService">Service type being decorated.</typeparam>
      <param name="builder">Container builder.</param>
      <param name="decorator">Function decorating a component instance that provides
            <typeparamref name="TService" />, given the context.</param>
      <param name="fromKey">Service key or name associated with the components being decorated.</param>
      <param name="toKey">Service key or name given to the decorated components.</param>
    </member>
    <member name="M:Autofac.RegistrationExtensions.RegisterDecorator``1(Autofac.ContainerBuilder,System.Func{``0,``0},System.Object,System.Object)">
      <summary>
            Decorate all components implementing service <typeparamref name="TService" />
            using the provided <paramref name="decorator" /> function.
            The <paramref name="fromKey" /> and <paramref name="toKey" /> parameters must be different values.
            </summary>
      <typeparam name="TService">Service type being decorated.</typeparam>
      <param name="builder">Container builder.</param>
      <param name="decorator">Function decorating a component instance that provides
            <typeparamref name="TService" />.</param>
      <param name="fromKey">Service key or name associated with the components being decorated.</param>
      <param name="toKey">Service key or name given to the decorated components.</param>
    </member>
    <member name="M:Autofac.RegistrationExtensions.OnRelease``3(Autofac.Builder.IRegistrationBuilder{``0,``1,``2},System.Action{``0})">
      <summary>
            Run a supplied action instead of disposing instances when they're no
            longer required.
            </summary>
      <typeparam name="TLimit">Registration limit type.</typeparam>
      <typeparam name="TActivatorData">Activator data type.</typeparam>
      <typeparam name="TRegistrationStyle">Registration style.</typeparam>
      <param name="registration">Registration to set release action for.</param>
      <param name="releaseAction">An action to perform instead of disposing the instance.</param>
      <returns>Registration builder allowing the registration to be configured.</returns>
      <remarks>Only one release action can be configured per registration.</remarks>
    </member>
    <member name="T:Autofac.RegistrationExtensionsResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.RegistrationExtensionsResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.RegistrationExtensionsResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.RegistrationExtensionsResources.InstanceRegistrationsAreSingleInstanceOnly">
      <summary>
              Looks up a localized string similar to The instance  registration '{0}' can support SingleInstance() sharing only..
            </summary>
    </member>
    <member name="P:Autofac.RegistrationExtensionsResources.NoMatchingConstructorExists">
      <summary>
              Looks up a localized string similar to No matching constructor exists on type '{0}'..
            </summary>
    </member>
    <member name="T:Autofac.Builder.SimpleActivatorData">
      <summary>
            An activator builder with no parameters.
            </summary>
    </member>
    <member name="M:Autofac.Builder.SimpleActivatorData.#ctor(Autofac.Core.IInstanceActivator)">
      <summary>
            Return the provided activator.
            </summary>
      <param name="activator">The activator to return.</param>
    </member>
    <member name="P:Autofac.Builder.SimpleActivatorData.Activator">
      <summary>
            Gets the activator.
            </summary>
    </member>
    <member name="T:Autofac.Builder.SingleRegistrationStyle">
      <summary>
            Registration style for individual components.
            </summary>
    </member>
    <member name="P:Autofac.Builder.SingleRegistrationStyle.Id">
      <summary>
            The id used for the registration.
            </summary>
    </member>
    <member name="P:Autofac.Builder.SingleRegistrationStyle.RegisteredHandlers">
      <summary>
            Handlers to notify of the component registration event.
            </summary>
    </member>
    <member name="P:Autofac.Builder.SingleRegistrationStyle.PreserveDefaults">
      <summary>
            By default, new registrations override existing registrations as defaults.
            If set to true, new registrations will not change existing defaults.
            </summary>
    </member>
    <member name="P:Autofac.Builder.SingleRegistrationStyle.Target">
      <summary>
            The component upon which this registration is based.
            </summary>
    </member>
    <member name="T:Autofac.ContainerBuilder">
      <summary>
            Used to build an <see cref="T:Autofac.IContainer" /> from component registrations.
            </summary>
      <example>
        <code>
            var builder = new ContainerBuilder();
            
            builder.RegisterType&lt;Logger&gt;()
                .As&lt;ILogger&gt;()
                .SingleInstance();
            
            builder.Register(c =&gt; new MessageHandler(c.Resolve&lt;ILogger&gt;()));
            
            var container = builder.Build();
            // resolve components from container...
            </code>
      </example>
      <remarks>Most <see cref="T:Autofac.ContainerBuilder" /> functionality is accessed
            via extension methods in <see cref="T:Autofac.RegistrationExtensions" />.</remarks>
      <seealso cref="T:Autofac.IContainer" />
      <see cref="T:Autofac.RegistrationExtensions" />
    </member>
    <member name="M:Autofac.ContainerBuilder.RegisterCallback(System.Action{Autofac.Core.IComponentRegistry})">
      <summary>
            Register a callback that will be invoked when the container is configured.
            </summary>
      <remarks>This is primarily for extending the builder syntax.</remarks>
      <param name="configurationCallback">Callback to execute.</param>
    </member>
    <member name="M:Autofac.ContainerBuilder.Build(Autofac.Builder.ContainerBuildOptions)">
      <summary>
            Create a new container with the component registrations that have been made.
            </summary>
      <param name="options">Options that influence the way the container is initialised.</param>
      <remarks>
            Build can only be called once per <see cref="T:Autofac.ContainerBuilder" />
            - this prevents ownership issues for provided instances.
            Build enables support for the relationship types that come with Autofac (e.g.
            Func, Owned, Meta, Lazy, IEnumerable.) To exclude support for these types,
            first create the container, then call Update() on the builder.
            </remarks>
      <returns>A new container with the configured component registrations.</returns>
    </member>
    <member name="M:Autofac.ContainerBuilder.Update(Autofac.IContainer)">
      <summary>
            Configure an existing container with the component registrations
            that have been made.
            </summary>
      <remarks>
            Update can only be called once per <see cref="T:Autofac.ContainerBuilder" />
            - this prevents ownership issues for provided instances.
            </remarks>
      <param name="container">An existing container to make the registrations in.</param>
    </member>
    <member name="M:Autofac.ContainerBuilder.Update(Autofac.Core.IComponentRegistry)">
      <summary>
            Configure an existing registry with the component registrations
            that have been made.
            </summary>
      <remarks>
            Update can only be called once per <see cref="T:Autofac.ContainerBuilder" />
            - this prevents ownership issues for provided instances.
            </remarks>
      <param name="componentRegistry">An existing registry to make the registrations in.</param>
    </member>
    <member name="T:Autofac.NamedParameter">
      <summary>
            A parameter identified by name. When applied to a reflection-based
            component, <see cref="P:Autofac.NamedParameter.Name" /> will be matched against
            the name of the component's constructor arguments. When applied to
            a delegate-based component, the parameter can be accessed using
            <see cref="M:Autofac.ParameterExtensions.Named``1(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.String)" />.
            </summary>
      <example>
            Component with parameter:
            <code>
            public class MyComponent
            {
                public MyComponent(int amount) { ... }
            }
            </code>
            Providing the parameter:
            <code>
            var builder = new ContainerBuilder();
            builder.RegisterType&lt;MyComponent&gt;();
            var container = builder.Build();
            var myComponent = container.Resolve&lt;MyComponent&gt;(new NamedParameter("amount", 123));
            </code></example>
    </member>
    <member name="M:Autofac.NamedParameter.#ctor(System.String,System.Object)">
      <summary>
            Create a <see cref="T:Autofac.NamedParameter" /> with the specified constant value.
            </summary>
      <param name="name">The name of the parameter.</param>
      <param name="value">The parameter value.</param>
    </member>
    <member name="P:Autofac.NamedParameter.Name">
      <summary>
            The name of the parameter.
            </summary>
    </member>
    <member name="T:Autofac.ParameterExtensions">
      <summary>
            Extension methods that simplify extraction of parameter values from
            an <see cref="T:System.Collections.Generic.IEnumerable`1" /> where T is <see cref="T:Autofac.Core.Parameter" />.
            Each method returns the first matching parameter value, or throws an exception if
            none is provided.
            </summary>
      <example>
            At configuration time, delegate registrations can retrieve parameter values using
            the methods <see cref="M:Autofac.ParameterExtensions.Named``1(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.String)" />, <see cref="M:Autofac.ParameterExtensions.Positional``1(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Int32)" /> and <see cref="M:Autofac.ParameterExtensions.TypedAs``1(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})" />:
            <code>
            builder.Register((c, p) =&gt; new FtpClient(p.Named&lt;string&gt;("server")));
            </code>
            These parameters can be provided at resolution time:
            <code>
            container.Resolve&lt;FtpClient&gt;(new NamedParameter("server", "ftp.example.com"));
            </code>
            Alternatively, the parameters can be provided via a <i>Generated Factory</i> - http://code.google.com/p/autofac/wiki/DelegateFactories.
            </example>
    </member>
    <member name="M:Autofac.ParameterExtensions.Named``1(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.String)">
      <summary>
            Retrieve a named parameter value from a <see cref="T:Autofac.NamedParameter" /> instance.
            </summary>
      <typeparam name="T">The type to which the returned value will be cast.</typeparam>
      <param name="parameters">The available parameters to choose from.</param>
      <param name="name">The name of the parameter to select.</param>
      <returns>The value of the selected parameter.</returns>
      <seealso cref="T:Autofac.NamedParameter" />
    </member>
    <member name="M:Autofac.ParameterExtensions.Positional``1(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Int32)">
      <summary>
            Retrieve a positional parameter value from a <see cref="T:Autofac.PositionalParameter" /> instance.
            </summary>
      <typeparam name="T">The type to which the returned value will be cast.</typeparam>
      <param name="parameters">The available parameters to choose from.</param>
      <param name="position">The zero-based position of the parameter to select.</param>
      <returns>The value of the selected parameter.</returns>
      <remarks>The position value is the one associated with the parameter when
            it was constructed, <b>not</b> its index into the <paramref name="parameters" />
            sequence.</remarks>
      <seealso cref="T:Autofac.PositionalParameter" />
    </member>
    <member name="M:Autofac.ParameterExtensions.TypedAs``1(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Retrieve a typed parameter value from a <see cref="T:Autofac.TypedParameter" /> instance.
            </summary>
      <typeparam name="T">The type to which the returned value will be cast.</typeparam>
      <param name="parameters">The available parameters to choose from.</param>
      <returns>The value of the selected parameter.</returns>
      <seealso cref="T:Autofac.TypedParameter" />
    </member>
    <member name="T:Autofac.PositionalParameter">
      <summary>
            A parameter that is identified according to an integer representing its
            position in an argument list. When applied to a reflection-based
            component, <see cref="P:Autofac.PositionalParameter.Position" /> will be matched against
            the indices of the component's constructor arguments. When applied to
            a delegate-based component, the parameter can be accessed using
            <see cref="M:Autofac.ParameterExtensions.Positional``1(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Int32)" />.
            </summary>
      <example>
            Component with parameter:
            <code>
            public class MyComponent
            {
                public MyComponent(int amount) { ... }
            }
            </code>
            Providing the parameter:
            <code>
            var builder = new ContainerBuilder();
            builder.RegisterType&lt;MyComponent&gt;();
            var container = builder.Build();
            var myComponent = container.Resolve&lt;MyComponent&gt;(new PositionalParameter(0, 123));
            </code></example>
    </member>
    <member name="M:Autofac.PositionalParameter.#ctor(System.Int32,System.Object)">
      <summary>
            Construct a positional parameter with the specified constant value.
            </summary>
      <param name="position">The zero-based position of the parameter.</param>
      <param name="value">The parameter value.</param>
    </member>
    <member name="P:Autofac.PositionalParameter.Position">
      <summary>
            The zero-based position of the parameter.
            </summary>
    </member>
    <member name="T:Autofac.ResolutionExtensions">
      <summary>
            Adds syntactic convenience methods to the <see cref="T:Autofac.IComponentContext" /> interface.
            </summary>
    </member>
    <member name="M:Autofac.ResolutionExtensions.InjectProperties``1(Autofac.IComponentContext,``0)">
      <summary>
            Set any properties on <paramref name="instance" /> that can be
            resolved in the context.
            </summary>
      <typeparam name="TService">Type of instance. Used only to provide method chaining.</typeparam>
      <param name="context">The context from which to resolve the service.</param>
      <param name="instance">The instance to inject properties into.</param>
      <returns>
        <paramref name="instance" />.</returns>
    </member>
    <member name="M:Autofac.ResolutionExtensions.InjectUnsetProperties``1(Autofac.IComponentContext,``0)">
      <summary>
            Set any null-valued properties on <paramref name="instance" /> that can be
            resolved by the container.
            </summary>
      <typeparam name="TService">Type of instance. Used only to provide method chaining.</typeparam>
      <param name="context">The context from which to resolve the service.</param>
      <param name="instance">The instance to inject properties into.</param>
      <returns>
        <paramref name="instance" />.</returns>
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveNamed``1(Autofac.IComponentContext,System.String)">
      <summary>
            Retrieve a service from the context.
            </summary>
      <typeparam name="TService">The type to which the result will be cast.</typeparam>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceName">Name of the service.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveNamed``1(Autofac.IComponentContext,System.String,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Retrieve a service from the context.
            </summary>
      <typeparam name="TService">The type to which the result will be cast.</typeparam>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceName">Name of the service.</param>
      <param name="parameters">The parameters.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveNamed``1(Autofac.IComponentContext,System.String,Autofac.Core.Parameter[])">
      <summary>
            Retrieve a service from the context.
            </summary>
      <typeparam name="TService">The type to which the result will be cast.</typeparam>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceName">Name of the service.</param>
      <param name="parameters">The parameters.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveKeyed``1(Autofac.IComponentContext,System.Object)">
      <summary>
            Retrieve a service from the context.
            </summary>
      <typeparam name="TService">The type to which the result will be cast.</typeparam>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceKey">Key of the service.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveKeyed``1(Autofac.IComponentContext,System.Object,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Retrieve a service from the context.
            </summary>
      <typeparam name="TService">The type to which the result will be cast.</typeparam>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceKey">Key of the service.</param>
      <param name="parameters">The parameters.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveKeyed``1(Autofac.IComponentContext,System.Object,Autofac.Core.Parameter[])">
      <summary>
            Retrieve a service from the context.
            </summary>
      <typeparam name="TService">The type to which the result will be cast.</typeparam>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceKey">Key of the service.</param>
      <param name="parameters">The parameters.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.Resolve``1(Autofac.IComponentContext)">
      <summary>
            Retrieve a service from the context.
            </summary>
      <typeparam name="TService">The service to retrieve.</typeparam>
      <param name="context">The context from which to resolve the service.</param>
      <returns>The component instance that provides the service.</returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.Resolve``1(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Retrieve a service from the context.
            </summary>
      <typeparam name="TService">The type to which the result will be cast.</typeparam>
      <param name="context">The context from which to resolve the service.</param>
      <param name="parameters">Parameters for the service.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.Resolve``1(Autofac.IComponentContext,Autofac.Core.Parameter[])">
      <summary>
            Retrieve a service from the context.
            </summary>
      <typeparam name="TService">The type to which the result will be cast.</typeparam>
      <param name="context">The context from which to resolve the service.</param>
      <param name="parameters">Parameters for the service.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.Resolve(Autofac.IComponentContext,System.Type)">
      <summary>
            Retrieve a service from the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceType">The service type.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.Resolve(Autofac.IComponentContext,System.Type,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Retrieve a service from the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="parameters">Parameters for the service.</param>
      <param name="serviceType">The service type.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.Resolve(Autofac.IComponentContext,System.Type,Autofac.Core.Parameter[])">
      <summary>
            Retrieve a service from the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="parameters">Parameters for the service.</param>
      <param name="serviceType">The service type.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveNamed(Autofac.IComponentContext,System.String,System.Type)">
      <summary>
            Retrieve a service from the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceName">The service name.</param>
      <param name="serviceType">Type of the service.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveNamed(Autofac.IComponentContext,System.String,System.Type,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Retrieve a service from the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="parameters">Parameters for the service.</param>
      <param name="serviceName">The service name.</param>
      <param name="serviceType">Type of the service.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveNamed(Autofac.IComponentContext,System.String,System.Type,Autofac.Core.Parameter[])">
      <summary>
            Retrieve a service from the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="parameters">Parameters for the service.</param>
      <param name="serviceName">The service name.</param>
      <param name="serviceType">Type of the service.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveService(Autofac.IComponentContext,Autofac.Core.Service)">
      <summary>
            Retrieve a service from the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="service">The service to resolve.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveService(Autofac.IComponentContext,Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Retrieve a service from the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="parameters">Parameters for the service.</param>
      <param name="service">The service to resolve.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveService(Autofac.IComponentContext,Autofac.Core.Service,Autofac.Core.Parameter[])">
      <summary>
            Retrieve a service from the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="parameters">Parameters for the service.</param>
      <param name="service">The service to resolve.</param>
      <returns>
            The component instance that provides the service.
            </returns>
      <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException" />
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveOptional``1(Autofac.IComponentContext)">
      <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <typeparam name="TService">The service to resolve.</typeparam>
      <returns>
            The component instance that provides the service, or null.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveOptional``1(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="parameters">Parameters for the service.</param>
      <typeparam name="TService">The service to resolve.</typeparam>
      <returns>
            The component instance that provides the service, or null.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveOptional``1(Autofac.IComponentContext,Autofac.Core.Parameter[])">
      <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="parameters">Parameters for the service.</param>
      <typeparam name="TService">The service to resolve.</typeparam>
      <returns>
            The component instance that provides the service, or null.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveOptionalNamed``1(Autofac.IComponentContext,System.String)">
      <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceName">The name of the service.</param>
      <typeparam name="TService">The service to resolve.</typeparam>
      <returns>
            The component instance that provides the service, or null.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveOptionalNamed``1(Autofac.IComponentContext,System.String,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="parameters">Parameters for the service.</param>
      <param name="serviceName">The name of the service.</param>
      <typeparam name="TService">The service to resolve.</typeparam>
      <returns>
            The component instance that provides the service, or null.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveOptionalNamed``1(Autofac.IComponentContext,System.String,Autofac.Core.Parameter[])">
      <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="parameters">Parameters for the service.</param>
      <param name="serviceName">The name of the service.</param>
      <typeparam name="TService">The service to resolve.</typeparam>
      <returns>
            The component instance that provides the service, or null.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveOptionalKeyed``1(Autofac.IComponentContext,System.Object)">
      <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceKey">The name of the service.</param>
      <typeparam name="TService">The service to resolve.</typeparam>
      <returns>
            The component instance that provides the service, or null.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveOptionalKeyed``1(Autofac.IComponentContext,System.Object,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="parameters">Parameters for the service.</param>
      <param name="serviceKey">The name of the service.</param>
      <typeparam name="TService">The service to resolve.</typeparam>
      <returns>
            The component instance that provides the service, or null.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveOptionalKeyed``1(Autofac.IComponentContext,System.Object,Autofac.Core.Parameter[])">
      <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="parameters">Parameters for the service.</param>
      <param name="serviceKey">The key of the service.</param>
      <typeparam name="TService">The service to resolve.</typeparam>
      <returns>
            The component instance that provides the service, or null.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveOptional(Autofac.IComponentContext,System.Type)">
      <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceType">The type of the service.</param>
      <returns>
            The component instance that provides the service, or null.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveOptional(Autofac.IComponentContext,System.Type,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="parameters">Parameters for the service.</param>
      <param name="serviceType">The type of the service.</param>
      <returns>
            The component instance that provides the service, or null.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveOptional(Autofac.IComponentContext,System.Type,Autofac.Core.Parameter[])">
      <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="parameters">Parameters for the service.</param>
      <param name="serviceType">The type of the service.</param>
      <returns>
            The component instance that provides the service, or null.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveOptionalService(Autofac.IComponentContext,Autofac.Core.Service)">
      <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="service">The service.</param>
      <returns>
            The component instance that provides the service, or null.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveOptionalService(Autofac.IComponentContext,Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="service">The service.</param>
      <param name="parameters">Parameters for the service.</param>
      <returns>
            The component instance that provides the service, or null.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.ResolveOptionalService(Autofac.IComponentContext,Autofac.Core.Service,Autofac.Core.Parameter[])">
      <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="service">The service.</param>
      <param name="parameters">Parameters for the service.</param>
      <returns>
            The component instance that provides the service, or null.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.IsRegistered``1(Autofac.IComponentContext)">
      <summary>
            Determine whether the specified service is available in the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <typeparam name="TService">The service to test for the registration of.</typeparam>
      <returns>True if the service is registered.</returns>
    </member>
    <member name="M:Autofac.ResolutionExtensions.IsRegistered(Autofac.IComponentContext,System.Type)">
      <summary>
            Determine whether the specified service is available in the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceType">The service to test for the registration of.</param>
      <returns>True if the service is registered.</returns>
    </member>
    <member name="M:Autofac.ResolutionExtensions.IsRegisteredWithName(Autofac.IComponentContext,System.String,System.Type)">
      <summary>
            Determine whether the specified service is available in the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceName">The name of the service to test for the registration of.</param>
      <param name="serviceType">Type type of the service to test for the registration of.</param>
      <returns>True if the service is registered.</returns>
    </member>
    <member name="M:Autofac.ResolutionExtensions.IsRegisteredWithName``1(Autofac.IComponentContext,System.String)">
      <summary>
            Determine whether the specified service is available in the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceName">The name of the service to test for the registration of.</param>
      <typeparam name="TService">Type type of the service to test for the registration of.</typeparam>
      <returns>True if the service is registered.</returns>
    </member>
    <member name="M:Autofac.ResolutionExtensions.IsRegisteredWithKey(Autofac.IComponentContext,System.Object,System.Type)">
      <summary>
            Determine whether the specified service is available in the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceKey">The key of the service to test for the registration of.</param>
      <param name="serviceType">Type type of the service to test for the registration of.</param>
      <returns>True if the service is registered.</returns>
    </member>
    <member name="M:Autofac.ResolutionExtensions.IsRegisteredWithKey``1(Autofac.IComponentContext,System.Object)">
      <summary>
            Determine whether the specified service is available in the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceKey">The key of the service to test for the registration of.</param>
      <typeparam name="TService">Type type of the service to test for the registration of.</typeparam>
      <returns>True if the service is registered.</returns>
    </member>
    <member name="M:Autofac.ResolutionExtensions.IsRegisteredService(Autofac.IComponentContext,Autofac.Core.Service)">
      <summary>
            Determine whether the specified service is available in the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="service">The service to test for the registration of.</param>
      <returns>True if the service is registered.</returns>
    </member>
    <member name="M:Autofac.ResolutionExtensions.TryResolveService(Autofac.IComponentContext,Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object@)">
      <summary>
            Try to retrieve a service from the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="service">The service to resolve.</param>
      <param name="instance">The resulting component instance providing the service, or null.</param>
      <param name="parameters">The parameters.</param>
      <returns>
            True if a component providing the service is available.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.TryResolveService(Autofac.IComponentContext,Autofac.Core.Service,System.Object@)">
      <summary>
            Try to retrieve a service from the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="service">The service to resolve.</param>
      <param name="instance">The resulting component instance providing the service, or null.</param>
      <returns>
            True if a component providing the service is available.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.TryResolve(Autofac.IComponentContext,System.Type,System.Object@)">
      <summary>
            Try to retrieve a service from the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceType">The service type to resolve.</param>
      <param name="instance">The resulting component instance providing the service, or null.</param>
      <returns>
            True if a component providing the service is available.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.TryResolve``1(Autofac.IComponentContext,``0@)">
      <summary>
            Try to retrieve a service from the context.
            </summary>
      <typeparam name="T">The service type to resolve.</typeparam>
      <param name="context">The context from which to resolve the service.</param>
      <param name="instance">The resulting component instance providing the service, or default(T).</param>
      <returns>
            True if a component providing the service is available.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.TryResolveNamed(Autofac.IComponentContext,System.String,System.Type,System.Object@)">
      <summary>
            Try to retrieve a service from the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceName">The name of the service to resolve.</param>
      <param name="serviceType">The type of the service to resolve.</param>
      <param name="instance">The resulting component instance providing the service, or null.</param>
      <returns>
            True if a component providing the service is available.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="M:Autofac.ResolutionExtensions.TryResolveKeyed(Autofac.IComponentContext,System.Object,System.Type,System.Object@)">
      <summary>
            Try to retrieve a service from the context.
            </summary>
      <param name="context">The context from which to resolve the service.</param>
      <param name="serviceKey">The key of the service to resolve.</param>
      <param name="serviceType">The type of the service to resolve.</param>
      <param name="instance">The resulting component instance providing the service, or null.</param>
      <returns>
            True if a component providing the service is available.
            </returns>
      <exception cref="T:Autofac.Core.DependencyResolutionException" />
    </member>
    <member name="T:Autofac.Core.ResolvedParameter">
      <summary>
            Flexible parameter type allows arbitrary values to be retrieved
            from the resolution context.
            </summary>
    </member>
    <member name="M:Autofac.Core.ResolvedParameter.#ctor(System.Func{System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Boolean},System.Func{System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Object})">
      <summary>
            Create an instance of the ResolvedParameter class.
            </summary>
      <param name="predicate">A predicate that determines which parameters on a constructor will be supplied by this instance.</param>
      <param name="valueAccessor">A function that supplies the parameter value given the context.</param>
    </member>
    <member name="M:Autofac.Core.ResolvedParameter.CanSupplyValue(System.Reflection.ParameterInfo,Autofac.IComponentContext,System.Func{System.Object}@)">
      <summary>
            Returns true if the parameter is able to provide a value to a particular site.
            </summary>
      <param name="pi">Constructor, method, or property-mutator parameter.</param>
      <param name="context">The component context in which the value is being provided.</param>
      <param name="valueProvider">If the result is true, the valueProvider parameter will
            be set to a function that will lazily retrieve the parameter value. If the result is false,
            will be set to null.</param>
      <returns>True if a value can be supplied; otherwise, false.</returns>
    </member>
    <member name="M:Autofac.Core.ResolvedParameter.ForNamed``1(System.String)">
      <summary>
            Construct a <see cref="T:Autofac.Core.ResolvedParameter" /> that will match parameters of type
            <typeparamref name="TService" /> and resolve for those parameters an implementation
            registered with the name <paramref name="serviceName" />.
            </summary>
      <typeparam name="TService">The type of the parameter to match.</typeparam>
      <param name="serviceName">The name of the matching service to resolve.</param>
      <returns>A configured <see cref="T:Autofac.Core.ResolvedParameter" /> instance.</returns>
      <remarks>
      </remarks>
    </member>
    <member name="M:Autofac.Core.ResolvedParameter.ForKeyed``1(System.Object)">
      <summary>
            Construct a <see cref="T:Autofac.Core.ResolvedParameter" /> that will match parameters of type
            <typeparamref name="TService" /> and resolve for those parameters an implementation
            registered with the key <paramref name="serviceKey" />.
            </summary>
      <typeparam name="TService">The type of the parameter to match.</typeparam>
      <param name="serviceKey">The key of the matching service to resolve.</param>
      <returns>A configured <see cref="T:Autofac.Core.ResolvedParameter" /> instance.</returns>
    </member>
    <member name="T:Autofac.TypedParameter">
      <summary>
            A parameter that can supply values to sites that exactly
            match a specified type. When applied to a reflection-based
            component, <see cref="P:Autofac.TypedParameter.Type" /> will be matched against
            the types of the component's constructor arguments. When applied to
            a delegate-based component, the parameter can be accessed using
            <see cref="M:Autofac.ParameterExtensions.TypedAs``1(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})" />.
            </summary>
      <example>
            Component with parameter:
            <code>
            public class MyComponent
            {
                public MyComponent(int amount) { ... }
            }
            </code>
            Providing the parameter:
            <code>
            var builder = new ContainerBuilder();
            builder.RegisterType&lt;MyComponent&gt;();
            var container = builder.Build();
            var myComponent = container.Resolve&lt;MyComponent&gt;(new TypedParameter(typeof(int), 123));
            </code></example>
    </member>
    <member name="M:Autofac.TypedParameter.#ctor(System.Type,System.Object)">
      <summary>
            Create a typed parameter with the specified constant value.
            </summary>
      <param name="type">The exact type to match.</param>
      <param name="value">The parameter value.</param>
    </member>
    <member name="M:Autofac.TypedParameter.From``1(``0)">
      <summary>
            Shortcut for creating <see cref="T:Autofac.TypedParameter" /> 
            by using the <typeparamref name="T" /></summary>
      <typeparam name="T">type to be used for the parameter</typeparam>
      <param name="value">The parameter value.</param>
      <returns>new typed parameter</returns>
    </member>
    <member name="P:Autofac.TypedParameter.Type">
      <summary>
            The type against which targets are matched.
            </summary>
    </member>
    <member name="T:Autofac.TypeExtensions">
      <summary>
            Extends <see cref="T:System.Type" /> with methods that are useful in
            building scanning rules for <see cref="M:Autofac.RegistrationExtensions.RegisterAssemblyTypes(Autofac.ContainerBuilder,System.Reflection.Assembly[])" />.
            </summary>
    </member>
    <member name="M:Autofac.TypeExtensions.IsInNamespace(System.Type,System.String)">
      <summary>
            Returns true if this type is in the <paramref name="namespace" /> namespace
            or one of its sub-namespaces.
            </summary>
      <param name="this">The type to test.</param>
      <param name="namespace">The namespace to test.</param>
      <returns>True if this type is in the <paramref name="namespace" /> namespace
            or one of its sub-namespaces; otherwise, false.</returns>
    </member>
    <member name="M:Autofac.TypeExtensions.IsInNamespaceOf``1(System.Type)">
      <summary>
            Returns true if this type is in the same namespace as <typeparamref name="T" />
            or one of its sub-namespaces.
            </summary>
      <param name="this">The type to test.</param>
      <returns>True if this type is in the same namespace as <typeparamref name="T" />
            or one of its sub-namespaces; otherwise, false.</returns>
    </member>
    <member name="M:Autofac.TypeExtensions.IsClosedTypeOf(System.Type,System.Type)">
      <summary>Determines whether the candidate type supports any base or 
            interface that closes the provided generic type.</summary>
      <param name="this">
      </param>
      <param name="openGeneric">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Autofac.TypeExtensions.IsAssignableTo``1(System.Type)">
      <summary>
            Determines whether this type is assignable to <typeparamref name="T" />.
            </summary>
      <typeparam name="T">The type to test assignability to.</typeparam>
      <returns>True if this type is assignable to references of type
            <typeparamref name="T" />; otherwise, False.</returns>
    </member>
    <member name="T:Autofac.TypeExtensionsResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.TypeExtensionsResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.TypeExtensionsResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.TypeExtensionsResources.NotOpenGenericType">
      <summary>
              Looks up a localized string similar to The type '{0}' is not an open generic class or interface type..
            </summary>
    </member>
    <member name="T:Autofac.Util.Enforce">
      <summary>
            Helper methods used throughout the codebase.
            </summary>
    </member>
    <member name="M:Autofac.Util.Enforce.ArgumentNotNull``1(``0,System.String)">
      <summary>
            Enforce that an argument is not null. Returns the
            value if valid so that it can be used inline in
            base initialiser syntax.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="value">
      </param>
      <param name="name">
      </param>
      <returns>
        <paramref name="value" />
      </returns>
    </member>
    <member name="M:Autofac.Util.Enforce.ArgumentElementNotNull``1(``0,System.String)">
      <summary>
            Enforce that sequence does not contain null. Returns the
            value if valid so that it can be used inline in
            base initialiser syntax.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="value">The value.</param>
      <param name="name">The name.</param>
      <returns>
        <paramref name="value" />
      </returns>
    </member>
    <member name="M:Autofac.Util.Enforce.NotNull``1(``0)">
      <summary>
            Enforces that the provided object is non-null.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="value">The value.</param>
      <returns>
        <paramref name="value" />
      </returns>
    </member>
    <member name="M:Autofac.Util.Enforce.ArgumentNotNullOrEmpty(System.String,System.String)">
      <summary>
            Enforce that an argument is not null or empty. Returns the
            value if valid so that it can be used inline in
            base initialiser syntax.
            </summary>
      <param name="value">The value.</param>
      <param name="description">The description.</param>
      <returns>
        <paramref name="value" />
      </returns>
    </member>
    <member name="M:Autofac.Util.Enforce.ArgumentTypeIsFunction(System.Type)">
      <summary>
            Enforce that the argument is a delegate type.
            </summary>
      <param name="delegateType">The type to test.</param>
    </member>
    <member name="T:Autofac.Util.EnforceResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Util.EnforceResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Util.EnforceResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Util.EnforceResources.CannotBeEmpty">
      <summary>
              Looks up a localized string similar to The argument '{0}' cannot be empty..
            </summary>
    </member>
    <member name="P:Autofac.Util.EnforceResources.CannotBeNull">
      <summary>
              Looks up a localized string similar to The object of type '{0}' cannot be null..
            </summary>
    </member>
    <member name="P:Autofac.Util.EnforceResources.DelegateReturnsVoid">
      <summary>
              Looks up a localized string similar to Type {0} returns void..
            </summary>
    </member>
    <member name="P:Autofac.Util.EnforceResources.ElementCannotBeNull">
      <summary>
              Looks up a localized string similar to The sequence provided as argument '{0}' cannot contain null elements..
            </summary>
    </member>
    <member name="P:Autofac.Util.EnforceResources.NotDelegate">
      <summary>
              Looks up a localized string similar to Type {0} is not a delegate type..
            </summary>
    </member>
    <member name="T:Autofac.Util.ReflectionExtensions">
      <summary>
            Extension methods for reflection-related types.
            </summary>
    </member>
    <member name="M:Autofac.Util.ReflectionExtensions.TryGetDeclaringProperty(System.Reflection.ParameterInfo,System.Reflection.PropertyInfo@)">
      <summary>
            Maps from a property-set-value parameter to the declaring property.
            </summary>
      <param name="pi">Parameter to the property setter.</param>
      <param name="prop">The property info on which the setter is specified.</param>
      <returns>True if the parameter is a property setter.</returns>
    </member>
    <member name="M:Autofac.Util.ReflectionExtensions.GetProperty``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
            Get a PropertyInfo object from an expression of the form
            x =&gt; x.P.
            </summary>
      <typeparam name="TDeclaring">Type declaring the property.</typeparam>
      <typeparam name="TProperty">The type of the property.</typeparam>
      <param name="propertyAccessor">Expression mapping an instance of the
            declaring type to the property value.</param>
      <returns>Property info.</returns>
    </member>
    <member name="M:Autofac.Util.ReflectionExtensions.GetMethod``1(System.Linq.Expressions.Expression{System.Action{``0}})">
      <summary>
            Get the MethodInfo for a method called in the
            expression.
            </summary>
      <typeparam name="TDeclaring">Type on which the method is called.</typeparam>
      <param name="methodCallExpression">Expression demonstrating how the method appears.</param>
      <returns>The method info for the called method.</returns>
    </member>
    <member name="T:Autofac.Util.ReflectionExtensionsResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Util.ReflectionExtensionsResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Util.ReflectionExtensionsResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Util.ReflectionExtensionsResources.ExpressionNotMethodCall">
      <summary>
              Looks up a localized string similar to The provided expression must be of the form x =&gt;x.M(), but the provided expression was {0}..
            </summary>
    </member>
    <member name="P:Autofac.Util.ReflectionExtensionsResources.ExpressionNotPropertyAccessor">
      <summary>
              Looks up a localized string similar to The provided expression must be of the form x =&gt;x.P, but the provided expression was {0}..
            </summary>
    </member>
    <member name="T:Autofac.Util.ReleaseAction">
      <summary>
            Adapts an action to the <see cref="T:System.IDisposable" /> interface.
            </summary>
    </member>
    <member name="M:Autofac.Util.SequenceExtensions.JoinWith(System.Collections.Generic.IEnumerable{System.String},System.String)">
      <summary>
            Joins the strings into one single string interspersing the elements with the separator (a-la
            System.String.Join()).
            </summary>
      <param name="elements">The elements.</param>
      <param name="separator">The separator.</param>
      <returns>The joined string.</returns>
    </member>
    <member name="M:Autofac.Util.SequenceExtensions.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>
            Appends the item to the specified sequence.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="sequence">The sequence.</param>
      <param name="trailingItem">The trailing item.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Autofac.Util.SequenceExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>
            Prepends the item to the specified sequence.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="sequence">The sequence.</param>
      <param name="leadingItem">The leading item.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Autofac.Util.TypeExtensions.GetTypesThatClose(System.Type,System.Type)">
      <summary>Returns the first concrete interface supported by the candidate type that
            closes the provided open generic service type.</summary>
      <param name="this">The type that is being checked for the interface.</param>
      <param name="openGeneric">The open generic type to locate.</param>
      <returns>The type of the interface.</returns>
    </member>
    <member name="M:Autofac.Util.TypeExtensions.FindAssignableTypesThatClose(System.Type,System.Type)">
      <summary>
            Looks for an interface on the candidate type that closes the provided open generic interface type.
            </summary>
      <param name="candidateType">The type that is being checked for the interface.</param>
      <param name="openGenericServiceType">The open generic service type to locate.</param>
      <returns>True if a closed implementation was found; otherwise false.</returns>
    </member>
    <member name="M:Autofac.Features.GeneratedFactories.GeneratedFactoryRegistrationSource.RegistrationsFor(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.IComponentRegistration}})">
      <summary>
            Retrieve registrations for an unregistered service, to be used
            by the container.
            </summary>
      <param name="service">The service that was requested.</param>
      <param name="registrationAccessor">A function that will return existing registrations for a service.</param>
      <returns>Registrations providing the service.</returns>
    </member>
    <member name="T:Autofac.Features.GeneratedFactories.GeneratedFactoryRegistrationSourceResources">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:Autofac.Features.GeneratedFactories.GeneratedFactoryRegistrationSourceResources.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:Autofac.Features.GeneratedFactories.GeneratedFactoryRegistrationSourceResources.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:Autofac.Features.GeneratedFactories.GeneratedFactoryRegistrationSourceResources.GeneratedFactoryRegistrationSourceDescription">
      <summary>
              Looks up a localized string similar to Delegate Support (Func&lt;T&gt;and Custom Delegates).
            </summary>
    </member>
    <member name="T:Autofac.Util.WindowsPhone.Wp7FactoryGenerator">
      <summary>
            Generates context-bound closures that represent factories from
            a set of heuristics based on delegate type signatures.
            </summary>
    </member>
    <member name="M:Autofac.Util.WindowsPhone.Wp7FactoryGenerator.#ctor(System.Type,Autofac.Core.Service,Autofac.Features.GeneratedFactories.ParameterMapping)">
      <summary />
    </member>
    <member name="M:Autofac.Util.WindowsPhone.Wp7FactoryGenerator.#ctor(System.Type,Autofac.Core.IComponentRegistration,Autofac.Features.GeneratedFactories.ParameterMapping)">
      <summary />
    </member>
    <member name="M:Autofac.Util.WindowsPhone.Wp7FactoryGenerator.GenerateFactory(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Generates a factory delegate that closes over the provided context.
            </summary>
      <param name="context">The context in which the factory will be used.</param>
      <param name="parameters">Parameters provided to the resolve call for the factory itself.</param>
      <returns>A factory delegate that will work within the context.</returns>
    </member>
    <member name="M:Autofac.Util.WindowsPhone.Wp7FactoryGenerator.GenerateFactory``1(Autofac.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
      <summary>
            Generates a factory delegate that closes over the provided context.
            </summary>
      <param name="context">The context in which the factory will be used.</param>
      <param name="parameters">Parameters provided to the resolve call for the factory itself.</param>
      <returns>A factory delegate that will work within the context.</returns>
    </member>
    <member name="T:NLog.ComInterop.IComLogger">
      <summary>
            NLog COM Interop logger interface.
            </summary>
    </member>
    <member name="M:NLog.ComInterop.IComLogger.Log(System.String,System.String)">
      <summary>
            Writes the diagnostic message at the specified level.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> to be written.</param>
    </member>
    <member name="M:NLog.ComInterop.IComLogger.Trace(System.String)">
      <summary>
            Writes the diagnostic message at the Trace level.
            </summary>
      <param name="message">A <see langword="string" /> to be written.</param>
    </member>
    <member name="M:NLog.ComInterop.IComLogger.Debug(System.String)">
      <summary>
            Writes the diagnostic message at the Debug level.
            </summary>
      <param name="message">A <see langword="string" /> to be written.</param>
    </member>
    <member name="M:NLog.ComInterop.IComLogger.Info(System.String)">
      <summary>
            Writes the diagnostic message at the Info level.
            </summary>
      <param name="message">A <see langword="string" /> to be written.</param>
    </member>
    <member name="M:NLog.ComInterop.IComLogger.Warn(System.String)">
      <summary>
            Writes the diagnostic message at the Warn level.
            </summary>
      <param name="message">A <see langword="string" /> to be written.</param>
    </member>
    <member name="M:NLog.ComInterop.IComLogger.Error(System.String)">
      <summary>
            Writes the diagnostic message at the Error level.
            </summary>
      <param name="message">A <see langword="string" /> to be written.</param>
    </member>
    <member name="M:NLog.ComInterop.IComLogger.Fatal(System.String)">
      <summary>
            Writes the diagnostic message at the Fatal level.
            </summary>
      <param name="message">A <see langword="string" /> to be written.</param>
    </member>
    <member name="M:NLog.ComInterop.IComLogger.IsEnabled(System.String)">
      <summary>
            Checks if the specified log level is enabled.
            </summary>
      <param name="level">The log level.</param>
      <returns>A value indicating whether the specified log level is enabled.</returns>
    </member>
    <member name="P:NLog.ComInterop.IComLogger.IsTraceEnabled">
      <summary>
            Gets a value indicating whether the Trace level is enabled.
            </summary>
    </member>
    <member name="P:NLog.ComInterop.IComLogger.IsDebugEnabled">
      <summary>
            Gets a value indicating whether the Debug level is enabled.
            </summary>
    </member>
    <member name="P:NLog.ComInterop.IComLogger.IsInfoEnabled">
      <summary>
            Gets a value indicating whether the Info level is enabled.
            </summary>
    </member>
    <member name="P:NLog.ComInterop.IComLogger.IsWarnEnabled">
      <summary>
            Gets a value indicating whether the Warn level is enabled.
            </summary>
    </member>
    <member name="P:NLog.ComInterop.IComLogger.IsErrorEnabled">
      <summary>
            Gets a value indicating whether the Error level is enabled.
            </summary>
    </member>
    <member name="P:NLog.ComInterop.IComLogger.IsFatalEnabled">
      <summary>
            Gets a value indicating whether the Fatal level is enabled.
            </summary>
    </member>
    <member name="P:NLog.ComInterop.IComLogger.LoggerName">
      <summary>
            Gets or sets the logger name.
            </summary>
    </member>
    <member name="T:NLog.ComInterop.ComLogger">
      <summary>
            NLog COM Interop logger implementation.
            </summary>
    </member>
    <member name="M:NLog.ComInterop.ComLogger.Log(System.String,System.String)">
      <summary>
            Writes the diagnostic message at the specified level.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> to be written.</param>
    </member>
    <member name="M:NLog.ComInterop.ComLogger.Trace(System.String)">
      <summary>
            Writes the diagnostic message at the Trace level.
            </summary>
      <param name="message">A <see langword="string" /> to be written.</param>
    </member>
    <member name="M:NLog.ComInterop.ComLogger.Debug(System.String)">
      <summary>
            Writes the diagnostic message at the Debug level.
            </summary>
      <param name="message">A <see langword="string" /> to be written.</param>
    </member>
    <member name="M:NLog.ComInterop.ComLogger.Info(System.String)">
      <summary>
            Writes the diagnostic message at the Info level.
            </summary>
      <param name="message">A <see langword="string" /> to be written.</param>
    </member>
    <member name="M:NLog.ComInterop.ComLogger.Warn(System.String)">
      <summary>
            Writes the diagnostic message at the Warn level.
            </summary>
      <param name="message">A <see langword="string" /> to be written.</param>
    </member>
    <member name="M:NLog.ComInterop.ComLogger.Error(System.String)">
      <summary>
            Writes the diagnostic message at the Error level.
            </summary>
      <param name="message">A <see langword="string" /> to be written.</param>
    </member>
    <member name="M:NLog.ComInterop.ComLogger.Fatal(System.String)">
      <summary>
            Writes the diagnostic message at the Fatal level.
            </summary>
      <param name="message">A <see langword="string" /> to be written.</param>
    </member>
    <member name="M:NLog.ComInterop.ComLogger.IsEnabled(System.String)">
      <summary>
            Checks if the specified log level is enabled.
            </summary>
      <param name="level">The log level.</param>
      <returns>
            A value indicating whether the specified log level is enabled.
            </returns>
    </member>
    <member name="P:NLog.ComInterop.ComLogger.IsTraceEnabled">
      <summary>
            Gets a value indicating whether the Trace level is enabled.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:NLog.ComInterop.ComLogger.IsDebugEnabled">
      <summary>
            Gets a value indicating whether the Debug level is enabled.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:NLog.ComInterop.ComLogger.IsInfoEnabled">
      <summary>
            Gets a value indicating whether the Info level is enabled.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:NLog.ComInterop.ComLogger.IsWarnEnabled">
      <summary>
            Gets a value indicating whether the Warn level is enabled.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:NLog.ComInterop.ComLogger.IsErrorEnabled">
      <summary>
            Gets a value indicating whether the Error level is enabled.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:NLog.ComInterop.ComLogger.IsFatalEnabled">
      <summary>
            Gets a value indicating whether the Fatal level is enabled.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:NLog.ComInterop.ComLogger.LoggerName">
      <summary>
            Gets or sets the logger name.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:NLog.ComInterop.IComLogManager">
      <summary>
            NLog COM Interop LogManager interface.
            </summary>
    </member>
    <member name="M:NLog.ComInterop.IComLogManager.LoadConfigFromFile(System.String)">
      <summary>
            Loads NLog configuration from the specified file.
            </summary>
      <param name="fileName">The name of the file to load NLog configuration from.</param>
    </member>
    <member name="M:NLog.ComInterop.IComLogManager.GetLogger(System.String)">
      <summary>
            Creates the specified logger object and assigns a LoggerName to it.
            </summary>
      <param name="loggerName">Logger name.</param>
      <returns>The new logger instance.</returns>
    </member>
    <member name="P:NLog.ComInterop.IComLogManager.InternalLogToConsole">
      <summary>
            Gets or sets a value indicating whether internal messages should be written to the console.
            </summary>
    </member>
    <member name="P:NLog.ComInterop.IComLogManager.InternalLogFile">
      <summary>
            Gets or sets the name of the internal log file.
            </summary>
    </member>
    <member name="P:NLog.ComInterop.IComLogManager.InternalLogLevel">
      <summary>
            Gets or sets the name of the internal log level.
            </summary>
    </member>
    <member name="T:NLog.ComInterop.ComLogManager">
      <summary>
            NLog COM Interop LogManager implementation.
            </summary>
    </member>
    <member name="M:NLog.ComInterop.ComLogManager.GetLogger(System.String)">
      <summary>
            Creates the specified logger object and assigns a LoggerName to it.
            </summary>
      <param name="loggerName">The name of the logger.</param>
      <returns>The new logger instance.</returns>
    </member>
    <member name="M:NLog.ComInterop.ComLogManager.LoadConfigFromFile(System.String)">
      <summary>
            Loads NLog configuration from the specified file.
            </summary>
      <param name="fileName">The name of the file to load NLog configuration from.</param>
    </member>
    <member name="P:NLog.ComInterop.ComLogManager.InternalLogToConsole">
      <summary>
            Gets or sets a value indicating whether to log internal messages to the console.
            </summary>
      <value>
            A value of <c>true</c> if internal messages should be logged to the console; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:NLog.ComInterop.ComLogManager.InternalLogLevel">
      <summary>
            Gets or sets the name of the internal log level.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:NLog.ComInterop.ComLogManager.InternalLogFile">
      <summary>
            Gets or sets the name of the internal log file.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:NLog.Common.AsyncContinuation">
      <summary>
            Asynchronous continuation delegate - function invoked at the end of asynchronous
            processing.
            </summary>
      <param name="exception">Exception during asynchronous processing or null if no exception
            was thrown.</param>
    </member>
    <member name="T:NLog.Common.AsyncHelpers">
      <summary>
            Helpers for asynchronous operations.
            </summary>
    </member>
    <member name="M:NLog.Common.AsyncHelpers.ForEachItemSequentially``1(System.Collections.Generic.IEnumerable{``0},NLog.Common.AsyncContinuation,NLog.Common.AsynchronousAction{``0})">
      <summary>
            Iterates over all items in the given collection and runs the specified action
            in sequence (each action executes only after the preceding one has completed without an error).
            </summary>
      <typeparam name="T">Type of each item.</typeparam>
      <param name="items">The items to iterate.</param>
      <param name="asyncContinuation">The asynchronous continuation to invoke once all items
            have been iterated.</param>
      <param name="action">The action to invoke for each item.</param>
    </member>
    <member name="M:NLog.Common.AsyncHelpers.Repeat(System.Int32,NLog.Common.AsyncContinuation,NLog.Common.AsynchronousAction)">
      <summary>
            Repeats the specified asynchronous action multiple times and invokes asynchronous continuation at the end.
            </summary>
      <param name="repeatCount">The repeat count.</param>
      <param name="asyncContinuation">The asynchronous continuation to invoke at the end.</param>
      <param name="action">The action to invoke.</param>
    </member>
    <member name="M:NLog.Common.AsyncHelpers.PrecededBy(NLog.Common.AsyncContinuation,NLog.Common.AsynchronousAction)">
      <summary>
            Modifies the continuation by pre-pending given action to execute just before it.
            </summary>
      <param name="asyncContinuation">The async continuation.</param>
      <param name="action">The action to pre-pend.</param>
      <returns>Continuation which will execute the given action before forwarding to the actual continuation.</returns>
    </member>
    <member name="M:NLog.Common.AsyncHelpers.WithTimeout(NLog.Common.AsyncContinuation,System.TimeSpan)">
      <summary>
            Attaches a timeout to a continuation which will invoke the continuation when the specified
            timeout has elapsed.
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
      <param name="timeout">The timeout.</param>
      <returns>Wrapped continuation.</returns>
    </member>
    <member name="M:NLog.Common.AsyncHelpers.ForEachItemInParallel``1(System.Collections.Generic.IEnumerable{``0},NLog.Common.AsyncContinuation,NLog.Common.AsynchronousAction{``0})">
      <summary>
            Iterates over all items in the given collection and runs the specified action
            in parallel (each action executes on a thread from thread pool).
            </summary>
      <typeparam name="T">Type of each item.</typeparam>
      <param name="values">The items to iterate.</param>
      <param name="asyncContinuation">The asynchronous continuation to invoke once all items
            have been iterated.</param>
      <param name="action">The action to invoke for each item.</param>
    </member>
    <member name="M:NLog.Common.AsyncHelpers.RunSynchronously(NLog.Common.AsynchronousAction)">
      <summary>
            Runs the specified asynchronous action synchronously (blocks until the continuation has
            been invoked).
            </summary>
      <param name="action">The action.</param>
      <remarks>
            Using this method is not recommended because it will block the calling thread.
            </remarks>
    </member>
    <member name="M:NLog.Common.AsyncHelpers.PreventMultipleCalls(NLog.Common.AsyncContinuation)">
      <summary>
            Wraps the continuation with a guard which will only make sure that the continuation function
            is invoked only once.
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
      <returns>Wrapped asynchronous continuation.</returns>
    </member>
    <member name="M:NLog.Common.AsyncHelpers.GetCombinedException(System.Collections.Generic.IList{System.Exception})">
      <summary>
            Gets the combined exception from all exceptions in the list.
            </summary>
      <param name="exceptions">The exceptions.</param>
      <returns>Combined exception or null if no exception was thrown.</returns>
    </member>
    <member name="T:NLog.Common.AsynchronousAction">
      <summary>
            Asynchronous action.
            </summary>
      <param name="asyncContinuation">Continuation to be invoked at the end of action.</param>
    </member>
    <member name="T:NLog.Common.AsynchronousAction`1">
      <summary>
            Asynchronous action with one argument.
            </summary>
      <typeparam name="T">Type of the argument.</typeparam>
      <param name="argument">Argument to the action.</param>
      <param name="asyncContinuation">Continuation to be invoked at the end of action.</param>
    </member>
    <member name="T:NLog.Common.AsyncLogEventInfo">
      <summary>
            Represents the logging event with asynchronous continuation.
            </summary>
    </member>
    <member name="M:NLog.Common.AsyncLogEventInfo.#ctor(NLog.LogEventInfo,NLog.Common.AsyncContinuation)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Common.AsyncLogEventInfo" /> struct.
            </summary>
      <param name="logEvent">The log event.</param>
      <param name="continuation">The continuation.</param>
    </member>
    <member name="M:NLog.Common.AsyncLogEventInfo.op_Equality(NLog.Common.AsyncLogEventInfo,NLog.Common.AsyncLogEventInfo)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="eventInfo1">The event info1.</param>
      <param name="eventInfo2">The event info2.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:NLog.Common.AsyncLogEventInfo.op_Inequality(NLog.Common.AsyncLogEventInfo,NLog.Common.AsyncLogEventInfo)">
      <summary>
            Implements the operator ==.
            </summary>
      <param name="eventInfo1">The event info1.</param>
      <param name="eventInfo2">The event info2.</param>
      <returns>The result of the operator.</returns>
    </member>
    <member name="M:NLog.Common.AsyncLogEventInfo.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
            A value of <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:NLog.Common.AsyncLogEventInfo.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="P:NLog.Common.AsyncLogEventInfo.LogEvent">
      <summary>
            Gets the log event.
            </summary>
    </member>
    <member name="P:NLog.Common.AsyncLogEventInfo.Continuation">
      <summary>
            Gets the continuation.
            </summary>
    </member>
    <member name="T:NLog.Common.InternalLogger">
      <summary>
            NLog internal logger.
            </summary>
    </member>
    <member name="M:NLog.Common.InternalLogger.Log(NLog.LogLevel,System.String,System.Object[])">
      <summary>
            Logs the specified message at the specified level.
            </summary>
      <param name="level">Log level.</param>
      <param name="message">Message which may include positional parameters.</param>
      <param name="args">Arguments to the message.</param>
    </member>
    <member name="M:NLog.Common.InternalLogger.Log(NLog.LogLevel,System.String)">
      <summary>
            Logs the specified message at the specified level.
            </summary>
      <param name="level">Log level.</param>
      <param name="message">Log message.</param>
    </member>
    <member name="M:NLog.Common.InternalLogger.Trace(System.String,System.Object[])">
      <summary>
            Logs the specified message at the Trace level.
            </summary>
      <param name="message">Message which may include positional parameters.</param>
      <param name="args">Arguments to the message.</param>
    </member>
    <member name="M:NLog.Common.InternalLogger.Trace(System.String)">
      <summary>
            Logs the specified message at the Trace level.
            </summary>
      <param name="message">Log message.</param>
    </member>
    <member name="M:NLog.Common.InternalLogger.Debug(System.String,System.Object[])">
      <summary>
            Logs the specified message at the Debug level.
            </summary>
      <param name="message">Message which may include positional parameters.</param>
      <param name="args">Arguments to the message.</param>
    </member>
    <member name="M:NLog.Common.InternalLogger.Debug(System.String)">
      <summary>
            Logs the specified message at the Debug level.
            </summary>
      <param name="message">Log message.</param>
    </member>
    <member name="M:NLog.Common.InternalLogger.Info(System.String,System.Object[])">
      <summary>
            Logs the specified message at the Info level.
            </summary>
      <param name="message">Message which may include positional parameters.</param>
      <param name="args">Arguments to the message.</param>
    </member>
    <member name="M:NLog.Common.InternalLogger.Info(System.String)">
      <summary>
            Logs the specified message at the Info level.
            </summary>
      <param name="message">Log message.</param>
    </member>
    <member name="M:NLog.Common.InternalLogger.Warn(System.String,System.Object[])">
      <summary>
            Logs the specified message at the Warn level.
            </summary>
      <param name="message">Message which may include positional parameters.</param>
      <param name="args">Arguments to the message.</param>
    </member>
    <member name="M:NLog.Common.InternalLogger.Warn(System.String)">
      <summary>
            Logs the specified message at the Warn level.
            </summary>
      <param name="message">Log message.</param>
    </member>
    <member name="M:NLog.Common.InternalLogger.Error(System.String,System.Object[])">
      <summary>
            Logs the specified message at the Error level.
            </summary>
      <param name="message">Message which may include positional parameters.</param>
      <param name="args">Arguments to the message.</param>
    </member>
    <member name="M:NLog.Common.InternalLogger.Error(System.String)">
      <summary>
            Logs the specified message at the Error level.
            </summary>
      <param name="message">Log message.</param>
    </member>
    <member name="M:NLog.Common.InternalLogger.Fatal(System.String,System.Object[])">
      <summary>
            Logs the specified message at the Fatal level.
            </summary>
      <param name="message">Message which may include positional parameters.</param>
      <param name="args">Arguments to the message.</param>
    </member>
    <member name="M:NLog.Common.InternalLogger.Fatal(System.String)">
      <summary>
            Logs the specified message at the Fatal level.
            </summary>
      <param name="message">Log message.</param>
    </member>
    <member name="P:NLog.Common.InternalLogger.LogLevel">
      <summary>
            Gets or sets the internal log level.
            </summary>
    </member>
    <member name="P:NLog.Common.InternalLogger.LogToConsole">
      <summary>
            Gets or sets a value indicating whether internal messages should be written to the console output stream.
            </summary>
    </member>
    <member name="P:NLog.Common.InternalLogger.LogToConsoleError">
      <summary>
            Gets or sets a value indicating whether internal messages should be written to the console error stream.
            </summary>
    </member>
    <member name="P:NLog.Common.InternalLogger.LogFile">
      <summary>
            Gets or sets the name of the internal log file.
            </summary>
      <remarks>A value of <see langword="null" /> value disables internal logging to a file.</remarks>
    </member>
    <member name="P:NLog.Common.InternalLogger.LogWriter">
      <summary>
            Gets or sets the text writer that will receive internal logs.
            </summary>
    </member>
    <member name="P:NLog.Common.InternalLogger.IncludeTimestamp">
      <summary>
            Gets or sets a value indicating whether timestamp should be included in internal log output.
            </summary>
    </member>
    <member name="P:NLog.Common.InternalLogger.IsTraceEnabled">
      <summary>
            Gets a value indicating whether internal log includes Trace messages.
            </summary>
    </member>
    <member name="P:NLog.Common.InternalLogger.IsDebugEnabled">
      <summary>
            Gets a value indicating whether internal log includes Debug messages.
            </summary>
    </member>
    <member name="P:NLog.Common.InternalLogger.IsInfoEnabled">
      <summary>
            Gets a value indicating whether internal log includes Info messages.
            </summary>
    </member>
    <member name="P:NLog.Common.InternalLogger.IsWarnEnabled">
      <summary>
            Gets a value indicating whether internal log includes Warn messages.
            </summary>
    </member>
    <member name="P:NLog.Common.InternalLogger.IsErrorEnabled">
      <summary>
            Gets a value indicating whether internal log includes Error messages.
            </summary>
    </member>
    <member name="P:NLog.Common.InternalLogger.IsFatalEnabled">
      <summary>
            Gets a value indicating whether internal log includes Fatal messages.
            </summary>
    </member>
    <member name="T:NLog.Common.LogEventInfoBuffer">
      <summary>
            A cyclic buffer of <see cref="T:NLog.LogEventInfo" /> object.
            </summary>
    </member>
    <member name="M:NLog.Common.LogEventInfoBuffer.#ctor(System.Int32,System.Boolean,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Common.LogEventInfoBuffer" /> class.
            </summary>
      <param name="size">Buffer size.</param>
      <param name="growAsNeeded">Whether buffer should grow as it becomes full.</param>
      <param name="growLimit">The maximum number of items that the buffer can grow to.</param>
    </member>
    <member name="M:NLog.Common.LogEventInfoBuffer.Append(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Adds the specified log event to the buffer.
            </summary>
      <param name="eventInfo">Log event.</param>
      <returns>The number of items in the buffer.</returns>
    </member>
    <member name="M:NLog.Common.LogEventInfoBuffer.GetEventsAndClear">
      <summary>
            Gets the array of events accumulated in the buffer and clears the buffer as one atomic operation.
            </summary>
      <returns>Events in the buffer.</returns>
    </member>
    <member name="P:NLog.Common.LogEventInfoBuffer.Size">
      <summary>
            Gets the number of items in the array.
            </summary>
    </member>
    <member name="T:NLog.Conditions.ConditionExpression">
      <summary>
            Base class for representing nodes in condition expression trees.
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionExpression.op_Implicit(System.String)~NLog.Conditions.ConditionExpression">
      <summary>
            Converts condition text to a condition expression tree.
            </summary>
      <param name="conditionExpressionText">Condition text to be converted.</param>
      <returns>Condition expression tree.</returns>
    </member>
    <member name="M:NLog.Conditions.ConditionExpression.Evaluate(NLog.LogEventInfo)">
      <summary>
            Evaluates the expression.
            </summary>
      <param name="context">Evaluation context.</param>
      <returns>Expression result.</returns>
    </member>
    <member name="M:NLog.Conditions.ConditionExpression.ToString">
      <summary>
            Returns a string representation of the expression.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the condition expression.
            </returns>
    </member>
    <member name="M:NLog.Conditions.ConditionExpression.EvaluateNode(NLog.LogEventInfo)">
      <summary>
            Evaluates the expression.
            </summary>
      <param name="context">Evaluation context.</param>
      <returns>Expression result.</returns>
    </member>
    <member name="T:NLog.Conditions.ConditionAndExpression">
      <summary>
            Condition <b>and</b> expression.
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionAndExpression.#ctor(NLog.Conditions.ConditionExpression,NLog.Conditions.ConditionExpression)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionAndExpression" /> class.
            </summary>
      <param name="left">Left hand side of the AND expression.</param>
      <param name="right">Right hand side of the AND expression.</param>
    </member>
    <member name="M:NLog.Conditions.ConditionAndExpression.ToString">
      <summary>
            Returns a string representation of this expression.
            </summary>
      <returns>A concatenated '(Left) and (Right)' string.</returns>
    </member>
    <member name="M:NLog.Conditions.ConditionAndExpression.EvaluateNode(NLog.LogEventInfo)">
      <summary>
            Evaluates the expression by evaluating <see cref="P:NLog.Conditions.ConditionAndExpression.Left" /> and <see cref="P:NLog.Conditions.ConditionAndExpression.Right" /> recursively.
            </summary>
      <param name="context">Evaluation context.</param>
      <returns>The value of the conjunction operator.</returns>
    </member>
    <member name="P:NLog.Conditions.ConditionAndExpression.Left">
      <summary>
            Gets the left hand side of the AND expression.
            </summary>
    </member>
    <member name="P:NLog.Conditions.ConditionAndExpression.Right">
      <summary>
            Gets the right hand side of the AND expression.
            </summary>
    </member>
    <member name="T:NLog.Conditions.ConditionEvaluationException">
      <summary>
            Exception during evaluation of condition expression.
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionEvaluationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionEvaluationException" /> class.
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionEvaluationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionEvaluationException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:NLog.Conditions.ConditionEvaluationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionEvaluationException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:NLog.Conditions.ConditionEvaluationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionEvaluationException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="T:NLog.Conditions.ConditionLayoutExpression">
      <summary>
            Condition layout expression (represented by a string literal
            with embedded ${}).
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionLayoutExpression.#ctor(NLog.Layouts.Layout)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionLayoutExpression" /> class.
            </summary>
      <param name="layout">The layout.</param>
    </member>
    <member name="M:NLog.Conditions.ConditionLayoutExpression.ToString">
      <summary>
            Returns a string representation of this expression.
            </summary>
      <returns>String literal in single quotes.</returns>
    </member>
    <member name="M:NLog.Conditions.ConditionLayoutExpression.EvaluateNode(NLog.LogEventInfo)">
      <summary>
            Evaluates the expression by calculating the value
            of the layout in the specified evaluation context.
            </summary>
      <param name="context">Evaluation context.</param>
      <returns>The value of the layout.</returns>
    </member>
    <member name="P:NLog.Conditions.ConditionLayoutExpression.Layout">
      <summary>
            Gets the layout.
            </summary>
      <value>The layout.</value>
    </member>
    <member name="T:NLog.Conditions.ConditionLevelExpression">
      <summary>
            Condition level expression (represented by the <b>level</b> keyword).
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionLevelExpression.ToString">
      <summary>
            Returns a string representation of the expression.
            </summary>
      <returns>The '<b>level</b>' string.</returns>
    </member>
    <member name="M:NLog.Conditions.ConditionLevelExpression.EvaluateNode(NLog.LogEventInfo)">
      <summary>
            Evaluates to the current log level.
            </summary>
      <param name="context">Evaluation context. Ignored.</param>
      <returns>The <see cref="T:NLog.LogLevel" /> object representing current log level.</returns>
    </member>
    <member name="T:NLog.Conditions.ConditionLiteralExpression">
      <summary>
            Condition literal expression (numeric, <b>LogLevel.XXX</b>, <b>true</b> or <b>false</b>).
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionLiteralExpression.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionLiteralExpression" /> class.
            </summary>
      <param name="literalValue">Literal value.</param>
    </member>
    <member name="M:NLog.Conditions.ConditionLiteralExpression.ToString">
      <summary>
            Returns a string representation of the expression.
            </summary>
      <returns>The literal value.</returns>
    </member>
    <member name="M:NLog.Conditions.ConditionLiteralExpression.EvaluateNode(NLog.LogEventInfo)">
      <summary>
            Evaluates the expression.
            </summary>
      <param name="context">Evaluation context.</param>
      <returns>The literal value as passed in the constructor.</returns>
    </member>
    <member name="P:NLog.Conditions.ConditionLiteralExpression.LiteralValue">
      <summary>
            Gets the literal value.
            </summary>
      <value>The literal value.</value>
    </member>
    <member name="T:NLog.Conditions.ConditionLoggerNameExpression">
      <summary>
            Condition logger name expression (represented by the <b>logger</b> keyword).
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionLoggerNameExpression.ToString">
      <summary>
            Returns a string representation of this expression.
            </summary>
      <returns>A <b>logger</b> string.</returns>
    </member>
    <member name="M:NLog.Conditions.ConditionLoggerNameExpression.EvaluateNode(NLog.LogEventInfo)">
      <summary>
            Evaluates to the logger name.
            </summary>
      <param name="context">Evaluation context.</param>
      <returns>The logger name.</returns>
    </member>
    <member name="T:NLog.Conditions.ConditionMessageExpression">
      <summary>
            Condition message expression (represented by the <b>message</b> keyword).
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionMessageExpression.ToString">
      <summary>
            Returns a string representation of this expression.
            </summary>
      <returns>The '<b>message</b>' string.</returns>
    </member>
    <member name="M:NLog.Conditions.ConditionMessageExpression.EvaluateNode(NLog.LogEventInfo)">
      <summary>
            Evaluates to the logger message.
            </summary>
      <param name="context">Evaluation context.</param>
      <returns>The logger message.</returns>
    </member>
    <member name="T:NLog.Config.NameBaseAttribute">
      <summary>
            Attaches a simple name to an item (such as <see cref="T:NLog.Targets.Target" />, 
            <see cref="T:NLog.LayoutRenderers.LayoutRenderer" />, <see cref="T:NLog.Layouts.Layout" />, etc.).
            </summary>
    </member>
    <member name="M:NLog.Config.NameBaseAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.NameBaseAttribute" /> class.
            </summary>
      <param name="name">The name of the item.</param>
    </member>
    <member name="P:NLog.Config.NameBaseAttribute.Name">
      <summary>
            Gets the name of the item.
            </summary>
      <value>The name of the item.</value>
    </member>
    <member name="T:NLog.Conditions.ConditionMethodAttribute">
      <summary>
            Marks class as a log event Condition and assigns a name to it.
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionMethodAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionMethodAttribute" /> class.
            </summary>
      <param name="name">Condition method name.</param>
    </member>
    <member name="T:NLog.Conditions.ConditionMethodExpression">
      <summary>
            Condition method invocation expression (represented by <b>method(p1,p2,p3)</b> syntax).
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionMethodExpression.#ctor(System.String,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{NLog.Conditions.ConditionExpression})">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionMethodExpression" /> class.
            </summary>
      <param name="conditionMethodName">Name of the condition method.</param>
      <param name="methodInfo">
        <see cref="P:NLog.Conditions.ConditionMethodExpression.MethodInfo" /> of the condition method.</param>
      <param name="methodParameters">The method parameters.</param>
    </member>
    <member name="M:NLog.Conditions.ConditionMethodExpression.ToString">
      <summary>
            Returns a string representation of the expression.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the condition expression.
            </returns>
    </member>
    <member name="M:NLog.Conditions.ConditionMethodExpression.EvaluateNode(NLog.LogEventInfo)">
      <summary>
            Evaluates the expression.
            </summary>
      <param name="context">Evaluation context.</param>
      <returns>Expression result.</returns>
    </member>
    <member name="P:NLog.Conditions.ConditionMethodExpression.MethodInfo">
      <summary>
            Gets the method info.
            </summary>
    </member>
    <member name="P:NLog.Conditions.ConditionMethodExpression.MethodParameters">
      <summary>
            Gets the method parameters.
            </summary>
      <value>The method parameters.</value>
    </member>
    <member name="T:NLog.Conditions.ConditionMethods">
      <summary>
            A bunch of utility methods (mostly predicates) which can be used in
            condition expressions. Parially inspired by XPath 1.0.
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionMethods.Equals2(System.Object,System.Object)">
      <summary>
            Compares two values for equality.
            </summary>
      <param name="firstValue">The first value.</param>
      <param name="secondValue">The second value.</param>
      <returns>
        <b>true</b> when two objects are equal, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:NLog.Conditions.ConditionMethods.Contains(System.String,System.String)">
      <summary>
            Gets or sets a value indicating whether the second string is a substring of the first one.
            </summary>
      <param name="haystack">The first string.</param>
      <param name="needle">The second string.</param>
      <returns>
        <b>true</b> when the second string is a substring of the first string, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:NLog.Conditions.ConditionMethods.StartsWith(System.String,System.String)">
      <summary>
            Gets or sets a value indicating whether the second string is a prefix of the first one.
            </summary>
      <param name="haystack">The first string.</param>
      <param name="needle">The second string.</param>
      <returns>
        <b>true</b> when the second string is a prefix of the first string, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:NLog.Conditions.ConditionMethods.EndsWith(System.String,System.String)">
      <summary>
            Gets or sets a value indicating whether the second string is a suffix of the first one.
            </summary>
      <param name="haystack">The first string.</param>
      <param name="needle">The second string.</param>
      <returns>
        <b>true</b> when the second string is a prefix of the first string, <b>false</b> otherwise.</returns>
    </member>
    <member name="M:NLog.Conditions.ConditionMethods.Length(System.String)">
      <summary>
            Returns the length of a string.
            </summary>
      <param name="text">A string whose lengths is to be evaluated.</param>
      <returns>The length of the string.</returns>
    </member>
    <member name="T:NLog.Conditions.ConditionMethodsAttribute">
      <summary>
            Marks the class as containing condition methods.
            </summary>
    </member>
    <member name="T:NLog.Conditions.ConditionNotExpression">
      <summary>
            Condition <b>not</b> expression.
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionNotExpression.#ctor(NLog.Conditions.ConditionExpression)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionNotExpression" /> class.
            </summary>
      <param name="expression">The expression.</param>
    </member>
    <member name="M:NLog.Conditions.ConditionNotExpression.ToString">
      <summary>
            Returns a string representation of the expression.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the condition expression.
            </returns>
    </member>
    <member name="M:NLog.Conditions.ConditionNotExpression.EvaluateNode(NLog.LogEventInfo)">
      <summary>
            Evaluates the expression.
            </summary>
      <param name="context">Evaluation context.</param>
      <returns>Expression result.</returns>
    </member>
    <member name="P:NLog.Conditions.ConditionNotExpression.Expression">
      <summary>
            Gets the expression to be negated.
            </summary>
      <value>The expression.</value>
    </member>
    <member name="T:NLog.Conditions.ConditionOrExpression">
      <summary>
            Condition <b>or</b> expression.
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionOrExpression.#ctor(NLog.Conditions.ConditionExpression,NLog.Conditions.ConditionExpression)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionOrExpression" /> class.
            </summary>
      <param name="left">Left hand side of the OR expression.</param>
      <param name="right">Right hand side of the OR expression.</param>
    </member>
    <member name="M:NLog.Conditions.ConditionOrExpression.ToString">
      <summary>
            Returns a string representation of the expression.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the condition expression.
            </returns>
    </member>
    <member name="M:NLog.Conditions.ConditionOrExpression.EvaluateNode(NLog.LogEventInfo)">
      <summary>
            Evaluates the expression by evaluating <see cref="P:NLog.Conditions.ConditionOrExpression.LeftExpression" /> and <see cref="P:NLog.Conditions.ConditionOrExpression.RightExpression" /> recursively.
            </summary>
      <param name="context">Evaluation context.</param>
      <returns>The value of the alternative operator.</returns>
    </member>
    <member name="P:NLog.Conditions.ConditionOrExpression.LeftExpression">
      <summary>
            Gets the left expression.
            </summary>
      <value>The left expression.</value>
    </member>
    <member name="P:NLog.Conditions.ConditionOrExpression.RightExpression">
      <summary>
            Gets the right expression.
            </summary>
      <value>The right expression.</value>
    </member>
    <member name="T:NLog.Conditions.ConditionParseException">
      <summary>
            Exception during parsing of condition expression.
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionParseException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionParseException" /> class.
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionParseException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionParseException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:NLog.Conditions.ConditionParseException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionParseException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:NLog.Conditions.ConditionParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionParseException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="T:NLog.Conditions.ConditionParser">
      <summary>
            Condition parser. Turns a string representation of condition expression
            into an expression tree.
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionParser.#ctor(NLog.Internal.SimpleStringReader,NLog.Config.ConfigurationItemFactory)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionParser" /> class.
            </summary>
      <param name="stringReader">The string reader.</param>
      <param name="configurationItemFactory">Instance of <see cref="T:NLog.Config.ConfigurationItemFactory" /> used to resolve references to condition methods and layout renderers.</param>
    </member>
    <member name="M:NLog.Conditions.ConditionParser.ParseExpression(System.String)">
      <summary>
            Parses the specified condition string and turns it into
            <see cref="T:NLog.Conditions.ConditionExpression" /> tree.
            </summary>
      <param name="expressionText">The expression to be parsed.</param>
      <returns>The root of the expression syntax tree which can be used to get the value of the condition in a specified context.</returns>
    </member>
    <member name="M:NLog.Conditions.ConditionParser.ParseExpression(System.String,NLog.Config.ConfigurationItemFactory)">
      <summary>
            Parses the specified condition string and turns it into
            <see cref="T:NLog.Conditions.ConditionExpression" /> tree.
            </summary>
      <param name="expressionText">The expression to be parsed.</param>
      <param name="configurationItemFactories">Instance of <see cref="T:NLog.Config.ConfigurationItemFactory" /> used to resolve references to condition methods and layout renderers.</param>
      <returns>The root of the expression syntax tree which can be used to get the value of the condition in a specified context.</returns>
    </member>
    <member name="M:NLog.Conditions.ConditionParser.ParseExpression(NLog.Internal.SimpleStringReader,NLog.Config.ConfigurationItemFactory)">
      <summary>
            Parses the specified condition string and turns it into
            <see cref="T:NLog.Conditions.ConditionExpression" /> tree.
            </summary>
      <param name="stringReader">The string reader.</param>
      <param name="configurationItemFactories">Instance of <see cref="T:NLog.Config.ConfigurationItemFactory" /> used to resolve references to condition methods and layout renderers.</param>
      <returns>
            The root of the expression syntax tree which can be used to get the value of the condition in a specified context.
            </returns>
    </member>
    <member name="T:NLog.Conditions.ConditionRelationalExpression">
      <summary>
            Condition relational (<b>==</b>, <b>!=</b>, <b>&lt;</b>, <b>&lt;=</b>,
            <b>&gt;</b> or <b>&gt;=</b>) expression.
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionRelationalExpression.#ctor(NLog.Conditions.ConditionExpression,NLog.Conditions.ConditionExpression,NLog.Conditions.ConditionRelationalOperator)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionRelationalExpression" /> class.
            </summary>
      <param name="leftExpression">The left expression.</param>
      <param name="rightExpression">The right expression.</param>
      <param name="relationalOperator">The relational operator.</param>
    </member>
    <member name="M:NLog.Conditions.ConditionRelationalExpression.ToString">
      <summary>
            Returns a string representation of the expression.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the condition expression.
            </returns>
    </member>
    <member name="M:NLog.Conditions.ConditionRelationalExpression.EvaluateNode(NLog.LogEventInfo)">
      <summary>
            Evaluates the expression.
            </summary>
      <param name="context">Evaluation context.</param>
      <returns>Expression result.</returns>
    </member>
    <member name="M:NLog.Conditions.ConditionRelationalExpression.Compare(System.Object,System.Object,NLog.Conditions.ConditionRelationalOperator)">
      <summary>
            Compares the specified values using specified relational operator.
            </summary>
      <param name="leftValue">The first value.</param>
      <param name="rightValue">The second value.</param>
      <param name="relationalOperator">The relational operator.</param>
      <returns>Result of the given relational operator.</returns>
    </member>
    <member name="P:NLog.Conditions.ConditionRelationalExpression.LeftExpression">
      <summary>
            Gets the left expression.
            </summary>
      <value>The left expression.</value>
    </member>
    <member name="P:NLog.Conditions.ConditionRelationalExpression.RightExpression">
      <summary>
            Gets the right expression.
            </summary>
      <value>The right expression.</value>
    </member>
    <member name="P:NLog.Conditions.ConditionRelationalExpression.RelationalOperator">
      <summary>
            Gets the relational operator.
            </summary>
      <value>The operator.</value>
    </member>
    <member name="T:NLog.Conditions.ConditionRelationalOperator">
      <summary>
            Relational operators used in conditions.
            </summary>
    </member>
    <member name="F:NLog.Conditions.ConditionRelationalOperator.Equal">
      <summary>
            Equality (==).
            </summary>
    </member>
    <member name="F:NLog.Conditions.ConditionRelationalOperator.NotEqual">
      <summary>
            Inequality (!=).
            </summary>
    </member>
    <member name="F:NLog.Conditions.ConditionRelationalOperator.Less">
      <summary>
            Less than (&lt;).
            </summary>
    </member>
    <member name="F:NLog.Conditions.ConditionRelationalOperator.Greater">
      <summary>
            Greater than (&gt;).
            </summary>
    </member>
    <member name="F:NLog.Conditions.ConditionRelationalOperator.LessOrEqual">
      <summary>
            Less than or equal (&lt;=).
            </summary>
    </member>
    <member name="F:NLog.Conditions.ConditionRelationalOperator.GreaterOrEqual">
      <summary>
            Greater than or equal (&gt;=).
            </summary>
    </member>
    <member name="T:NLog.Conditions.ConditionTokenizer">
      <summary>
            Hand-written tokenizer for conditions.
            </summary>
    </member>
    <member name="T:NLog.Conditions.ConditionTokenizer.CharToTokenType">
      <summary>
            Mapping between characters and token types for punctuations.
            </summary>
    </member>
    <member name="M:NLog.Conditions.ConditionTokenizer.CharToTokenType.#ctor(System.Char,NLog.Conditions.ConditionTokenType)">
      <summary>
            Initializes a new instance of the CharToTokenType struct.
            </summary>
      <param name="character">The character.</param>
      <param name="tokenType">Type of the token.</param>
    </member>
    <member name="M:NLog.Conditions.ConditionTokenizer.#ctor(NLog.Internal.SimpleStringReader)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionTokenizer" /> class.
            </summary>
      <param name="stringReader">The string reader.</param>
    </member>
    <member name="M:NLog.Conditions.ConditionTokenizer.Expect(NLog.Conditions.ConditionTokenType)">
      <summary>
            Asserts current token type and advances to the next token.
            </summary>
      <param name="tokenType">Expected token type.</param>
      <remarks>If token type doesn't match, an exception is thrown.</remarks>
    </member>
    <member name="M:NLog.Conditions.ConditionTokenizer.EatKeyword">
      <summary>
            Asserts that current token is a keyword and returns its value and advances to the next token.
            </summary>
      <returns>Keyword value.</returns>
    </member>
    <member name="M:NLog.Conditions.ConditionTokenizer.IsKeyword(System.String)">
      <summary>
            Gets or sets a value indicating whether current keyword is equal to the specified value.
            </summary>
      <param name="keyword">The keyword.</param>
      <returns>
            A value of <c>true</c> if current keyword is equal to the specified value; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:NLog.Conditions.ConditionTokenizer.IsEOF">
      <summary>
            Gets or sets a value indicating whether the tokenizer has reached the end of the token stream.
            </summary>
      <returns>
            A value of <c>true</c> if the tokenizer has reached the end of the token stream; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:NLog.Conditions.ConditionTokenizer.IsNumber">
      <summary>
            Gets or sets a value indicating whether current token is a number.
            </summary>
      <returns>
            A value of <c>true</c> if current token is a number; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:NLog.Conditions.ConditionTokenizer.IsToken(NLog.Conditions.ConditionTokenType)">
      <summary>
            Gets or sets a value indicating whether the specified token is of specified type.
            </summary>
      <param name="tokenType">The token type.</param>
      <returns>
            A value of <c>true</c> if current token is of specified type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:NLog.Conditions.ConditionTokenizer.GetNextToken">
      <summary>
            Gets the next token and sets <see cref="P:NLog.Conditions.ConditionTokenizer.TokenType" /> and <see cref="P:NLog.Conditions.ConditionTokenizer.TokenValue" /> properties.
            </summary>
    </member>
    <member name="P:NLog.Conditions.ConditionTokenizer.TokenPosition">
      <summary>
            Gets the token position.
            </summary>
      <value>The token position.</value>
    </member>
    <member name="P:NLog.Conditions.ConditionTokenizer.TokenType">
      <summary>
            Gets the type of the token.
            </summary>
      <value>The type of the token.</value>
    </member>
    <member name="P:NLog.Conditions.ConditionTokenizer.TokenValue">
      <summary>
            Gets the token value.
            </summary>
      <value>The token value.</value>
    </member>
    <member name="P:NLog.Conditions.ConditionTokenizer.StringTokenValue">
      <summary>
            Gets the value of a string token.
            </summary>
      <value>The string token value.</value>
    </member>
    <member name="T:NLog.Conditions.ConditionTokenType">
      <summary>
            Token types for condition expressions.
            </summary>
    </member>
    <member name="T:NLog.Config.AdvancedAttribute">
      <summary>
            Marks the class or a member as advanced. Advanced classes and members are hidden by 
            default in generated documentation.
            </summary>
    </member>
    <member name="M:NLog.Config.AdvancedAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.AdvancedAttribute" /> class.
            </summary>
    </member>
    <member name="T:NLog.Config.AppDomainFixedOutputAttribute">
      <summary>
            Identifies that the output of layout or layout render does not change for the lifetime of the current appdomain.
            </summary>
    </member>
    <member name="T:NLog.Config.ArrayParameterAttribute">
      <summary>
            Used to mark configurable parameters which are arrays. 
            Specifies the mapping between XML elements and .NET types.
            </summary>
    </member>
    <member name="M:NLog.Config.ArrayParameterAttribute.#ctor(System.Type,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.ArrayParameterAttribute" /> class.
            </summary>
      <param name="itemType">The type of the array item.</param>
      <param name="elementName">The XML element name that represents the item.</param>
    </member>
    <member name="P:NLog.Config.ArrayParameterAttribute.ItemType">
      <summary>
            Gets the .NET type of the array item.
            </summary>
    </member>
    <member name="P:NLog.Config.ArrayParameterAttribute.ElementName">
      <summary>
            Gets the XML element name.
            </summary>
    </member>
    <member name="T:NLog.Config.ConfigSectionHandler">
      <summary>
            NLog configuration section handler class for configuring NLog from App.config.
            </summary>
    </member>
    <member name="T:NLog.Config.ConfigurationItemCreator">
      <summary>
            Constructs a new instance the configuration item (target, layout, layout renderer, etc.) given its type.
            </summary>
      <param name="itemType">Type of the item.</param>
      <returns>Created object of the specified type.</returns>
    </member>
    <member name="T:NLog.Config.ConfigurationItemFactory">
      <summary>
            Provides registration information for named items (targets, layouts, layout renderers, etc.) managed by NLog.
            </summary>
    </member>
    <member name="M:NLog.Config.ConfigurationItemFactory.#ctor(System.Reflection.Assembly[])">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.ConfigurationItemFactory" /> class.
            </summary>
      <param name="assemblies">The assemblies to scan for named items.</param>
    </member>
    <member name="M:NLog.Config.ConfigurationItemFactory.RegisterItemsFromAssembly(System.Reflection.Assembly)">
      <summary>
            Registers named items from the assembly.
            </summary>
      <param name="assembly">The assembly.</param>
    </member>
    <member name="M:NLog.Config.ConfigurationItemFactory.RegisterItemsFromAssembly(System.Reflection.Assembly,System.String)">
      <summary>
            Registers named items from the assembly.
            </summary>
      <param name="assembly">The assembly.</param>
      <param name="itemNamePrefix">Item name prefix.</param>
    </member>
    <member name="M:NLog.Config.ConfigurationItemFactory.Clear">
      <summary>
            Clears the contents of all factories.
            </summary>
    </member>
    <member name="M:NLog.Config.ConfigurationItemFactory.RegisterType(System.Type,System.String)">
      <summary>
            Registers the type.
            </summary>
      <param name="type">The type to register.</param>
      <param name="itemNamePrefix">The item name prefix.</param>
    </member>
    <member name="M:NLog.Config.ConfigurationItemFactory.BuildDefaultFactory">
      <summary>
            Builds the default configuration item factory.
            </summary>
      <returns>Default factory.</returns>
    </member>
    <member name="M:NLog.Config.ConfigurationItemFactory.RegisterExtendedItems">
      <summary>
            Registers items in NLog.Extended.dll using late-bound types, so that we don't need a reference to NLog.Extended.dll.
            </summary>
    </member>
    <member name="P:NLog.Config.ConfigurationItemFactory.Default">
      <summary>
            Gets or sets default singleton instance of <see cref="T:NLog.Config.ConfigurationItemFactory" />.
            </summary>
    </member>
    <member name="P:NLog.Config.ConfigurationItemFactory.CreateInstance">
      <summary>
            Gets or sets the creator delegate used to instantiate configuration objects.
            </summary>
      <remarks>
            By overriding this property, one can enable dependency injection or interception for created objects.
            </remarks>
    </member>
    <member name="P:NLog.Config.ConfigurationItemFactory.Targets">
      <summary>
            Gets the <see cref="T:NLog.Targets.Target" /> factory.
            </summary>
      <value>The target factory.</value>
    </member>
    <member name="P:NLog.Config.ConfigurationItemFactory.Filters">
      <summary>
            Gets the <see cref="T:NLog.Filters.Filter" /> factory.
            </summary>
      <value>The filter factory.</value>
    </member>
    <member name="P:NLog.Config.ConfigurationItemFactory.LayoutRenderers">
      <summary>
            Gets the <see cref="T:NLog.LayoutRenderers.LayoutRenderer" /> factory.
            </summary>
      <value>The layout renderer factory.</value>
    </member>
    <member name="P:NLog.Config.ConfigurationItemFactory.Layouts">
      <summary>
            Gets the <see cref="T:NLog.LayoutRenderers.LayoutRenderer" /> factory.
            </summary>
      <value>The layout factory.</value>
    </member>
    <member name="P:NLog.Config.ConfigurationItemFactory.AmbientProperties">
      <summary>
            Gets the ambient property factory.
            </summary>
      <value>The ambient property factory.</value>
    </member>
    <member name="P:NLog.Config.ConfigurationItemFactory.ConditionMethods">
      <summary>
            Gets the condition method factory.
            </summary>
      <value>The condition method factory.</value>
    </member>
    <member name="T:NLog.Config.DefaultParameterAttribute">
      <summary>
            Attribute used to mark the default parameters for layout renderers.
            </summary>
    </member>
    <member name="M:NLog.Config.DefaultParameterAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.DefaultParameterAttribute" /> class.
            </summary>
    </member>
    <member name="T:NLog.Config.INamedItemFactory`2">
      <summary>
            Represents a factory of named items (such as targets, layouts, layout renderers, etc.).
            </summary>
      <typeparam name="TInstanceType">Base type for each item instance.</typeparam>
      <typeparam name="TDefinitionType">Item definition type (typically <see cref="T:System.Type" /> or <see cref="T:System.Reflection.MethodInfo" />).</typeparam>
    </member>
    <member name="M:NLog.Config.INamedItemFactory`2.RegisterDefinition(System.String,`1)">
      <summary>
            Registers new item definition.
            </summary>
      <param name="itemName">Name of the item.</param>
      <param name="itemDefinition">Item definition.</param>
    </member>
    <member name="M:NLog.Config.INamedItemFactory`2.TryGetDefinition(System.String,`1@)">
      <summary>
            Tries to get registed item definition.
            </summary>
      <param name="itemName">Name of the item.</param>
      <param name="result">Reference to a variable which will store the item definition.</param>
      <returns>Item definition.</returns>
    </member>
    <member name="M:NLog.Config.INamedItemFactory`2.CreateInstance(System.String)">
      <summary>
            Creates item instance.
            </summary>
      <param name="itemName">Name of the item.</param>
      <returns>Newly created item instance.</returns>
    </member>
    <member name="M:NLog.Config.INamedItemFactory`2.TryCreateInstance(System.String,`0@)">
      <summary>
            Tries to create an item instance.
            </summary>
      <param name="itemName">Name of the item.</param>
      <param name="result">The result.</param>
      <returns>True if instance was created successfully, false otherwise.</returns>
    </member>
    <member name="T:NLog.Config.IFactory">
      <summary>
            Provides means to populate factories of named items (such as targets, layouts, layout renderers, etc.).
            </summary>
    </member>
    <member name="T:NLog.Config.Factory`2">
      <summary>
            Factory for class-based items.
            </summary>
      <typeparam name="TBaseType">The base type of each item.</typeparam>
      <typeparam name="TAttributeType">The type of the attribute used to annotate itemss.</typeparam>
    </member>
    <member name="M:NLog.Config.Factory`2.ScanAssembly(System.Reflection.Assembly,System.String)">
      <summary>
            Scans the assembly.
            </summary>
      <param name="theAssembly">The assembly.</param>
      <param name="prefix">The prefix.</param>
    </member>
    <member name="M:NLog.Config.Factory`2.RegisterType(System.Type,System.String)">
      <summary>
            Registers the type.
            </summary>
      <param name="type">The type to register.</param>
      <param name="itemNamePrefix">The item name prefix.</param>
    </member>
    <member name="M:NLog.Config.Factory`2.RegisterNamedType(System.String,System.String)">
      <summary>
            Registers the item based on a type name.
            </summary>
      <param name="itemName">Name of the item.</param>
      <param name="typeName">Name of the type.</param>
    </member>
    <member name="M:NLog.Config.Factory`2.Clear">
      <summary>
            Clears the contents of the factory.
            </summary>
    </member>
    <member name="M:NLog.Config.Factory`2.RegisterDefinition(System.String,System.Type)">
      <summary>
            Registers a single type definition.
            </summary>
      <param name="name">The item name.</param>
      <param name="type">The type of the item.</param>
    </member>
    <member name="M:NLog.Config.Factory`2.TryGetDefinition(System.String,System.Type@)">
      <summary>
            Tries to get registed item definition.
            </summary>
      <param name="itemName">Name of the item.</param>
      <param name="result">Reference to a variable which will store the item definition.</param>
      <returns>Item definition.</returns>
    </member>
    <member name="M:NLog.Config.Factory`2.TryCreateInstance(System.String,`0@)">
      <summary>
            Tries to create an item instance.
            </summary>
      <param name="itemName">Name of the item.</param>
      <param name="result">The result.</param>
      <returns>True if instance was created successfully, false otherwise.</returns>
    </member>
    <member name="M:NLog.Config.Factory`2.CreateInstance(System.String)">
      <summary>
            Creates an item instance.
            </summary>
      <param name="name">The name of the item.</param>
      <returns>Created item.</returns>
    </member>
    <member name="T:NLog.Config.IInstallable">
      <summary>
            Implemented by objects which support installation and uninstallation.
            </summary>
    </member>
    <member name="M:NLog.Config.IInstallable.Install(NLog.Config.InstallationContext)">
      <summary>
            Performs installation which requires administrative permissions.
            </summary>
      <param name="installationContext">The installation context.</param>
    </member>
    <member name="M:NLog.Config.IInstallable.Uninstall(NLog.Config.InstallationContext)">
      <summary>
            Performs uninstallation which requires administrative permissions.
            </summary>
      <param name="installationContext">The installation context.</param>
    </member>
    <member name="M:NLog.Config.IInstallable.IsInstalled(NLog.Config.InstallationContext)">
      <summary>
            Determines whether the item is installed.
            </summary>
      <param name="installationContext">The installation context.</param>
      <returns>
            Value indicating whether the item is installed or null if it is not possible to determine.
            </returns>
    </member>
    <member name="T:NLog.Config.InstallationContext">
      <summary>
            Provides context for install/uninstall operations.
            </summary>
    </member>
    <member name="F:NLog.Config.InstallationContext.logLevel2ConsoleColor">
      <summary>
            Mapping between log levels and console output colors.
            </summary>
    </member>
    <member name="M:NLog.Config.InstallationContext.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.InstallationContext" /> class.
            </summary>
    </member>
    <member name="M:NLog.Config.InstallationContext.#ctor(System.IO.TextWriter)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.InstallationContext" /> class.
            </summary>
      <param name="logOutput">The log output.</param>
    </member>
    <member name="M:NLog.Config.InstallationContext.Trace(System.String,System.Object[])">
      <summary>
            Logs the specified trace message.
            </summary>
      <param name="message">The message.</param>
      <param name="arguments">The arguments.</param>
    </member>
    <member name="M:NLog.Config.InstallationContext.Debug(System.String,System.Object[])">
      <summary>
            Logs the specified debug message.
            </summary>
      <param name="message">The message.</param>
      <param name="arguments">The arguments.</param>
    </member>
    <member name="M:NLog.Config.InstallationContext.Info(System.String,System.Object[])">
      <summary>
            Logs the specified informational message.
            </summary>
      <param name="message">The message.</param>
      <param name="arguments">The arguments.</param>
    </member>
    <member name="M:NLog.Config.InstallationContext.Warning(System.String,System.Object[])">
      <summary>
            Logs the specified warning message.
            </summary>
      <param name="message">The message.</param>
      <param name="arguments">The arguments.</param>
    </member>
    <member name="M:NLog.Config.InstallationContext.Error(System.String,System.Object[])">
      <summary>
            Logs the specified error message.
            </summary>
      <param name="message">The message.</param>
      <param name="arguments">The arguments.</param>
    </member>
    <member name="M:NLog.Config.InstallationContext.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:NLog.Config.InstallationContext.CreateLogEvent">
      <summary>
            Creates the log event which can be used to render layouts during installation/uninstallations.
            </summary>
      <returns>Log event info object.</returns>
    </member>
    <member name="P:NLog.Config.InstallationContext.LogLevel">
      <summary>
            Gets or sets the installation log level.
            </summary>
    </member>
    <member name="P:NLog.Config.InstallationContext.IgnoreFailures">
      <summary>
            Gets or sets a value indicating whether to ignore failures during installation.
            </summary>
    </member>
    <member name="P:NLog.Config.InstallationContext.Parameters">
      <summary>
            Gets the installation parameters.
            </summary>
    </member>
    <member name="P:NLog.Config.InstallationContext.LogOutput">
      <summary>
            Gets or sets the log output.
            </summary>
    </member>
    <member name="T:NLog.Config.LoggingConfiguration">
      <summary>
            Keeps logging configuration and provides simple API
            to modify it.
            </summary>
    </member>
    <member name="M:NLog.Config.LoggingConfiguration.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.LoggingConfiguration" /> class.
            </summary>
    </member>
    <member name="M:NLog.Config.LoggingConfiguration.AddTarget(System.String,NLog.Targets.Target)">
      <summary>
            Registers the specified target object under a given name.
            </summary>
      <param name="name">
            Name of the target.
            </param>
      <param name="target">
            The target object.
            </param>
    </member>
    <member name="M:NLog.Config.LoggingConfiguration.FindTargetByName(System.String)">
      <summary>
            Finds the target with the specified name.
            </summary>
      <param name="name">
            The name of the target to be found.
            </param>
      <returns>
            Found target or <see langword="null" /> when the target is not found.
            </returns>
    </member>
    <member name="M:NLog.Config.LoggingConfiguration.Reload">
      <summary>
            Called by LogManager when one of the log configuration files changes.
            </summary>
      <returns>
            A new instance of <see cref="T:NLog.Config.LoggingConfiguration" /> that represents the updated configuration.
            </returns>
    </member>
    <member name="M:NLog.Config.LoggingConfiguration.RemoveTarget(System.String)">
      <summary>
            Removes the specified named target.
            </summary>
      <param name="name">
            Name of the target.
            </param>
    </member>
    <member name="M:NLog.Config.LoggingConfiguration.Install(NLog.Config.InstallationContext)">
      <summary>
            Installs target-specific objects on current system.
            </summary>
      <param name="installationContext">The installation context.</param>
      <remarks>
            Installation typically runs with administrative permissions.
            </remarks>
    </member>
    <member name="M:NLog.Config.LoggingConfiguration.Uninstall(NLog.Config.InstallationContext)">
      <summary>
            Uninstalls target-specific objects from current system.
            </summary>
      <param name="installationContext">The installation context.</param>
      <remarks>
            Uninstallation typically runs with administrative permissions.
            </remarks>
    </member>
    <member name="M:NLog.Config.LoggingConfiguration.Close">
      <summary>
            Closes all targets and releases any unmanaged resources.
            </summary>
    </member>
    <member name="M:NLog.Config.LoggingConfiguration.FlushAllTargets(NLog.Common.AsyncContinuation)">
      <summary>
            Flushes any pending log messages on all appenders.
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
    </member>
    <member name="M:NLog.Config.LoggingConfiguration.ValidateConfig">
      <summary>
            Validates the configuration.
            </summary>
    </member>
    <member name="P:NLog.Config.LoggingConfiguration.ConfiguredNamedTargets">
      <summary>
            Gets a collection of named targets specified in the configuration.
            </summary>
      <returns>
            A list of named targets.
            </returns>
      <remarks>
            Unnamed targets (such as those wrapped by other targets) are not returned.
            </remarks>
    </member>
    <member name="P:NLog.Config.LoggingConfiguration.FileNamesToWatch">
      <summary>
            Gets the collection of file names which should be watched for changes by NLog.
            </summary>
    </member>
    <member name="P:NLog.Config.LoggingConfiguration.LoggingRules">
      <summary>
            Gets the collection of logging rules.
            </summary>
    </member>
    <member name="P:NLog.Config.LoggingConfiguration.AllTargets">
      <summary>
            Gets all targets.
            </summary>
    </member>
    <member name="T:NLog.Config.LoggingConfigurationChangedEventArgs">
      <summary>
            Arguments for <see cref="E:NLog.LogFactory.ConfigurationChanged" /> events.
            </summary>
    </member>
    <member name="M:NLog.Config.LoggingConfigurationChangedEventArgs.#ctor(NLog.Config.LoggingConfiguration,NLog.Config.LoggingConfiguration)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.LoggingConfigurationChangedEventArgs" /> class.
            </summary>
      <param name="oldConfiguration">The old configuration.</param>
      <param name="newConfiguration">The new configuration.</param>
    </member>
    <member name="P:NLog.Config.LoggingConfigurationChangedEventArgs.OldConfiguration">
      <summary>
            Gets the old configuration.
            </summary>
      <value>The old configuration.</value>
    </member>
    <member name="P:NLog.Config.LoggingConfigurationChangedEventArgs.NewConfiguration">
      <summary>
            Gets the new configuration.
            </summary>
      <value>The new configuration.</value>
    </member>
    <member name="T:NLog.Config.LoggingConfigurationReloadedEventArgs">
      <summary>
            Arguments for <see cref="E:NLog.LogFactory.ConfigurationReloaded" />.
            </summary>
    </member>
    <member name="M:NLog.Config.LoggingConfigurationReloadedEventArgs.#ctor(System.Boolean,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.LoggingConfigurationReloadedEventArgs" /> class.
            </summary>
      <param name="succeeded">Whether configuration reload has succeeded.</param>
      <param name="exception">The exception during configuration reload.</param>
    </member>
    <member name="P:NLog.Config.LoggingConfigurationReloadedEventArgs.Succeeded">
      <summary>
            Gets a value indicating whether configuration reload has succeeded.
            </summary>
      <value>A value of <c>true</c> if succeeded; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:NLog.Config.LoggingConfigurationReloadedEventArgs.Exception">
      <summary>
            Gets the exception which occurred during configuration reload.
            </summary>
      <value>The exception.</value>
    </member>
    <member name="T:NLog.Config.LoggingRule">
      <summary>
            Represents a logging rule. An equivalent of &lt;logger /&gt; configuration element.
            </summary>
    </member>
    <member name="M:NLog.Config.LoggingRule.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.LoggingRule" /> class.
            </summary>
    </member>
    <member name="M:NLog.Config.LoggingRule.#ctor(System.String,NLog.LogLevel,NLog.Targets.Target)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.LoggingRule" /> class.
            </summary>
      <param name="loggerNamePattern">Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends.</param>
      <param name="minLevel">Minimum log level needed to trigger this rule.</param>
      <param name="target">Target to be written to when the rule matches.</param>
    </member>
    <member name="M:NLog.Config.LoggingRule.#ctor(System.String,NLog.Targets.Target)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.LoggingRule" /> class.
            </summary>
      <param name="loggerNamePattern">Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends.</param>
      <param name="target">Target to be written to when the rule matches.</param>
      <remarks>By default no logging levels are defined. You should call <see cref="M:NLog.Config.LoggingRule.EnableLoggingForLevel(NLog.LogLevel)" /> and <see cref="M:NLog.Config.LoggingRule.DisableLoggingForLevel(NLog.LogLevel)" /> to set them.</remarks>
    </member>
    <member name="M:NLog.Config.LoggingRule.EnableLoggingForLevel(NLog.LogLevel)">
      <summary>
            Enables logging for a particular level.
            </summary>
      <param name="level">Level to be enabled.</param>
    </member>
    <member name="M:NLog.Config.LoggingRule.DisableLoggingForLevel(NLog.LogLevel)">
      <summary>
            Disables logging for a particular level.
            </summary>
      <param name="level">Level to be disabled.</param>
    </member>
    <member name="M:NLog.Config.LoggingRule.ToString">
      <summary>
            Returns a string representation of <see cref="T:NLog.Config.LoggingRule" />. Used for debugging.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:NLog.Config.LoggingRule.IsLoggingEnabledForLevel(NLog.LogLevel)">
      <summary>
            Checks whether te particular log level is enabled for this rule.
            </summary>
      <param name="level">Level to be checked.</param>
      <returns>A value of <see langword="true" /> when the log level is enabled, <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:NLog.Config.LoggingRule.NameMatches(System.String)">
      <summary>
            Checks whether given name matches the logger name pattern.
            </summary>
      <param name="loggerName">String to be matched.</param>
      <returns>A value of <see langword="true" /> when the name matches, <see langword="false" /> otherwise.</returns>
    </member>
    <member name="P:NLog.Config.LoggingRule.Targets">
      <summary>
            Gets a collection of targets that should be written to when this rule matches.
            </summary>
    </member>
    <member name="P:NLog.Config.LoggingRule.ChildRules">
      <summary>
            Gets a collection of child rules to be evaluated when this rule matches.
            </summary>
    </member>
    <member name="P:NLog.Config.LoggingRule.Filters">
      <summary>
            Gets a collection of filters to be checked before writing to targets.
            </summary>
    </member>
    <member name="P:NLog.Config.LoggingRule.Final">
      <summary>
            Gets or sets a value indicating whether to quit processing any further rule when this one matches.
            </summary>
    </member>
    <member name="P:NLog.Config.LoggingRule.LoggerNamePattern">
      <summary>
            Gets or sets logger name pattern.
            </summary>
      <remarks>
            Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends but not anywhere else.
            </remarks>
    </member>
    <member name="P:NLog.Config.LoggingRule.Levels">
      <summary>
            Gets the collection of log levels enabled by this rule.
            </summary>
    </member>
    <member name="T:NLog.Config.MethodFactory`2">
      <summary>
            Factory for locating methods.
            </summary>
      <typeparam name="TClassAttributeType">The type of the class marker attribute.</typeparam>
      <typeparam name="TMethodAttributeType">The type of the method marker attribute.</typeparam>
    </member>
    <member name="M:NLog.Config.MethodFactory`2.ScanAssembly(System.Reflection.Assembly,System.String)">
      <summary>
            Scans the assembly for classes marked with <typeparamref name="TClassAttributeType" />
            and methods marked with <typeparamref name="TMethodAttributeType" /> and adds them 
            to the factory.
            </summary>
      <param name="theAssembly">The assembly.</param>
      <param name="prefix">The prefix to use for names.</param>
    </member>
    <member name="M:NLog.Config.MethodFactory`2.RegisterType(System.Type,System.String)">
      <summary>
            Registers the type.
            </summary>
      <param name="type">The type to register.</param>
      <param name="itemNamePrefix">The item name prefix.</param>
    </member>
    <member name="M:NLog.Config.MethodFactory`2.Clear">
      <summary>
            Clears contents of the factory.
            </summary>
    </member>
    <member name="M:NLog.Config.MethodFactory`2.RegisterDefinition(System.String,System.Reflection.MethodInfo)">
      <summary>
            Registers the definition of a single method.
            </summary>
      <param name="name">The method name.</param>
      <param name="methodInfo">The method info.</param>
    </member>
    <member name="M:NLog.Config.MethodFactory`2.TryCreateInstance(System.String,System.Reflection.MethodInfo@)">
      <summary>
            Tries to retrieve method by name.
            </summary>
      <param name="name">The method name.</param>
      <param name="result">The result.</param>
      <returns>A value of <c>true</c> if the method was found, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:NLog.Config.MethodFactory`2.CreateInstance(System.String)">
      <summary>
            Retrieves method by name.
            </summary>
      <param name="name">Method name.</param>
      <returns>MethodInfo object.</returns>
    </member>
    <member name="M:NLog.Config.MethodFactory`2.TryGetDefinition(System.String,System.Reflection.MethodInfo@)">
      <summary>
            Tries to get method definition.
            </summary>
      <param name="name">The method .</param>
      <param name="result">The result.</param>
      <returns>A value of <c>true</c> if the method was found, <c>false</c> otherwise.</returns>
    </member>
    <member name="P:NLog.Config.MethodFactory`2.AllRegisteredItems">
      <summary>
            Gets a collection of all registered items in the factory.
            </summary>
      <returns>
            Sequence of key/value pairs where each key represents the name
            of the item and value is the <see cref="T:System.Reflection.MethodInfo" /> of
            the item.
            </returns>
    </member>
    <member name="T:NLog.Config.NLogConfigurationItemAttribute">
      <summary>
            Marks the object as configuration item for NLog.
            </summary>
    </member>
    <member name="M:NLog.Config.NLogConfigurationItemAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.NLogConfigurationItemAttribute" /> class.
            </summary>
    </member>
    <member name="T:NLog.Config.NLogXmlElement">
      <summary>
            Represents simple XML element with case-insensitive attribute semantics.
            </summary>
    </member>
    <member name="M:NLog.Config.NLogXmlElement.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.NLogXmlElement" /> class.
            </summary>
      <param name="inputUri">The input URI.</param>
    </member>
    <member name="M:NLog.Config.NLogXmlElement.#ctor(System.Xml.XmlReader)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.NLogXmlElement" /> class.
            </summary>
      <param name="reader">The reader to initialize element from.</param>
    </member>
    <member name="M:NLog.Config.NLogXmlElement.#ctor">
      <summary>
            Prevents a default instance of the <see cref="T:NLog.Config.NLogXmlElement" /> class from being created.
            </summary>
    </member>
    <member name="M:NLog.Config.NLogXmlElement.Elements(System.String)">
      <summary>
            Returns children elements with the specified element name.
            </summary>
      <param name="elementName">Name of the element.</param>
      <returns>Children elements with the specified element name.</returns>
    </member>
    <member name="M:NLog.Config.NLogXmlElement.GetRequiredAttribute(System.String)">
      <summary>
            Gets the required attribute.
            </summary>
      <param name="attributeName">Name of the attribute.</param>
      <returns>Attribute value.</returns>
      <remarks>Throws if the attribute is not specified.</remarks>
    </member>
    <member name="M:NLog.Config.NLogXmlElement.GetOptionalBooleanAttribute(System.String,System.Boolean)">
      <summary>
            Gets the optional boolean attribute value.
            </summary>
      <param name="attributeName">Name of the attribute.</param>
      <param name="defaultValue">Default value to return if the attribute is not found.</param>
      <returns>Boolean attribute value or default.</returns>
    </member>
    <member name="M:NLog.Config.NLogXmlElement.GetOptionalAttribute(System.String,System.String)">
      <summary>
            Gets the optional attribute value.
            </summary>
      <param name="attributeName">Name of the attribute.</param>
      <param name="defaultValue">The default value.</param>
      <returns>Value of the attribute or default value.</returns>
    </member>
    <member name="M:NLog.Config.NLogXmlElement.AssertName(System.String[])">
      <summary>
            Asserts that the name of the element is among specified element names.
            </summary>
      <param name="allowedNames">The allowed names.</param>
    </member>
    <member name="P:NLog.Config.NLogXmlElement.LocalName">
      <summary>
            Gets the element name.
            </summary>
    </member>
    <member name="P:NLog.Config.NLogXmlElement.AttributeValues">
      <summary>
            Gets the dictionary of attribute values.
            </summary>
    </member>
    <member name="P:NLog.Config.NLogXmlElement.Children">
      <summary>
            Gets the collection of child elements.
            </summary>
    </member>
    <member name="P:NLog.Config.NLogXmlElement.Value">
      <summary>
            Gets the value of the element.
            </summary>
    </member>
    <member name="T:NLog.Config.RequiredParameterAttribute">
      <summary>
            Attribute used to mark the required parameters for targets,
            layout targets and filters.
            </summary>
    </member>
    <member name="T:NLog.Config.SimpleConfigurator">
      <summary>
            Provides simple programmatic configuration API used for trivial logging cases.
            </summary>
    </member>
    <member name="M:NLog.Config.SimpleConfigurator.ConfigureForConsoleLogging">
      <summary>
            Configures NLog for console logging so that all messages above and including
            the <see cref="F:NLog.LogLevel.Info" /> level are output to the console.
            </summary>
    </member>
    <member name="M:NLog.Config.SimpleConfigurator.ConfigureForConsoleLogging(NLog.LogLevel)">
      <summary>
            Configures NLog for console logging so that all messages above and including
            the specified level are output to the console.
            </summary>
      <param name="minLevel">The minimal logging level.</param>
    </member>
    <member name="M:NLog.Config.SimpleConfigurator.ConfigureForTargetLogging(NLog.Targets.Target)">
      <summary>
            Configures NLog for to log to the specified target so that all messages 
            above and including the <see cref="F:NLog.LogLevel.Info" /> level are output.
            </summary>
      <param name="target">The target to log all messages to.</param>
    </member>
    <member name="M:NLog.Config.SimpleConfigurator.ConfigureForTargetLogging(NLog.Targets.Target,NLog.LogLevel)">
      <summary>
            Configures NLog for to log to the specified target so that all messages 
            above and including the specified level are output.
            </summary>
      <param name="target">The target to log all messages to.</param>
      <param name="minLevel">The minimal logging level.</param>
    </member>
    <member name="M:NLog.Config.SimpleConfigurator.ConfigureForFileLogging(System.String)">
      <summary>
            Configures NLog for file logging so that all messages above and including
            the <see cref="F:NLog.LogLevel.Info" /> level are written to the specified file.
            </summary>
      <param name="fileName">Log file name.</param>
    </member>
    <member name="M:NLog.Config.SimpleConfigurator.ConfigureForFileLogging(System.String,NLog.LogLevel)">
      <summary>
            Configures NLog for file logging so that all messages above and including
            the specified level are written to the specified file.
            </summary>
      <param name="fileName">Log file name.</param>
      <param name="minLevel">The minimal logging level.</param>
    </member>
    <member name="T:NLog.Config.StackTraceUsage">
      <summary>
            Value indicating how stack trace should be captured when processing the log event.
            </summary>
    </member>
    <member name="F:NLog.Config.StackTraceUsage.None">
      <summary>
            Stack trace should not be captured.
            </summary>
    </member>
    <member name="F:NLog.Config.StackTraceUsage.WithoutSource">
      <summary>
            Stack trace should be captured without source-level information.
            </summary>
    </member>
    <member name="F:NLog.Config.StackTraceUsage.WithSource">
      <summary>
            Stack trace should be captured including source-level information such as line numbers.
            </summary>
    </member>
    <member name="F:NLog.Config.StackTraceUsage.Max">
      <summary>
            Capture maximum amount of the stack trace information supported on the plaform.
            </summary>
    </member>
    <member name="T:NLog.Config.ThreadAgnosticAttribute">
      <summary>
            Marks the layout or layout renderer as producing correct results regardless of the thread
            it's running on.
            </summary>
    </member>
    <member name="T:NLog.Config.XmlLoggingConfiguration">
      <summary>
            A class for configuring NLog through an XML configuration file 
            (App.config style or App.nlog style).
            </summary>
    </member>
    <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
      <param name="fileName">Configuration file to be read.</param>
    </member>
    <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
      <param name="fileName">Configuration file to be read.</param>
      <param name="ignoreErrors">Ignore any errors during configuration.</param>
    </member>
    <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.Xml.XmlReader,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> containing the configuration section.</param>
      <param name="fileName">Name of the file that contains the element (to be used as a base for including other files).</param>
    </member>
    <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.Xml.XmlReader,System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> containing the configuration section.</param>
      <param name="fileName">Name of the file that contains the element (to be used as a base for including other files).</param>
      <param name="ignoreErrors">Ignore any errors during configuration.</param>
    </member>
    <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.Xml.XmlElement,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
      <param name="element">The XML element.</param>
      <param name="fileName">Name of the XML file.</param>
    </member>
    <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.Xml.XmlElement,System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
      <param name="element">The XML element.</param>
      <param name="fileName">Name of the XML file.</param>
      <param name="ignoreErrors">If set to <c>true</c> errors will be ignored during file processing.</param>
    </member>
    <member name="M:NLog.Config.XmlLoggingConfiguration.Reload">
      <summary>
            Re-reads the original configuration file and returns the new <see cref="T:NLog.Config.LoggingConfiguration" /> object.
            </summary>
      <returns>The new <see cref="T:NLog.Config.XmlLoggingConfiguration" /> object.</returns>
    </member>
    <member name="M:NLog.Config.XmlLoggingConfiguration.Initialize(System.Xml.XmlReader,System.String,System.Boolean)">
      <summary>
            Initializes the configuration.
            </summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> containing the configuration section.</param>
      <param name="fileName">Name of the file that contains the element (to be used as a base for including other files).</param>
      <param name="ignoreErrors">Ignore any errors during configuration.</param>
    </member>
    <member name="P:NLog.Config.XmlLoggingConfiguration.AppConfig">
      <summary>
            Gets the default <see cref="T:NLog.Config.LoggingConfiguration" /> object by parsing 
            the application configuration file (<c>app.exe.config</c>).
            </summary>
    </member>
    <member name="P:NLog.Config.XmlLoggingConfiguration.AutoReload">
      <summary>
            Gets or sets a value indicating whether the configuration files
            should be watched for changes and reloaded automatically when changed.
            </summary>
    </member>
    <member name="P:NLog.Config.XmlLoggingConfiguration.FileNamesToWatch">
      <summary>
            Gets the collection of file names which should be watched for changes by NLog.
            This is the list of configuration files processed.
            If the <c>autoReload</c> attribute is not set it returns empty collection.
            </summary>
    </member>
    <member name="T:NLog.Filters.Filter">
      <summary>
            An abstract filter class. Provides a way to eliminate log messages
            based on properties other than logger name and log level.
            </summary>
    </member>
    <member name="M:NLog.Filters.Filter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Filters.Filter" /> class.
            </summary>
    </member>
    <member name="M:NLog.Filters.Filter.GetFilterResult(NLog.LogEventInfo)">
      <summary>
            Gets the result of evaluating filter against given log event.
            </summary>
      <param name="logEvent">The log event.</param>
      <returns>Filter result.</returns>
    </member>
    <member name="M:NLog.Filters.Filter.Check(NLog.LogEventInfo)">
      <summary>
            Checks whether log event should be logged or not.
            </summary>
      <param name="logEvent">Log event.</param>
      <returns>
        <see cref="F:NLog.Filters.FilterResult.Ignore" /> - if the log event should be ignored<br /><see cref="F:NLog.Filters.FilterResult.Neutral" /> - if the filter doesn't want to decide<br /><see cref="F:NLog.Filters.FilterResult.Log" /> - if the log event should be logged<br />
            .</returns>
    </member>
    <member name="P:NLog.Filters.Filter.Action">
      <summary>
            Gets or sets the action to be taken when filter matches.
            </summary>
      <docgen category="Filtering Options" order="10" />
    </member>
    <member name="T:NLog.Filters.ConditionBasedFilter">
      <summary>
            Matches when the specified condition is met.
            </summary>
      <remarks>
            Conditions are expressed using a simple language 
            described <a href="conditions.html">here</a>.
            </remarks>
    </member>
    <member name="M:NLog.Filters.ConditionBasedFilter.Check(NLog.LogEventInfo)">
      <summary>
            Checks whether log event should be logged or not.
            </summary>
      <param name="logEvent">Log event.</param>
      <returns>
        <see cref="F:NLog.Filters.FilterResult.Ignore" /> - if the log event should be ignored<br /><see cref="F:NLog.Filters.FilterResult.Neutral" /> - if the filter doesn't want to decide<br /><see cref="F:NLog.Filters.FilterResult.Log" /> - if the log event should be logged<br />
            .</returns>
    </member>
    <member name="P:NLog.Filters.ConditionBasedFilter.Condition">
      <summary>
            Gets or sets the condition expression.
            </summary>
      <docgen category="Filtering Options" order="10" />
    </member>
    <member name="T:NLog.Filters.FilterAttribute">
      <summary>
            Marks class as a layout renderer and assigns a name to it.
            </summary>
    </member>
    <member name="M:NLog.Filters.FilterAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Filters.FilterAttribute" /> class.
            </summary>
      <param name="name">Name of the filter.</param>
    </member>
    <member name="T:NLog.Filters.FilterResult">
      <summary>
            Filter result.
            </summary>
    </member>
    <member name="F:NLog.Filters.FilterResult.Neutral">
      <summary>
            The filter doesn't want to decide whether to log or discard the message.
            </summary>
    </member>
    <member name="F:NLog.Filters.FilterResult.Log">
      <summary>
            The message should be logged.
            </summary>
    </member>
    <member name="F:NLog.Filters.FilterResult.Ignore">
      <summary>
            The message should not be logged.
            </summary>
    </member>
    <member name="F:NLog.Filters.FilterResult.LogFinal">
      <summary>
            The message should be logged and processing should be finished.
            </summary>
    </member>
    <member name="F:NLog.Filters.FilterResult.IgnoreFinal">
      <summary>
            The message should not be logged and processing should be finished.
            </summary>
    </member>
    <member name="T:NLog.Filters.LayoutBasedFilter">
      <summary>
            A base class for filters that are based on comparing a value to a layout.
            </summary>
    </member>
    <member name="M:NLog.Filters.LayoutBasedFilter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Filters.LayoutBasedFilter" /> class.
            </summary>
    </member>
    <member name="P:NLog.Filters.LayoutBasedFilter.Layout">
      <summary>
            Gets or sets the layout to be used to filter log messages.
            </summary>
      <value>The layout.</value>
      <docgen category="Filtering Options" order="10" />
    </member>
    <member name="T:NLog.Filters.WhenContainsFilter">
      <summary>
            Matches when the calculated layout contains the specified substring. 
            This filter is deprecated in favour of <c>&lt;when /&gt;</c> which is based on <a href="conditions.html">contitions</a>.
            </summary>
    </member>
    <member name="M:NLog.Filters.WhenContainsFilter.Check(NLog.LogEventInfo)">
      <summary>
            Checks whether log event should be logged or not.
            </summary>
      <param name="logEvent">Log event.</param>
      <returns>
        <see cref="F:NLog.Filters.FilterResult.Ignore" /> - if the log event should be ignored<br /><see cref="F:NLog.Filters.FilterResult.Neutral" /> - if the filter doesn't want to decide<br /><see cref="F:NLog.Filters.FilterResult.Log" /> - if the log event should be logged<br />
            .</returns>
    </member>
    <member name="P:NLog.Filters.WhenContainsFilter.IgnoreCase">
      <summary>
            Gets or sets a value indicating whether to ignore case when comparing strings.
            </summary>
      <docgen category="Filtering Options" order="10" />
    </member>
    <member name="P:NLog.Filters.WhenContainsFilter.Substring">
      <summary>
            Gets or sets the substring to be matched.
            </summary>
      <docgen category="Filtering Options" order="10" />
    </member>
    <member name="T:NLog.Filters.WhenEqualFilter">
      <summary>
            Matches when the calculated layout is equal to the specified substring.
            This filter is deprecated in favour of <c>&lt;when /&gt;</c> which is based on <a href="conditions.html">contitions</a>.
            </summary>
    </member>
    <member name="M:NLog.Filters.WhenEqualFilter.Check(NLog.LogEventInfo)">
      <summary>
            Checks whether log event should be logged or not.
            </summary>
      <param name="logEvent">Log event.</param>
      <returns>
        <see cref="F:NLog.Filters.FilterResult.Ignore" /> - if the log event should be ignored<br /><see cref="F:NLog.Filters.FilterResult.Neutral" /> - if the filter doesn't want to decide<br /><see cref="F:NLog.Filters.FilterResult.Log" /> - if the log event should be logged<br />
            .</returns>
    </member>
    <member name="P:NLog.Filters.WhenEqualFilter.IgnoreCase">
      <summary>
            Gets or sets a value indicating whether to ignore case when comparing strings.
            </summary>
      <docgen category="Filtering Options" order="10" />
    </member>
    <member name="P:NLog.Filters.WhenEqualFilter.CompareTo">
      <summary>
            Gets or sets a string to compare the layout to.
            </summary>
      <docgen category="Filtering Options" order="10" />
    </member>
    <member name="T:NLog.Filters.WhenNotContainsFilter">
      <summary>
            Matches when the calculated layout does NOT contain the specified substring.
            This filter is deprecated in favour of <c>&lt;when /&gt;</c> which is based on <a href="conditions.html">contitions</a>.
            </summary>
    </member>
    <member name="M:NLog.Filters.WhenNotContainsFilter.Check(NLog.LogEventInfo)">
      <summary>
            Checks whether log event should be logged or not.
            </summary>
      <param name="logEvent">Log event.</param>
      <returns>
        <see cref="F:NLog.Filters.FilterResult.Ignore" /> - if the log event should be ignored<br /><see cref="F:NLog.Filters.FilterResult.Neutral" /> - if the filter doesn't want to decide<br /><see cref="F:NLog.Filters.FilterResult.Log" /> - if the log event should be logged<br />
            .</returns>
    </member>
    <member name="P:NLog.Filters.WhenNotContainsFilter.Substring">
      <summary>
            Gets or sets the substring to be matched.
            </summary>
      <docgen category="Filtering Options" order="10" />
    </member>
    <member name="P:NLog.Filters.WhenNotContainsFilter.IgnoreCase">
      <summary>
            Gets or sets a value indicating whether to ignore case when comparing strings.
            </summary>
      <docgen category="Filtering Options" order="10" />
    </member>
    <member name="T:NLog.Filters.WhenNotEqualFilter">
      <summary>
            Matches when the calculated layout is NOT equal to the specified substring.
            This filter is deprecated in favour of <c>&lt;when /&gt;</c> which is based on <a href="conditions.html">contitions</a>.
            </summary>
    </member>
    <member name="M:NLog.Filters.WhenNotEqualFilter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Filters.WhenNotEqualFilter" /> class.
            </summary>
    </member>
    <member name="M:NLog.Filters.WhenNotEqualFilter.Check(NLog.LogEventInfo)">
      <summary>
            Checks whether log event should be logged or not.
            </summary>
      <param name="logEvent">Log event.</param>
      <returns>
        <see cref="F:NLog.Filters.FilterResult.Ignore" /> - if the log event should be ignored<br /><see cref="F:NLog.Filters.FilterResult.Neutral" /> - if the filter doesn't want to decide<br /><see cref="F:NLog.Filters.FilterResult.Log" /> - if the log event should be logged<br />
            .</returns>
    </member>
    <member name="P:NLog.Filters.WhenNotEqualFilter.CompareTo">
      <summary>
            Gets or sets a string to compare the layout to.
            </summary>
      <docgen category="Filtering Options" order="10" />
    </member>
    <member name="P:NLog.Filters.WhenNotEqualFilter.IgnoreCase">
      <summary>
            Gets or sets a value indicating whether to ignore case when comparing strings.
            </summary>
      <docgen category="Filtering Options" order="10" />
    </member>
    <member name="T:NLog.GDC">
      <summary>
            Global Diagnostics Context - used for log4net compatibility.
            </summary>
    </member>
    <member name="M:NLog.GDC.Set(System.String,System.String)">
      <summary>
            Sets the Global Diagnostics Context item to the specified value.
            </summary>
      <param name="item">Item name.</param>
      <param name="value">Item value.</param>
    </member>
    <member name="M:NLog.GDC.Get(System.String)">
      <summary>
            Gets the Global Diagnostics Context named item.
            </summary>
      <param name="item">Item name.</param>
      <returns>The item value of string.Empty if the value is not present.</returns>
    </member>
    <member name="M:NLog.GDC.Contains(System.String)">
      <summary>
            Checks whether the specified item exists in the Global Diagnostics Context.
            </summary>
      <param name="item">Item name.</param>
      <returns>A boolean indicating whether the specified item exists in current thread GDC.</returns>
    </member>
    <member name="M:NLog.GDC.Remove(System.String)">
      <summary>
            Removes the specified item from the Global Diagnostics Context.
            </summary>
      <param name="item">Item name.</param>
    </member>
    <member name="M:NLog.GDC.Clear">
      <summary>
            Clears the content of the GDC.
            </summary>
    </member>
    <member name="T:NLog.GlobalDiagnosticsContext">
      <summary>
            Global Diagnostics Context - a dictionary structure to hold per-application-instance values.
            </summary>
    </member>
    <member name="M:NLog.GlobalDiagnosticsContext.Set(System.String,System.String)">
      <summary>
            Sets the Global Diagnostics Context item to the specified value.
            </summary>
      <param name="item">Item name.</param>
      <param name="value">Item value.</param>
    </member>
    <member name="M:NLog.GlobalDiagnosticsContext.Get(System.String)">
      <summary>
            Gets the Global Diagnostics Context named item.
            </summary>
      <param name="item">Item name.</param>
      <returns>The item value of string.Empty if the value is not present.</returns>
    </member>
    <member name="M:NLog.GlobalDiagnosticsContext.Contains(System.String)">
      <summary>
            Checks whether the specified item exists in the Global Diagnostics Context.
            </summary>
      <param name="item">Item name.</param>
      <returns>A boolean indicating whether the specified item exists in current thread GDC.</returns>
    </member>
    <member name="M:NLog.GlobalDiagnosticsContext.Remove(System.String)">
      <summary>
            Removes the specified item from the Global Diagnostics Context.
            </summary>
      <param name="item">Item name.</param>
    </member>
    <member name="M:NLog.GlobalDiagnosticsContext.Clear">
      <summary>
            Clears the content of the GDC.
            </summary>
    </member>
    <member name="T:NLog.Internal.AspHelper">
      <summary>
            Various helper methods for accessing state of ASP application.
            </summary>
    </member>
    <member name="T:NLog.Internal.CurrentTimeGetter">
      <summary>
            Optimized methods to get current time.
            </summary>
    </member>
    <member name="P:NLog.Internal.CurrentTimeGetter.Now">
      <summary>
            Gets the current time in an optimized fashion.
            </summary>
      <value>Current time.</value>
    </member>
    <member name="T:NLog.Internal.DictionaryAdapter`2">
      <summary>
            Provides untyped IDictionary interface on top of generic IDictionary.
            </summary>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
    </member>
    <member name="T:NLog.Internal.DictionaryAdapter`2.MyEnumerator">
      <summary>
            Wrapper IDictionaryEnumerator.
            </summary>
    </member>
    <member name="M:NLog.Internal.DictionaryAdapter`2.MyEnumerator.MoveNext">
      <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
      <returns>
            True if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
    </member>
    <member name="M:NLog.Internal.DictionaryAdapter`2.MyEnumerator.Reset">
      <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
    </member>
    <member name="P:NLog.Internal.DictionaryAdapter`2.MyEnumerator.Entry">
      <summary>
            Gets both the key and the value of the current dictionary entry.
            </summary>
      <value>
      </value>
      <returns>
            A <see cref="T:System.Collections.DictionaryEntry" /> containing both the key and the value of the current dictionary entry.
            </returns>
    </member>
    <member name="P:NLog.Internal.DictionaryAdapter`2.MyEnumerator.Key">
      <summary>
            Gets the key of the current dictionary entry.
            </summary>
      <value>
      </value>
      <returns>
            The key of the current element of the enumeration.
            </returns>
    </member>
    <member name="P:NLog.Internal.DictionaryAdapter`2.MyEnumerator.Value">
      <summary>
            Gets the value of the current dictionary entry.
            </summary>
      <value>
      </value>
      <returns>
            The value of the current element of the enumeration.
            </returns>
    </member>
    <member name="P:NLog.Internal.DictionaryAdapter`2.MyEnumerator.Current">
      <summary>
            Gets the current element in the collection.
            </summary>
      <value>
      </value>
      <returns>
            The current element in the collection.
            </returns>
    </member>
    <member name="M:NLog.Internal.DictionaryAdapter`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>
            Initializes a new instance of the DictionaryAdapter class.
            </summary>
      <param name="implementation">The implementation.</param>
    </member>
    <member name="M:NLog.Internal.DictionaryAdapter`2.Add(System.Object,System.Object)">
      <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
      <param name="key">The <see cref="T:System.Object" /> to use as the key of the element to add.</param>
      <param name="value">The <see cref="T:System.Object" /> to use as the value of the element to add.</param>
    </member>
    <member name="M:NLog.Internal.DictionaryAdapter`2.Clear">
      <summary>
            Removes all elements from the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
    </member>
    <member name="M:NLog.Internal.DictionaryAdapter`2.Contains(System.Object)">
      <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary" /> object contains an element with the specified key.
            </summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary" /> object.</param>
      <returns>
            True if the <see cref="T:System.Collections.IDictionary" /> contains an element with the key; otherwise, false.
            </returns>
    </member>
    <member name="M:NLog.Internal.DictionaryAdapter`2.GetEnumerator">
      <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> object.
            </returns>
    </member>
    <member name="M:NLog.Internal.DictionaryAdapter`2.Remove(System.Object)">
      <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
      <param name="key">The key of the element to remove.</param>
    </member>
    <member name="M:NLog.Internal.DictionaryAdapter`2.CopyTo(System.Array,System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="P:NLog.Internal.DictionaryAdapter`2.Values">
      <summary>
            Gets an <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
      <value>
      </value>
      <returns>
            An <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.IDictionary" /> object.
            </returns>
    </member>
    <member name="P:NLog.Internal.DictionaryAdapter`2.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" />.
            </summary>
      <value>
      </value>
      <returns>
            The number of elements contained in the <see cref="T:System.Collections.ICollection" />.
            </returns>
    </member>
    <member name="P:NLog.Internal.DictionaryAdapter`2.IsSynchronized">
      <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).
            </summary>
      <value>
      </value>
      <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.
            </returns>
    </member>
    <member name="P:NLog.Internal.DictionaryAdapter`2.SyncRoot">
      <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
            </summary>
      <value>
      </value>
      <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
            </returns>
    </member>
    <member name="P:NLog.Internal.DictionaryAdapter`2.IsFixedSize">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> object has a fixed size.
            </summary>
      <value>
      </value>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> object has a fixed size; otherwise, false.
            </returns>
    </member>
    <member name="P:NLog.Internal.DictionaryAdapter`2.IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> object is read-only.
            </summary>
      <value>
      </value>
      <returns>true if the <see cref="T:System.Collections.IDictionary" /> object is read-only; otherwise, false.
            </returns>
    </member>
    <member name="P:NLog.Internal.DictionaryAdapter`2.Keys">
      <summary>
            Gets an <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
      <value>
      </value>
      <returns>
            An <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:System.Collections.IDictionary" /> object.
            </returns>
    </member>
    <member name="P:NLog.Internal.DictionaryAdapter`2.Item(System.Object)">
      <summary>
            Gets or sets the <see cref="T:System.Object" /> with the specified key.
            </summary>
      <param name="key">Dictionary key.</param>
      <returns>Value corresponding to key or null if not found</returns>
    </member>
    <member name="T:NLog.Internal.EnumerableHelpers">
      <summary>
            LINQ-like helpers (cannot use LINQ because we must work with .NET 2.0 profile).
            </summary>
    </member>
    <member name="M:NLog.Internal.EnumerableHelpers.OfType``1(System.Collections.IEnumerable)">
      <summary>
            Filters the given enumerable to return only items of the specified type.
            </summary>
      <typeparam name="T">
            Type of the item.
            </typeparam>
      <param name="enumerable">
            The enumerable.
            </param>
      <returns>
            Items of specified type.
            </returns>
    </member>
    <member name="M:NLog.Internal.EnumerableHelpers.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Reverses the specified enumerable.
            </summary>
      <typeparam name="T">
            Type of enumerable item.
            </typeparam>
      <param name="enumerable">
            The enumerable.
            </param>
      <returns>
            Reversed enumerable.
            </returns>
    </member>
    <member name="M:NLog.Internal.EnumerableHelpers.Any``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary>
            Determines is the given predicate is met by any element of the enumerable.
            </summary>
      <typeparam name="T">Element type.</typeparam>
      <param name="enumerable">The enumerable.</param>
      <param name="predicate">The predicate.</param>
      <returns>True if predicate returns true for any element of the collection, false otherwise.</returns>
    </member>
    <member name="M:NLog.Internal.EnumerableHelpers.ToList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Converts the enumerable to list.
            </summary>
      <typeparam name="T">Type of the list element.</typeparam>
      <param name="enumerable">The enumerable.</param>
      <returns>List of elements.</returns>
    </member>
    <member name="T:NLog.Internal.EnvironmentHelper">
      <summary>
            Safe way to get environment variables.
            </summary>
    </member>
    <member name="T:NLog.Internal.ExceptionHelper">
      <summary>
            Helper class for dealing with exceptions.
            </summary>
    </member>
    <member name="M:NLog.Internal.ExceptionHelper.MustBeRethrown(System.Exception)">
      <summary>
            Determines whether the exception must be rethrown.
            </summary>
      <param name="exception">The exception.</param>
      <returns>True if the exception must be rethrown, false otherwise.</returns>
    </member>
    <member name="T:NLog.Internal.FactoryHelper">
      <summary>
            Object construction helper.
            </summary>
    </member>
    <member name="T:NLog.Internal.FileAppenders.BaseFileAppender">
      <summary>
            Base class for optimized file appenders.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.#ctor(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender" /> class.
            </summary>
      <param name="fileName">Name of the file.</param>
      <param name="createParameters">The create parameters.</param>
    </member>
    <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.Write(System.Byte[])">
      <summary>
            Writes the specified bytes.
            </summary>
      <param name="bytes">The bytes.</param>
    </member>
    <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.Flush">
      <summary>
            Flushes this instance.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.Close">
      <summary>
            Closes this instance.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.GetFileInfo(System.DateTime@,System.Int64@)">
      <summary>
            Gets the file info.
            </summary>
      <param name="lastWriteTime">The last write time.</param>
      <param name="fileLength">Length of the file.</param>
      <returns>True if the operation succeeded, false otherwise.</returns>
    </member>
    <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
      <param name="disposing">True to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.FileTouched">
      <summary>
            Records the last write time for a file.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.FileTouched(System.DateTime)">
      <summary>
            Records the last write time for a file to be specific date.
            </summary>
      <param name="dateTime">Date and time when the last write occurred.</param>
    </member>
    <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.CreateFileStream(System.Boolean)">
      <summary>
            Creates the file stream.
            </summary>
      <param name="allowConcurrentWrite">If set to <c>true</c> allow concurrent writes.</param>
      <returns>A <see cref="T:System.IO.FileStream" /> object which can be used to write to the file.</returns>
    </member>
    <member name="P:NLog.Internal.FileAppenders.BaseFileAppender.FileName">
      <summary>
            Gets the name of the file.
            </summary>
      <value>The name of the file.</value>
    </member>
    <member name="P:NLog.Internal.FileAppenders.BaseFileAppender.LastWriteTime">
      <summary>
            Gets the last write time.
            </summary>
      <value>The last write time.</value>
    </member>
    <member name="P:NLog.Internal.FileAppenders.BaseFileAppender.OpenTime">
      <summary>
            Gets the open time of the file.
            </summary>
      <value>The open time.</value>
    </member>
    <member name="P:NLog.Internal.FileAppenders.BaseFileAppender.CreateFileParameters">
      <summary>
            Gets the file creation parameters.
            </summary>
      <value>The file creation parameters.</value>
    </member>
    <member name="T:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender">
      <summary>
            Implementation of <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender" /> which caches 
            file information.
            </summary>
    </member>
    <member name="T:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.Factory">
      <summary>
            Factory class which creates <see cref="T:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender" /> objects.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.#ctor(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender" /> class.
            </summary>
      <param name="fileName">Name of the file.</param>
      <param name="parameters">The parameters.</param>
    </member>
    <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.Close">
      <summary>
            Closes this instance of the appender.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.Flush">
      <summary>
            Flushes this current appender.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.GetFileInfo(System.DateTime@,System.Int64@)">
      <summary>
            Gets the file info.
            </summary>
      <param name="lastWriteTime">The last write time.</param>
      <param name="fileLength">Length of the file.</param>
      <returns>True if the operation succeeded, false otherwise.</returns>
    </member>
    <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.Write(System.Byte[])">
      <summary>
            Writes the specified bytes to a file.
            </summary>
      <param name="bytes">The bytes to be written.</param>
    </member>
    <member name="T:NLog.Internal.FileAppenders.IFileAppenderFactory">
      <summary>
            Interface implemented by all factories capable of creating file appenders.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.IFileAppenderFactory.Open(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
      <summary>
            Opens the appender for given file name and parameters.
            </summary>
      <param name="fileName">Name of the file.</param>
      <param name="parameters">Creation parameters.</param>
      <returns>Instance of <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender" /> which can be used to write to the file.</returns>
    </member>
    <member name="T:NLog.Internal.FileAppenders.ICreateFileParameters">
      <summary>
            Interface that provides parameters for create file function.
            </summary>
    </member>
    <member name="T:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender">
      <summary>
            Provides a multiprocess-safe atomic file appends while
            keeping the files open.
            </summary>
      <remarks>
            On Unix you can get all the appends to be atomic, even when multiple 
            processes are trying to write to the same file, because setting the file
            pointer to the end of the file and appending can be made one operation.
            On Win32 we need to maintain some synchronization between processes
            (global named mutex is used for this)
            </remarks>
    </member>
    <member name="T:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.Factory">
      <summary>
            Factory class.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.#ctor(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender" /> class.
            </summary>
      <param name="fileName">Name of the file.</param>
      <param name="parameters">The parameters.</param>
    </member>
    <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.Write(System.Byte[])">
      <summary>
            Writes the specified bytes.
            </summary>
      <param name="bytes">The bytes to be written.</param>
    </member>
    <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.Close">
      <summary>
            Closes this instance.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.Flush">
      <summary>
            Flushes this instance.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.GetFileInfo(System.DateTime@,System.Int64@)">
      <summary>
            Gets the file info.
            </summary>
      <param name="lastWriteTime">The last write time.</param>
      <param name="fileLength">Length of the file.</param>
      <returns>
            True if the operation succeeded, false otherwise.
            </returns>
    </member>
    <member name="T:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender">
      <summary>
            Multi-process and multi-host file appender which attempts
            to get exclusive write access and retries if it's not available.
            </summary>
    </member>
    <member name="T:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.Factory">
      <summary>
            Factory class.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.#ctor(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender" /> class.
            </summary>
      <param name="fileName">Name of the file.</param>
      <param name="parameters">The parameters.</param>
    </member>
    <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.Write(System.Byte[])">
      <summary>
            Writes the specified bytes.
            </summary>
      <param name="bytes">The bytes.</param>
    </member>
    <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.Flush">
      <summary>
            Flushes this instance.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.Close">
      <summary>
            Closes this instance.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.GetFileInfo(System.DateTime@,System.Int64@)">
      <summary>
            Gets the file info.
            </summary>
      <param name="lastWriteTime">The last write time.</param>
      <param name="fileLength">Length of the file.</param>
      <returns>
            True if the operation succeeded, false otherwise.
            </returns>
    </member>
    <member name="T:NLog.Internal.FileAppenders.SingleProcessFileAppender">
      <summary>
            Optimized single-process file appender which keeps the file open for exclusive write.
            </summary>
    </member>
    <member name="T:NLog.Internal.FileAppenders.SingleProcessFileAppender.Factory">
      <summary>
            Factory class.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.#ctor(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.FileAppenders.SingleProcessFileAppender" /> class.
            </summary>
      <param name="fileName">Name of the file.</param>
      <param name="parameters">The parameters.</param>
    </member>
    <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.Write(System.Byte[])">
      <summary>
            Writes the specified bytes.
            </summary>
      <param name="bytes">The bytes.</param>
    </member>
    <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.Flush">
      <summary>
            Flushes this instance.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.Close">
      <summary>
            Closes this instance.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.GetFileInfo(System.DateTime@,System.Int64@)">
      <summary>
            Gets the file info.
            </summary>
      <param name="lastWriteTime">The last write time.</param>
      <param name="fileLength">Length of the file.</param>
      <returns>
            True if the operation succeeded, false otherwise.
            </returns>
    </member>
    <member name="T:NLog.Internal.FileInfoHelper">
      <summary>
            Optimized routines to get the size and last write time of the specified file.
            </summary>
    </member>
    <member name="M:NLog.Internal.FileInfoHelper.GetFileInfo(System.String,System.IntPtr,System.DateTime@,System.Int64@)">
      <summary>
            Gets the information about a file.
            </summary>
      <param name="fileName">Name of the file.</param>
      <param name="fileHandle">The file handle.</param>
      <param name="lastWriteTime">The last write time of the file.</param>
      <param name="fileLength">Length of the file.</param>
      <returns>A value of <c>true</c> if file information was retrieved successfully, <c>false</c> otherwise.</returns>
    </member>
    <member name="T:NLog.Internal.FormHelper">
      <summary>
            Form helper methods.
            </summary>
    </member>
    <member name="M:NLog.Internal.FormHelper.CreateRichTextBox(System.String,System.Windows.Forms.Form)">
      <summary>
            Creates RichTextBox and docks in parentForm.
            </summary>
      <param name="name">Name of RichTextBox.</param>
      <param name="parentForm">Form to dock RichTextBox.</param>
      <returns>Created RichTextBox.</returns>
    </member>
    <member name="M:NLog.Internal.FormHelper.FindControl(System.String,System.Windows.Forms.Control)">
      <summary>
            Finds control embedded on searchControl.
            </summary>
      <param name="name">Name of the control.</param>
      <param name="searchControl">Control in which we're searching for control.</param>
      <returns>A value of null if no control has been found.</returns>
    </member>
    <member name="M:NLog.Internal.FormHelper.FindControl``1(System.String,System.Windows.Forms.Control)">
      <summary>
            Finds control of specified type embended on searchControl.
            </summary>
      <typeparam name="TControl">The type of the control.</typeparam>
      <param name="name">Name of the control.</param>
      <param name="searchControl">Control in which we're searching for control.</param>
      <returns>
            A value of null if no control has been found.
            </returns>
    </member>
    <member name="M:NLog.Internal.FormHelper.CreateForm(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Creates a form.
            </summary>
      <param name="name">Name of form.</param>
      <param name="width">Width of form.</param>
      <param name="height">Height of form.</param>
      <param name="show">Auto show form.</param>
      <param name="showMinimized">If set to <c>true</c> the form will be minimized.</param>
      <param name="toolWindow">If set to <c>true</c> the form will be created as tool window.</param>
      <returns>Created form.</returns>
    </member>
    <member name="T:NLog.Internal.IRenderable">
      <summary>
            Interface implemented by layouts and layout renderers.
            </summary>
    </member>
    <member name="M:NLog.Internal.IRenderable.Render(NLog.LogEventInfo)">
      <summary>
            Renders the the value of layout or layout renderer in the context of the specified log event.
            </summary>
      <param name="logEvent">The log event.</param>
      <returns>String representation of a layout.</returns>
    </member>
    <member name="T:NLog.Internal.ISmtpClient">
      <summary>
            Supports mocking of SMTP Client code.
            </summary>
    </member>
    <member name="T:NLog.Internal.ISupportsInitialize">
      <summary>
            Supports object initialization and termination.
            </summary>
    </member>
    <member name="M:NLog.Internal.ISupportsInitialize.Initialize(NLog.Config.LoggingConfiguration)">
      <summary>
            Initializes this instance.
            </summary>
      <param name="configuration">The configuration.</param>
    </member>
    <member name="M:NLog.Internal.ISupportsInitialize.Close">
      <summary>
            Closes this instance.
            </summary>
    </member>
    <member name="T:NLog.Internal.IUsesStackTrace">
      <summary>
            Allows components to request stack trace information to be provided in the <see cref="T:NLog.LogEventInfo" />.
            </summary>
    </member>
    <member name="P:NLog.Internal.IUsesStackTrace.StackTraceUsage">
      <summary>
            Gets the level of stack trace information required by the implementing class.
            </summary>
    </member>
    <member name="T:NLog.Internal.LoggerConfiguration">
      <summary>
            Logger configuration.
            </summary>
    </member>
    <member name="M:NLog.Internal.LoggerConfiguration.#ctor(NLog.Internal.TargetWithFilterChain[])">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.LoggerConfiguration" /> class.
            </summary>
      <param name="targetsByLevel">The targets by level.</param>
    </member>
    <member name="M:NLog.Internal.LoggerConfiguration.GetTargetsForLevel(NLog.LogLevel)">
      <summary>
            Gets targets for the specified level.
            </summary>
      <param name="level">The level.</param>
      <returns>Chain of targets with attached filters.</returns>
    </member>
    <member name="M:NLog.Internal.LoggerConfiguration.IsEnabled(NLog.LogLevel)">
      <summary>
            Determines whether the specified level is enabled.
            </summary>
      <param name="level">The level.</param>
      <returns>
            A value of <c>true</c> if the specified level is enabled; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:NLog.Internal.MessageBoxHelper">
      <summary>
            Message Box helper.
            </summary>
    </member>
    <member name="M:NLog.Internal.MessageBoxHelper.Show(System.String,System.String)">
      <summary>
            Shows the specified message using platform-specific message box.
            </summary>
      <param name="message">The message.</param>
      <param name="caption">The caption.</param>
    </member>
    <member name="T:NLog.Internal.MultiFileWatcher">
      <summary>
            Watches multiple files at the same time and raises an event whenever 
            a single change is detected in any of those files.
            </summary>
    </member>
    <member name="M:NLog.Internal.MultiFileWatcher.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:NLog.Internal.MultiFileWatcher.StopWatching">
      <summary>
            Stops the watching.
            </summary>
    </member>
    <member name="M:NLog.Internal.MultiFileWatcher.Watch(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Watches the specified files for changes.
            </summary>
      <param name="fileNames">The file names.</param>
    </member>
    <member name="E:NLog.Internal.MultiFileWatcher.OnChange">
      <summary>
            Occurs when a change is detected in one of the monitored files.
            </summary>
    </member>
    <member name="T:NLog.Internal.MySmtpClient">
      <summary>
            Supports mocking of SMTP Client code.
            </summary>
    </member>
    <member name="T:NLog.Internal.NetworkSenders.NetworkSender">
      <summary>
            A base class for all network senders. Supports one-way sending of messages
            over various protocols.
            </summary>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.NetworkSender.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.NetworkSenders.NetworkSender" /> class.
            </summary>
      <param name="url">The network URL.</param>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Finalize">
      <summary>
            Finalizes an instance of the NetworkSender class.
            </summary>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Initialize">
      <summary>
            Initializes this network sender.
            </summary>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Close(NLog.Common.AsyncContinuation)">
      <summary>
            Closes the sender and releases any unmanaged resources.
            </summary>
      <param name="continuation">The continuation.</param>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.NetworkSender.FlushAsync(NLog.Common.AsyncContinuation)">
      <summary>
            Flushes any pending messages and invokes a continuation.
            </summary>
      <param name="continuation">The continuation.</param>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Send(System.Byte[],System.Int32,System.Int32,NLog.Common.AsyncContinuation)">
      <summary>
            Send the given text over the specified protocol.
            </summary>
      <param name="bytes">Bytes to be sent.</param>
      <param name="offset">Offset in buffer.</param>
      <param name="length">Number of bytes to send.</param>
      <param name="asyncContinuation">The asynchronous continuation.</param>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Dispose">
      <summary>
            Closes the sender and releases any unmanaged resources.
            </summary>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.NetworkSender.DoInitialize">
      <summary>
            Performs sender-specific initialization.
            </summary>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.NetworkSender.DoClose(NLog.Common.AsyncContinuation)">
      <summary>
            Performs sender-specific close operation.
            </summary>
      <param name="continuation">The continuation.</param>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.NetworkSender.DoFlush(NLog.Common.AsyncContinuation)">
      <summary>
            Performs sender-specific flush.
            </summary>
      <param name="continuation">The continuation.</param>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.NetworkSender.DoSend(System.Byte[],System.Int32,System.Int32,NLog.Common.AsyncContinuation)">
      <summary>
            Actually sends the given text over the specified protocol.
            </summary>
      <param name="bytes">The bytes to be sent.</param>
      <param name="offset">Offset in buffer.</param>
      <param name="length">Number of bytes to send.</param>
      <param name="asyncContinuation">The async continuation to be invoked after the buffer has been sent.</param>
      <remarks>To be overridden in inheriting classes.</remarks>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.NetworkSender.ParseEndpointAddress(System.Uri,System.Net.Sockets.AddressFamily)">
      <summary>
            Parses the URI into an endpoint address.
            </summary>
      <param name="uri">The URI to parse.</param>
      <param name="addressFamily">The address family.</param>
      <returns>Parsed endpoint.</returns>
    </member>
    <member name="P:NLog.Internal.NetworkSenders.NetworkSender.Address">
      <summary>
            Gets the address of the network endpoint.
            </summary>
    </member>
    <member name="P:NLog.Internal.NetworkSenders.NetworkSender.LastSendTime">
      <summary>
            Gets the last send time.
            </summary>
    </member>
    <member name="T:NLog.Internal.NetworkSenders.HttpNetworkSender">
      <summary>
            Network sender which uses HTTP or HTTPS POST.
            </summary>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.HttpNetworkSender.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.NetworkSenders.HttpNetworkSender" /> class.
            </summary>
      <param name="url">The network URL.</param>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.HttpNetworkSender.DoSend(System.Byte[],System.Int32,System.Int32,NLog.Common.AsyncContinuation)">
      <summary>
            Actually sends the given text over the specified protocol.
            </summary>
      <param name="bytes">The bytes to be sent.</param>
      <param name="offset">Offset in buffer.</param>
      <param name="length">Number of bytes to send.</param>
      <param name="asyncContinuation">The async continuation to be invoked after the buffer has been sent.</param>
      <remarks>To be overridden in inheriting classes.</remarks>
    </member>
    <member name="T:NLog.Internal.NetworkSenders.INetworkSenderFactory">
      <summary>
            Creates instances of <see cref="T:NLog.Internal.NetworkSenders.NetworkSender" /> objects for given URLs.
            </summary>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.INetworkSenderFactory.Create(System.String)">
      <summary>
            Creates a new instance of the network sender based on a network URL.
            </summary>
      <param name="url">
            URL that determines the network sender to be created.
            </param>
      <returns>
            A newly created network sender.
            </returns>
    </member>
    <member name="T:NLog.Internal.NetworkSenders.ISocket">
      <summary>
            Interface for mocking socket calls.
            </summary>
    </member>
    <member name="T:NLog.Internal.NetworkSenders.NetworkSenderFactory">
      <summary>
            Default implementation of <see cref="T:NLog.Internal.NetworkSenders.INetworkSenderFactory" />.
            </summary>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.NetworkSenderFactory.Create(System.String)">
      <summary>
            Creates a new instance of the network sender based on a network URL:.
            </summary>
      <param name="url">
            URL that determines the network sender to be created.
            </param>
      <returns>
            A newly created network sender.
            </returns>
    </member>
    <member name="T:NLog.Internal.NetworkSenders.SocketProxy">
      <summary>
            Socket proxy for mocking Socket code.
            </summary>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.SocketProxy.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.NetworkSenders.SocketProxy" /> class.
            </summary>
      <param name="addressFamily">The address family.</param>
      <param name="socketType">Type of the socket.</param>
      <param name="protocolType">Type of the protocol.</param>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.SocketProxy.Close">
      <summary>
            Closes the wrapped socket.
            </summary>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.SocketProxy.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>
            Invokes ConnectAsync method on the wrapped socket.
            </summary>
      <param name="args">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instance containing the event data.</param>
      <returns>Result of original method.</returns>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.SocketProxy.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>
            Invokes SendAsync method on the wrapped socket.
            </summary>
      <param name="args">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instance containing the event data.</param>
      <returns>Result of original method.</returns>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.SocketProxy.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>
            Invokes SendToAsync method on the wrapped socket.
            </summary>
      <param name="args">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instance containing the event data.</param>
      <returns>Result of original method.</returns>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.SocketProxy.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:NLog.Internal.NetworkSenders.TcpNetworkSender">
      <summary>
            Sends messages over a TCP network connection.
            </summary>
    </member>
    <member name="T:NLog.Internal.NetworkSenders.TcpNetworkSender.MySocketAsyncEventArgs">
      <summary>
            Facilitates mocking of <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> class.
            </summary>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.MySocketAsyncEventArgs.RaiseCompleted">
      <summary>
            Raises the Completed event.
            </summary>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.#ctor(System.String,System.Net.Sockets.AddressFamily)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.NetworkSenders.TcpNetworkSender" /> class.
            </summary>
      <param name="url">URL. Must start with tcp://.</param>
      <param name="addressFamily">The address family.</param>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.CreateSocket(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
      <summary>
            Creates the socket with given parameters. 
            </summary>
      <param name="addressFamily">The address family.</param>
      <param name="socketType">Type of the socket.</param>
      <param name="protocolType">Type of the protocol.</param>
      <returns>Instance of <see cref="T:NLog.Internal.NetworkSenders.ISocket" /> which represents the socket.</returns>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.DoInitialize">
      <summary>
            Performs sender-specific initialization.
            </summary>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.DoClose(NLog.Common.AsyncContinuation)">
      <summary>
            Closes the socket.
            </summary>
      <param name="continuation">The continuation.</param>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.DoFlush(NLog.Common.AsyncContinuation)">
      <summary>
            Performs sender-specific flush.
            </summary>
      <param name="continuation">The continuation.</param>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.DoSend(System.Byte[],System.Int32,System.Int32,NLog.Common.AsyncContinuation)">
      <summary>
            Sends the specified text over the connected socket.
            </summary>
      <param name="bytes">The bytes to be sent.</param>
      <param name="offset">Offset in buffer.</param>
      <param name="length">Number of bytes to send.</param>
      <param name="asyncContinuation">The async continuation to be invoked after the buffer has been sent.</param>
      <remarks>To be overridden in inheriting classes.</remarks>
    </member>
    <member name="T:NLog.Internal.NetworkSenders.UdpNetworkSender">
      <summary>
            Sends messages over the network as UDP datagrams.
            </summary>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.UdpNetworkSender.#ctor(System.String,System.Net.Sockets.AddressFamily)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.NetworkSenders.UdpNetworkSender" /> class.
            </summary>
      <param name="url">URL. Must start with udp://.</param>
      <param name="addressFamily">The address family.</param>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.UdpNetworkSender.CreateSocket(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
      <summary>
            Creates the socket.
            </summary>
      <param name="addressFamily">The address family.</param>
      <param name="socketType">Type of the socket.</param>
      <param name="protocolType">Type of the protocol.</param>
      <returns>Implementation of <see cref="T:NLog.Internal.NetworkSenders.ISocket" /> to use.</returns>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.UdpNetworkSender.DoInitialize">
      <summary>
            Performs sender-specific initialization.
            </summary>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.UdpNetworkSender.DoClose(NLog.Common.AsyncContinuation)">
      <summary>
            Closes the socket.
            </summary>
      <param name="continuation">The continuation.</param>
    </member>
    <member name="M:NLog.Internal.NetworkSenders.UdpNetworkSender.DoSend(System.Byte[],System.Int32,System.Int32,NLog.Common.AsyncContinuation)">
      <summary>
            Sends the specified text as a UDP datagram.
            </summary>
      <param name="bytes">The bytes to be sent.</param>
      <param name="offset">Offset in buffer.</param>
      <param name="length">Number of bytes to send.</param>
      <param name="asyncContinuation">The async continuation to be invoked after the buffer has been sent.</param>
      <remarks>To be overridden in inheriting classes.</remarks>
    </member>
    <member name="T:NLog.Internal.ObjectGraphScanner">
      <summary>
            Scans (breadth-first) the object graph following all the edges whose are 
            instances have <see cref="T:NLog.Config.NLogConfigurationItemAttribute" /> attached and returns 
            all objects implementing a specified interfaces.
            </summary>
    </member>
    <member name="M:NLog.Internal.ObjectGraphScanner.FindReachableObjects``1(System.Object[])">
      <summary>
            Finds the objects which have attached <see cref="T:NLog.Config.NLogConfigurationItemAttribute" /> which are reachable
            from any of the given root objects when traversing the object graph over public properties.
            </summary>
      <typeparam name="T">Type of the objects to return.</typeparam>
      <param name="rootObjects">The root objects.</param>
      <returns>Ordered list of objects implementing T.</returns>
    </member>
    <member name="T:NLog.Internal.ParameterUtils">
      <summary>
            Parameter validation utilities.
            </summary>
    </member>
    <member name="M:NLog.Internal.ParameterUtils.AssertNotNull(System.Object,System.String)">
      <summary>
            Asserts that the value is not null and throws <see cref="T:System.ArgumentNullException" /> otherwise.
            </summary>
      <param name="value">The value to check.</param>
      <param name="parameterName">Name of the parameter.</param>
    </member>
    <member name="T:NLog.Internal.PlatformDetector">
      <summary>
            Detects the platform the NLog is running on.
            </summary>
    </member>
    <member name="P:NLog.Internal.PlatformDetector.CurrentOS">
      <summary>
            Gets the current runtime OS.
            </summary>
    </member>
    <member name="P:NLog.Internal.PlatformDetector.IsDesktopWin32">
      <summary>
            Gets a value indicating whether current OS is a desktop version of Windows.
            </summary>
    </member>
    <member name="P:NLog.Internal.PlatformDetector.IsWin32">
      <summary>
            Gets a value indicating whether current OS is Win32-based (desktop or mobile).
            </summary>
    </member>
    <member name="P:NLog.Internal.PlatformDetector.IsUnix">
      <summary>
            Gets a value indicating whether current OS is Unix-based.
            </summary>
    </member>
    <member name="T:NLog.Internal.PortableFileInfoHelper">
      <summary>
            Portable implementation of <see cref="T:NLog.Internal.FileInfoHelper" />.
            </summary>
    </member>
    <member name="M:NLog.Internal.PortableFileInfoHelper.GetFileInfo(System.String,System.IntPtr,System.DateTime@,System.Int64@)">
      <summary>
            Gets the information about a file.
            </summary>
      <param name="fileName">Name of the file.</param>
      <param name="fileHandle">The file handle.</param>
      <param name="lastWriteTime">The last write time of the file.</param>
      <param name="fileLength">Length of the file.</param>
      <returns>
            A value of <c>true</c> if file information was retrieved successfully, <c>false</c> otherwise.
            </returns>
    </member>
    <member name="T:NLog.Internal.ThreadIDHelper">
      <summary>
            Returns details about current process and thread in a portable manner.
            </summary>
    </member>
    <member name="P:NLog.Internal.ThreadIDHelper.Instance">
      <summary>
            Gets the singleton instance of PortableThreadIDHelper or
            Win32ThreadIDHelper depending on runtime environment.
            </summary>
      <value>The instance.</value>
    </member>
    <member name="P:NLog.Internal.ThreadIDHelper.CurrentThreadID">
      <summary>
            Gets current thread ID.
            </summary>
    </member>
    <member name="P:NLog.Internal.ThreadIDHelper.CurrentProcessID">
      <summary>
            Gets current process ID.
            </summary>
    </member>
    <member name="P:NLog.Internal.ThreadIDHelper.CurrentProcessName">
      <summary>
            Gets current process name.
            </summary>
    </member>
    <member name="P:NLog.Internal.ThreadIDHelper.CurrentProcessBaseName">
      <summary>
            Gets current process name (excluding filename extension, if any).
            </summary>
    </member>
    <member name="T:NLog.Internal.PortableThreadIDHelper">
      <summary>
            Portable implementation of <see cref="T:NLog.Internal.ThreadIDHelper" />.
            </summary>
    </member>
    <member name="M:NLog.Internal.PortableThreadIDHelper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.PortableThreadIDHelper" /> class.
            </summary>
    </member>
    <member name="M:NLog.Internal.PortableThreadIDHelper.GetProcessName">
      <summary>
            Gets the name of the process.
            </summary>
    </member>
    <member name="P:NLog.Internal.PortableThreadIDHelper.CurrentThreadID">
      <summary>
            Gets current thread ID.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:NLog.Internal.PortableThreadIDHelper.CurrentProcessID">
      <summary>
            Gets current process ID.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:NLog.Internal.PortableThreadIDHelper.CurrentProcessName">
      <summary>
            Gets current process name.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:NLog.Internal.PortableThreadIDHelper.CurrentProcessBaseName">
      <summary>
            Gets current process name (excluding filename extension, if any).
            </summary>
      <value>
      </value>
    </member>
    <member name="T:NLog.Internal.PropertyHelper">
      <summary>
            Reflection helpers for accessing properties.
            </summary>
    </member>
    <member name="T:NLog.Internal.ReflectionHelpers">
      <summary>
            Reflection helpers.
            </summary>
    </member>
    <member name="M:NLog.Internal.ReflectionHelpers.SafeGetTypes(System.Reflection.Assembly)">
      <summary>
            Gets all usable exported types from the given assembly.
            </summary>
      <param name="assembly">Assembly to scan.</param>
      <returns>Usable types from the given assembly.</returns>
      <remarks>Types which cannot be loaded are skipped.</remarks>
    </member>
    <member name="T:NLog.Internal.RuntimeOS">
      <summary>
            Supported operating systems.
            </summary>
      <remarks>
            If you add anything here, make sure to add the appropriate detection
            code to <see cref="T:NLog.Internal.PlatformDetector" /></remarks>
    </member>
    <member name="F:NLog.Internal.RuntimeOS.Any">
      <summary>
            Any operating system.
            </summary>
    </member>
    <member name="F:NLog.Internal.RuntimeOS.Unix">
      <summary>
            Unix/Linux operating systems.
            </summary>
    </member>
    <member name="F:NLog.Internal.RuntimeOS.WindowsCE">
      <summary>
            Windows CE.
            </summary>
    </member>
    <member name="F:NLog.Internal.RuntimeOS.Windows">
      <summary>
            Desktop versions of Windows (95,98,ME).
            </summary>
    </member>
    <member name="F:NLog.Internal.RuntimeOS.WindowsNT">
      <summary>
            Windows NT, 2000, 2003 and future versions based on NT technology.
            </summary>
    </member>
    <member name="F:NLog.Internal.RuntimeOS.Unknown">
      <summary>
            Unknown operating system.
            </summary>
    </member>
    <member name="T:NLog.Internal.SimpleStringReader">
      <summary>
            Simple character tokenizer.
            </summary>
    </member>
    <member name="M:NLog.Internal.SimpleStringReader.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.SimpleStringReader" /> class.
            </summary>
      <param name="text">The text to be tokenized.</param>
    </member>
    <member name="T:NLog.Internal.SingleCallContinuation">
      <summary>
            Implements a single-call guard around given continuation function.
            </summary>
    </member>
    <member name="M:NLog.Internal.SingleCallContinuation.#ctor(NLog.Common.AsyncContinuation)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.SingleCallContinuation" /> class.
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
    </member>
    <member name="M:NLog.Internal.SingleCallContinuation.Function(System.Exception)">
      <summary>
            Continuation function which implements the single-call guard.
            </summary>
      <param name="exception">The exception.</param>
    </member>
    <member name="T:NLog.Internal.SortHelpers">
      <summary>
            Provides helpers to sort log events and associated continuations.
            </summary>
    </member>
    <member name="T:NLog.Internal.SortHelpers.KeySelector`2">
      <summary>
            Key selector delegate.
            </summary>
      <typeparam name="TValue">The type of the value.</typeparam>
      <typeparam name="TKey">The type of the key.</typeparam>
      <param name="value">Value to extract key information from.</param>
      <returns>Key selected from log event.</returns>
    </member>
    <member name="M:NLog.Internal.SortHelpers.BucketSort``2(System.Collections.Generic.IEnumerable{``0},NLog.Internal.SortHelpers.KeySelector{``0,``1})">
      <summary>
            Performs bucket sort (group by) on an array of items and returns a dictionary for easy traversal of the result set.
            </summary>
      <typeparam name="TValue">The type of the value.</typeparam>
      <typeparam name="TKey">The type of the key.</typeparam>
      <param name="inputs">The inputs.</param>
      <param name="keySelector">The key selector function.</param>
      <returns>
            Dictonary where keys are unique input keys, and values are lists of <see cref="T:NLog.Common.AsyncLogEventInfo" />.
            </returns>
    </member>
    <member name="T:NLog.Internal.StackTraceUsageUtils">
      <summary>
            Utilities for dealing with <see cref="T:NLog.Config.StackTraceUsage" /> values.
            </summary>
    </member>
    <member name="T:NLog.Internal.TargetWithFilterChain">
      <summary>
            Represents target with a chain of filters which determine
            whether logging should happen.
            </summary>
    </member>
    <member name="M:NLog.Internal.TargetWithFilterChain.#ctor(NLog.Targets.Target,System.Collections.Generic.IList{NLog.Filters.Filter})">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.TargetWithFilterChain" /> class.
            </summary>
      <param name="target">The target.</param>
      <param name="filterChain">The filter chain.</param>
    </member>
    <member name="M:NLog.Internal.TargetWithFilterChain.GetStackTraceUsage">
      <summary>
            Gets the stack trace usage.
            </summary>
      <returns>A <see cref="T:NLog.Config.StackTraceUsage" /> value that determines stack trace handling.</returns>
    </member>
    <member name="P:NLog.Internal.TargetWithFilterChain.Target">
      <summary>
            Gets the target.
            </summary>
      <value>The target.</value>
    </member>
    <member name="P:NLog.Internal.TargetWithFilterChain.FilterChain">
      <summary>
            Gets the filter chain.
            </summary>
      <value>The filter chain.</value>
    </member>
    <member name="P:NLog.Internal.TargetWithFilterChain.NextInChain">
      <summary>
            Gets or sets the next <see cref="T:NLog.Internal.TargetWithFilterChain" /> item in the chain.
            </summary>
      <value>The next item in the chain.</value>
    </member>
    <member name="T:NLog.Internal.ThreadLocalStorageHelper">
      <summary>
            Helper for dealing with thread-local storage.
            </summary>
    </member>
    <member name="M:NLog.Internal.ThreadLocalStorageHelper.AllocateDataSlot">
      <summary>
            Allocates the data slot for storing thread-local information.
            </summary>
      <returns>Allocated slot key.</returns>
    </member>
    <member name="M:NLog.Internal.ThreadLocalStorageHelper.GetDataForSlot``1(System.Object)">
      <summary>
            Gets the data for a slot in thread-local storage.
            </summary>
      <typeparam name="T">Type of the data.</typeparam>
      <param name="slot">The slot to get data for.</param>
      <returns>
            Slot data (will create T if null).
            </returns>
    </member>
    <member name="T:NLog.Internal.TimeoutContinuation">
      <summary>
            Wraps <see cref="T:NLog.Common.AsyncContinuation" /> with a timeout.
            </summary>
    </member>
    <member name="M:NLog.Internal.TimeoutContinuation.#ctor(NLog.Common.AsyncContinuation,System.TimeSpan)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.TimeoutContinuation" /> class.
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
      <param name="timeout">The timeout.</param>
    </member>
    <member name="M:NLog.Internal.TimeoutContinuation.Function(System.Exception)">
      <summary>
            Continuation function which implements the timeout logic.
            </summary>
      <param name="exception">The exception.</param>
    </member>
    <member name="M:NLog.Internal.TimeoutContinuation.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="T:NLog.Internal.UrlHelper">
      <summary>
            URL Encoding helper.
            </summary>
    </member>
    <member name="T:NLog.Internal.Win32FileInfoHelper">
      <summary>
            Win32-optimized implementation of <see cref="T:NLog.Internal.FileInfoHelper" />.
            </summary>
    </member>
    <member name="M:NLog.Internal.Win32FileInfoHelper.GetFileInfo(System.String,System.IntPtr,System.DateTime@,System.Int64@)">
      <summary>
            Gets the information about a file.
            </summary>
      <param name="fileName">Name of the file.</param>
      <param name="fileHandle">The file handle.</param>
      <param name="lastWriteTime">The last write time of the file.</param>
      <param name="fileLength">Length of the file.</param>
      <returns>
            A value of <c>true</c> if file information was retrieved successfully, <c>false</c> otherwise.
            </returns>
    </member>
    <member name="T:NLog.Internal.Win32ThreadIDHelper">
      <summary>
            Win32-optimized implementation of <see cref="T:NLog.Internal.ThreadIDHelper" />.
            </summary>
    </member>
    <member name="M:NLog.Internal.Win32ThreadIDHelper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.Win32ThreadIDHelper" /> class.
            </summary>
    </member>
    <member name="P:NLog.Internal.Win32ThreadIDHelper.CurrentThreadID">
      <summary>
            Gets current thread ID.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:NLog.Internal.Win32ThreadIDHelper.CurrentProcessID">
      <summary>
            Gets current process ID.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:NLog.Internal.Win32ThreadIDHelper.CurrentProcessName">
      <summary>
            Gets current process name.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:NLog.Internal.Win32ThreadIDHelper.CurrentProcessBaseName">
      <summary>
            Gets current process name (excluding filename extension, if any).
            </summary>
      <value>
      </value>
    </member>
    <member name="T:NLog.LayoutRenderers.AmbientPropertyAttribute">
      <summary>
            Designates a property of the class as an ambient property.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.AmbientPropertyAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.AmbientPropertyAttribute" /> class.
            </summary>
      <param name="name">Ambient property name.</param>
    </member>
    <member name="T:NLog.LayoutRenderers.LayoutRenderer">
      <summary>
            Render environmental information related to logging events.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.LayoutRenderer.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:NLog.LayoutRenderers.LayoutRenderer.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.LayoutRenderer.Render(NLog.LogEventInfo)">
      <summary>
            Renders the the value of layout renderer in the context of the specified log event.
            </summary>
      <param name="logEvent">The log event.</param>
      <returns>String representation of a layout renderer.</returns>
    </member>
    <member name="M:NLog.LayoutRenderers.LayoutRenderer.Initialize(NLog.Config.LoggingConfiguration)">
      <summary>
            Initializes this instance.
            </summary>
      <param name="configuration">The configuration.</param>
    </member>
    <member name="M:NLog.LayoutRenderers.LayoutRenderer.Close">
      <summary>
            Closes this instance.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.LayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the specified environmental information and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="M:NLog.LayoutRenderers.LayoutRenderer.InitializeLayoutRenderer">
      <summary>
            Initializes the layout renderer.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.LayoutRenderer.CloseLayoutRenderer">
      <summary>
            Closes the layout renderer.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.LayoutRenderer.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
      <param name="disposing">True to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.LayoutRenderer.LoggingConfiguration">
      <summary>
            Gets the logging configuration this target is part of.
            </summary>
    </member>
    <member name="T:NLog.LayoutRenderers.AspApplicationValueLayoutRenderer">
      <summary>
            ASP Application variable.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.AspApplicationValueLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the specified ASP Application variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.AspApplicationValueLayoutRenderer.Variable">
      <summary>
            Gets or sets the ASP Application variable name.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.AspRequestValueLayoutRenderer">
      <summary>
            ASP Request variable.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the specified ASP Request variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.Item">
      <summary>
            Gets or sets the item name. The QueryString, Form, Cookies, or ServerVariables collection variables having the specified name are rendered.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.QueryString">
      <summary>
            Gets or sets the QueryString variable to be rendered.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.Form">
      <summary>
            Gets or sets the form variable to be rendered.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.Cookie">
      <summary>
            Gets or sets the cookie to be rendered.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.ServerVariable">
      <summary>
            Gets or sets the ServerVariables item to be rendered.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.AspSessionValueLayoutRenderer">
      <summary>
            ASP Session variable.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.AspSessionValueLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the specified ASP Session variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.AspSessionValueLayoutRenderer.Variable">
      <summary>
            Gets or sets the session variable name.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.BaseDirLayoutRenderer">
      <summary>
            The current application domain's base directory.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.BaseDirLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.BaseDirLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.BaseDirLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the application base directory and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.BaseDirLayoutRenderer.File">
      <summary>
            Gets or sets the name of the file to be Path.Combine()'d with with the base directory.
            </summary>
      <docgen category="Advanced Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.BaseDirLayoutRenderer.Dir">
      <summary>
            Gets or sets the name of the directory to be Path.Combine()'d with with the base directory.
            </summary>
      <docgen category="Advanced Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.CallSiteLayoutRenderer">
      <summary>
            The call site (class name, method name and source information).
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.CallSiteLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.CallSiteLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.CallSiteLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the call site and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.ClassName">
      <summary>
            Gets or sets a value indicating whether to render the class name.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.MethodName">
      <summary>
            Gets or sets a value indicating whether to render the method name.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.FileName">
      <summary>
            Gets or sets a value indicating whether to render the source file name and line number.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.IncludeSourcePath">
      <summary>
            Gets or sets a value indicating whether to include source file path.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.CounterLayoutRenderer">
      <summary>
            A counter value (increases on each layout rendering).
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.CounterLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.CounterLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.CounterLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the specified counter value and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.CounterLayoutRenderer.Value">
      <summary>
            Gets or sets the initial value of the counter.
            </summary>
      <docgen category="Counter Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.CounterLayoutRenderer.Increment">
      <summary>
            Gets or sets the value to be added to the counter after each layout rendering.
            </summary>
      <docgen category="Counter Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.CounterLayoutRenderer.Sequence">
      <summary>
            Gets or sets the name of the sequence. Different named sequences can have individual values.
            </summary>
      <docgen category="Counter Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.DateLayoutRenderer">
      <summary>
            Current date and time.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.DateLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.DateLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.DateLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the current date and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.DateLayoutRenderer.Culture">
      <summary>
            Gets or sets the culture used for rendering. 
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.DateLayoutRenderer.Format">
      <summary>
            Gets or sets the date format. Can be any argument accepted by DateTime.ToString(format).
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.DateLayoutRenderer.UniversalTime">
      <summary>
            Gets or sets a value indicating whether to output UTC time instead of local time.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.EnvironmentLayoutRenderer">
      <summary>
            The environment variable.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.EnvironmentLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the specified environment variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.EnvironmentLayoutRenderer.Variable">
      <summary>
            Gets or sets the name of the environment variable.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.EventContextLayoutRenderer">
      <summary>
            Log event context data.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.EventContextLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the specified log event context item and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.EventContextLayoutRenderer.Item">
      <summary>
            Gets or sets the name of the item.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.ExceptionLayoutRenderer">
      <summary>
            Exception information provided through 
            a call to one of the Logger.*Exception() methods.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.ExceptionLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the specified exception information and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.Format">
      <summary>
            Gets or sets the format of the output. Must be a comma-separated list of exception
            properties: Message, Type, ShortType, ToString, Method, StackTrace.
            This parameter value is case-insensitive.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.InnerFormat">
      <summary>
            Gets or sets the format of the output of inner exceptions. Must be a comma-separated list of exception
            properties: Message, Type, ShortType, ToString, Method, StackTrace.
            This parameter value is case-insensitive.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.Separator">
      <summary>
            Gets or sets the separator used to concatenate parts specified in the Format.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.MaxInnerExceptionLevel">
      <summary>
            Gets or sets the maximum number of inner exceptions to include in the output.
            By default inner exceptions are not enabled for compatibility with NLog 1.0.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.InnerExceptionSeparator">
      <summary>
            Gets or sets the separator between inner exceptions.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.FileContentsLayoutRenderer">
      <summary>
            Renders contents of the specified file.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.FileContentsLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.FileContentsLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.FileContentsLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the contents of the specified file and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.FileContentsLayoutRenderer.FileName">
      <summary>
            Gets or sets the name of the file.
            </summary>
      <docgen category="File Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.FileContentsLayoutRenderer.Encoding">
      <summary>
            Gets or sets the encoding used in the file.
            </summary>
      <value>The encoding.</value>
      <docgen category="File Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer">
      <summary>
            The information about the garbage collector.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the selected process information.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer.Property">
      <summary>
            Gets or sets the property to retrieve.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.GarbageCollectorProperty">
      <summary>
            Gets or sets the property of System.GC to retrieve.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.TotalMemory">
      <summary>
            Total memory allocated.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.TotalMemoryForceCollection">
      <summary>
            Total memory allocated (perform full garbage collection first).
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.CollectionCount0">
      <summary>
            Gets the number of Gen0 collections.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.CollectionCount1">
      <summary>
            Gets the number of Gen1 collections.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.CollectionCount2">
      <summary>
            Gets the number of Gen2 collections.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.MaxGeneration">
      <summary>
            Maximum generation number supported by GC.
            </summary>
    </member>
    <member name="T:NLog.LayoutRenderers.GdcLayoutRenderer">
      <summary>
            Global Diagnostics Context item. Provided for compatibility with log4net.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.GdcLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the specified Global Diagnostics Context item and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.GdcLayoutRenderer.Item">
      <summary>
            Gets or sets the name of the item.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.GuidLayoutRenderer">
      <summary>
            Globally-unique identifier (GUID).
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.GuidLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.GuidLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.GuidLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders a newly generated GUID string and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.GuidLayoutRenderer.Format">
      <summary>
            Gets or sets the GUID format as accepted by Guid.ToString() method.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.IdentityLayoutRenderer">
      <summary>
            Thread identity information (name and authentication information).
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.IdentityLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.IdentityLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.IdentityLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the specified identity information and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.Separator">
      <summary>
            Gets or sets the separator to be used when concatenating 
            parts of identity information.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.Name">
      <summary>
            Gets or sets a value indicating whether to render Thread.CurrentPrincipal.Identity.Name.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.AuthType">
      <summary>
            Gets or sets a value indicating whether to render Thread.CurrentPrincipal.Identity.AuthenticationType.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.IsAuthenticated">
      <summary>
            Gets or sets a value indicating whether to render Thread.CurrentPrincipal.Identity.IsAuthenticated.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.InstallContextLayoutRenderer">
      <summary>
            Installation parameter (passed to InstallNLogConfig).
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.InstallContextLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the specified installation parameter and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.InstallContextLayoutRenderer.Parameter">
      <summary>
            Gets or sets the name of the parameter.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.LayoutRendererAttribute">
      <summary>
            Marks class as a layout renderer and assigns a format string to it.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.LayoutRendererAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.LayoutRendererAttribute" /> class.
            </summary>
      <param name="name">Name of the layout renderer.</param>
    </member>
    <member name="T:NLog.LayoutRenderers.LevelLayoutRenderer">
      <summary>
            The log level.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.LevelLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the current log level and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="T:NLog.LayoutRenderers.LiteralLayoutRenderer">
      <summary>
            A string literal.
            </summary>
      <remarks>
            This is used to escape '${' sequence 
            as ;${literal:text=${}'
            </remarks>
    </member>
    <member name="M:NLog.LayoutRenderers.LiteralLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.LiteralLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.LiteralLayoutRenderer.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.LiteralLayoutRenderer" /> class.
            </summary>
      <param name="text">The literal text value.</param>
      <remarks>This is used by the layout compiler.</remarks>
    </member>
    <member name="M:NLog.LayoutRenderers.LiteralLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the specified string literal and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.LiteralLayoutRenderer.Text">
      <summary>
            Gets or sets the literal text.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer">
      <summary>
            XML event description compatible with log4j, Chainsaw and NLogViewer.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the XML logging event and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeNLogData">
      <summary>
            Gets or sets a value indicating whether to include NLog-specific extensions to log4j schema.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IndentXml">
      <summary>
            Gets or sets a value indicating whether the XML should use spaces for indentation.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.AppInfo">
      <summary>
            Gets or sets the AppInfo field. By default it's the friendly name of the current AppDomain.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeCallSite">
      <summary>
            Gets or sets a value indicating whether to include call site (class and method name) in the information sent over the network.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeSourceInfo">
      <summary>
            Gets or sets a value indicating whether to include source info (file name and line number) in the information sent over the network.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeMdc">
      <summary>
            Gets or sets a value indicating whether to include contents of the <see cref="T:NLog.MappedDiagnosticsContext" /> dictionary.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeNdc">
      <summary>
            Gets or sets a value indicating whether to include contents of the <see cref="T:NLog.NestedDiagnosticsContext" /> stack.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.NdcItemSeparator">
      <summary>
            Gets or sets the NDC item separator.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.LoggerNameLayoutRenderer">
      <summary>
            The logger name.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.LoggerNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the logger name and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.LoggerNameLayoutRenderer.ShortName">
      <summary>
            Gets or sets a value indicating whether to render short logger name (the part after the trailing dot character).
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.LongDateLayoutRenderer">
      <summary>
            The date and time in a long, sortable format yyyy-MM-dd HH:mm:ss.mmm.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.LongDateLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the date in the long format (yyyy-MM-dd HH:mm:ss.mmm) and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.LongDateLayoutRenderer.UniversalTime">
      <summary>
            Gets or sets a value indicating whether to output UTC time instead of local time.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.MachineNameLayoutRenderer">
      <summary>
            The machine name that the process is running on.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.MachineNameLayoutRenderer.InitializeLayoutRenderer">
      <summary>
            Initializes the layout renderer.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.MachineNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the machine name and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="T:NLog.LayoutRenderers.MdcLayoutRenderer">
      <summary>
            Mapped Diagnostic Context item. Provided for compatibility with log4net.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.MdcLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the specified MDC item and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.MdcLayoutRenderer.Item">
      <summary>
            Gets or sets the name of the item.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.MessageLayoutRenderer">
      <summary>
            The formatted log message.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.MessageLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.MessageLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.MessageLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the log message including any positional parameters and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.MessageLayoutRenderer.WithException">
      <summary>
            Gets or sets a value indicating whether to log exception along with message.
            </summary>
      <docgen category="Layout Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.MessageLayoutRenderer.ExceptionSeparator">
      <summary>
            Gets or sets the string that separates message from the exception.
            </summary>
      <docgen category="Layout Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.NdcLayoutRenderer">
      <summary>
            Nested Diagnostic Context item. Provided for compatibility with log4net.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.NdcLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.NdcLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.NdcLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the specified Nested Diagnostics Context item and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.NdcLayoutRenderer.TopFrames">
      <summary>
            Gets or sets the number of top stack frames to be rendered.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.NdcLayoutRenderer.BottomFrames">
      <summary>
            Gets or sets the number of bottom stack frames to be rendered.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.NdcLayoutRenderer.Separator">
      <summary>
            Gets or sets the separator to be used for concatenating nested diagnostics context output.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.NewLineLayoutRenderer">
      <summary>
            A newline literal.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.NewLineLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the specified string literal and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="T:NLog.LayoutRenderers.NLogDirLayoutRenderer">
      <summary>
            The directory where NLog.dll is located.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.NLogDirLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the directory where NLog is located and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.NLogDirLayoutRenderer.File">
      <summary>
            Gets or sets the name of the file to be Path.Combine()'d with the directory name.
            </summary>
      <docgen category="Advanced Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.NLogDirLayoutRenderer.Dir">
      <summary>
            Gets or sets the name of the directory to be Path.Combine()'d with the directory name.
            </summary>
      <docgen category="Advanced Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer">
      <summary>
            The performance counter.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.InitializeLayoutRenderer">
      <summary>
            Initializes the layout renderer.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.CloseLayoutRenderer">
      <summary>
            Closes the layout renderer.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the specified environment variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.Category">
      <summary>
            Gets or sets the name of the counter category.
            </summary>
      <docgen category="Performance Counter Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.Counter">
      <summary>
            Gets or sets the name of the performance counter.
            </summary>
      <docgen category="Performance Counter Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.Instance">
      <summary>
            Gets or sets the name of the performance counter instance (e.g. this.Global_).
            </summary>
      <docgen category="Performance Counter Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.MachineName">
      <summary>
            Gets or sets the name of the machine to read the performance counter from.
            </summary>
      <docgen category="Performance Counter Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.ProcessIdLayoutRenderer">
      <summary>
            The identifier of the current process.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.ProcessIdLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the current process ID.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="T:NLog.LayoutRenderers.ProcessInfoLayoutRenderer">
      <summary>
            The information about the running process.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.ProcessInfoLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.InitializeLayoutRenderer">
      <summary>
            Initializes the layout renderer.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.CloseLayoutRenderer">
      <summary>
            Closes the layout renderer.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the selected process information.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.Property">
      <summary>
            Gets or sets the property to retrieve.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.ProcessInfoProperty">
      <summary>
            Property of System.Diagnostics.Process to retrieve.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.BasePriority">
      <summary>
            Base Priority.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.ExitCode">
      <summary>
            Exit Code.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.ExitTime">
      <summary>
            Exit Time.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.Handle">
      <summary>
            Process Handle.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.HandleCount">
      <summary>
            Handle Count.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.HasExited">
      <summary>
            Whether process has exited.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.Id">
      <summary>
            Process ID.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.MachineName">
      <summary>
            Machine name.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.MainWindowHandle">
      <summary>
            Handle of the main window.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.MainWindowTitle">
      <summary>
            Title of the main window.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.MaxWorkingSet">
      <summary>
            Maximum Working Set.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.MinWorkingSet">
      <summary>
            Minimum Working Set.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.NonPagedSystemMemorySize">
      <summary>
            Non-paged System Memory Size.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.NonPagedSystemMemorySize64">
      <summary>
            Non-paged System Memory Size (64-bit).
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PagedMemorySize">
      <summary>
            Paged Memory Size.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PagedMemorySize64">
      <summary>
            Paged Memory Size (64-bit)..
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PagedSystemMemorySize">
      <summary>
            Paged System Memory Size.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PagedSystemMemorySize64">
      <summary>
            Paged System Memory Size (64-bit).
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PeakPagedMemorySize">
      <summary>
            Peak Paged Memory Size.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PeakPagedMemorySize64">
      <summary>
            Peak Paged Memory Size (64-bit).
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PeakVirtualMemorySize">
      <summary>
            Peak Vitual Memory Size.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PeakVirtualMemorySize64">
      <summary>
            Peak Virtual Memory Size (64-bit)..
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PeakWorkingSet">
      <summary>
            Peak Working Set Size.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PeakWorkingSet64">
      <summary>
            Peak Working Set Size (64-bit).
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PriorityBoostEnabled">
      <summary>
            Whether priority boost is enabled.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PriorityClass">
      <summary>
            Priority Class.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PrivateMemorySize">
      <summary>
            Private Memory Size.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PrivateMemorySize64">
      <summary>
            Private Memory Size (64-bit).
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.PrivilegedProcessorTime">
      <summary>
            Privileged Processor Time.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.ProcessName">
      <summary>
            Process Name.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.Responding">
      <summary>
            Whether process is responding.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.SessionId">
      <summary>
            Session ID.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.StartTime">
      <summary>
            Process Start Time.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.TotalProcessorTime">
      <summary>
            Total Processor Time.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.UserProcessorTime">
      <summary>
            User Processor Time.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.VirtualMemorySize">
      <summary>
            Virtual Memory Size.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.VirtualMemorySize64">
      <summary>
            Virtual Memory Size (64-bit).
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.WorkingSet">
      <summary>
            Working Set Size.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.ProcessInfoProperty.WorkingSet64">
      <summary>
            Working Set Size (64-bit).
            </summary>
    </member>
    <member name="T:NLog.LayoutRenderers.ProcessNameLayoutRenderer">
      <summary>
            The name of the current process.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.ProcessNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the current process name (optionally with a full path).
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.ProcessNameLayoutRenderer.FullName">
      <summary>
            Gets or sets a value indicating whether to write the full path to the process executable.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.ProcessTimeLayoutRenderer">
      <summary>
            The process time in format HH:mm:ss.mmm.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.ProcessTimeLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the current process running time and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="T:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer">
      <summary>
            High precision timer, based on the value returned from QueryPerformanceCounter() optionally converted to seconds.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.InitializeLayoutRenderer">
      <summary>
            Initializes the layout renderer.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the ticks value of current time and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.Normalize">
      <summary>
            Gets or sets a value indicating whether to normalize the result by subtracting 
            it from the result of the first call (so that it's effectively zero-based).
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.Difference">
      <summary>
            Gets or sets a value indicating whether to output the difference between the result 
            of QueryPerformanceCounter and the previous one.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.Seconds">
      <summary>
            Gets or sets a value indicating whether to convert the result to seconds by dividing 
            by the result of QueryPerformanceFrequency().
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.Precision">
      <summary>
            Gets or sets the number of decimal digits to be included in output.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.QueryPerformanceCounterLayoutRenderer.AlignDecimalPoint">
      <summary>
            Gets or sets a value indicating whether to align decimal point (emit non-significant zeros).
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.RegistryLayoutRenderer">
      <summary>
            A value from the Registry.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.RegistryLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Reads the specified registry key and value and appends it to
            the passed <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event. Ignored.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.RegistryLayoutRenderer.Value">
      <summary>
            Gets or sets the registry value name.
            </summary>
      <docgen category="Registry Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.RegistryLayoutRenderer.DefaultValue">
      <summary>
            Gets or sets the value to be output when the specified registry key or value is not found.
            </summary>
      <docgen category="Registry Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.RegistryLayoutRenderer.Key">
      <summary>
            Gets or sets the registry key.
            </summary>
      <remarks>
            Must have one of the forms:
            <ul><li>HKLM\Key\Full\Name</li><li>HKEY_LOCAL_MACHINE\Key\Full\Name</li><li>HKCU\Key\Full\Name</li><li>HKEY_CURRENT_USER\Key\Full\Name</li></ul></remarks>
      <docgen category="Registry Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.ShortDateLayoutRenderer">
      <summary>
            The short date in a sortable format yyyy-MM-dd.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.ShortDateLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the current short date string (yyyy-MM-dd) and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.ShortDateLayoutRenderer.UniversalTime">
      <summary>
            Gets or sets a value indicating whether to output UTC time instead of local time.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.SpecialFolderLayoutRenderer">
      <summary>
            System special folder path (includes My Documents, My Music, Program Files, Desktop, and more).
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.SpecialFolderLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the directory where NLog is located and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.SpecialFolderLayoutRenderer.Folder">
      <summary>
            Gets or sets the system special folder to use.
            </summary>
      <remarks>
            Full list of options is available at <a href="http://msdn2.microsoft.com/en-us/system.environment.specialfolder.aspx">MSDN</a>.
            The most common ones are:
            <ul><li><b>ApplicationData</b> - roaming application data for current user.</li><li><b>CommonApplicationData</b> - application data for all users.</li><li><b>MyDocuments</b> - My Documents</li><li><b>DesktopDirectory</b> - Desktop directory</li><li><b>LocalApplicationData</b> - non roaming application data</li><li><b>Personal</b> - user profile directory</li><li><b>System</b> - System directory</li></ul></remarks>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.SpecialFolderLayoutRenderer.File">
      <summary>
            Gets or sets the name of the file to be Path.Combine()'d with the directory name.
            </summary>
      <docgen category="Advanced Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.SpecialFolderLayoutRenderer.Dir">
      <summary>
            Gets or sets the name of the directory to be Path.Combine()'d with the directory name.
            </summary>
      <docgen category="Advanced Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.StackTraceFormat">
      <summary>
            Format of the ${stacktrace} layout renderer output.
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.StackTraceFormat.Raw">
      <summary>
            Raw format (multiline - as returned by StackFrame.ToString() method).
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.StackTraceFormat.Flat">
      <summary>
            Flat format (class and method names displayed in a single line).
            </summary>
    </member>
    <member name="F:NLog.LayoutRenderers.StackTraceFormat.DetailedFlat">
      <summary>
            Detailed flat format (method signatures displayed in a single line).
            </summary>
    </member>
    <member name="T:NLog.LayoutRenderers.StackTraceLayoutRenderer">
      <summary>
            Stack trace renderer.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.StackTraceLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.StackTraceLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.StackTraceLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the call site and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.StackTraceLayoutRenderer.Format">
      <summary>
            Gets or sets the output format of the stack trace.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.StackTraceLayoutRenderer.TopFrames">
      <summary>
            Gets or sets the number of top stack frames to be rendered.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.StackTraceLayoutRenderer.Separator">
      <summary>
            Gets or sets the stack frame separator string.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.TempDirLayoutRenderer">
      <summary>
            A temporary directory.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.TempDirLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the directory where NLog is located and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.TempDirLayoutRenderer.File">
      <summary>
            Gets or sets the name of the file to be Path.Combine()'d with the directory name.
            </summary>
      <docgen category="Advanced Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.TempDirLayoutRenderer.Dir">
      <summary>
            Gets or sets the name of the directory to be Path.Combine()'d with the directory name.
            </summary>
      <docgen category="Advanced Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.ThreadIdLayoutRenderer">
      <summary>
            The identifier of the current thread.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.ThreadIdLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the current thread identifier and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="T:NLog.LayoutRenderers.ThreadNameLayoutRenderer">
      <summary>
            The name of the current thread.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.ThreadNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the current thread name and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="T:NLog.LayoutRenderers.TicksLayoutRenderer">
      <summary>
            The Ticks value of current date and time.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.TicksLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the ticks value of current time and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="T:NLog.LayoutRenderers.TimeLayoutRenderer">
      <summary>
            The time in a 24-hour, sortable format HH:mm:ss.mmm.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.TimeLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders time in the 24-h format (HH:mm:ss.mmm) and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.TimeLayoutRenderer.UniversalTime">
      <summary>
            Gets or sets a value indicating whether to output UTC time instead of local time.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer">
      <summary>
            Thread Windows identity information (username).
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the current thread windows identity information and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="P:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer.Domain">
      <summary>
            Gets or sets a value indicating whether domain name should be included.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer.UserName">
      <summary>
            Gets or sets a value indicating whether username should be included.
            </summary>
      <docgen category="Rendering Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase">
      <summary>
            Decodes text "encrypted" with ROT-13.
            </summary>
      <remarks>
            See <a href="http://en.wikipedia.org/wiki/ROT13">http://en.wikipedia.org/wiki/ROT13</a>.
            </remarks>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
      <summary>
            Renders the inner message, processes it and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
      <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
      <param name="logEvent">Logging event.</param>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase.Transform(System.String)">
      <summary>
            Transforms the output of another layout.
            </summary>
      <param name="text">Output to be transform.</param>
      <returns>Transformed text.</returns>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase.RenderInner(NLog.LogEventInfo)">
      <summary>
            Renders the inner layout contents.
            </summary>
      <param name="logEvent">The log event.</param>
      <returns>Contents of inner layout.</returns>
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase.Inner">
      <summary>
            Gets or sets the wrapped layout.
            </summary>
      <docgen category="Transformation Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper">
      <summary>
            Applies caching to another layout output.
            </summary>
      <remarks>
            The value of the inner layout will be rendered only once and reused subsequently.
            </remarks>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.InitializeLayoutRenderer">
      <summary>
            Initializes the layout renderer.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.CloseLayoutRenderer">
      <summary>
            Closes the layout renderer.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.Transform(System.String)">
      <summary>
            Transforms the output of another layout.
            </summary>
      <param name="text">Output to be transform.</param>
      <returns>Transformed text.</returns>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.RenderInner(NLog.LogEventInfo)">
      <summary>
            Renders the inner layout contents.
            </summary>
      <param name="logEvent">The log event.</param>
      <returns>Contents of inner layout.</returns>
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.Cached">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper" /> is enabled.
            </summary>
      <docgen category="Caching Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.Wrappers.FileSystemNormalizeLayoutRendererWrapper">
      <summary>
            Filters characters not allowed in the file names by replacing them with safe character.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.FileSystemNormalizeLayoutRendererWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.FileSystemNormalizeLayoutRendererWrapper" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.FileSystemNormalizeLayoutRendererWrapper.Transform(System.String)">
      <summary>
            Post-processes the rendered message. 
            </summary>
      <param name="text">The text to be post-processed.</param>
      <returns>Padded and trimmed string.</returns>
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.FileSystemNormalizeLayoutRendererWrapper.FSNormalize">
      <summary>
            Gets or sets a value indicating whether to modify the output of this renderer so it can be used as a part of file path
            (illegal characters are replaced with '_').
            </summary>
      <docgen category="Advanced Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.Wrappers.JsonEncodeLayoutRendererWrapper">
      <summary>
            Escapes output of another layout using JSON rules.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.JsonEncodeLayoutRendererWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.JsonEncodeLayoutRendererWrapper" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.JsonEncodeLayoutRendererWrapper.Transform(System.String)">
      <summary>
            Post-processes the rendered message. 
            </summary>
      <param name="text">The text to be post-processed.</param>
      <returns>JSON-encoded string.</returns>
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.JsonEncodeLayoutRendererWrapper.JsonEncode">
      <summary>
            Gets or sets a value indicating whether to apply JSON encoding.
            </summary>
      <docgen category="Transformation Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper">
      <summary>
            Converts the result of another layout output to lower case.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper.Transform(System.String)">
      <summary>
            Post-processes the rendered message. 
            </summary>
      <param name="text">The text to be post-processed.</param>
      <returns>Padded and trimmed string.</returns>
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper.Lowercase">
      <summary>
            Gets or sets a value indicating whether lower case conversion should be applied.
            </summary>
      <value>A value of <c>true</c> if lower case conversion should be applied; otherwise, <c>false</c>.</value>
      <docgen category="Transformation Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.LowercaseLayoutRendererWrapper.Culture">
      <summary>
            Gets or sets the culture used for rendering. 
            </summary>
      <docgen category="Transformation Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.Wrappers.OnExceptionLayoutRendererWrapper">
      <summary>
            Only outputs the inner layout when exception has been defined for log message.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.OnExceptionLayoutRendererWrapper.Transform(System.String)">
      <summary>
            Transforms the output of another layout.
            </summary>
      <param name="text">Output to be transform.</param>
      <returns>Transformed text.</returns>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.OnExceptionLayoutRendererWrapper.RenderInner(NLog.LogEventInfo)">
      <summary>
            Renders the inner layout contents.
            </summary>
      <param name="logEvent">The log event.</param>
      <returns>
            Contents of inner layout.
            </returns>
    </member>
    <member name="T:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper">
      <summary>
            Applies padding to another layout output.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.Transform(System.String)">
      <summary>
            Transforms the output of another layout.
            </summary>
      <param name="text">Output to be transform.</param>
      <returns>Transformed text.</returns>
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.Padding">
      <summary>
            Gets or sets the number of characters to pad the output to. 
            </summary>
      <remarks>
            Positive padding values cause left padding, negative values 
            cause right padding to the desired width.
            </remarks>
      <docgen category="Transformation Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.PadCharacter">
      <summary>
            Gets or sets the padding character.
            </summary>
      <docgen category="Transformation Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.FixedLength">
      <summary>
            Gets or sets a value indicating whether to trim the 
            rendered text to the absolute value of the padding length.
            </summary>
      <docgen category="Transformation Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper">
      <summary>
            Replaces a string in the output of another layout with another string.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.InitializeLayoutRenderer">
      <summary>
            Initializes the layout renderer.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.Transform(System.String)">
      <summary>
            Post-processes the rendered message. 
            </summary>
      <param name="text">The text to be post-processed.</param>
      <returns>Post-processed text.</returns>
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.SearchFor">
      <summary>
            Gets or sets the text to search for.
            </summary>
      <value>The text search for.</value>
      <docgen category="Search/Replace Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.Regex">
      <summary>
            Gets or sets a value indicating whether regular expressions should be used.
            </summary>
      <value>A value of <c>true</c> if regular expressions should be used otherwise, <c>false</c>.</value>
      <docgen category="Search/Replace Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.ReplaceWith">
      <summary>
            Gets or sets the replacement string.
            </summary>
      <value>The replacement string.</value>
      <docgen category="Search/Replace Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.IgnoreCase">
      <summary>
            Gets or sets a value indicating whether to ignore case.
            </summary>
      <value>A value of <c>true</c> if case should be ignored when searching; otherwise, <c>false</c>.</value>
      <docgen category="Search/Replace Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.WholeWords">
      <summary>
            Gets or sets a value indicating whether to search for whole words.
            </summary>
      <value>A value of <c>true</c> if whole words should be searched for; otherwise, <c>false</c>.</value>
      <docgen category="Search/Replace Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.Wrappers.Rot13LayoutRendererWrapper">
      <summary>
            Decodes text "encrypted" with ROT-13.
            </summary>
      <remarks>
            See <a href="http://en.wikipedia.org/wiki/ROT13">http://en.wikipedia.org/wiki/ROT13</a>.
            </remarks>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.Rot13LayoutRendererWrapper.DecodeRot13(System.String)">
      <summary>
            Encodes/Decodes ROT-13-encoded string.
            </summary>
      <param name="encodedValue">The string to be encoded/decoded.</param>
      <returns>Encoded/Decoded text.</returns>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.Rot13LayoutRendererWrapper.Transform(System.String)">
      <summary>
            Transforms the output of another layout.
            </summary>
      <param name="text">Output to be transform.</param>
      <returns>Transformed text.</returns>
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.Rot13LayoutRendererWrapper.Text">
      <summary>
            Gets or sets the layout to be wrapped.
            </summary>
      <value>The layout to be wrapped.</value>
      <remarks>This variable is for backwards compatibility</remarks>
      <docgen category="Transformation Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.Wrappers.TrimWhiteSpaceLayoutRendererWrapper">
      <summary>
            Trims the whitespace from the result of another layout renderer.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.TrimWhiteSpaceLayoutRendererWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.TrimWhiteSpaceLayoutRendererWrapper" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.TrimWhiteSpaceLayoutRendererWrapper.Transform(System.String)">
      <summary>
            Post-processes the rendered message. 
            </summary>
      <param name="text">The text to be post-processed.</param>
      <returns>Trimmed string.</returns>
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.TrimWhiteSpaceLayoutRendererWrapper.TrimWhiteSpace">
      <summary>
            Gets or sets a value indicating whether lower case conversion should be applied.
            </summary>
      <value>A value of <c>true</c> if lower case conversion should be applied; otherwise, <c>false</c>.</value>
      <docgen category="Transformation Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper">
      <summary>
            Converts the result of another layout output to upper case.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper.Transform(System.String)">
      <summary>
            Post-processes the rendered message. 
            </summary>
      <param name="text">The text to be post-processed.</param>
      <returns>Padded and trimmed string.</returns>
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper.Uppercase">
      <summary>
            Gets or sets a value indicating whether upper case conversion should be applied.
            </summary>
      <value>A value of <c>true</c> if upper case conversion should be applied otherwise, <c>false</c>.</value>
      <docgen category="Transformation Options" order="10" />
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.UppercaseLayoutRendererWrapper.Culture">
      <summary>
            Gets or sets the culture used for rendering. 
            </summary>
      <docgen category="Transformation Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper">
      <summary>
            Encodes the result of another layout output for use with URLs.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper.Transform(System.String)">
      <summary>
            Transforms the output of another layout.
            </summary>
      <param name="text">Output to be transform.</param>
      <returns>Transformed text.</returns>
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper.SpaceAsPlus">
      <summary>
            Gets or sets a value indicating whether spaces should be translated to '+' or '%20'.
            </summary>
      <value>A value of <c>true</c> if space should be translated to '+'; otherwise, <c>false</c>.</value>
      <docgen category="Transformation Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.Wrappers.WhenEmptyLayoutRendererWrapper">
      <summary>
            Outputs alternative layout when the inner layout produces empty result.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.WhenEmptyLayoutRendererWrapper.Transform(System.String)">
      <summary>
            Transforms the output of another layout.
            </summary>
      <param name="text">Output to be transform.</param>
      <returns>Transformed text.</returns>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.WhenEmptyLayoutRendererWrapper.RenderInner(NLog.LogEventInfo)">
      <summary>
            Renders the inner layout contents.
            </summary>
      <param name="logEvent">The log event.</param>
      <returns>
            Contents of inner layout.
            </returns>
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.WhenEmptyLayoutRendererWrapper.WhenEmpty">
      <summary>
            Gets or sets the layout to be rendered when original layout produced empty result.
            </summary>
      <docgen category="Transformation Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.Wrappers.WhenLayoutRendererWrapper">
      <summary>
            Only outputs the inner layout when the specified condition has been met.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.WhenLayoutRendererWrapper.Transform(System.String)">
      <summary>
            Transforms the output of another layout.
            </summary>
      <param name="text">Output to be transform.</param>
      <returns>Transformed text.</returns>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.WhenLayoutRendererWrapper.RenderInner(NLog.LogEventInfo)">
      <summary>
            Renders the inner layout contents.
            </summary>
      <param name="logEvent">The log event.</param>
      <returns>
            Contents of inner layout.
            </returns>
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.WhenLayoutRendererWrapper.When">
      <summary>
            Gets or sets the condition that must be met for the inner layout to be printed.
            </summary>
      <docgen category="Transformation Options" order="10" />
    </member>
    <member name="T:NLog.LayoutRenderers.Wrappers.XmlEncodeLayoutRendererWrapper">
      <summary>
            Converts the result of another layout output to be XML-compliant.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.XmlEncodeLayoutRendererWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.XmlEncodeLayoutRendererWrapper" /> class.
            </summary>
    </member>
    <member name="M:NLog.LayoutRenderers.Wrappers.XmlEncodeLayoutRendererWrapper.Transform(System.String)">
      <summary>
            Post-processes the rendered message. 
            </summary>
      <param name="text">The text to be post-processed.</param>
      <returns>Padded and trimmed string.</returns>
    </member>
    <member name="P:NLog.LayoutRenderers.Wrappers.XmlEncodeLayoutRendererWrapper.XmlEncode">
      <summary>
            Gets or sets a value indicating whether to apply XML encoding.
            </summary>
      <docgen category="Transformation Options" order="10" />
    </member>
    <member name="T:NLog.Layouts.CsvColumn">
      <summary>
            A column in the CSV.
            </summary>
    </member>
    <member name="M:NLog.Layouts.CsvColumn.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.CsvColumn" /> class.
            </summary>
    </member>
    <member name="M:NLog.Layouts.CsvColumn.#ctor(System.String,NLog.Layouts.Layout)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.CsvColumn" /> class.
            </summary>
      <param name="name">The name of the column.</param>
      <param name="layout">The layout of the column.</param>
    </member>
    <member name="P:NLog.Layouts.CsvColumn.Name">
      <summary>
            Gets or sets the name of the column.
            </summary>
      <docgen category="CSV Column Options" order="10" />
    </member>
    <member name="P:NLog.Layouts.CsvColumn.Layout">
      <summary>
            Gets or sets the layout of the column.
            </summary>
      <docgen category="CSV Column Options" order="10" />
    </member>
    <member name="T:NLog.Layouts.CsvColumnDelimiterMode">
      <summary>
            Specifies allowed column delimiters.
            </summary>
    </member>
    <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Auto">
      <summary>
            Automatically detect from regional settings.
            </summary>
    </member>
    <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Comma">
      <summary>
            Comma (ASCII 44).
            </summary>
    </member>
    <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Semicolon">
      <summary>
            Semicolon (ASCII 59).
            </summary>
    </member>
    <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Tab">
      <summary>
            Tab character (ASCII 9).
            </summary>
    </member>
    <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Pipe">
      <summary>
            Pipe character (ASCII 124).
            </summary>
    </member>
    <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Space">
      <summary>
            Space character (ASCII 32).
            </summary>
    </member>
    <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Custom">
      <summary>
            Custom string, specified by the CustomDelimiter.
            </summary>
    </member>
    <member name="T:NLog.Layouts.Layout">
      <summary>
            Abstract interface that layouts must implement.
            </summary>
    </member>
    <member name="M:NLog.Layouts.Layout.op_Implicit(System.String)~NLog.Layouts.Layout">
      <summary>
            Converts a given text to a <see cref="T:NLog.Layouts.Layout" />.
            </summary>
      <param name="text">Text to be converted.</param>
      <returns>
        <see cref="T:NLog.Layouts.SimpleLayout" /> object represented by the text.</returns>
    </member>
    <member name="M:NLog.Layouts.Layout.FromString(System.String)">
      <summary>
            Implicitly converts the specified string to a <see cref="T:NLog.Layouts.SimpleLayout" />.
            </summary>
      <param name="layoutText">The layout string.</param>
      <returns>Instance of <see cref="T:NLog.Layouts.SimpleLayout" />.</returns>
    </member>
    <member name="M:NLog.Layouts.Layout.FromString(System.String,NLog.Config.ConfigurationItemFactory)">
      <summary>
            Implicitly converts the specified string to a <see cref="T:NLog.Layouts.SimpleLayout" />.
            </summary>
      <param name="layoutText">The layout string.</param>
      <param name="configurationItemFactory">The NLog factories to use when resolving layout renderers.</param>
      <returns>Instance of <see cref="T:NLog.Layouts.SimpleLayout" />.</returns>
    </member>
    <member name="M:NLog.Layouts.Layout.Precalculate(NLog.LogEventInfo)">
      <summary>
            Precalculates the layout for the specified log event and stores the result
            in per-log event cache.
            </summary>
      <param name="logEvent">The log event.</param>
      <remarks>
            Calling this method enables you to store the log event in a buffer
            and/or potentially evaluate it in another thread even though the 
            layout may contain thread-dependent renderer.
            </remarks>
    </member>
    <member name="M:NLog.Layouts.Layout.Render(NLog.LogEventInfo)">
      <summary>
            Renders the event info in layout.
            </summary>
      <param name="logEvent">The event info.</param>
      <returns>String representing log event.</returns>
    </member>
    <member name="M:NLog.Layouts.Layout.Initialize(NLog.Config.LoggingConfiguration)">
      <summary>
            Initializes this instance.
            </summary>
      <param name="configuration">The configuration.</param>
    </member>
    <member name="M:NLog.Layouts.Layout.Close">
      <summary>
            Closes this instance.
            </summary>
    </member>
    <member name="M:NLog.Layouts.Layout.InitializeLayout">
      <summary>
            Initializes the layout.
            </summary>
    </member>
    <member name="M:NLog.Layouts.Layout.CloseLayout">
      <summary>
            Closes the layout.
            </summary>
    </member>
    <member name="M:NLog.Layouts.Layout.GetFormattedMessage(NLog.LogEventInfo)">
      <summary>
            Renders the layout for the specified logging event by invoking layout renderers.
            </summary>
      <param name="logEvent">The logging event.</param>
      <returns>The rendered layout.</returns>
    </member>
    <member name="P:NLog.Layouts.Layout.IsThreadAgnostic">
      <summary>
            Gets a value indicating whether this layout is thread-agnostic (can be rendered on any thread).
            </summary>
      <remarks>
            Layout is thread-agnostic if it has been marked with [ThreadAgnostic] attribute and all its children are
            like that as well.
            Thread-agnostic layouts only use contents of <see cref="T:NLog.LogEventInfo" /> for its output.
            </remarks>
    </member>
    <member name="P:NLog.Layouts.Layout.LoggingConfiguration">
      <summary>
            Gets the logging configuration this target is part of.
            </summary>
    </member>
    <member name="T:NLog.Layouts.LayoutWithHeaderAndFooter">
      <summary>
            A specialized layout that supports header and footer.
            </summary>
    </member>
    <member name="M:NLog.Layouts.LayoutWithHeaderAndFooter.GetFormattedMessage(NLog.LogEventInfo)">
      <summary>
            Renders the layout for the specified logging event by invoking layout renderers.
            </summary>
      <param name="logEvent">The logging event.</param>
      <returns>The rendered layout.</returns>
    </member>
    <member name="P:NLog.Layouts.LayoutWithHeaderAndFooter.Layout">
      <summary>
            Gets or sets the body layout (can be repeated multiple times).
            </summary>
      <docgen category="Layout Options" order="10" />
    </member>
    <member name="P:NLog.Layouts.LayoutWithHeaderAndFooter.Header">
      <summary>
            Gets or sets the header layout.
            </summary>
      <docgen category="Layout Options" order="10" />
    </member>
    <member name="P:NLog.Layouts.LayoutWithHeaderAndFooter.Footer">
      <summary>
            Gets or sets the footer layout.
            </summary>
      <docgen category="Layout Options" order="10" />
    </member>
    <member name="T:NLog.Layouts.CsvLayout">
      <summary>
            A specialized layout that renders CSV-formatted events.
            </summary>
    </member>
    <member name="T:NLog.Layouts.CsvLayout.CsvHeaderLayout">
      <summary>
            Header for CSV layout.
            </summary>
    </member>
    <member name="M:NLog.Layouts.CsvLayout.CsvHeaderLayout.#ctor(NLog.Layouts.CsvLayout)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.CsvLayout.CsvHeaderLayout" /> class.
            </summary>
      <param name="parent">The parent.</param>
    </member>
    <member name="M:NLog.Layouts.CsvLayout.CsvHeaderLayout.GetFormattedMessage(NLog.LogEventInfo)">
      <summary>
            Renders the layout for the specified logging event by invoking layout renderers.
            </summary>
      <param name="logEvent">The logging event.</param>
      <returns>The rendered layout.</returns>
    </member>
    <member name="M:NLog.Layouts.CsvLayout.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.CsvLayout" /> class.
            </summary>
    </member>
    <member name="M:NLog.Layouts.CsvLayout.InitializeLayout">
      <summary>
            Initializes the layout.
            </summary>
    </member>
    <member name="M:NLog.Layouts.CsvLayout.GetFormattedMessage(NLog.LogEventInfo)">
      <summary>
            Formats the log event for write.
            </summary>
      <param name="logEvent">The log event to be formatted.</param>
      <returns>A string representation of the log event.</returns>
    </member>
    <member name="P:NLog.Layouts.CsvLayout.Columns">
      <summary>
            Gets the array of parameters to be passed.
            </summary>
      <docgen category="CSV Options" order="10" />
    </member>
    <member name="P:NLog.Layouts.CsvLayout.WithHeader">
      <summary>
            Gets or sets a value indicating whether CVS should include header.
            </summary>
      <value>A value of <c>true</c> if CVS should include header; otherwise, <c>false</c>.</value>
      <docgen category="CSV Options" order="10" />
    </member>
    <member name="P:NLog.Layouts.CsvLayout.Delimiter">
      <summary>
            Gets or sets the column delimiter.
            </summary>
      <docgen category="CSV Options" order="10" />
    </member>
    <member name="P:NLog.Layouts.CsvLayout.Quoting">
      <summary>
            Gets or sets the quoting mode.
            </summary>
      <docgen category="CSV Options" order="10" />
    </member>
    <member name="P:NLog.Layouts.CsvLayout.QuoteChar">
      <summary>
            Gets or sets the quote Character.
            </summary>
      <docgen category="CSV Options" order="10" />
    </member>
    <member name="P:NLog.Layouts.CsvLayout.CustomColumnDelimiter">
      <summary>
            Gets or sets the custom column delimiter value (valid when ColumnDelimiter is set to 'Custom').
            </summary>
      <docgen category="CSV Options" order="10" />
    </member>
    <member name="T:NLog.Layouts.CsvQuotingMode">
      <summary>
            Specifies allowes CSV quoting modes.
            </summary>
    </member>
    <member name="F:NLog.Layouts.CsvQuotingMode.All">
      <summary>
            Quote all column.
            </summary>
    </member>
    <member name="F:NLog.Layouts.CsvQuotingMode.Nothing">
      <summary>
            Quote nothing.
            </summary>
    </member>
    <member name="F:NLog.Layouts.CsvQuotingMode.Auto">
      <summary>
            Quote only whose values contain the quote symbol or
            the separator.
            </summary>
    </member>
    <member name="T:NLog.Layouts.LayoutAttribute">
      <summary>
            Marks class as a layout renderer and assigns a format string to it.
            </summary>
    </member>
    <member name="M:NLog.Layouts.LayoutAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.LayoutAttribute" /> class.
            </summary>
      <param name="name">Layout name.</param>
    </member>
    <member name="T:NLog.Layouts.LayoutParser">
      <summary>
            Parses layout strings.
            </summary>
    </member>
    <member name="T:NLog.Layouts.Log4JXmlEventLayout">
      <summary>
            A specialized layout that renders Log4j-compatible XML events.
            </summary>
      <remarks>
            This layout is not meant to be used explicitly. Instead you can use ${log4jxmlevent} layout renderer.
            </remarks>
    </member>
    <member name="M:NLog.Layouts.Log4JXmlEventLayout.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.Log4JXmlEventLayout" /> class.
            </summary>
    </member>
    <member name="M:NLog.Layouts.Log4JXmlEventLayout.GetFormattedMessage(NLog.LogEventInfo)">
      <summary>
            Renders the layout for the specified logging event by invoking layout renderers.
            </summary>
      <param name="logEvent">The logging event.</param>
      <returns>The rendered layout.</returns>
    </member>
    <member name="P:NLog.Layouts.Log4JXmlEventLayout.Renderer">
      <summary>
            Gets the <see cref="T:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer" /> instance that renders log events.
            </summary>
    </member>
    <member name="T:NLog.Layouts.SimpleLayout">
      <summary>
            Represents a string with embedded placeholders that can render contextual information.
            </summary>
      <remarks>
            This layout is not meant to be used explicitly. Instead you can just use a string containing layout 
            renderers everywhere the layout is required.
            </remarks>
    </member>
    <member name="M:NLog.Layouts.SimpleLayout.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.SimpleLayout" /> class.
            </summary>
    </member>
    <member name="M:NLog.Layouts.SimpleLayout.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.SimpleLayout" /> class.
            </summary>
      <param name="txt">The layout string to parse.</param>
    </member>
    <member name="M:NLog.Layouts.SimpleLayout.#ctor(System.String,NLog.Config.ConfigurationItemFactory)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.SimpleLayout" /> class.
            </summary>
      <param name="txt">The layout string to parse.</param>
      <param name="configurationItemFactory">The NLog factories to use when creating references to layout renderers.</param>
    </member>
    <member name="M:NLog.Layouts.SimpleLayout.op_Implicit(System.String)~NLog.Layouts.SimpleLayout">
      <summary>
            Converts a text to a simple layout.
            </summary>
      <param name="text">Text to be converted.</param>
      <returns>A <see cref="T:NLog.Layouts.SimpleLayout" /> object.</returns>
    </member>
    <member name="M:NLog.Layouts.SimpleLayout.Escape(System.String)">
      <summary>
            Escapes the passed text so that it can
            be used literally in all places where
            layout is normally expected without being
            treated as layout.
            </summary>
      <param name="text">The text to be escaped.</param>
      <returns>The escaped text.</returns>
      <remarks>
            Escaping is done by replacing all occurences of
            '${' with '${literal:text=${}'
            </remarks>
    </member>
    <member name="M:NLog.Layouts.SimpleLayout.Evaluate(System.String,NLog.LogEventInfo)">
      <summary>
            Evaluates the specified text by expadinging all layout renderers.
            </summary>
      <param name="text">The text to be evaluated.</param>
      <param name="logEvent">Log event to be used for evaluation.</param>
      <returns>The input text with all occurences of ${} replaced with
            values provided by the appropriate layout renderers.</returns>
    </member>
    <member name="M:NLog.Layouts.SimpleLayout.Evaluate(System.String)">
      <summary>
            Evaluates the specified text by expadinging all layout renderers
            in new <see cref="T:NLog.LogEventInfo" /> context.
            </summary>
      <param name="text">The text to be evaluated.</param>
      <returns>The input text with all occurences of ${} replaced with
            values provided by the appropriate layout renderers.</returns>
    </member>
    <member name="M:NLog.Layouts.SimpleLayout.ToString">
      <summary>
            Returns a <see cref="T:System.String"></see> that represents the current object.
            </summary>
      <returns>
            A <see cref="T:System.String"></see> that represents the current object.
            </returns>
    </member>
    <member name="M:NLog.Layouts.SimpleLayout.GetFormattedMessage(NLog.LogEventInfo)">
      <summary>
            Renders the layout for the specified logging event by invoking layout renderers
            that make up the event.
            </summary>
      <param name="logEvent">The logging event.</param>
      <returns>The rendered layout.</returns>
    </member>
    <member name="P:NLog.Layouts.SimpleLayout.Text">
      <summary>
            Gets or sets the layout text.
            </summary>
      <docgen category="Layout Options" order="10" />
    </member>
    <member name="P:NLog.Layouts.SimpleLayout.Renderers">
      <summary>
            Gets a collection of <see cref="T:NLog.LayoutRenderers.LayoutRenderer" /> objects that make up this layout.
            </summary>
    </member>
    <member name="T:NLog.LogEventInfo">
      <summary>
            Represents the logging event.
            </summary>
    </member>
    <member name="F:NLog.LogEventInfo.ZeroDate">
      <summary>
            Gets the date of the first log event created.
            </summary>
    </member>
    <member name="M:NLog.LogEventInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LogEventInfo" /> class.
            </summary>
    </member>
    <member name="M:NLog.LogEventInfo.#ctor(NLog.LogLevel,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LogEventInfo" /> class.
            </summary>
      <param name="level">Log level.</param>
      <param name="loggerName">Logger name.</param>
      <param name="message">Log message including parameter placeholders.</param>
    </member>
    <member name="M:NLog.LogEventInfo.#ctor(NLog.LogLevel,System.String,System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LogEventInfo" /> class.
            </summary>
      <param name="level">Log level.</param>
      <param name="loggerName">Logger name.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">Log message including parameter placeholders.</param>
      <param name="parameters">Parameter array.</param>
    </member>
    <member name="M:NLog.LogEventInfo.#ctor(NLog.LogLevel,System.String,System.IFormatProvider,System.String,System.Object[],System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LogEventInfo" /> class.
            </summary>
      <param name="level">Log level.</param>
      <param name="loggerName">Logger name.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">Log message including parameter placeholders.</param>
      <param name="parameters">Parameter array.</param>
      <param name="exception">Exception information.</param>
    </member>
    <member name="M:NLog.LogEventInfo.CreateNullEvent">
      <summary>
            Creates the null event.
            </summary>
      <returns>Null log event.</returns>
    </member>
    <member name="M:NLog.LogEventInfo.Create(NLog.LogLevel,System.String,System.String)">
      <summary>
            Creates the log event.
            </summary>
      <param name="logLevel">The log level.</param>
      <param name="loggerName">Name of the logger.</param>
      <param name="message">The message.</param>
      <returns>Instance of <see cref="T:NLog.LogEventInfo" />.</returns>
    </member>
    <member name="M:NLog.LogEventInfo.Create(NLog.LogLevel,System.String,System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Creates the log event.
            </summary>
      <param name="logLevel">The log level.</param>
      <param name="loggerName">Name of the logger.</param>
      <param name="formatProvider">The format provider.</param>
      <param name="message">The message.</param>
      <param name="parameters">The parameters.</param>
      <returns>Instance of <see cref="T:NLog.LogEventInfo" />.</returns>
    </member>
    <member name="M:NLog.LogEventInfo.Create(NLog.LogLevel,System.String,System.IFormatProvider,System.Object)">
      <summary>
            Creates the log event.
            </summary>
      <param name="logLevel">The log level.</param>
      <param name="loggerName">Name of the logger.</param>
      <param name="formatProvider">The format provider.</param>
      <param name="message">The message.</param>
      <returns>Instance of <see cref="T:NLog.LogEventInfo" />.</returns>
    </member>
    <member name="M:NLog.LogEventInfo.Create(NLog.LogLevel,System.String,System.String,System.Exception)">
      <summary>
            Creates the log event.
            </summary>
      <param name="logLevel">The log level.</param>
      <param name="loggerName">Name of the logger.</param>
      <param name="message">The message.</param>
      <param name="exception">The exception.</param>
      <returns>Instance of <see cref="T:NLog.LogEventInfo" />.</returns>
    </member>
    <member name="M:NLog.LogEventInfo.WithContinuation(NLog.Common.AsyncContinuation)">
      <summary>
            Creates <see cref="T:NLog.Common.AsyncLogEventInfo" /> from this <see cref="T:NLog.LogEventInfo" /> by attaching the specified asynchronous continuation.
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
      <returns>Instance of <see cref="T:NLog.Common.AsyncLogEventInfo" /> with attached continuation.</returns>
    </member>
    <member name="M:NLog.LogEventInfo.ToString">
      <summary>
            Returns a string representation of this log event.
            </summary>
      <returns>String representation of the log event.</returns>
    </member>
    <member name="M:NLog.LogEventInfo.SetStackTrace(System.Diagnostics.StackTrace,System.Int32)">
      <summary>
            Sets the stack trace for the event info.
            </summary>
      <param name="stackTrace">The stack trace.</param>
      <param name="userStackFrame">Index of the first user stack frame within the stack trace.</param>
    </member>
    <member name="P:NLog.LogEventInfo.SequenceID">
      <summary>
            Gets the unique identifier of log event which is automatically generated
            and monotonously increasing.
            </summary>
    </member>
    <member name="P:NLog.LogEventInfo.TimeStamp">
      <summary>
            Gets or sets the timestamp of the logging event.
            </summary>
    </member>
    <member name="P:NLog.LogEventInfo.Level">
      <summary>
            Gets or sets the level of the logging event.
            </summary>
    </member>
    <member name="P:NLog.LogEventInfo.HasStackTrace">
      <summary>
            Gets a value indicating whether stack trace has been set for this event.
            </summary>
    </member>
    <member name="P:NLog.LogEventInfo.UserStackFrame">
      <summary>
            Gets the stack frame of the method that did the logging.
            </summary>
    </member>
    <member name="P:NLog.LogEventInfo.UserStackFrameNumber">
      <summary>
            Gets the number index of the stack frame that represents the user
            code (not the NLog code).
            </summary>
    </member>
    <member name="P:NLog.LogEventInfo.StackTrace">
      <summary>
            Gets the entire stack trace.
            </summary>
    </member>
    <member name="P:NLog.LogEventInfo.Exception">
      <summary>
            Gets or sets the exception information.
            </summary>
    </member>
    <member name="P:NLog.LogEventInfo.LoggerName">
      <summary>
            Gets or sets the logger name.
            </summary>
    </member>
    <member name="P:NLog.LogEventInfo.LoggerShortName">
      <summary>
            Gets the logger short name.
            </summary>
    </member>
    <member name="P:NLog.LogEventInfo.Message">
      <summary>
            Gets or sets the log message including any parameter placeholders.
            </summary>
    </member>
    <member name="P:NLog.LogEventInfo.Parameters">
      <summary>
            Gets or sets the parameter values or null if no parameters have been specified.
            </summary>
    </member>
    <member name="P:NLog.LogEventInfo.FormatProvider">
      <summary>
            Gets or sets the format provider that was provided while logging or <see langword="null" />
            when no formatProvider was specified.
            </summary>
    </member>
    <member name="P:NLog.LogEventInfo.FormattedMessage">
      <summary>
            Gets the formatted message.
            </summary>
    </member>
    <member name="P:NLog.LogEventInfo.Properties">
      <summary>
            Gets the dictionary of per-event context properties.
            </summary>
    </member>
    <member name="P:NLog.LogEventInfo.Context">
      <summary>
            Gets the dictionary of per-event context properties.
            </summary>
    </member>
    <member name="T:NLog.LogFactory">
      <summary>
            Creates and manages instances of <see cref="T:NLog.Logger" /> objects.
            </summary>
    </member>
    <member name="T:NLog.LogFactory.LoggerCacheKey">
      <summary>
            Logger cache key.
            </summary>
    </member>
    <member name="M:NLog.LogFactory.LoggerCacheKey.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:NLog.LogFactory.LoggerCacheKey.Equals(System.Object)">
      <summary>
            Determines if two objects are equal in value.
            </summary>
      <param name="o">Other object to compare to.</param>
      <returns>True if objects are equal, false otherwise.</returns>
    </member>
    <member name="T:NLog.LogFactory.LogEnabler">
      <summary>
            Enables logging in <see cref="M:System.IDisposable.Dispose" /> implementation.
            </summary>
    </member>
    <member name="M:NLog.LogFactory.LogEnabler.#ctor(NLog.LogFactory)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LogFactory.LogEnabler" /> class.
            </summary>
      <param name="factory">The factory.</param>
    </member>
    <member name="M:NLog.LogFactory.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LogFactory" /> class.
            </summary>
    </member>
    <member name="M:NLog.LogFactory.#ctor(NLog.Config.LoggingConfiguration)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LogFactory" /> class.
            </summary>
      <param name="config">The config.</param>
    </member>
    <member name="M:NLog.LogFactory.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:NLog.LogFactory.CreateNullLogger">
      <summary>
            Creates a logger that discards all log messages.
            </summary>
      <returns>Null logger instance.</returns>
    </member>
    <member name="M:NLog.LogFactory.GetCurrentClassLogger">
      <summary>
            Gets the logger named after the currently-being-initialized class.
            </summary>
      <returns>The logger.</returns>
      <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
    </member>
    <member name="M:NLog.LogFactory.GetCurrentClassLogger(System.Type)">
      <summary>
            Gets the logger named after the currently-being-initialized class.
            </summary>
      <param name="loggerType">The type of the logger to create. The type must inherit from NLog.Logger.</param>
      <returns>The logger.</returns>
      <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
    </member>
    <member name="M:NLog.LogFactory.GetLogger(System.String)">
      <summary>
            Gets the specified named logger.
            </summary>
      <param name="name">Name of the logger.</param>
      <returns>The logger reference. Multiple calls to <c>GetLogger</c> with the same argument aren't guaranteed to return the same logger reference.</returns>
    </member>
    <member name="M:NLog.LogFactory.GetLogger(System.String,System.Type)">
      <summary>
            Gets the specified named logger.
            </summary>
      <param name="name">Name of the logger.</param>
      <param name="loggerType">The type of the logger to create. The type must inherit from NLog.Logger.</param>
      <returns>The logger reference. Multiple calls to <c>GetLogger</c> with the 
            same argument aren't guaranteed to return the same logger reference.</returns>
    </member>
    <member name="M:NLog.LogFactory.ReconfigExistingLoggers">
      <summary>
            Loops through all loggers previously returned by GetLogger
            and recalculates their target and filter list. Useful after modifying the configuration programmatically
            to ensure that all loggers have been properly configured.
            </summary>
    </member>
    <member name="M:NLog.LogFactory.Flush">
      <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
    </member>
    <member name="M:NLog.LogFactory.Flush(System.TimeSpan)">
      <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
      <param name="timeout">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
    </member>
    <member name="M:NLog.LogFactory.Flush(System.Int32)">
      <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
      <param name="timeoutMilliseconds">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
    </member>
    <member name="M:NLog.LogFactory.Flush(NLog.Common.AsyncContinuation)">
      <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
    </member>
    <member name="M:NLog.LogFactory.Flush(NLog.Common.AsyncContinuation,System.Int32)">
      <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
      <param name="timeoutMilliseconds">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
    </member>
    <member name="M:NLog.LogFactory.Flush(NLog.Common.AsyncContinuation,System.TimeSpan)">
      <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
      <param name="timeout">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
    </member>
    <member name="M:NLog.LogFactory.DisableLogging">
      <summary>Decreases the log enable counter and if it reaches -1 
            the logs are disabled.</summary>
      <remarks>Logging is enabled if the number of <see cref="M:NLog.LogFactory.EnableLogging" /> calls is greater 
            than or equal to <see cref="M:NLog.LogFactory.DisableLogging" /> calls.</remarks>
      <returns>An object that iplements IDisposable whose Dispose() method
            reenables logging. To be used with C# <c>using ()</c> statement.</returns>
    </member>
    <member name="M:NLog.LogFactory.EnableLogging">
      <summary>Increases the log enable counter and if it reaches 0 the logs are disabled.</summary>
      <remarks>Logging is enabled if the number of <see cref="M:NLog.LogFactory.EnableLogging" /> calls is greater 
            than or equal to <see cref="M:NLog.LogFactory.DisableLogging" /> calls.</remarks>
    </member>
    <member name="M:NLog.LogFactory.IsLoggingEnabled">
      <summary>
            Returns <see langword="true" /> if logging is currently enabled.
            </summary>
      <returns>A value of <see langword="true" /> if logging is currently enabled, 
            <see langword="false" /> otherwise.</returns>
      <remarks>Logging is enabled if the number of <see cref="M:NLog.LogFactory.EnableLogging" /> calls is greater 
            than or equal to <see cref="M:NLog.LogFactory.DisableLogging" /> calls.</remarks>
    </member>
    <member name="M:NLog.LogFactory.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
      <param name="disposing">True to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="P:NLog.LogFactory.ThrowExceptions">
      <summary>
            Gets or sets a value indicating whether exceptions should be thrown.
            </summary>
      <value>A value of <c>true</c> if exceptiosn should be thrown; otherwise, <c>false</c>.</value>
      <remarks>By default exceptions
            are not thrown under any circumstances.
            </remarks>
    </member>
    <member name="P:NLog.LogFactory.Configuration">
      <summary>
            Gets or sets the current logging configuration.
            </summary>
    </member>
    <member name="P:NLog.LogFactory.GlobalThreshold">
      <summary>
            Gets or sets the global log threshold. Log events below this threshold are not logged.
            </summary>
    </member>
    <member name="E:NLog.LogFactory.ConfigurationChanged">
      <summary>
            Occurs when logging <see cref="P:NLog.LogFactory.Configuration" /> changes.
            </summary>
    </member>
    <member name="E:NLog.LogFactory.ConfigurationReloaded">
      <summary>
            Occurs when logging <see cref="P:NLog.LogFactory.Configuration" /> gets reloaded.
            </summary>
    </member>
    <member name="T:NLog.LogFactory`1">
      <summary>
            Specialized LogFactory that can return instances of custom logger types.
            </summary>
      <typeparam name="T">The type of the logger to be returned. Must inherit from <see cref="T:NLog.Logger" />.</typeparam>
    </member>
    <member name="M:NLog.LogFactory`1.GetLogger(System.String)">
      <summary>
            Gets the logger.
            </summary>
      <param name="name">The logger name.</param>
      <returns>An instance of <typeparamref name="T" />.</returns>
    </member>
    <member name="M:NLog.LogFactory`1.GetCurrentClassLogger">
      <summary>
            Gets the logger named after the currently-being-initialized class.
            </summary>
      <returns>The logger.</returns>
      <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
    </member>
    <member name="T:NLog.Logger">
      <summary>
            Provides logging interface and utility functions.
            </summary>
      <content>
            Auto-generated Logger members for binary compatibility with NLog 1.0.
            </content>
    </member>
    <member name="M:NLog.Logger.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Logger" /> class.
            </summary>
    </member>
    <member name="M:NLog.Logger.IsEnabled(NLog.LogLevel)">
      <summary>
            Gets a value indicating whether logging is enabled for the specified level.
            </summary>
      <param name="level">Log level to be checked.</param>
      <returns>A value of <see langword="true" /> if logging is enabled for the specified level, otherwise it returns <see langword="false" />.</returns>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogEventInfo)">
      <summary>
            Writes the specified diagnostic message.
            </summary>
      <param name="logEvent">Log event.</param>
    </member>
    <member name="M:NLog.Logger.Log(System.Type,NLog.LogEventInfo)">
      <summary>
            Writes the specified diagnostic message.
            </summary>
      <param name="wrapperType">The name of the type that wraps Logger.</param>
      <param name="logEvent">Log event.</param>
    </member>
    <member name="M:NLog.Logger.Log``1(NLog.LogLevel,``0)">
      <overloads>
            Writes the diagnostic message at the specified level using the specified format provider and format parameters.
            </overloads>
      <summary>
            Writes the diagnostic message at the specified level.
            </summary>
      <typeparam name="T">Type of the value.</typeparam>
      <param name="level">The log level.</param>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:NLog.Logger.Log``1(NLog.LogLevel,System.IFormatProvider,``0)">
      <summary>
            Writes the diagnostic message at the specified level.
            </summary>
      <typeparam name="T">Type of the value.</typeparam>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,NLog.LogMessageGenerator)">
      <summary>
            Writes the diagnostic message at the specified level.
            </summary>
      <param name="level">The log level.</param>
      <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
    </member>
    <member name="M:NLog.Logger.LogException(NLog.LogLevel,System.String,System.Exception)">
      <summary>
            Writes the diagnostic message and exception at the specified level.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> to be written.</param>
      <param name="exception">An exception to be logged.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Writes the diagnostic message at the specified level using the specified parameters and formatting them with the supplied format provider.
            </summary>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="args">Arguments to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String)">
      <summary>
            Writes the diagnostic message at the specified level.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">Log message.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object[])">
      <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="args">Arguments to format.</param>
    </member>
    <member name="M:NLog.Logger.Log``1(NLog.LogLevel,System.IFormatProvider,System.String,``0)">
      <summary>
            Writes the diagnostic message at the specified level using the specified parameter and formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument">The type of the argument.</typeparam>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log``1(NLog.LogLevel,System.String,``0)">
      <summary>
            Writes the diagnostic message at the specified level using the specified parameter.
            </summary>
      <typeparam name="TArgument">The type of the argument.</typeparam>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log``2(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1)">
      <summary>
            Writes the diagnostic message at the specified level using the specified arguments formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log``2(NLog.LogLevel,System.String,``0,``1)">
      <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log``3(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1,``2)">
      <summary>
            Writes the diagnostic message at the specified level using the specified arguments formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <typeparam name="TArgument3">The type of the third argument.</typeparam>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
      <param name="argument3">The third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log``3(NLog.LogLevel,System.String,``0,``1,``2)">
      <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <typeparam name="TArgument3">The type of the third argument.</typeparam>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
      <param name="argument3">The third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace``1(``0)">
      <overloads>
            Writes the diagnostic message at the <c>Trace</c> level using the specified format provider and format parameters.
            </overloads>
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
      <typeparam name="T">Type of the value.</typeparam>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:NLog.Logger.Trace``1(System.IFormatProvider,``0)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
      <typeparam name="T">Type of the value.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:NLog.Logger.Trace(NLog.LogMessageGenerator)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
      <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
    </member>
    <member name="M:NLog.Logger.TraceException(System.String,System.Exception)">
      <summary>
            Writes the diagnostic message and exception at the <c>Trace</c> level.
            </summary>
      <param name="message">A <see langword="string" /> to be written.</param>
      <param name="exception">An exception to be logged.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="args">Arguments to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
      <param name="message">Log message.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String,System.Object[])">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="args">Arguments to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace``1(System.IFormatProvider,System.String,``0)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument">The type of the argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace``1(System.String,``0)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameter.
            </summary>
      <typeparam name="TArgument">The type of the argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace``2(System.IFormatProvider,System.String,``0,``1)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace``2(System.String,``0,``1)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace``3(System.IFormatProvider,System.String,``0,``1,``2)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <typeparam name="TArgument3">The type of the third argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
      <param name="argument3">The third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace``3(System.String,``0,``1,``2)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <typeparam name="TArgument3">The type of the third argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
      <param name="argument3">The third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug``1(``0)">
      <overloads>
            Writes the diagnostic message at the <c>Debug</c> level using the specified format provider and format parameters.
            </overloads>
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
      <typeparam name="T">Type of the value.</typeparam>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:NLog.Logger.Debug``1(System.IFormatProvider,``0)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
      <typeparam name="T">Type of the value.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:NLog.Logger.Debug(NLog.LogMessageGenerator)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
      <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
    </member>
    <member name="M:NLog.Logger.DebugException(System.String,System.Exception)">
      <summary>
            Writes the diagnostic message and exception at the <c>Debug</c> level.
            </summary>
      <param name="message">A <see langword="string" /> to be written.</param>
      <param name="exception">An exception to be logged.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="args">Arguments to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
      <param name="message">Log message.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String,System.Object[])">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="args">Arguments to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug``1(System.IFormatProvider,System.String,``0)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument">The type of the argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug``1(System.String,``0)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameter.
            </summary>
      <typeparam name="TArgument">The type of the argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug``2(System.IFormatProvider,System.String,``0,``1)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug``2(System.String,``0,``1)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug``3(System.IFormatProvider,System.String,``0,``1,``2)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <typeparam name="TArgument3">The type of the third argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
      <param name="argument3">The third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug``3(System.String,``0,``1,``2)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <typeparam name="TArgument3">The type of the third argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
      <param name="argument3">The third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info``1(``0)">
      <overloads>
            Writes the diagnostic message at the <c>Info</c> level using the specified format provider and format parameters.
            </overloads>
      <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
      <typeparam name="T">Type of the value.</typeparam>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:NLog.Logger.Info``1(System.IFormatProvider,``0)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
      <typeparam name="T">Type of the value.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:NLog.Logger.Info(NLog.LogMessageGenerator)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
      <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
    </member>
    <member name="M:NLog.Logger.InfoException(System.String,System.Exception)">
      <summary>
            Writes the diagnostic message and exception at the <c>Info</c> level.
            </summary>
      <param name="message">A <see langword="string" /> to be written.</param>
      <param name="exception">An exception to be logged.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="args">Arguments to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
      <param name="message">Log message.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String,System.Object[])">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="args">Arguments to format.</param>
    </member>
    <member name="M:NLog.Logger.Info``1(System.IFormatProvider,System.String,``0)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument">The type of the argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info``1(System.String,``0)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameter.
            </summary>
      <typeparam name="TArgument">The type of the argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info``2(System.IFormatProvider,System.String,``0,``1)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info``2(System.String,``0,``1)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info``3(System.IFormatProvider,System.String,``0,``1,``2)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <typeparam name="TArgument3">The type of the third argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
      <param name="argument3">The third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info``3(System.String,``0,``1,``2)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <typeparam name="TArgument3">The type of the third argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
      <param name="argument3">The third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn``1(``0)">
      <overloads>
            Writes the diagnostic message at the <c>Warn</c> level using the specified format provider and format parameters.
            </overloads>
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
      <typeparam name="T">Type of the value.</typeparam>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:NLog.Logger.Warn``1(System.IFormatProvider,``0)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
      <typeparam name="T">Type of the value.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:NLog.Logger.Warn(NLog.LogMessageGenerator)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
      <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
    </member>
    <member name="M:NLog.Logger.WarnException(System.String,System.Exception)">
      <summary>
            Writes the diagnostic message and exception at the <c>Warn</c> level.
            </summary>
      <param name="message">A <see langword="string" /> to be written.</param>
      <param name="exception">An exception to be logged.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="args">Arguments to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
      <param name="message">Log message.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String,System.Object[])">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="args">Arguments to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn``1(System.IFormatProvider,System.String,``0)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument">The type of the argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn``1(System.String,``0)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameter.
            </summary>
      <typeparam name="TArgument">The type of the argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn``2(System.IFormatProvider,System.String,``0,``1)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn``2(System.String,``0,``1)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn``3(System.IFormatProvider,System.String,``0,``1,``2)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <typeparam name="TArgument3">The type of the third argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
      <param name="argument3">The third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn``3(System.String,``0,``1,``2)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <typeparam name="TArgument3">The type of the third argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
      <param name="argument3">The third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error``1(``0)">
      <overloads>
            Writes the diagnostic message at the <c>Error</c> level using the specified format provider and format parameters.
            </overloads>
      <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
      <typeparam name="T">Type of the value.</typeparam>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:NLog.Logger.Error``1(System.IFormatProvider,``0)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
      <typeparam name="T">Type of the value.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:NLog.Logger.Error(NLog.LogMessageGenerator)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
      <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
    </member>
    <member name="M:NLog.Logger.ErrorException(System.String,System.Exception)">
      <summary>
            Writes the diagnostic message and exception at the <c>Error</c> level.
            </summary>
      <param name="message">A <see langword="string" /> to be written.</param>
      <param name="exception">An exception to be logged.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="args">Arguments to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
      <param name="message">Log message.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String,System.Object[])">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="args">Arguments to format.</param>
    </member>
    <member name="M:NLog.Logger.Error``1(System.IFormatProvider,System.String,``0)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument">The type of the argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error``1(System.String,``0)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameter.
            </summary>
      <typeparam name="TArgument">The type of the argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error``2(System.IFormatProvider,System.String,``0,``1)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error``2(System.String,``0,``1)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error``3(System.IFormatProvider,System.String,``0,``1,``2)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <typeparam name="TArgument3">The type of the third argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
      <param name="argument3">The third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error``3(System.String,``0,``1,``2)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <typeparam name="TArgument3">The type of the third argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
      <param name="argument3">The third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal``1(``0)">
      <overloads>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified format provider and format parameters.
            </overloads>
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
      <typeparam name="T">Type of the value.</typeparam>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:NLog.Logger.Fatal``1(System.IFormatProvider,``0)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
      <typeparam name="T">Type of the value.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="value">The value to be written.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(NLog.LogMessageGenerator)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
      <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
    </member>
    <member name="M:NLog.Logger.FatalException(System.String,System.Exception)">
      <summary>
            Writes the diagnostic message and exception at the <c>Fatal</c> level.
            </summary>
      <param name="message">A <see langword="string" /> to be written.</param>
      <param name="exception">An exception to be logged.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="args">Arguments to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
      <param name="message">Log message.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String,System.Object[])">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="args">Arguments to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal``1(System.IFormatProvider,System.String,``0)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument">The type of the argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal``1(System.String,``0)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameter.
            </summary>
      <typeparam name="TArgument">The type of the argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal``2(System.IFormatProvider,System.String,``0,``1)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal``2(System.String,``0,``1)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal``3(System.IFormatProvider,System.String,``0,``1,``2)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <typeparam name="TArgument3">The type of the third argument.</typeparam>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
      <param name="argument3">The third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal``3(System.String,``0,``1,``2)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
      <typeparam name="TArgument1">The type of the first argument.</typeparam>
      <typeparam name="TArgument2">The type of the second argument.</typeparam>
      <typeparam name="TArgument3">The type of the third argument.</typeparam>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument1">The first argument to format.</param>
      <param name="argument2">The second argument to format.</param>
      <param name="argument3">The third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.Object)">
      <summary>
            Writes the diagnostic message at the specified level.
            </summary>
      <param name="level">The log level.</param>
      <param name="value">A <see langword="object" /> to be written.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.Object)">
      <summary>
            Writes the diagnostic message at the specified level.
            </summary>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="value">A <see langword="object" /> to be written.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object,System.Object)">
      <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="arg1">First argument to format.</param>
      <param name="arg2">Second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object,System.Object,System.Object)">
      <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="arg1">First argument to format.</param>
      <param name="arg2">Second argument to format.</param>
      <param name="arg3">Third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Boolean)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Boolean)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Char)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Char)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Byte)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Byte)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.String)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.String)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Int32)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Int32)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Int64)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Int64)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Single)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Single)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Double)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Double)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Decimal)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Decimal)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.SByte)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.SByte)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.UInt32)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.UInt32)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.UInt64)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="level">The log level.</param>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.UInt64)">
      <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
      <param name="level">The log level.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
      <param name="value">A <see langword="object" /> to be written.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="value">A <see langword="object" /> to be written.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String,System.Object,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="arg1">First argument to format.</param>
      <param name="arg2">Second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String,System.Object,System.Object,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="arg1">First argument to format.</param>
      <param name="arg2">Second argument to format.</param>
      <param name="arg3">Third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Boolean)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String,System.Boolean)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Char)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String,System.Char)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Byte)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String,System.Byte)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.String)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String,System.String)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Int32)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String,System.Int32)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Int64)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String,System.Int64)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Single)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String,System.Single)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Double)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String,System.Double)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Decimal)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String,System.Decimal)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.SByte)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String,System.SByte)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.UInt32)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String,System.UInt32)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.UInt64)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Trace(System.String,System.UInt64)">
      <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
      <param name="value">A <see langword="object" /> to be written.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="value">A <see langword="object" /> to be written.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String,System.Object,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="arg1">First argument to format.</param>
      <param name="arg2">Second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String,System.Object,System.Object,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="arg1">First argument to format.</param>
      <param name="arg2">Second argument to format.</param>
      <param name="arg3">Third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Boolean)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String,System.Boolean)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Char)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String,System.Char)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Byte)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String,System.Byte)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.String)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String,System.String)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Int32)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String,System.Int32)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Int64)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String,System.Int64)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Single)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String,System.Single)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Double)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String,System.Double)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Decimal)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String,System.Decimal)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.SByte)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String,System.SByte)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.UInt32)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String,System.UInt32)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.UInt64)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Debug(System.String,System.UInt64)">
      <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
      <param name="value">A <see langword="object" /> to be written.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.IFormatProvider,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="value">A <see langword="object" /> to be written.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String,System.Object,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="arg1">First argument to format.</param>
      <param name="arg2">Second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String,System.Object,System.Object,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="arg1">First argument to format.</param>
      <param name="arg2">Second argument to format.</param>
      <param name="arg3">Third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Boolean)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String,System.Boolean)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Char)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String,System.Char)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Byte)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String,System.Byte)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.String)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String,System.String)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Int32)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String,System.Int32)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Int64)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String,System.Int64)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Single)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String,System.Single)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Double)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String,System.Double)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Decimal)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String,System.Decimal)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.SByte)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String,System.SByte)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.UInt32)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String,System.UInt32)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.UInt64)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Info(System.String,System.UInt64)">
      <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
      <param name="value">A <see langword="object" /> to be written.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="value">A <see langword="object" /> to be written.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String,System.Object,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="arg1">First argument to format.</param>
      <param name="arg2">Second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String,System.Object,System.Object,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="arg1">First argument to format.</param>
      <param name="arg2">Second argument to format.</param>
      <param name="arg3">Third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Boolean)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String,System.Boolean)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Char)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String,System.Char)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Byte)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String,System.Byte)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.String)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String,System.String)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Int32)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String,System.Int32)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Int64)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String,System.Int64)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Single)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String,System.Single)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Double)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String,System.Double)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Decimal)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String,System.Decimal)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.SByte)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String,System.SByte)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.UInt32)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String,System.UInt32)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.UInt64)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Warn(System.String,System.UInt64)">
      <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
      <param name="value">A <see langword="object" /> to be written.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.IFormatProvider,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="value">A <see langword="object" /> to be written.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String,System.Object,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="arg1">First argument to format.</param>
      <param name="arg2">Second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String,System.Object,System.Object,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="arg1">First argument to format.</param>
      <param name="arg2">Second argument to format.</param>
      <param name="arg3">Third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Boolean)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String,System.Boolean)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Char)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String,System.Char)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Byte)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String,System.Byte)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.String)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String,System.String)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Int32)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String,System.Int32)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Int64)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String,System.Int64)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Single)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String,System.Single)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Double)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String,System.Double)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Decimal)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String,System.Decimal)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.SByte)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String,System.SByte)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.UInt32)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String,System.UInt32)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.UInt64)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Error(System.String,System.UInt64)">
      <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
      <param name="value">A <see langword="object" /> to be written.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="value">A <see langword="object" /> to be written.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String,System.Object,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="arg1">First argument to format.</param>
      <param name="arg2">Second argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String,System.Object,System.Object,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
      <param name="message">A <see langword="string" /> containing format items.</param>
      <param name="arg1">First argument to format.</param>
      <param name="arg2">Second argument to format.</param>
      <param name="arg3">Third argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Boolean)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String,System.Boolean)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Char)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String,System.Char)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Byte)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String,System.Byte)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.String)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String,System.String)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Int32)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String,System.Int32)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Int64)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String,System.Int64)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Single)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String,System.Single)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Double)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String,System.Double)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Decimal)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String,System.Decimal)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String,System.Object)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.SByte)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String,System.SByte)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.UInt32)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String,System.UInt32)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.UInt64)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
      <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="M:NLog.Logger.Fatal(System.String,System.UInt64)">
      <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
      <param name="message">A <see langword="string" /> containing one format item.</param>
      <param name="argument">The argument to format.</param>
    </member>
    <member name="P:NLog.Logger.Name">
      <summary>
            Gets the name of the logger.
            </summary>
    </member>
    <member name="P:NLog.Logger.Factory">
      <summary>
            Gets the factory that created this logger.
            </summary>
    </member>
    <member name="P:NLog.Logger.IsTraceEnabled">
      <summary>
            Gets a value indicating whether logging is enabled for the <c>Trace</c> level.
            </summary>
      <returns>A value of <see langword="true" /> if logging is enabled for the <c>Trace</c> level, otherwise it returns <see langword="false" />.</returns>
    </member>
    <member name="P:NLog.Logger.IsDebugEnabled">
      <summary>
            Gets a value indicating whether logging is enabled for the <c>Debug</c> level.
            </summary>
      <returns>A value of <see langword="true" /> if logging is enabled for the <c>Debug</c> level, otherwise it returns <see langword="false" />.</returns>
    </member>
    <member name="P:NLog.Logger.IsInfoEnabled">
      <summary>
            Gets a value indicating whether logging is enabled for the <c>Info</c> level.
            </summary>
      <returns>A value of <see langword="true" /> if logging is enabled for the <c>Info</c> level, otherwise it returns <see langword="false" />.</returns>
    </member>
    <member name="P:NLog.Logger.IsWarnEnabled">
      <summary>
            Gets a value indicating whether logging is enabled for the <c>Warn</c> level.
            </summary>
      <returns>A value of <see langword="true" /> if logging is enabled for the <c>Warn</c> level, otherwise it returns <see langword="false" />.</returns>
    </member>
    <member name="P:NLog.Logger.IsErrorEnabled">
      <summary>
            Gets a value indicating whether logging is enabled for the <c>Error</c> level.
            </summary>
      <returns>A value of <see langword="true" /> if logging is enabled for the <c>Error</c> level, otherwise it returns <see langword="false" />.</returns>
    </member>
    <member name="P:NLog.Logger.IsFatalEnabled">
      <summary>
            Gets a value indicating whether logging is enabled for the <c>Fatal</c> level.
            </summary>
      <returns>A value of <see langword="true" /> if logging is enabled for the <c>Fatal</c> level, otherwise it returns <see langword="false" />.</returns>
    </member>
    <member name="E:NLog.Logger.LoggerReconfigured">
      <summary>
            Occurs when logger configuration changes.
            </summary>
    </member>
    <member name="T:NLog.LoggerImpl">
      <summary>
            Implementation of logging engine.
            </summary>
    </member>
    <member name="M:NLog.LoggerImpl.GetFilterResult(System.Collections.Generic.IEnumerable{NLog.Filters.Filter},NLog.LogEventInfo)">
      <summary>
            Gets the filter result.
            </summary>
      <param name="filterChain">The filter chain.</param>
      <param name="logEvent">The log event.</param>
      <returns>The result of the filter.</returns>
    </member>
    <member name="T:NLog.LogLevel">
      <summary>
            Defines available log levels.
            </summary>
    </member>
    <member name="F:NLog.LogLevel.Trace">
      <summary>
            Trace log level.
            </summary>
    </member>
    <member name="F:NLog.LogLevel.Debug">
      <summary>
            Debug log level.
            </summary>
    </member>
    <member name="F:NLog.LogLevel.Info">
      <summary>
            Info log level.
            </summary>
    </member>
    <member name="F:NLog.LogLevel.Warn">
      <summary>
            Warn log level.
            </summary>
    </member>
    <member name="F:NLog.LogLevel.Error">
      <summary>
            Error log level.
            </summary>
    </member>
    <member name="F:NLog.LogLevel.Fatal">
      <summary>
            Fatal log level.
            </summary>
    </member>
    <member name="F:NLog.LogLevel.Off">
      <summary>
            Off log level.
            </summary>
    </member>
    <member name="M:NLog.LogLevel.op_Equality(NLog.LogLevel,NLog.LogLevel)">
      <summary>
            Compares two <see cref="T:NLog.LogLevel" /> objects 
            and returns a value indicating whether 
            the first one is equal to the second one.
            </summary>
      <param name="level1">The first level.</param>
      <param name="level2">The second level.</param>
      <returns>The value of <c>level1.Ordinal == level2.Ordinal</c>.</returns>
    </member>
    <member name="M:NLog.LogLevel.op_Inequality(NLog.LogLevel,NLog.LogLevel)">
      <summary>
            Compares two <see cref="T:NLog.LogLevel" /> objects 
            and returns a value indicating whether 
            the first one is not equal to the second one.
            </summary>
      <param name="level1">The first level.</param>
      <param name="level2">The second level.</param>
      <returns>The value of <c>level1.Ordinal != level2.Ordinal</c>.</returns>
    </member>
    <member name="M:NLog.LogLevel.op_GreaterThan(NLog.LogLevel,NLog.LogLevel)">
      <summary>
            Compares two <see cref="T:NLog.LogLevel" /> objects 
            and returns a value indicating whether 
            the first one is greater than the second one.
            </summary>
      <param name="level1">The first level.</param>
      <param name="level2">The second level.</param>
      <returns>The value of <c>level1.Ordinal &gt; level2.Ordinal</c>.</returns>
    </member>
    <member name="M:NLog.LogLevel.op_GreaterThanOrEqual(NLog.LogLevel,NLog.LogLevel)">
      <summary>
            Compares two <see cref="T:NLog.LogLevel" /> objects 
            and returns a value indicating whether 
            the first one is greater than or equal to the second one.
            </summary>
      <param name="level1">The first level.</param>
      <param name="level2">The second level.</param>
      <returns>The value of <c>level1.Ordinal &gt;= level2.Ordinal</c>.</returns>
    </member>
    <member name="M:NLog.LogLevel.op_LessThan(NLog.LogLevel,NLog.LogLevel)">
      <summary>
            Compares two <see cref="T:NLog.LogLevel" /> objects 
            and returns a value indicating whether 
            the first one is less than the second one.
            </summary>
      <param name="level1">The first level.</param>
      <param name="level2">The second level.</param>
      <returns>The value of <c>level1.Ordinal &lt; level2.Ordinal</c>.</returns>
    </member>
    <member name="M:NLog.LogLevel.op_LessThanOrEqual(NLog.LogLevel,NLog.LogLevel)">
      <summary>
            Compares two <see cref="T:NLog.LogLevel" /> objects 
            and returns a value indicating whether 
            the first one is less than or equal to the second one.
            </summary>
      <param name="level1">The first level.</param>
      <param name="level2">The second level.</param>
      <returns>The value of <c>level1.Ordinal &lt;= level2.Ordinal</c>.</returns>
    </member>
    <member name="M:NLog.LogLevel.FromOrdinal(System.Int32)">
      <summary>
            Gets the <see cref="T:NLog.LogLevel" /> that corresponds to the specified ordinal.
            </summary>
      <param name="ordinal">The ordinal.</param>
      <returns>The <see cref="T:NLog.LogLevel" /> instance. For 0 it returns <see cref="F:NLog.LogLevel.Debug" />, 1 gives <see cref="F:NLog.LogLevel.Info" /> and so on.</returns>
    </member>
    <member name="M:NLog.LogLevel.FromString(System.String)">
      <summary>
            Returns the <see cref="T:NLog.LogLevel" /> that corresponds to the supplied <see langword="string" />.
            </summary>
      <param name="levelName">The texual representation of the log level.</param>
      <returns>The enumeration value.</returns>
    </member>
    <member name="M:NLog.LogLevel.ToString">
      <summary>
            Returns a string representation of the log level.
            </summary>
      <returns>Log level name.</returns>
    </member>
    <member name="M:NLog.LogLevel.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="M:NLog.LogLevel.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
            Value of <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception>
    </member>
    <member name="M:NLog.LogLevel.CompareTo(System.Object)">
      <summary>
            Compares the level to the other <see cref="T:NLog.LogLevel" /> object.
            </summary>
      <param name="obj">
            The object object.
            </param>
      <returns>
            A value less than zero when this logger's <see cref="P:NLog.LogLevel.Ordinal" /> is 
            less than the other logger's ordinal, 0 when they are equal and 
            greater than zero when this ordinal is greater than the
            other ordinal.
            </returns>
    </member>
    <member name="P:NLog.LogLevel.Name">
      <summary>
            Gets the name of the log level.
            </summary>
    </member>
    <member name="P:NLog.LogLevel.Ordinal">
      <summary>
            Gets the ordinal of the log level.
            </summary>
    </member>
    <member name="T:NLog.LogManager">
      <summary>
            Creates and manages instances of <see cref="T:NLog.Logger" /> objects.
            </summary>
    </member>
    <member name="M:NLog.LogManager.#ctor">
      <summary>
            Prevents a default instance of the LogManager class from being created.
            </summary>
    </member>
    <member name="M:NLog.LogManager.GetCurrentClassLogger">
      <summary>
            Gets the logger named after the currently-being-initialized class.
            </summary>
      <returns>The logger.</returns>
      <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
    </member>
    <member name="M:NLog.LogManager.GetCurrentClassLogger(System.Type)">
      <summary>
            Gets the logger named after the currently-being-initialized class.
            </summary>
      <param name="loggerType">The logger class. The class must inherit from <see cref="T:NLog.Logger" />.</param>
      <returns>The logger.</returns>
      <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
    </member>
    <member name="M:NLog.LogManager.CreateNullLogger">
      <summary>
            Creates a logger that discards all log messages.
            </summary>
      <returns>Null logger which discards all log messages.</returns>
    </member>
    <member name="M:NLog.LogManager.GetLogger(System.String)">
      <summary>
            Gets the specified named logger.
            </summary>
      <param name="name">Name of the logger.</param>
      <returns>The logger reference. Multiple calls to <c>GetLogger</c> with the same argument aren't guaranteed to return the same logger reference.</returns>
    </member>
    <member name="M:NLog.LogManager.GetLogger(System.String,System.Type)">
      <summary>
            Gets the specified named logger.
            </summary>
      <param name="name">Name of the logger.</param>
      <param name="loggerType">The logger class. The class must inherit from <see cref="T:NLog.Logger" />.</param>
      <returns>The logger reference. Multiple calls to <c>GetLogger</c> with the same argument aren't guaranteed to return the same logger reference.</returns>
    </member>
    <member name="M:NLog.LogManager.ReconfigExistingLoggers">
      <summary>
            Loops through all loggers previously returned by GetLogger.
            and recalculates their target and filter list. Useful after modifying the configuration programmatically
            to ensure that all loggers have been properly configured.
            </summary>
    </member>
    <member name="M:NLog.LogManager.Flush">
      <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
    </member>
    <member name="M:NLog.LogManager.Flush(System.TimeSpan)">
      <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
      <param name="timeout">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
    </member>
    <member name="M:NLog.LogManager.Flush(System.Int32)">
      <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
      <param name="timeoutMilliseconds">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
    </member>
    <member name="M:NLog.LogManager.Flush(NLog.Common.AsyncContinuation)">
      <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
    </member>
    <member name="M:NLog.LogManager.Flush(NLog.Common.AsyncContinuation,System.TimeSpan)">
      <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
      <param name="timeout">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
    </member>
    <member name="M:NLog.LogManager.Flush(NLog.Common.AsyncContinuation,System.Int32)">
      <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
      <param name="timeoutMilliseconds">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
    </member>
    <member name="M:NLog.LogManager.DisableLogging">
      <summary>Decreases the log enable counter and if it reaches -1 
            the logs are disabled.</summary>
      <remarks>Logging is enabled if the number of <see cref="M:NLog.LogManager.EnableLogging" /> calls is greater 
            than or equal to <see cref="M:NLog.LogManager.DisableLogging" /> calls.</remarks>
      <returns>An object that iplements IDisposable whose Dispose() method
            reenables logging. To be used with C# <c>using ()</c> statement.</returns>
    </member>
    <member name="M:NLog.LogManager.EnableLogging">
      <summary>Increases the log enable counter and if it reaches 0 the logs are disabled.</summary>
      <remarks>Logging is enabled if the number of <see cref="M:NLog.LogManager.EnableLogging" /> calls is greater 
            than or equal to <see cref="M:NLog.LogManager.DisableLogging" /> calls.</remarks>
    </member>
    <member name="M:NLog.LogManager.IsLoggingEnabled">
      <summary>
            Returns <see langword="true" /> if logging is currently enabled.
            </summary>
      <returns>A value of <see langword="true" /> if logging is currently enabled, 
            <see langword="false" /> otherwise.</returns>
      <remarks>Logging is enabled if the number of <see cref="M:NLog.LogManager.EnableLogging" /> calls is greater 
            than or equal to <see cref="M:NLog.LogManager.DisableLogging" /> calls.</remarks>
    </member>
    <member name="P:NLog.LogManager.ThrowExceptions">
      <summary>
            Gets or sets a value indicating whether NLog should throw exceptions. 
            By default exceptions are not thrown under any circumstances.
            </summary>
    </member>
    <member name="P:NLog.LogManager.Configuration">
      <summary>
            Gets or sets the current logging configuration.
            </summary>
    </member>
    <member name="P:NLog.LogManager.GlobalThreshold">
      <summary>
            Gets or sets the global log threshold. Log events below this threshold are not logged.
            </summary>
    </member>
    <member name="E:NLog.LogManager.ConfigurationChanged">
      <summary>
            Occurs when logging <see cref="P:NLog.LogManager.Configuration" /> changes.
            </summary>
    </member>
    <member name="E:NLog.LogManager.ConfigurationReloaded">
      <summary>
            Occurs when logging <see cref="P:NLog.LogManager.Configuration" /> gets reloaded.
            </summary>
    </member>
    <member name="T:NLog.LogMessageGenerator">
      <summary>
            Returns a log message. Used to defer calculation of 
            the log message until it's actually needed.
            </summary>
      <returns>Log message.</returns>
    </member>
    <member name="T:NLog.LogReceiverService.ILogReceiverClient">
      <summary>
            Service contract for Log Receiver client.
            </summary>
    </member>
    <member name="M:NLog.LogReceiverService.ILogReceiverClient.BeginProcessLogMessages(NLog.LogReceiverService.NLogEvents,System.AsyncCallback,System.Object)">
      <summary>
            Begins processing of log messages.
            </summary>
      <param name="events">The events.</param>
      <param name="callback">The callback.</param>
      <param name="asyncState">Asynchronous state.</param>
      <returns>
            IAsyncResult value which can be passed to <see cref="M:NLog.LogReceiverService.ILogReceiverClient.EndProcessLogMessages(System.IAsyncResult)" />.
            </returns>
    </member>
    <member name="M:NLog.LogReceiverService.ILogReceiverClient.EndProcessLogMessages(System.IAsyncResult)">
      <summary>
            Ends asynchronous processing of log messages.
            </summary>
      <param name="result">The result.</param>
    </member>
    <member name="T:NLog.LogReceiverService.ILogReceiverServer">
      <summary>
            Service contract for Log Receiver server.
            </summary>
    </member>
    <member name="M:NLog.LogReceiverService.ILogReceiverServer.ProcessLogMessages(NLog.LogReceiverService.NLogEvents)">
      <summary>
            Processes the log messages.
            </summary>
      <param name="events">The events.</param>
    </member>
    <member name="T:NLog.LogReceiverService.LogReceiverForwardingService">
      <summary>
            Implementation of <see cref="T:NLog.LogReceiverService.ILogReceiverServer" /> which forwards received logs through <see cref="T:NLog.LogManager" /> or a given <see cref="T:NLog.LogFactory" />.
            </summary>
    </member>
    <member name="M:NLog.LogReceiverService.LogReceiverForwardingService.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LogReceiverService.LogReceiverForwardingService" /> class.
            </summary>
    </member>
    <member name="M:NLog.LogReceiverService.LogReceiverForwardingService.#ctor(NLog.LogFactory)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LogReceiverService.LogReceiverForwardingService" /> class.
            </summary>
      <param name="logFactory">The log factory.</param>
    </member>
    <member name="M:NLog.LogReceiverService.LogReceiverForwardingService.ProcessLogMessages(NLog.LogReceiverService.NLogEvents)">
      <summary>
            Processes the log messages.
            </summary>
      <param name="events">The events to process.</param>
    </member>
    <member name="M:NLog.LogReceiverService.LogReceiverForwardingService.ProcessLogMessages(NLog.LogEventInfo[])">
      <summary>
            Processes the log messages.
            </summary>
      <param name="logEvents">The log events.</param>
    </member>
    <member name="T:NLog.LogReceiverService.LogReceiverServiceConfig">
      <summary>
            Internal configuration of Log Receiver Service contracts.
            </summary>
    </member>
    <member name="T:NLog.LogReceiverService.NLogEvent">
      <summary>
            Wire format for NLog Event.
            </summary>
    </member>
    <member name="M:NLog.LogReceiverService.NLogEvent.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LogReceiverService.NLogEvent" /> class.
            </summary>
    </member>
    <member name="M:NLog.LogReceiverService.NLogEvent.ToEventInfo(NLog.LogReceiverService.NLogEvents,System.String)">
      <summary>
            Converts the <see cref="T:NLog.LogReceiverService.NLogEvent" /> to <see cref="T:NLog.LogEventInfo" />.
            </summary>
      <param name="context">The <see cref="T:NLog.LogReceiverService.NLogEvent" /> object this <see cref="T:NLog.LogReceiverService.NLogEvent" /> is part of..</param>
      <param name="loggerNamePrefix">The logger name prefix to prepend in front of the logger name.</param>
      <returns>Converted <see cref="T:NLog.LogEventInfo" />.</returns>
    </member>
    <member name="P:NLog.LogReceiverService.NLogEvent.Id">
      <summary>
            Gets or sets the client-generated identifier of the event.
            </summary>
    </member>
    <member name="P:NLog.LogReceiverService.NLogEvent.LevelOrdinal">
      <summary>
            Gets or sets the ordinal of the log level.
            </summary>
    </member>
    <member name="P:NLog.LogReceiverService.NLogEvent.LoggerOrdinal">
      <summary>
            Gets or sets the logger ordinal (index into <see cref="P:NLog.LogReceiverService.NLogEvents.Strings" />.
            </summary>
      <value>The logger ordinal.</value>
    </member>
    <member name="P:NLog.LogReceiverService.NLogEvent.TimeDelta">
      <summary>
            Gets or sets the time delta (in ticks) between the time of the event and base time.
            </summary>
    </member>
    <member name="P:NLog.LogReceiverService.NLogEvent.MessageOrdinal">
      <summary>
            Gets or sets the message string index.
            </summary>
    </member>
    <member name="P:NLog.LogReceiverService.NLogEvent.Values">
      <summary>
            Gets or sets the collection of layout values.
            </summary>
    </member>
    <member name="P:NLog.LogReceiverService.NLogEvent.ValueIndexes">
      <summary>
            Gets the collection of indexes into <see cref="P:NLog.LogReceiverService.NLogEvents.Strings" /> array for each layout value.
            </summary>
    </member>
    <member name="T:NLog.LogReceiverService.NLogEvents">
      <summary>
            Wire format for NLog event package.
            </summary>
    </member>
    <member name="M:NLog.LogReceiverService.NLogEvents.ToEventInfo(System.String)">
      <summary>
            Converts the events to sequence of <see cref="T:NLog.LogEventInfo" /> objects suitable for routing through NLog.
            </summary>
      <param name="loggerNamePrefix">The logger name prefix to prepend in front of each logger name.</param>
      <returns>
            Sequence of <see cref="T:NLog.LogEventInfo" /> objects.
            </returns>
    </member>
    <member name="M:NLog.LogReceiverService.NLogEvents.ToEventInfo">
      <summary>
            Converts the events to sequence of <see cref="T:NLog.LogEventInfo" /> objects suitable for routing through NLog.
            </summary>
      <returns>
            Sequence of <see cref="T:NLog.LogEventInfo" /> objects.
            </returns>
    </member>
    <member name="P:NLog.LogReceiverService.NLogEvents.ClientName">
      <summary>
            Gets or sets the name of the client.
            </summary>
      <value>The name of the client.</value>
    </member>
    <member name="P:NLog.LogReceiverService.NLogEvents.BaseTimeUtc">
      <summary>
            Gets or sets the base time (UTC ticks) for all events in the package.
            </summary>
      <value>The base time UTC.</value>
    </member>
    <member name="P:NLog.LogReceiverService.NLogEvents.LayoutNames">
      <summary>
            Gets or sets the collection of layout names which are shared among all events.
            </summary>
      <value>The layout names.</value>
    </member>
    <member name="P:NLog.LogReceiverService.NLogEvents.Strings">
      <summary>
            Gets or sets the collection of logger names.
            </summary>
      <value>The logger names.</value>
    </member>
    <member name="P:NLog.LogReceiverService.NLogEvents.Events">
      <summary>
            Gets or sets the list of events.
            </summary>
      <value>The events.</value>
    </member>
    <member name="T:NLog.LogReceiverService.StringCollection">
      <summary>
            List of strings annotated for more terse serialization.
            </summary>
    </member>
    <member name="M:NLog.LogReceiverService.StringCollection.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LogReceiverService.StringCollection" /> class.
            </summary>
    </member>
    <member name="T:NLog.LogReceiverService.WcfLogReceiverClient">
      <summary>
            Log Receiver Client using WCF.
            </summary>
    </member>
    <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LogReceiverService.WcfLogReceiverClient" /> class.
            </summary>
    </member>
    <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LogReceiverService.WcfLogReceiverClient" /> class.
            </summary>
      <param name="endpointConfigurationName">Name of the endpoint configuration.</param>
    </member>
    <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LogReceiverService.WcfLogReceiverClient" /> class.
            </summary>
      <param name="endpointConfigurationName">Name of the endpoint configuration.</param>
      <param name="remoteAddress">The remote address.</param>
    </member>
    <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.#ctor(System.String,System.ServiceModel.EndpointAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LogReceiverService.WcfLogReceiverClient" /> class.
            </summary>
      <param name="endpointConfigurationName">Name of the endpoint configuration.</param>
      <param name="remoteAddress">The remote address.</param>
    </member>
    <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.LogReceiverService.WcfLogReceiverClient" /> class.
            </summary>
      <param name="binding">The binding.</param>
      <param name="remoteAddress">The remote address.</param>
    </member>
    <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.OpenAsync">
      <summary>
            Opens the client asynchronously.
            </summary>
    </member>
    <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.OpenAsync(System.Object)">
      <summary>
            Opens the client asynchronously.
            </summary>
      <param name="userState">User-specific state.</param>
    </member>
    <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.CloseAsync">
      <summary>
            Closes the client asynchronously.
            </summary>
    </member>
    <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.CloseAsync(System.Object)">
      <summary>
            Closes the client asynchronously.
            </summary>
      <param name="userState">User-specific state.</param>
    </member>
    <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.ProcessLogMessagesAsync(NLog.LogReceiverService.NLogEvents)">
      <summary>
            Processes the log messages asynchronously.
            </summary>
      <param name="events">The events to send.</param>
    </member>
    <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.ProcessLogMessagesAsync(NLog.LogReceiverService.NLogEvents,System.Object)">
      <summary>
            Processes the log messages asynchronously.
            </summary>
      <param name="events">The events to send.</param>
      <param name="userState">User-specific state.</param>
    </member>
    <member name="E:NLog.LogReceiverService.WcfLogReceiverClient.ProcessLogMessagesCompleted">
      <summary>
            Occurs when the log message processing has completed.
            </summary>
    </member>
    <member name="E:NLog.LogReceiverService.WcfLogReceiverClient.OpenCompleted">
      <summary>
            Occurs when Open operation has completed.
            </summary>
    </member>
    <member name="E:NLog.LogReceiverService.WcfLogReceiverClient.CloseCompleted">
      <summary>
            Occurs when Close operation has completed.
            </summary>
    </member>
    <member name="T:NLog.MappedDiagnosticsContext">
      <summary>
            Mapped Diagnostics Context - a thread-local structure that keeps a dictionary
            of strings and provides methods to output them in layouts. 
            Mostly for compatibility with log4net.
            </summary>
    </member>
    <member name="M:NLog.MappedDiagnosticsContext.Set(System.String,System.String)">
      <summary>
            Sets the current thread MDC item to the specified value.
            </summary>
      <param name="item">Item name.</param>
      <param name="value">Item value.</param>
    </member>
    <member name="M:NLog.MappedDiagnosticsContext.Get(System.String)">
      <summary>
            Gets the current thread MDC named item.
            </summary>
      <param name="item">Item name.</param>
      <returns>The item value of string.Empty if the value is not present.</returns>
    </member>
    <member name="M:NLog.MappedDiagnosticsContext.Contains(System.String)">
      <summary>
            Checks whether the specified item exists in current thread MDC.
            </summary>
      <param name="item">Item name.</param>
      <returns>A boolean indicating whether the specified item exists in current thread MDC.</returns>
    </member>
    <member name="M:NLog.MappedDiagnosticsContext.Remove(System.String)">
      <summary>
            Removes the specified item from current thread MDC.
            </summary>
      <param name="item">Item name.</param>
    </member>
    <member name="M:NLog.MappedDiagnosticsContext.Clear">
      <summary>
            Clears the content of current thread MDC.
            </summary>
    </member>
    <member name="T:NLog.MDC">
      <summary>
            Mapped Diagnostics Context - used for log4net compatibility.
            </summary>
    </member>
    <member name="M:NLog.MDC.Set(System.String,System.String)">
      <summary>
            Sets the current thread MDC item to the specified value.
            </summary>
      <param name="item">Item name.</param>
      <param name="value">Item value.</param>
    </member>
    <member name="M:NLog.MDC.Get(System.String)">
      <summary>
            Gets the current thread MDC named item.
            </summary>
      <param name="item">Item name.</param>
      <returns>The item value of string.Empty if the value is not present.</returns>
    </member>
    <member name="M:NLog.MDC.Contains(System.String)">
      <summary>
            Checks whether the specified item exists in current thread MDC.
            </summary>
      <param name="item">Item name.</param>
      <returns>A boolean indicating whether the specified item exists in current thread MDC.</returns>
    </member>
    <member name="M:NLog.MDC.Remove(System.String)">
      <summary>
            Removes the specified item from current thread MDC.
            </summary>
      <param name="item">Item name.</param>
    </member>
    <member name="M:NLog.MDC.Clear">
      <summary>
            Clears the content of current thread MDC.
            </summary>
    </member>
    <member name="T:NLog.NDC">
      <summary>
            Nested Diagnostics Context - for log4net compatibility.
            </summary>
    </member>
    <member name="M:NLog.NDC.Push(System.String)">
      <summary>
            Pushes the specified text on current thread NDC.
            </summary>
      <param name="text">The text to be pushed.</param>
      <returns>An instance of the object that implements IDisposable that returns the stack to the previous level when IDisposable.Dispose() is called. To be used with C# using() statement.</returns>
    </member>
    <member name="M:NLog.NDC.Pop">
      <summary>
            Pops the top message off the NDC stack.
            </summary>
      <returns>The top message which is no longer on the stack.</returns>
    </member>
    <member name="M:NLog.NDC.Clear">
      <summary>
            Clears current thread NDC stack.
            </summary>
    </member>
    <member name="M:NLog.NDC.GetAllMessages">
      <summary>
            Gets all messages on the stack.
            </summary>
      <returns>Array of strings on the stack.</returns>
    </member>
    <member name="P:NLog.NDC.TopMessage">
      <summary>
            Gets the top NDC message but doesn't remove it.
            </summary>
      <returns>The top message. .</returns>
    </member>
    <member name="T:NLog.NestedDiagnosticsContext">
      <summary>
            Nested Diagnostics Context - a thread-local structure that keeps a stack
            of strings and provides methods to output them in layouts
            Mostly for compatibility with log4net.
            </summary>
    </member>
    <member name="T:NLog.NestedDiagnosticsContext.StackPopper">
      <summary>
            Resets the stack to the original count during <see cref="M:System.IDisposable.Dispose" />.
            </summary>
    </member>
    <member name="M:NLog.NestedDiagnosticsContext.StackPopper.#ctor(System.Collections.Generic.Stack{System.String},System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.NestedDiagnosticsContext.StackPopper" /> class.
            </summary>
      <param name="stack">The stack.</param>
      <param name="previousCount">The previous count.</param>
    </member>
    <member name="M:NLog.NestedDiagnosticsContext.Push(System.String)">
      <summary>
            Pushes the specified text on current thread NDC.
            </summary>
      <param name="text">The text to be pushed.</param>
      <returns>An instance of the object that implements IDisposable that returns the stack to the previous level when IDisposable.Dispose() is called. To be used with C# using() statement.</returns>
    </member>
    <member name="M:NLog.NestedDiagnosticsContext.Pop">
      <summary>
            Pops the top message off the NDC stack.
            </summary>
      <returns>The top message which is no longer on the stack.</returns>
    </member>
    <member name="M:NLog.NestedDiagnosticsContext.Clear">
      <summary>
            Clears current thread NDC stack.
            </summary>
    </member>
    <member name="M:NLog.NestedDiagnosticsContext.GetAllMessages">
      <summary>
            Gets all messages on the stack.
            </summary>
      <returns>Array of strings on the stack.</returns>
    </member>
    <member name="P:NLog.NestedDiagnosticsContext.TopMessage">
      <summary>
            Gets the top NDC message but doesn't remove it.
            </summary>
      <returns>The top message. .</returns>
    </member>
    <member name="T:NLog.NLogConfigurationException">
      <summary>
            Exception thrown during NLog configuration.
            </summary>
    </member>
    <member name="M:NLog.NLogConfigurationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogConfigurationException" /> class.
            </summary>
    </member>
    <member name="M:NLog.NLogConfigurationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogConfigurationException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:NLog.NLogConfigurationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogConfigurationException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:NLog.NLogConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogConfigurationException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="T:NLog.NLogRuntimeException">
      <summary>
            Exception thrown during log event processing.
            </summary>
    </member>
    <member name="M:NLog.NLogRuntimeException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogRuntimeException" /> class.
            </summary>
    </member>
    <member name="M:NLog.NLogRuntimeException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogRuntimeException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:NLog.NLogRuntimeException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogRuntimeException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="M:NLog.NLogRuntimeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogRuntimeException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="T:NLog.NLogTraceListener">
      <summary>
            TraceListener which routes all messages through NLog.
            </summary>
    </member>
    <member name="M:NLog.NLogTraceListener.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogTraceListener" /> class.
            </summary>
    </member>
    <member name="M:NLog.NLogTraceListener.Write(System.String)">
      <summary>
            When overridden in a derived class, writes the specified message to the listener you create in the derived class.
            </summary>
      <param name="message">A message to write.</param>
    </member>
    <member name="M:NLog.NLogTraceListener.WriteLine(System.String)">
      <summary>
            When overridden in a derived class, writes a message to the listener you create in the derived class, followed by a line terminator.
            </summary>
      <param name="message">A message to write.</param>
    </member>
    <member name="M:NLog.NLogTraceListener.Close">
      <summary>
            When overridden in a derived class, closes the output stream so it no longer receives tracing or debugging output.
            </summary>
    </member>
    <member name="M:NLog.NLogTraceListener.Fail(System.String)">
      <summary>
            Emits an error message.
            </summary>
      <param name="message">A message to emit.</param>
    </member>
    <member name="M:NLog.NLogTraceListener.Fail(System.String,System.String)">
      <summary>
            Emits an error message and a detailed error message.
            </summary>
      <param name="message">A message to emit.</param>
      <param name="detailMessage">A detailed message to emit.</param>
    </member>
    <member name="M:NLog.NLogTraceListener.Flush">
      <summary>
            Flushes the output buffer.
            </summary>
    </member>
    <member name="M:NLog.NLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
      <summary>
            Writes trace information, a data object and event information to the listener specific output.
            </summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> object that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
      <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType" /> values specifying the type of event that has caused the trace.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="data">The trace data to emit.</param>
    </member>
    <member name="M:NLog.NLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
      <summary>
            Writes trace information, an array of data objects and event information to the listener specific output.
            </summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> object that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
      <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType" /> values specifying the type of event that has caused the trace.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="data">An array of objects to emit as data.</param>
    </member>
    <member name="M:NLog.NLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)">
      <summary>
            Writes trace and event information to the listener specific output.
            </summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> object that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
      <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType" /> values specifying the type of event that has caused the trace.</param>
      <param name="id">A numeric identifier for the event.</param>
    </member>
    <member name="M:NLog.NLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
      <summary>
            Writes trace information, a formatted array of objects and event information to the listener specific output.
            </summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> object that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
      <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType" /> values specifying the type of event that has caused the trace.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="format">A format string that contains zero or more format items, which correspond to objects in the <paramref name="args" /> array.</param>
      <param name="args">An object array containing zero or more objects to format.</param>
    </member>
    <member name="M:NLog.NLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
      <summary>
            Writes trace information, a message, and event information to the listener specific output.
            </summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> object that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
      <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType" /> values specifying the type of event that has caused the trace.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="message">A message to write.</param>
    </member>
    <member name="M:NLog.NLogTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)">
      <summary>
            Writes trace information, a message, a related activity identity and event information to the listener specific output.
            </summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> object that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">A name used to identify the output, typically the name of the application that generated the trace event.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="message">A message to write.</param>
      <param name="relatedActivityId">A <see cref="T:System.Guid" />  object identifying a related activity.</param>
    </member>
    <member name="M:NLog.NLogTraceListener.GetSupportedAttributes">
      <summary>
            Gets the custom attributes supported by the trace listener.
            </summary>
      <returns>
            A string array naming the custom attributes supported by the trace listener, or null if there are no custom attributes.
            </returns>
    </member>
    <member name="M:NLog.NLogTraceListener.TranslateLogLevel(System.Diagnostics.TraceEventType)">
      <summary>
            Translates the event type to level from <see cref="T:System.Diagnostics.TraceEventType" />.
            </summary>
      <param name="eventType">Type of the event.</param>
      <returns>Translated log level.</returns>
    </member>
    <member name="P:NLog.NLogTraceListener.LogFactory">
      <summary>
            Gets or sets the log factory to use when outputting messages (null - use LogManager).
            </summary>
    </member>
    <member name="P:NLog.NLogTraceListener.DefaultLogLevel">
      <summary>
            Gets or sets the default log level.
            </summary>
    </member>
    <member name="P:NLog.NLogTraceListener.ForceLogLevel">
      <summary>
            Gets or sets the log which should be always used regardless of source level.
            </summary>
    </member>
    <member name="P:NLog.NLogTraceListener.IsThreadSafe">
      <summary>
            Gets a value indicating whether the trace listener is thread safe.
            </summary>
      <value>
      </value>
      <returns>true if the trace listener is thread safe; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:NLog.NLogTraceListener.AutoLoggerName">
      <summary>
            Gets or sets a value indicating whether to use auto logger name detected from the stack trace.
            </summary>
    </member>
    <member name="T:NLog.Targets.ArchiveNumberingMode">
      <summary>
            Specifies the way archive numbering is performed.
            </summary>
    </member>
    <member name="F:NLog.Targets.ArchiveNumberingMode.Sequence">
      <summary>
            Sequence style numbering. The most recent archive has the highest number.
            </summary>
    </member>
    <member name="F:NLog.Targets.ArchiveNumberingMode.Rolling">
      <summary>
            Rolling style numbering (the most recent is always #0 then #1, ..., #N.
            </summary>
    </member>
    <member name="T:NLog.Targets.Target">
      <summary>
            Represents logging target.
            </summary>
    </member>
    <member name="M:NLog.Targets.Target.Dispose">
      <summary>
            Closes the target.
            </summary>
    </member>
    <member name="M:NLog.Targets.Target.Flush(NLog.Common.AsyncContinuation)">
      <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
    </member>
    <member name="M:NLog.Targets.Target.PrecalculateVolatileLayouts(NLog.LogEventInfo)">
      <summary>
            Calls the <see cref="M:NLog.Layouts.Layout.Precalculate(NLog.LogEventInfo)" /> on each volatile layout
            used by this target.
            </summary>
      <param name="logEvent">
            The log event.
            </param>
    </member>
    <member name="M:NLog.Targets.Target.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:NLog.Targets.Target.WriteAsyncLogEvent(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Writes the log to the target.
            </summary>
      <param name="logEvent">Log event to write.</param>
    </member>
    <member name="M:NLog.Targets.Target.WriteAsyncLogEvents(NLog.Common.AsyncLogEventInfo[])">
      <summary>
            Writes the array of log events.
            </summary>
      <param name="logEvents">The log events.</param>
    </member>
    <member name="M:NLog.Targets.Target.Initialize(NLog.Config.LoggingConfiguration)">
      <summary>
            Initializes this instance.
            </summary>
      <param name="configuration">The configuration.</param>
    </member>
    <member name="M:NLog.Targets.Target.Close">
      <summary>
            Closes this instance.
            </summary>
    </member>
    <member name="M:NLog.Targets.Target.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
      <param name="disposing">True to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:NLog.Targets.Target.InitializeTarget">
      <summary>
            Initializes the target. Can be used by inheriting classes
            to initialize logging.
            </summary>
    </member>
    <member name="M:NLog.Targets.Target.CloseTarget">
      <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
    </member>
    <member name="M:NLog.Targets.Target.FlushAsync(NLog.Common.AsyncContinuation)">
      <summary>
            Flush any pending log messages asynchronously (in case of asynchronous targets).
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
    </member>
    <member name="M:NLog.Targets.Target.Write(NLog.LogEventInfo)">
      <summary>
            Writes logging event to the log target.
            classes.
            </summary>
      <param name="logEvent">
            Logging event to be written out.
            </param>
    </member>
    <member name="M:NLog.Targets.Target.Write(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Writes log event to the log target. Must be overridden in inheriting
            classes.
            </summary>
      <param name="logEvent">Log event to be written out.</param>
    </member>
    <member name="M:NLog.Targets.Target.Write(NLog.Common.AsyncLogEventInfo[])">
      <summary>
            Writes an array of logging events to the log target. By default it iterates on all
            events and passes them to "Write" method. Inheriting classes can use this method to
            optimize batch writes.
            </summary>
      <param name="logEvents">Logging events to be written out.</param>
    </member>
    <member name="P:NLog.Targets.Target.Name">
      <summary>
            Gets or sets the name of the target.
            </summary>
      <docgen category="General Options" order="10" />
    </member>
    <member name="P:NLog.Targets.Target.SyncRoot">
      <summary>
            Gets the object which can be used to synchronize asynchronous operations that must rely on the .
            </summary>
    </member>
    <member name="P:NLog.Targets.Target.LoggingConfiguration">
      <summary>
            Gets the logging configuration this target is part of.
            </summary>
    </member>
    <member name="P:NLog.Targets.Target.IsInitialized">
      <summary>
            Gets a value indicating whether the target has been initialized.
            </summary>
    </member>
    <member name="T:NLog.Targets.TargetWithLayout">
      <summary>
            Represents target that supports string formatting using layouts.
            </summary>
    </member>
    <member name="M:NLog.Targets.TargetWithLayout.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.TargetWithLayout" /> class.
            </summary>
      <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
    </member>
    <member name="P:NLog.Targets.TargetWithLayout.Layout">
      <summary>
            Gets or sets the layout used to format log messages.
            </summary>
      <docgen category="Layout Options" order="1" />
    </member>
    <member name="T:NLog.Targets.AspResponseTarget">
      <summary>
            Outputs log messages through the ASP Response object.
            </summary>
      <seealso href="http://nlog-project.org/wiki/AspResponse_target">Documentation on NLog Wiki</seealso>
    </member>
    <member name="M:NLog.Targets.AspResponseTarget.Write(NLog.LogEventInfo)">
      <summary>
            Outputs the rendered logging event through the <c>OutputDebugString()</c> Win32 API.
            </summary>
      <param name="logEvent">The logging event.</param>
    </member>
    <member name="P:NLog.Targets.AspResponseTarget.AddComments">
      <summary>
            Gets or sets a value indicating whether to add &lt;!-- --&gt; comments around all written texts.
            </summary>
      <docgen category="Layout Options" order="100" />
    </member>
    <member name="T:NLog.Targets.NetworkTarget">
      <summary>
            Sends log messages over the network.
            </summary>
      <seealso href="http://nlog-project.org/wiki/Network_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/Network/NLog.config" />
        <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
        <p>
            To set up the log target programmatically use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/Network/Simple/Example.cs" />
        <p>
            To print the results, use any application that's able to receive messages over
            TCP or UDP. <a href="http://m.nu/program/util/netcat/netcat.html">NetCat</a> is
            a simple but very powerful command-line tool that can be used for that. This image
            demonstrates the NetCat tool receiving log messages from Network target.
            </p>
        <img src="examples/targets/Screenshots/Network/Output.gif" />
        <p>
            NOTE: If your receiver application is ever likely to be off-line, don't use TCP protocol
            or you'll get TCP timeouts and your application will be very slow. 
            Either switch to UDP transport or use <a href="target.AsyncWrapper.html">AsyncWrapper</a> target
            so that your application threads will not be blocked by the timing-out connection attempts.
            </p>
        <p>
            There are two specialized versions of the Network target: <a href="target.Chainsaw.html">Chainsaw</a>
            and <a href="target.NLogViewer.html">NLogViewer</a> which write to instances of Chainsaw log4j viewer
            or NLogViewer application respectively.
            </p>
      </example>
    </member>
    <member name="M:NLog.Targets.NetworkTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.NetworkTarget" /> class.
            </summary>
      <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
    </member>
    <member name="M:NLog.Targets.NetworkTarget.FlushAsync(NLog.Common.AsyncContinuation)">
      <summary>
            Flush any pending log messages asynchronously (in case of asynchronous targets).
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
    </member>
    <member name="M:NLog.Targets.NetworkTarget.CloseTarget">
      <summary>
            Closes the target.
            </summary>
    </member>
    <member name="M:NLog.Targets.NetworkTarget.Write(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Sends the 
            rendered logging event over the network optionally concatenating it with a newline character.
            </summary>
      <param name="logEvent">The logging event.</param>
    </member>
    <member name="M:NLog.Targets.NetworkTarget.GetBytesToWrite(NLog.LogEventInfo)">
      <summary>
            Gets the bytes to be written.
            </summary>
      <param name="logEvent">Log event.</param>
      <returns>Byte array.</returns>
    </member>
    <member name="P:NLog.Targets.NetworkTarget.Address">
      <summary>
            Gets or sets the network address.
            </summary>
      <remarks>
            The network address can be:
            <ul><li>tcp://host:port - TCP (auto select IPv4/IPv6) (not supported on Windows Phone 7.0)</li><li>tcp4://host:port - force TCP/IPv4 (not supported on Windows Phone 7.0)</li><li>tcp6://host:port - force TCP/IPv6 (not supported on Windows Phone 7.0)</li><li>udp://host:port - UDP (auto select IPv4/IPv6, not supported on Silverlight and on Windows Phone 7.0)</li><li>udp4://host:port - force UDP/IPv4 (not supported on Silverlight and on Windows Phone 7.0)</li><li>udp6://host:port - force UDP/IPv6  (not supported on Silverlight and on Windows Phone 7.0)</li><li>http://host:port/pageName - HTTP using POST verb</li><li>https://host:port/pageName - HTTPS using POST verb</li></ul>
            For SOAP-based webservice support over HTTP use WebService target.
            </remarks>
      <docgen category="Connection Options" order="10" />
    </member>
    <member name="P:NLog.Targets.NetworkTarget.KeepConnection">
      <summary>
            Gets or sets a value indicating whether to keep connection open whenever possible.
            </summary>
      <docgen category="Connection Options" order="10" />
    </member>
    <member name="P:NLog.Targets.NetworkTarget.NewLine">
      <summary>
            Gets or sets a value indicating whether to append newline at the end of log message.
            </summary>
      <docgen category="Layout Options" order="10" />
    </member>
    <member name="P:NLog.Targets.NetworkTarget.MaxMessageSize">
      <summary>
            Gets or sets the maximum message size in bytes.
            </summary>
      <docgen category="Layout Options" order="10" />
    </member>
    <member name="P:NLog.Targets.NetworkTarget.ConnectionCacheSize">
      <summary>
            Gets or sets the size of the connection cache (number of connections which are kept alive).
            </summary>
      <docgen category="Connection Options" order="10" />
    </member>
    <member name="P:NLog.Targets.NetworkTarget.OnOverflow">
      <summary>
            Gets or sets the action that should be taken if the message is larger than
            maxMessageSize.
            </summary>
      <docgen category="Layout Options" order="10" />
    </member>
    <member name="P:NLog.Targets.NetworkTarget.Encoding">
      <summary>
            Gets or sets the encoding to be used.
            </summary>
      <docgen category="Layout Options" order="10" />
    </member>
    <member name="T:NLog.Targets.NLogViewerTarget">
      <summary>
            Sends log messages to the remote instance of NLog Viewer. 
            </summary>
      <seealso href="http://nlog-project.org/wiki/NLogViewer_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/NLogViewer/NLog.config" />
        <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
        <p>
            To set up the log target programmatically use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/NLogViewer/Simple/Example.cs" />
        <p>
            NOTE: If your receiver application is ever likely to be off-line, don't use TCP protocol
            or you'll get TCP timeouts and your application will crawl. 
            Either switch to UDP transport or use <a href="target.AsyncWrapper.html">AsyncWrapper</a> target
            so that your application threads will not be blocked by the timing-out connection attempts.
            </p>
      </example>
    </member>
    <member name="M:NLog.Targets.NLogViewerTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.NLogViewerTarget" /> class.
            </summary>
      <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
    </member>
    <member name="P:NLog.Targets.NLogViewerTarget.IncludeNLogData">
      <summary>
            Gets or sets a value indicating whether to include NLog-specific extensions to log4j schema.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.Targets.NLogViewerTarget.AppInfo">
      <summary>
            Gets or sets the AppInfo field. By default it's the friendly name of the current AppDomain.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.Targets.NLogViewerTarget.IncludeCallSite">
      <summary>
            Gets or sets a value indicating whether to include call site (class and method name) in the information sent over the network.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.Targets.NLogViewerTarget.IncludeSourceInfo">
      <summary>
            Gets or sets a value indicating whether to include source info (file name and line number) in the information sent over the network.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.Targets.NLogViewerTarget.IncludeMdc">
      <summary>
            Gets or sets a value indicating whether to include <see cref="T:NLog.MappedDiagnosticsContext" /> dictionary contents.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.Targets.NLogViewerTarget.IncludeNdc">
      <summary>
            Gets or sets a value indicating whether to include <see cref="T:NLog.NestedDiagnosticsContext" /> stack contents.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.Targets.NLogViewerTarget.NdcItemSeparator">
      <summary>
            Gets or sets the NDC item separator.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.Targets.NLogViewerTarget.Parameters">
      <summary>
            Gets the collection of parameters. Each parameter contains a mapping
            between NLog layout and a named parameter.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.Targets.NLogViewerTarget.Renderer">
      <summary>
            Gets the layout renderer which produces Log4j-compatible XML events.
            </summary>
    </member>
    <member name="P:NLog.Targets.NLogViewerTarget.Layout">
      <summary>
            Gets or sets the instance of <see cref="T:NLog.Layouts.Log4JXmlEventLayout" /> that is used to format log messages.
            </summary>
      <docgen category="Layout Options" order="10" />
    </member>
    <member name="T:NLog.Targets.ChainsawTarget">
      <summary>
            Sends log messages to the remote instance of Chainsaw application from log4j. 
            </summary>
      <seealso href="http://nlog-project.org/wiki/Chainsaw_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/Chainsaw/NLog.config" />
        <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
        <p>
            To set up the log target programmatically use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/Chainsaw/Simple/Example.cs" />
        <p>
            NOTE: If your receiver application is ever likely to be off-line, don't use TCP protocol
            or you'll get TCP timeouts and your application will crawl. 
            Either switch to UDP transport or use <a href="target.AsyncWrapper.html">AsyncWrapper</a> target
            so that your application threads will not be blocked by the timing-out connection attempts.
            </p>
      </example>
    </member>
    <member name="M:NLog.Targets.ChainsawTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ChainsawTarget" /> class.
            </summary>
    </member>
    <member name="T:NLog.Targets.TargetWithLayoutHeaderAndFooter">
      <summary>
            Represents target that supports string formatting using layouts.
            </summary>
    </member>
    <member name="M:NLog.Targets.TargetWithLayoutHeaderAndFooter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.TargetWithLayoutHeaderAndFooter" /> class.
            </summary>
      <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
    </member>
    <member name="P:NLog.Targets.TargetWithLayoutHeaderAndFooter.Layout">
      <summary>
            Gets or sets the text to be rendered.
            </summary>
      <docgen category="Layout Options" order="1" />
    </member>
    <member name="P:NLog.Targets.TargetWithLayoutHeaderAndFooter.Footer">
      <summary>
            Gets or sets the footer.
            </summary>
      <docgen category="Layout Options" order="3" />
    </member>
    <member name="P:NLog.Targets.TargetWithLayoutHeaderAndFooter.Header">
      <summary>
            Gets or sets the header.
            </summary>
      <docgen category="Layout Options" order="2" />
    </member>
    <member name="P:NLog.Targets.TargetWithLayoutHeaderAndFooter.LHF">
      <summary>
            Gets or sets the layout with header and footer.
            </summary>
      <value>The layout with header and footer.</value>
    </member>
    <member name="T:NLog.Targets.ColoredConsoleTarget">
      <summary>
            Writes log messages to the console with customizable coloring.
            </summary>
      <seealso href="http://nlog-project.org/wiki/ColoredConsole_target">Documentation on NLog Wiki</seealso>
    </member>
    <member name="T:NLog.Targets.ColoredConsoleTarget.ColorPair">
      <summary>
            Color pair (foreground and background).
            </summary>
    </member>
    <member name="M:NLog.Targets.ColoredConsoleTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ColoredConsoleTarget" /> class.
            </summary>
      <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
    </member>
    <member name="M:NLog.Targets.ColoredConsoleTarget.InitializeTarget">
      <summary>
            Initializes the target.
            </summary>
    </member>
    <member name="M:NLog.Targets.ColoredConsoleTarget.CloseTarget">
      <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
    </member>
    <member name="M:NLog.Targets.ColoredConsoleTarget.Write(NLog.LogEventInfo)">
      <summary>
            Writes the specified log event to the console highlighting entries
            and words based on a set of defined rules.
            </summary>
      <param name="logEvent">Log event.</param>
    </member>
    <member name="P:NLog.Targets.ColoredConsoleTarget.ErrorStream">
      <summary>
            Gets or sets a value indicating whether the error stream (stderr) should be used instead of the output stream (stdout).
            </summary>
      <docgen category="Output Options" order="10" />
    </member>
    <member name="P:NLog.Targets.ColoredConsoleTarget.UseDefaultRowHighlightingRules">
      <summary>
            Gets or sets a value indicating whether to use default row highlighting rules.
            </summary>
      <remarks>
            The default rules are:
            <table><tr><th>Condition</th><th>Foreground Color</th><th>Background Color</th></tr><tr><td>level == LogLevel.Fatal</td><td>Red</td><td>NoChange</td></tr><tr><td>level == LogLevel.Error</td><td>Yellow</td><td>NoChange</td></tr><tr><td>level == LogLevel.Warn</td><td>Magenta</td><td>NoChange</td></tr><tr><td>level == LogLevel.Info</td><td>White</td><td>NoChange</td></tr><tr><td>level == LogLevel.Debug</td><td>Gray</td><td>NoChange</td></tr><tr><td>level == LogLevel.Trace</td><td>DarkGray</td><td>NoChange</td></tr></table></remarks>
      <docgen category="Highlighting Rules" order="9" />
    </member>
    <member name="P:NLog.Targets.ColoredConsoleTarget.RowHighlightingRules">
      <summary>
            Gets the row highlighting rules.
            </summary>
      <docgen category="Highlighting Rules" order="10" />
    </member>
    <member name="P:NLog.Targets.ColoredConsoleTarget.WordHighlightingRules">
      <summary>
            Gets the word highlighting rules.
            </summary>
      <docgen category="Highlighting Rules" order="11" />
    </member>
    <member name="T:NLog.Targets.ConsoleOutputColor">
      <summary>
            Colored console output color.
            </summary>
      <remarks>
            Note that this enumeration is defined to be binary compatible with 
            .NET 2.0 System.ConsoleColor + some additions
            </remarks>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.Black">
      <summary>
            Black Color (#000000).
            </summary>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.DarkBlue">
      <summary>
            Dark blue Color (#000080).
            </summary>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.DarkGreen">
      <summary>
            Dark green Color (#008000).
            </summary>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.DarkCyan">
      <summary>
            Dark Cyan Color (#008080).
            </summary>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.DarkRed">
      <summary>
            Dark Red Color (#800000).
            </summary>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.DarkMagenta">
      <summary>
            Dark Magenta Color (#800080).
            </summary>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.DarkYellow">
      <summary>
            Dark Yellow Color (#808000).
            </summary>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.Gray">
      <summary>
            Gray Color (#C0C0C0).
            </summary>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.DarkGray">
      <summary>
            Dark Gray Color (#808080).
            </summary>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.Blue">
      <summary>
            Blue Color (#0000FF).
            </summary>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.Green">
      <summary>
            Green Color (#00FF00).
            </summary>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.Cyan">
      <summary>
            Cyan Color (#00FFFF).
            </summary>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.Red">
      <summary>
            Red Color (#FF0000).
            </summary>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.Magenta">
      <summary>
            Magenta Color (#FF00FF).
            </summary>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.Yellow">
      <summary>
            Yellow Color (#FFFF00).
            </summary>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.White">
      <summary>
            White Color (#FFFFFF).
            </summary>
    </member>
    <member name="F:NLog.Targets.ConsoleOutputColor.NoChange">
      <summary>
            Don't change the color.
            </summary>
    </member>
    <member name="T:NLog.Targets.ConsoleRowHighlightingRule">
      <summary>
            The row-highlighting condition.
            </summary>
    </member>
    <member name="M:NLog.Targets.ConsoleRowHighlightingRule.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ConsoleRowHighlightingRule" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.ConsoleRowHighlightingRule.#ctor(NLog.Conditions.ConditionExpression,NLog.Targets.ConsoleOutputColor,NLog.Targets.ConsoleOutputColor)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ConsoleRowHighlightingRule" /> class.
            </summary>
      <param name="condition">The condition.</param>
      <param name="foregroundColor">Color of the foreground.</param>
      <param name="backgroundColor">Color of the background.</param>
    </member>
    <member name="M:NLog.Targets.ConsoleRowHighlightingRule.CheckCondition(NLog.LogEventInfo)">
      <summary>
            Checks whether the specified log event matches the condition (if any).
            </summary>
      <param name="logEvent">
            Log event.
            </param>
      <returns>
            A value of <see langword="true" /> if the condition is not defined or 
            if it matches, <see langword="false" /> otherwise.
            </returns>
    </member>
    <member name="P:NLog.Targets.ConsoleRowHighlightingRule.Default">
      <summary>
            Gets the default highlighting rule. Doesn't change the color.
            </summary>
    </member>
    <member name="P:NLog.Targets.ConsoleRowHighlightingRule.Condition">
      <summary>
            Gets or sets the condition that must be met in order to set the specified foreground and background color.
            </summary>
      <docgen category="Rule Matching Options" order="10" />
    </member>
    <member name="P:NLog.Targets.ConsoleRowHighlightingRule.ForegroundColor">
      <summary>
            Gets or sets the foreground color.
            </summary>
      <docgen category="Formatting Options" order="10" />
    </member>
    <member name="P:NLog.Targets.ConsoleRowHighlightingRule.BackgroundColor">
      <summary>
            Gets or sets the background color.
            </summary>
      <docgen category="Formatting Options" order="10" />
    </member>
    <member name="T:NLog.Targets.ConsoleTarget">
      <summary>
            Writes log messages to the console.
            </summary>
      <seealso href="http://nlog-project.org/wiki/Console_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/Console/NLog.config" />
        <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
        <p>
            To set up the log target programmatically use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/Console/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.ConsoleTarget.InitializeTarget">
      <summary>
            Initializes the target.
            </summary>
    </member>
    <member name="M:NLog.Targets.ConsoleTarget.CloseTarget">
      <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
    </member>
    <member name="M:NLog.Targets.ConsoleTarget.Write(NLog.LogEventInfo)">
      <summary>
            Writes the specified logging event to the Console.Out or
            Console.Error depending on the value of the Error flag.
            </summary>
      <param name="logEvent">The logging event.</param>
      <remarks>
            Note that the Error option is not supported on .NET Compact Framework.
            </remarks>
    </member>
    <member name="P:NLog.Targets.ConsoleTarget.Error">
      <summary>
            Gets or sets a value indicating whether to send the log messages to the standard error instead of the standard output.
            </summary>
      <docgen category="Console Options" order="10" />
    </member>
    <member name="T:NLog.Targets.ConsoleWordHighlightingRule">
      <summary>
            Highlighting rule for Win32 colorful console.
            </summary>
    </member>
    <member name="M:NLog.Targets.ConsoleWordHighlightingRule.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ConsoleWordHighlightingRule" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.ConsoleWordHighlightingRule.#ctor(System.String,NLog.Targets.ConsoleOutputColor,NLog.Targets.ConsoleOutputColor)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ConsoleWordHighlightingRule" /> class.
            </summary>
      <param name="text">The text to be matched..</param>
      <param name="foregroundColor">Color of the foreground.</param>
      <param name="backgroundColor">Color of the background.</param>
    </member>
    <member name="P:NLog.Targets.ConsoleWordHighlightingRule.Regex">
      <summary>
            Gets or sets the regular expression to be matched. You must specify either <c>text</c> or <c>regex</c>.
            </summary>
      <docgen category="Rule Matching Options" order="10" />
    </member>
    <member name="P:NLog.Targets.ConsoleWordHighlightingRule.Text">
      <summary>
            Gets or sets the text to be matched. You must specify either <c>text</c> or <c>regex</c>.
            </summary>
      <docgen category="Rule Matching Options" order="10" />
    </member>
    <member name="P:NLog.Targets.ConsoleWordHighlightingRule.WholeWords">
      <summary>
            Gets or sets a value indicating whether to match whole words only.
            </summary>
      <docgen category="Rule Matching Options" order="10" />
    </member>
    <member name="P:NLog.Targets.ConsoleWordHighlightingRule.IgnoreCase">
      <summary>
            Gets or sets a value indicating whether to ignore case when comparing texts.
            </summary>
      <docgen category="Rule Matching Options" order="10" />
    </member>
    <member name="P:NLog.Targets.ConsoleWordHighlightingRule.CompiledRegex">
      <summary>
            Gets the compiled regular expression that matches either Text or Regex property.
            </summary>
    </member>
    <member name="P:NLog.Targets.ConsoleWordHighlightingRule.ForegroundColor">
      <summary>
            Gets or sets the foreground color.
            </summary>
      <docgen category="Formatting Options" order="10" />
    </member>
    <member name="P:NLog.Targets.ConsoleWordHighlightingRule.BackgroundColor">
      <summary>
            Gets or sets the background color.
            </summary>
      <docgen category="Formatting Options" order="10" />
    </member>
    <member name="T:NLog.Targets.DatabaseCommandInfo">
      <summary>
            Information about database command + parameters.
            </summary>
    </member>
    <member name="M:NLog.Targets.DatabaseCommandInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DatabaseCommandInfo" /> class.
            </summary>
    </member>
    <member name="P:NLog.Targets.DatabaseCommandInfo.CommandType">
      <summary>
            Gets or sets the type of the command.
            </summary>
      <value>The type of the command.</value>
      <docgen category="Command Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseCommandInfo.ConnectionString">
      <summary>
            Gets or sets the connection string to run the command against. If not provided, connection string from the target is used.
            </summary>
      <docgen category="Command Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseCommandInfo.Text">
      <summary>
            Gets or sets the command text.
            </summary>
      <docgen category="Command Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseCommandInfo.IgnoreFailures">
      <summary>
            Gets or sets a value indicating whether to ignore failures.
            </summary>
      <docgen category="Command Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseCommandInfo.Parameters">
      <summary>
            Gets the collection of parameters. Each parameter contains a mapping
            between NLog layout and a database named or positional parameter.
            </summary>
      <docgen category="Command Options" order="10" />
    </member>
    <member name="T:NLog.Targets.DatabaseParameterInfo">
      <summary>
            Represents a parameter to a Database target.
            </summary>
    </member>
    <member name="M:NLog.Targets.DatabaseParameterInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DatabaseParameterInfo" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.DatabaseParameterInfo.#ctor(System.String,NLog.Layouts.Layout)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DatabaseParameterInfo" /> class.
            </summary>
      <param name="parameterName">Name of the parameter.</param>
      <param name="parameterLayout">The parameter layout.</param>
    </member>
    <member name="P:NLog.Targets.DatabaseParameterInfo.Name">
      <summary>
            Gets or sets the database parameter name.
            </summary>
      <docgen category="Parameter Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseParameterInfo.Layout">
      <summary>
            Gets or sets the layout that should be use to calcuate the value for the parameter.
            </summary>
      <docgen category="Parameter Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseParameterInfo.Size">
      <summary>
            Gets or sets the database parameter size.
            </summary>
      <docgen category="Parameter Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseParameterInfo.Precision">
      <summary>
            Gets or sets the database parameter precision.
            </summary>
      <docgen category="Parameter Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseParameterInfo.Scale">
      <summary>
            Gets or sets the database parameter scale.
            </summary>
      <docgen category="Parameter Options" order="10" />
    </member>
    <member name="T:NLog.Targets.DatabaseTarget">
      <summary>
            Writes log messages to the database using an ADO.NET provider.
            </summary>
      <seealso href="http://nlog-project.org/wiki/Database_target">Documentation on NLog Wiki</seealso>
      <example>
        <para>
            The configuration is dependent on the database type, because
            there are differnet methods of specifying connection string, SQL
            command and command parameters.
            </para>
        <para>MS SQL Server using System.Data.SqlClient:</para>
        <code lang="XML" source="examples/targets/Configuration File/Database/MSSQL/NLog.config" height="450" />
        <para>Oracle using System.Data.OracleClient:</para>
        <code lang="XML" source="examples/targets/Configuration File/Database/Oracle.Native/NLog.config" height="350" />
        <para>Oracle using System.Data.OleDBClient:</para>
        <code lang="XML" source="examples/targets/Configuration File/Database/Oracle.OleDB/NLog.config" height="350" />
        <para>To set up the log target programmatically use code like this (an equivalent of MSSQL configuration):</para>
        <code lang="C#" source="examples/targets/Configuration API/Database/MSSQL/Example.cs" height="630" />
      </example>
    </member>
    <member name="M:NLog.Targets.DatabaseTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DatabaseTarget" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.DatabaseTarget.Install(NLog.Config.InstallationContext)">
      <summary>
            Performs installation which requires administrative permissions.
            </summary>
      <param name="installationContext">The installation context.</param>
    </member>
    <member name="M:NLog.Targets.DatabaseTarget.Uninstall(NLog.Config.InstallationContext)">
      <summary>
            Performs uninstallation which requires administrative permissions.
            </summary>
      <param name="installationContext">The installation context.</param>
    </member>
    <member name="M:NLog.Targets.DatabaseTarget.IsInstalled(NLog.Config.InstallationContext)">
      <summary>
            Determines whether the item is installed.
            </summary>
      <param name="installationContext">The installation context.</param>
      <returns>
            Value indicating whether the item is installed or null if it is not possible to determine.
            </returns>
    </member>
    <member name="M:NLog.Targets.DatabaseTarget.InitializeTarget">
      <summary>
            Initializes the target. Can be used by inheriting classes
            to initialize logging.
            </summary>
    </member>
    <member name="M:NLog.Targets.DatabaseTarget.CloseTarget">
      <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
    </member>
    <member name="M:NLog.Targets.DatabaseTarget.Write(NLog.LogEventInfo)">
      <summary>
            Writes the specified logging event to the database. It creates
            a new database command, prepares parameters for it by calculating
            layouts and executes the command.
            </summary>
      <param name="logEvent">The logging event.</param>
    </member>
    <member name="M:NLog.Targets.DatabaseTarget.Write(NLog.Common.AsyncLogEventInfo[])">
      <summary>
            Writes an array of logging events to the log target. By default it iterates on all
            events and passes them to "Write" method. Inheriting classes can use this method to
            optimize batch writes.
            </summary>
      <param name="logEvents">Logging events to be written out.</param>
    </member>
    <member name="P:NLog.Targets.DatabaseTarget.DBProvider">
      <summary>
            Gets or sets the name of the database provider.
            </summary>
      <remarks>
        <para>
            The parameter name should be a provider invariant name as registered in machine.config or app.config. Common values are:
            </para>
        <ul>
          <li>
            <c>System.Data.SqlClient</c> - <see href="http://msdn.microsoft.com/en-us/library/system.data.sqlclient.aspx">SQL Sever Client</see></li>
          <li>
            <c>System.Data.SqlServerCe.3.5</c> - <see href="http://www.microsoft.com/sqlserver/2005/en/us/compact.aspx">SQL Sever Compact 3.5</see></li>
          <li>
            <c>System.Data.OracleClient</c> - <see href="http://msdn.microsoft.com/en-us/library/system.data.oracleclient.aspx">Oracle Client from Microsoft</see> (deprecated in .NET Framework 4)</li>
          <li>
            <c>Oracle.DataAccess.Client</c> - <see href="http://www.oracle.com/technology/tech/windows/odpnet/index.html">ODP.NET provider from Oracle</see></li>
          <li>
            <c>System.Data.SQLite</c> - <see href="http://sqlite.phxsoftware.com/">System.Data.SQLite driver for SQLite</see></li>
          <li>
            <c>Npgsql</c> - <see href="http://npgsql.projects.postgresql.org/">Npgsql driver for PostgreSQL</see></li>
          <li>
            <c>MySql.Data.MySqlClient</c> - <see href="http://www.mysql.com/downloads/connector/net/">MySQL Connector/Net</see></li>
        </ul>
        <para>(Note that provider invariant names are not supported on .NET Compact Framework).</para>
        <para>
            Alternatively the parameter value can be be a fully qualified name of the provider 
            connection type (class implementing <see cref="T:System.Data.IDbConnection" />) or one of the following tokens:
            </para>
        <ul>
          <li>
            <c>sqlserver</c>, <c>mssql</c>, <c>microsoft</c> or <c>msde</c> - SQL Server Data Provider</li>
          <li>
            <c>oledb</c> - OLEDB Data Provider</li>
          <li>
            <c>odbc</c> - ODBC Data Provider</li>
        </ul>
      </remarks>
      <docgen category="Connection Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseTarget.ConnectionStringName">
      <summary>
            Gets or sets the name of the connection string (as specified in <see href="http://msdn.microsoft.com/en-us/library/bf7sd233.aspx">&lt;connectionStrings&gt; configuration section</see>.
            </summary>
      <docgen category="Connection Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseTarget.ConnectionString">
      <summary>
            Gets or sets the connection string. When provided, it overrides the values
            specified in DBHost, DBUserName, DBPassword, DBDatabase.
            </summary>
      <docgen category="Connection Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseTarget.InstallConnectionString">
      <summary>
            Gets or sets the connection string using for installation and uninstallation. If not provided, regular ConnectionString is being used.
            </summary>
      <docgen category="Installation Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseTarget.InstallDdlCommands">
      <summary>
            Gets the installation DDL commands.
            </summary>
      <docgen category="Installation Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseTarget.UninstallDdlCommands">
      <summary>
            Gets the uninstallation DDL commands.
            </summary>
      <docgen category="Installation Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseTarget.KeepConnection">
      <summary>
            Gets or sets a value indicating whether to keep the 
            database connection open between the log events.
            </summary>
      <docgen category="Connection Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseTarget.UseTransactions">
      <summary>
            Gets or sets a value indicating whether to use database transactions. 
            Some data providers require this.
            </summary>
      <docgen category="Connection Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseTarget.DBHost">
      <summary>
            Gets or sets the database host name. If the ConnectionString is not provided
            this value will be used to construct the "Server=" part of the
            connection string.
            </summary>
      <docgen category="Connection Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseTarget.DBUserName">
      <summary>
            Gets or sets the database user name. If the ConnectionString is not provided
            this value will be used to construct the "User ID=" part of the
            connection string.
            </summary>
      <docgen category="Connection Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseTarget.DBPassword">
      <summary>
            Gets or sets the database password. If the ConnectionString is not provided
            this value will be used to construct the "Password=" part of the
            connection string.
            </summary>
      <docgen category="Connection Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseTarget.DBDatabase">
      <summary>
            Gets or sets the database name. If the ConnectionString is not provided
            this value will be used to construct the "Database=" part of the
            connection string.
            </summary>
      <docgen category="Connection Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseTarget.CommandText">
      <summary>
            Gets or sets the text of the SQL command to be run on each log level.
            </summary>
      <remarks>
            Typically this is a SQL INSERT statement or a stored procedure call. 
            It should use the database-specific parameters (marked as <c>@parameter</c>
            for SQL server or <c>:parameter</c> for Oracle, other data providers
            have their own notation) and not the layout renderers, 
            because the latter is prone to SQL injection attacks.
            The layout renderers should be specified as &lt;parameter /&gt; elements instead.
            </remarks>
      <docgen category="SQL Statement" order="10" />
    </member>
    <member name="P:NLog.Targets.DatabaseTarget.Parameters">
      <summary>
            Gets the collection of parameters. Each parameter contains a mapping
            between NLog layout and a database named or positional parameter.
            </summary>
      <docgen category="SQL Statement" order="11" />
    </member>
    <member name="T:NLog.Targets.DebuggerTarget">
      <summary>
            Writes log messages to the attached managed debugger.
            </summary>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/Debugger/NLog.config" />
        <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
        <p>
            To set up the log target programmatically use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/Debugger/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.DebuggerTarget.InitializeTarget">
      <summary>
            Initializes the target.
            </summary>
    </member>
    <member name="M:NLog.Targets.DebuggerTarget.CloseTarget">
      <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
    </member>
    <member name="M:NLog.Targets.DebuggerTarget.Write(NLog.LogEventInfo)">
      <summary>
            Writes the specified logging event to the attached debugger.
            </summary>
      <param name="logEvent">The logging event.</param>
    </member>
    <member name="T:NLog.Targets.DebugTarget">
      <summary>
            Mock target - useful for testing.
            </summary>
      <seealso href="http://nlog-project.org/wiki/Debug_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/Debug/NLog.config" />
        <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
        <p>
            To set up the log target programmatically use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/Debug/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.DebugTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DebugTarget" /> class.
            </summary>
      <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
    </member>
    <member name="M:NLog.Targets.DebugTarget.Write(NLog.LogEventInfo)">
      <summary>
            Increases the number of messages.
            </summary>
      <param name="logEvent">The logging event.</param>
    </member>
    <member name="P:NLog.Targets.DebugTarget.Counter">
      <summary>
            Gets the number of times this target has been called.
            </summary>
      <docgen category="Debugging Options" order="10" />
    </member>
    <member name="P:NLog.Targets.DebugTarget.LastMessage">
      <summary>
            Gets the last message rendered by this target.
            </summary>
      <docgen category="Debugging Options" order="10" />
    </member>
    <member name="T:NLog.Targets.EventLogTarget">
      <summary>
            Writes log message to the Event Log.
            </summary>
      <seealso href="http://nlog-project.org/wiki/EventLog_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/EventLog/NLog.config" />
        <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
        <p>
            To set up the log target programmatically use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/EventLog/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.EventLogTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.EventLogTarget" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.EventLogTarget.Install(NLog.Config.InstallationContext)">
      <summary>
            Performs installation which requires administrative permissions.
            </summary>
      <param name="installationContext">The installation context.</param>
    </member>
    <member name="M:NLog.Targets.EventLogTarget.Uninstall(NLog.Config.InstallationContext)">
      <summary>
            Performs uninstallation which requires administrative permissions.
            </summary>
      <param name="installationContext">The installation context.</param>
    </member>
    <member name="M:NLog.Targets.EventLogTarget.IsInstalled(NLog.Config.InstallationContext)">
      <summary>
            Determines whether the item is installed.
            </summary>
      <param name="installationContext">The installation context.</param>
      <returns>
            Value indicating whether the item is installed or null if it is not possible to determine.
            </returns>
    </member>
    <member name="M:NLog.Targets.EventLogTarget.InitializeTarget">
      <summary>
            Initializes the target.
            </summary>
    </member>
    <member name="M:NLog.Targets.EventLogTarget.Write(NLog.LogEventInfo)">
      <summary>
            Writes the specified logging event to the event log. 
            </summary>
      <param name="logEvent">The logging event.</param>
    </member>
    <member name="P:NLog.Targets.EventLogTarget.MachineName">
      <summary>
            Gets or sets the name of the machine on which Event Log service is running.
            </summary>
      <docgen category="Event Log Options" order="10" />
    </member>
    <member name="P:NLog.Targets.EventLogTarget.EventId">
      <summary>
            Gets or sets the layout that renders event ID.
            </summary>
      <docgen category="Event Log Options" order="10" />
    </member>
    <member name="P:NLog.Targets.EventLogTarget.Category">
      <summary>
            Gets or sets the layout that renders event Category.
            </summary>
      <docgen category="Event Log Options" order="10" />
    </member>
    <member name="P:NLog.Targets.EventLogTarget.Source">
      <summary>
            Gets or sets the value to be used as the event Source.
            </summary>
      <remarks>
            By default this is the friendly name of the current AppDomain.
            </remarks>
      <docgen category="Event Log Options" order="10" />
    </member>
    <member name="P:NLog.Targets.EventLogTarget.Log">
      <summary>
            Gets or sets the name of the Event Log to write to. This can be System, Application or 
            any user-defined name.
            </summary>
      <docgen category="Event Log Options" order="10" />
    </member>
    <member name="T:NLog.Targets.FileArchivePeriod">
      <summary>
            Modes of archiving files based on time.
            </summary>
    </member>
    <member name="F:NLog.Targets.FileArchivePeriod.None">
      <summary>
            Don't archive based on time.
            </summary>
    </member>
    <member name="F:NLog.Targets.FileArchivePeriod.Year">
      <summary>
            Archive every year.
            </summary>
    </member>
    <member name="F:NLog.Targets.FileArchivePeriod.Month">
      <summary>
            Archive every month.
            </summary>
    </member>
    <member name="F:NLog.Targets.FileArchivePeriod.Day">
      <summary>
            Archive daily.
            </summary>
    </member>
    <member name="F:NLog.Targets.FileArchivePeriod.Hour">
      <summary>
            Archive every hour.
            </summary>
    </member>
    <member name="F:NLog.Targets.FileArchivePeriod.Minute">
      <summary>
            Archive every minute.
            </summary>
    </member>
    <member name="T:NLog.Targets.FileTarget">
      <summary>
            Writes log messages to one or more files.
            </summary>
      <seealso href="http://nlog-project.org/wiki/File_target">Documentation on NLog Wiki</seealso>
    </member>
    <member name="M:NLog.Targets.FileTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.FileTarget" /> class.
            </summary>
      <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
    </member>
    <member name="M:NLog.Targets.FileTarget.CleanupInitializedFiles">
      <summary>
            Removes records of initialized files that have not been 
            accessed in the last two days.
            </summary>
      <remarks>
            Files are marked 'initialized' for the purpose of writing footers when the logging finishes.
            </remarks>
    </member>
    <member name="M:NLog.Targets.FileTarget.CleanupInitializedFiles(System.DateTime)">
      <summary>
            Removes records of initialized files that have not been
            accessed after the specified date.
            </summary>
      <param name="cleanupThreshold">The cleanup threshold.</param>
      <remarks>
            Files are marked 'initialized' for the purpose of writing footers when the logging finishes.
            </remarks>
    </member>
    <member name="M:NLog.Targets.FileTarget.FlushAsync(NLog.Common.AsyncContinuation)">
      <summary>
            Flushes all pending file operations.
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
      <remarks>
            The timeout parameter is ignored, because file APIs don't provide
            the needed functionality.
            </remarks>
    </member>
    <member name="M:NLog.Targets.FileTarget.InitializeTarget">
      <summary>
            Initializes file logging by creating data structures that
            enable efficient multi-file logging.
            </summary>
    </member>
    <member name="M:NLog.Targets.FileTarget.CloseTarget">
      <summary>
            Closes the file(s) opened for writing.
            </summary>
    </member>
    <member name="M:NLog.Targets.FileTarget.Write(NLog.LogEventInfo)">
      <summary>
            Writes the specified logging event to a file specified in the FileName 
            parameter.
            </summary>
      <param name="logEvent">The logging event.</param>
    </member>
    <member name="M:NLog.Targets.FileTarget.Write(NLog.Common.AsyncLogEventInfo[])">
      <summary>
            Writes the specified array of logging events to a file specified in the FileName
            parameter.
            </summary>
      <param name="logEvents">An array of <see cref="T:NLog.LogEventInfo" /> objects.</param>
      <remarks>
            This function makes use of the fact that the events are batched by sorting
            the requests by filename. This optimizes the number of open/close calls
            and can help improve performance.
            </remarks>
    </member>
    <member name="M:NLog.Targets.FileTarget.GetFormattedMessage(NLog.LogEventInfo)">
      <summary>
            Formats the log event for write.
            </summary>
      <param name="logEvent">The log event to be formatted.</param>
      <returns>A string representation of the log event.</returns>
    </member>
    <member name="M:NLog.Targets.FileTarget.GetBytesToWrite(NLog.LogEventInfo)">
      <summary>
            Gets the bytes to be written to the file.
            </summary>
      <param name="logEvent">Log event.</param>
      <returns>Array of bytes that are ready to be written.</returns>
    </member>
    <member name="M:NLog.Targets.FileTarget.TransformBytes(System.Byte[])">
      <summary>
            Modifies the specified byte array before it gets sent to a file.
            </summary>
      <param name="value">The byte array.</param>
      <returns>The modified byte array. The function can do the modification in-place.</returns>
    </member>
    <member name="P:NLog.Targets.FileTarget.FileName">
      <summary>
            Gets or sets the name of the file to write to.
            </summary>
      <remarks>
            This FileName string is a layout which may include instances of layout renderers.
            This lets you use a single target to write to multiple files.
            </remarks>
      <example>
            The following value makes NLog write logging events to files based on the log level in the directory where
            the application runs.
            <code>${basedir}/${level}.log</code>
            All <c>Debug</c> messages will go to <c>Debug.log</c>, all <c>Info</c> messages will go to <c>Info.log</c> and so on.
            You can combine as many of the layout renderers as you want to produce an arbitrary log file name.
            </example>
      <docgen category="Output Options" order="1" />
    </member>
    <member name="P:NLog.Targets.FileTarget.CreateDirs">
      <summary>
            Gets or sets a value indicating whether to create directories if they don't exist.
            </summary>
      <remarks>
            Setting this to false may improve performance a bit, but you'll receive an error
            when attempting to write to a directory that's not present.
            </remarks>
      <docgen category="Output Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.DeleteOldFileOnStartup">
      <summary>
            Gets or sets a value indicating whether to delete old log file on startup.
            </summary>
      <remarks>
            This option works only when the "FileName" parameter denotes a single file.
            </remarks>
      <docgen category="Output Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.ReplaceFileContentsOnEachWrite">
      <summary>
            Gets or sets a value indicating whether to replace file contents on each write instead of appending log message at the end.
            </summary>
      <docgen category="Output Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.KeepFileOpen">
      <summary>
            Gets or sets a value indicating whether to keep log file open instead of opening and closing it on each logging event.
            </summary>
      <remarks>
            Setting this property to <c>True</c> helps improve performance.
            </remarks>
      <docgen category="Performance Tuning Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.EnableFileDelete">
      <summary>
            Gets or sets a value indicating whether to enable log file(s) to be deleted.
            </summary>
      <docgen category="Output Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.FileAttributes">
      <summary>
            Gets or sets the file attributes (Windows only).
            </summary>
      <docgen category="Output Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.LineEnding">
      <summary>
            Gets or sets the line ending mode.
            </summary>
      <docgen category="Layout Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.AutoFlush">
      <summary>
            Gets or sets a value indicating whether to automatically flush the file buffers after each log message.
            </summary>
      <docgen category="Performance Tuning Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.OpenFileCacheSize">
      <summary>
            Gets or sets the number of files to be kept open. Setting this to a higher value may improve performance
            in a situation where a single File target is writing to many files
            (such as splitting by level or by logger).
            </summary>
      <remarks>
            The files are managed on a LRU (least recently used) basis, which flushes
            the files that have not been used for the longest period of time should the
            cache become full. As a rule of thumb, you shouldn't set this parameter to 
            a very high value. A number like 10-15 shouldn't be exceeded, because you'd
            be keeping a large number of files open which consumes system resources.
            </remarks>
      <docgen category="Performance Tuning Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.OpenFileCacheTimeout">
      <summary>
            Gets or sets the maximum number of seconds that files are kept open. If this number is negative the files are 
            not automatically closed after a period of inactivity.
            </summary>
      <docgen category="Performance Tuning Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.BufferSize">
      <summary>
            Gets or sets the log file buffer size in bytes.
            </summary>
      <docgen category="Performance Tuning Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.Encoding">
      <summary>
            Gets or sets the file encoding.
            </summary>
      <docgen category="Layout Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.ConcurrentWrites">
      <summary>
            Gets or sets a value indicating whether concurrent writes to the log file by multiple processes on the same host.
            </summary>
      <remarks>
            This makes multi-process logging possible. NLog uses a special technique
            that lets it keep the files open for writing.
            </remarks>
      <docgen category="Performance Tuning Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.NetworkWrites">
      <summary>
            Gets or sets a value indicating whether concurrent writes to the log file by multiple processes on different network hosts.
            </summary>
      <remarks>
            This effectively prevents files from being kept open.
            </remarks>
      <docgen category="Performance Tuning Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.ConcurrentWriteAttempts">
      <summary>
            Gets or sets the number of times the write is appended on the file before NLog
            discards the log message.
            </summary>
      <docgen category="Performance Tuning Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.ConcurrentWriteAttemptDelay">
      <summary>
            Gets or sets the delay in milliseconds to wait before attempting to write to the file again.
            </summary>
      <remarks>
            The actual delay is a random value between 0 and the value specified
            in this parameter. On each failed attempt the delay base is doubled
            up to <see cref="P:NLog.Targets.FileTarget.ConcurrentWriteAttempts" /> times.
            </remarks>
      <example>
            Assuming that ConcurrentWriteAttemptDelay is 10 the time to wait will be:<p />
            a random value between 0 and 10 milliseconds - 1st attempt<br />
            a random value between 0 and 20 milliseconds - 2nd attempt<br />
            a random value between 0 and 40 milliseconds - 3rd attempt<br />
            a random value between 0 and 80 milliseconds - 4th attempt<br />
            ...<p />
            and so on.
            </example>
      <docgen category="Performance Tuning Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.ArchiveAboveSize">
      <summary>
            Gets or sets the size in bytes above which log files will be automatically archived.
            </summary>
      <remarks>
            Caution: Enabling this option can considerably slow down your file 
            logging in multi-process scenarios. If only one process is going to
            be writing to the file, consider setting <c>ConcurrentWrites</c>
            to <c>false</c> for maximum performance.
            </remarks>
      <docgen category="Archival Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.ArchiveEvery">
      <summary>
            Gets or sets a value indicating whether to automatically archive log files every time the specified time passes.
            </summary>
      <remarks>
            Files are moved to the archive as part of the write operation if the current period of time changes. For example
            if the current <c>hour</c> changes from 10 to 11, the first write that will occur
            on or after 11:00 will trigger the archiving.
            <p>
            Caution: Enabling this option can considerably slow down your file 
            logging in multi-process scenarios. If only one process is going to
            be writing to the file, consider setting <c>ConcurrentWrites</c>
            to <c>false</c> for maximum performance.
            </p></remarks>
      <docgen category="Archival Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.ArchiveFileName">
      <summary>
            Gets or sets the name of the file to be used for an archive.
            </summary>
      <remarks>
            It may contain a special placeholder {#####}
            that will be replaced with a sequence of numbers depending on 
            the archiving strategy. The number of hash characters used determines
            the number of numerical digits to be used for numbering files.
            </remarks>
      <docgen category="Archival Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.MaxArchiveFiles">
      <summary>
            Gets or sets the maximum number of archive files that should be kept.
            </summary>
      <docgen category="Archival Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.ArchiveNumbering">
      <summary>
            Gets or sets the way file archives are numbered. 
            </summary>
      <docgen category="Archival Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FileTarget.NewLineChars">
      <summary>
            Gets the characters that are appended after each line.
            </summary>
    </member>
    <member name="T:NLog.Targets.FormControlTarget">
      <summary>
            Logs text to Windows.Forms.Control.Text property control of specified Name.
            </summary>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/FormControl/NLog.config" />
        <p>
            The result is:
            </p>
        <img src="examples/targets/Screenshots/FormControl/FormControl.gif" />
        <p>
            To set up the log target programmatically similar to above use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/FormControl/Form1.cs" />,
            </example>
    </member>
    <member name="M:NLog.Targets.FormControlTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.FormControlTarget" /> class.
            </summary>
      <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
    </member>
    <member name="M:NLog.Targets.FormControlTarget.Write(NLog.LogEventInfo)">
      <summary>
            Log message to control.
            </summary>
      <param name="logEvent">
            The logging event.
            </param>
    </member>
    <member name="P:NLog.Targets.FormControlTarget.ControlName">
      <summary>
            Gets or sets the name of control to which NLog will log write log text.
            </summary>
      <docgen category="Form Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FormControlTarget.Append">
      <summary>
            Gets or sets a value indicating whether log text should be appended to the text of the control instead of overwriting it. </summary>
      <docgen category="Form Options" order="10" />
    </member>
    <member name="P:NLog.Targets.FormControlTarget.FormName">
      <summary>
            Gets or sets the name of the Form on which the control is located.
            </summary>
      <docgen category="Form Options" order="10" />
    </member>
    <member name="T:NLog.Targets.LineEndingMode">
      <summary>
            Line ending mode.
            </summary>
    </member>
    <member name="F:NLog.Targets.LineEndingMode.Default">
      <summary>
            Insert platform-dependent end-of-line sequence after each line.
            </summary>
    </member>
    <member name="F:NLog.Targets.LineEndingMode.CRLF">
      <summary>
            Insert CR LF sequence (ASCII 13, ASCII 10) after each line.
            </summary>
    </member>
    <member name="F:NLog.Targets.LineEndingMode.CR">
      <summary>
            Insert CR character (ASCII 13) after each line.
            </summary>
    </member>
    <member name="F:NLog.Targets.LineEndingMode.LF">
      <summary>
            Insert LF character (ASCII 10) after each line.
            </summary>
    </member>
    <member name="F:NLog.Targets.LineEndingMode.None">
      <summary>
            Don't insert any line ending.
            </summary>
    </member>
    <member name="T:NLog.Targets.LogReceiverWebServiceTarget">
      <summary>
            Sends log messages to a NLog Receiver Service (using WCF or Web Services).
            </summary>
      <seealso href="http://nlog-project.org/wiki/LogReceiverService_target">Documentation on NLog Wiki</seealso>
    </member>
    <member name="M:NLog.Targets.LogReceiverWebServiceTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.LogReceiverWebServiceTarget" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.LogReceiverWebServiceTarget.OnSend(NLog.LogReceiverService.NLogEvents,System.Collections.Generic.IEnumerable{NLog.Common.AsyncLogEventInfo})">
      <summary>
            Called when log events are being sent (test hook).
            </summary>
      <param name="events">The events.</param>
      <param name="asyncContinuations">The async continuations.</param>
      <returns>True if events should be sent, false to stop processing them.</returns>
    </member>
    <member name="M:NLog.Targets.LogReceiverWebServiceTarget.Write(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Writes logging event to the log target. Must be overridden in inheriting
            classes.
            </summary>
      <param name="logEvent">Logging event to be written out.</param>
    </member>
    <member name="M:NLog.Targets.LogReceiverWebServiceTarget.Write(NLog.Common.AsyncLogEventInfo[])">
      <summary>
            Writes an array of logging events to the log target. By default it iterates on all
            events and passes them to "Append" method. Inheriting classes can use this method to
            optimize batch writes.
            </summary>
      <param name="logEvents">Logging events to be written out.</param>
    </member>
    <member name="P:NLog.Targets.LogReceiverWebServiceTarget.EndpointAddress">
      <summary>
            Gets or sets the endpoint address.
            </summary>
      <value>The endpoint address.</value>
      <docgen category="Connection Options" order="10" />
    </member>
    <member name="P:NLog.Targets.LogReceiverWebServiceTarget.EndpointConfigurationName">
      <summary>
            Gets or sets the name of the endpoint configuration in WCF configuration file.
            </summary>
      <value>The name of the endpoint configuration.</value>
      <docgen category="Connection Options" order="10" />
    </member>
    <member name="P:NLog.Targets.LogReceiverWebServiceTarget.UseBinaryEncoding">
      <summary>
            Gets or sets a value indicating whether to use binary message encoding.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.Targets.LogReceiverWebServiceTarget.ClientId">
      <summary>
            Gets or sets the client ID.
            </summary>
      <value>The client ID.</value>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.Targets.LogReceiverWebServiceTarget.Parameters">
      <summary>
            Gets the list of parameters.
            </summary>
      <value>The parameters.</value>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="P:NLog.Targets.LogReceiverWebServiceTarget.IncludeEventProperties">
      <summary>
            Gets or sets a value indicating whether to include per-event properties in the payload sent to the server.
            </summary>
      <docgen category="Payload Options" order="10" />
    </member>
    <member name="T:NLog.Targets.MailTarget">
      <summary>
            Sends log messages by email using SMTP protocol.
            </summary>
      <seealso href="http://nlog-project.org/wiki/Mail_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/Mail/Simple/NLog.config" />
        <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
        <p>
            To set up the log target programmatically use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/Mail/Simple/Example.cs" />
        <p>
            Mail target works best when used with BufferingWrapper target
            which lets you send multiple log messages in single mail
            </p>
        <p>
            To set up the buffered mail target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/Mail/Buffered/NLog.config" />
        <p>
            To set up the buffered mail target programmatically use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/Mail/Buffered/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.MailTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MailTarget" /> class.
            </summary>
      <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
    </member>
    <member name="M:NLog.Targets.MailTarget.Write(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Renders the logging event message and adds it to the internal ArrayList of log messages.
            </summary>
      <param name="logEvent">The logging event.</param>
    </member>
    <member name="M:NLog.Targets.MailTarget.Write(NLog.Common.AsyncLogEventInfo[])">
      <summary>
            Renders an array logging events.
            </summary>
      <param name="logEvents">Array of logging events.</param>
    </member>
    <member name="P:NLog.Targets.MailTarget.From">
      <summary>
            Gets or sets sender's email address (e.g. joe@domain.com).
            </summary>
      <docgen category="Message Options" order="10" />
    </member>
    <member name="P:NLog.Targets.MailTarget.To">
      <summary>
            Gets or sets recipients' email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com).
            </summary>
      <docgen category="Message Options" order="11" />
    </member>
    <member name="P:NLog.Targets.MailTarget.CC">
      <summary>
            Gets or sets CC email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com).
            </summary>
      <docgen category="Message Options" order="12" />
    </member>
    <member name="P:NLog.Targets.MailTarget.Bcc">
      <summary>
            Gets or sets BCC email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com).
            </summary>
      <docgen category="Message Options" order="13" />
    </member>
    <member name="P:NLog.Targets.MailTarget.AddNewLines">
      <summary>
            Gets or sets a value indicating whether to add new lines between log entries.
            </summary>
      <value>A value of <c>true</c> if new lines should be added; otherwise, <c>false</c>.</value>
      <docgen category="Layout Options" order="99" />
    </member>
    <member name="P:NLog.Targets.MailTarget.Subject">
      <summary>
            Gets or sets the mail subject.
            </summary>
      <docgen category="Message Options" order="5" />
    </member>
    <member name="P:NLog.Targets.MailTarget.Body">
      <summary>
            Gets or sets mail message body (repeated for each log message send in one mail).
            </summary>
      <remarks>Alias for the <c>Layout</c> property.</remarks>
      <docgen category="Message Options" order="6" />
    </member>
    <member name="P:NLog.Targets.MailTarget.Encoding">
      <summary>
            Gets or sets encoding to be used for sending e-mail.
            </summary>
      <docgen category="Layout Options" order="20" />
    </member>
    <member name="P:NLog.Targets.MailTarget.Html">
      <summary>
            Gets or sets a value indicating whether to send message as HTML instead of plain text.
            </summary>
      <docgen category="Layout Options" order="11" />
    </member>
    <member name="P:NLog.Targets.MailTarget.SmtpServer">
      <summary>
            Gets or sets SMTP Server to be used for sending.
            </summary>
      <docgen category="SMTP Options" order="10" />
    </member>
    <member name="P:NLog.Targets.MailTarget.SmtpAuthentication">
      <summary>
            Gets or sets SMTP Authentication mode.
            </summary>
      <docgen category="SMTP Options" order="11" />
    </member>
    <member name="P:NLog.Targets.MailTarget.SmtpUserName">
      <summary>
            Gets or sets the username used to connect to SMTP server (used when SmtpAuthentication is set to "basic").
            </summary>
      <docgen category="SMTP Options" order="12" />
    </member>
    <member name="P:NLog.Targets.MailTarget.SmtpPassword">
      <summary>
            Gets or sets the password used to authenticate against SMTP server (used when SmtpAuthentication is set to "basic").
            </summary>
      <docgen category="SMTP Options" order="13" />
    </member>
    <member name="P:NLog.Targets.MailTarget.EnableSsl">
      <summary>
            Gets or sets a value indicating whether SSL (secure sockets layer) should be used when communicating with SMTP server.
            </summary>
      <docgen category="SMTP Options" order="14" />
    </member>
    <member name="P:NLog.Targets.MailTarget.SmtpPort">
      <summary>
            Gets or sets the port number that SMTP Server is listening on.
            </summary>
      <docgen category="SMTP Options" order="15" />
    </member>
    <member name="T:NLog.Targets.MemoryTarget">
      <summary>
            Writes log messages to an ArrayList in memory for programmatic retrieval.
            </summary>
      <seealso href="http://nlog-project.org/wiki/Memory_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/Memory/NLog.config" />
        <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
        <p>
            To set up the log target programmatically use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/Memory/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.MemoryTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MemoryTarget" /> class.
            </summary>
      <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
    </member>
    <member name="M:NLog.Targets.MemoryTarget.Write(NLog.LogEventInfo)">
      <summary>
            Renders the logging event message and adds it to the internal ArrayList of log messages.
            </summary>
      <param name="logEvent">The logging event.</param>
    </member>
    <member name="P:NLog.Targets.MemoryTarget.Logs">
      <summary>
            Gets the list of logs gathered in the <see cref="T:NLog.Targets.MemoryTarget" />.
            </summary>
    </member>
    <member name="T:NLog.Targets.MessageBoxTarget">
      <summary>
            Pops up log messages as message boxes.
            </summary>
      <seealso href="http://nlog-project.org/wiki/MessageBox_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/MessageBox/NLog.config" />
        <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
        <p>
            The result is a message box:
            </p>
        <img src="examples/targets/Screenshots/MessageBox/MessageBoxTarget.gif" />
        <p>
            To set up the log target programmatically use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/MessageBox/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.MessageBoxTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MessageBoxTarget" /> class.
            </summary>
      <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
    </member>
    <member name="M:NLog.Targets.MessageBoxTarget.Write(NLog.LogEventInfo)">
      <summary>
            Displays the message box with the log message and caption specified in the Caption
            parameter.
            </summary>
      <param name="logEvent">The logging event.</param>
    </member>
    <member name="M:NLog.Targets.MessageBoxTarget.Write(NLog.Common.AsyncLogEventInfo[])">
      <summary>
            Displays the message box with the array of rendered logs messages and caption specified in the Caption
            parameter.
            </summary>
      <param name="logEvents">The array of logging events.</param>
    </member>
    <member name="P:NLog.Targets.MessageBoxTarget.Caption">
      <summary>
            Gets or sets the message box title.
            </summary>
      <docgen category="UI Options" order="10" />
    </member>
    <member name="T:NLog.Targets.MethodCallParameter">
      <summary>
            A parameter to MethodCall.
            </summary>
    </member>
    <member name="M:NLog.Targets.MethodCallParameter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallParameter" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.MethodCallParameter.#ctor(NLog.Layouts.Layout)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallParameter" /> class.
            </summary>
      <param name="layout">The layout to use for parameter value.</param>
    </member>
    <member name="M:NLog.Targets.MethodCallParameter.#ctor(System.String,NLog.Layouts.Layout)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallParameter" /> class.
            </summary>
      <param name="parameterName">Name of the parameter.</param>
      <param name="layout">The layout.</param>
    </member>
    <member name="M:NLog.Targets.MethodCallParameter.#ctor(System.String,NLog.Layouts.Layout,System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallParameter" /> class.
            </summary>
      <param name="name">The name of the parameter.</param>
      <param name="layout">The layout.</param>
      <param name="type">The type of the parameter.</param>
    </member>
    <member name="P:NLog.Targets.MethodCallParameter.Name">
      <summary>
            Gets or sets the name of the parameter.
            </summary>
      <docgen category="Parameter Options" order="10" />
    </member>
    <member name="P:NLog.Targets.MethodCallParameter.Type">
      <summary>
            Gets or sets the type of the parameter.
            </summary>
      <docgen category="Parameter Options" order="10" />
    </member>
    <member name="P:NLog.Targets.MethodCallParameter.Layout">
      <summary>
            Gets or sets the layout that should be use to calcuate the value for the parameter.
            </summary>
      <docgen category="Parameter Options" order="10" />
    </member>
    <member name="T:NLog.Targets.MethodCallTargetBase">
      <summary>
            The base class for all targets which call methods (local or remote). 
            Manages parameters and type coercion.
            </summary>
    </member>
    <member name="M:NLog.Targets.MethodCallTargetBase.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallTargetBase" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.MethodCallTargetBase.Write(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Prepares an array of parameters to be passed based on the logging event and calls DoInvoke().
            </summary>
      <param name="logEvent">
            The logging event.
            </param>
    </member>
    <member name="M:NLog.Targets.MethodCallTargetBase.DoInvoke(System.Object[],NLog.Common.AsyncContinuation)">
      <summary>
            Calls the target method. Must be implemented in concrete classes.
            </summary>
      <param name="parameters">Method call parameters.</param>
      <param name="continuation">The continuation.</param>
    </member>
    <member name="M:NLog.Targets.MethodCallTargetBase.DoInvoke(System.Object[])">
      <summary>
            Calls the target method. Must be implemented in concrete classes.
            </summary>
      <param name="parameters">Method call parameters.</param>
    </member>
    <member name="P:NLog.Targets.MethodCallTargetBase.Parameters">
      <summary>
            Gets the array of parameters to be passed.
            </summary>
      <docgen category="Parameter Options" order="10" />
    </member>
    <member name="T:NLog.Targets.MethodCallTarget">
      <summary>
            Calls the specified static method on each log message and passes contextual parameters to it.
            </summary>
      <seealso href="http://nlog-project.org/wiki/MethodCall_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/MethodCall/NLog.config" />
        <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
        <p>
            To set up the log target programmatically use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/MethodCall/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.MethodCallTarget.InitializeTarget">
      <summary>
            Initializes the target.
            </summary>
    </member>
    <member name="M:NLog.Targets.MethodCallTarget.DoInvoke(System.Object[])">
      <summary>
            Calls the specified Method.
            </summary>
      <param name="parameters">Method parameters.</param>
    </member>
    <member name="P:NLog.Targets.MethodCallTarget.ClassName">
      <summary>
            Gets or sets the class name.
            </summary>
      <docgen category="Invocation Options" order="10" />
    </member>
    <member name="P:NLog.Targets.MethodCallTarget.MethodName">
      <summary>
            Gets or sets the method name. The method must be public and static.
            </summary>
      <docgen category="Invocation Options" order="10" />
    </member>
    <member name="T:NLog.Targets.NetworkTargetOverflowAction">
      <summary>
            Action that should be taken if the message overflows.
            </summary>
    </member>
    <member name="F:NLog.Targets.NetworkTargetOverflowAction.Error">
      <summary>
            Report an error.
            </summary>
    </member>
    <member name="F:NLog.Targets.NetworkTargetOverflowAction.Split">
      <summary>
            Split the message into smaller pieces.
            </summary>
    </member>
    <member name="F:NLog.Targets.NetworkTargetOverflowAction.Discard">
      <summary>
            Discard the entire message.
            </summary>
    </member>
    <member name="T:NLog.Targets.NLogViewerParameterInfo">
      <summary>
            Represents a parameter to a NLogViewer target.
            </summary>
    </member>
    <member name="M:NLog.Targets.NLogViewerParameterInfo.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.NLogViewerParameterInfo" /> class.
            </summary>
    </member>
    <member name="P:NLog.Targets.NLogViewerParameterInfo.Name">
      <summary>
            Gets or sets viewer parameter name.
            </summary>
      <docgen category="Parameter Options" order="10" />
    </member>
    <member name="P:NLog.Targets.NLogViewerParameterInfo.Layout">
      <summary>
            Gets or sets the layout that should be use to calcuate the value for the parameter.
            </summary>
      <docgen category="Parameter Options" order="10" />
    </member>
    <member name="T:NLog.Targets.NullTarget">
      <summary>
            Discards log messages. Used mainly for debugging and benchmarking.
            </summary>
      <seealso href="http://nlog-project.org/wiki/Null_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/Null/NLog.config" />
        <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
        <p>
            To set up the log target programmatically use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/Null/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.NullTarget.Write(NLog.LogEventInfo)">
      <summary>
            Does nothing. Optionally it calculates the layout text but
            discards the results.
            </summary>
      <param name="logEvent">The logging event.</param>
    </member>
    <member name="P:NLog.Targets.NullTarget.FormatMessage">
      <summary>
            Gets or sets a value indicating whether to perform layout calculation.
            </summary>
      <docgen category="Layout Options" order="10" />
    </member>
    <member name="T:NLog.Targets.OutputDebugStringTarget">
      <summary>
            Outputs log messages through the <c>OutputDebugString()</c> Win32 API.
            </summary>
      <seealso href="http://nlog-project.org/wiki/OutputDebugString_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/OutputDebugString/NLog.config" />
        <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
        <p>
            To set up the log target programmatically use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/OutputDebugString/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.OutputDebugStringTarget.Write(NLog.LogEventInfo)">
      <summary>
            Outputs the rendered logging event through the <c>OutputDebugString()</c> Win32 API.
            </summary>
      <param name="logEvent">The logging event.</param>
    </member>
    <member name="T:NLog.Targets.PerformanceCounterTarget">
      <summary>
            Increments specified performance counter on each write.
            </summary>
      <seealso href="http://nlog-project.org/wiki/PerformanceCounter_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/PerfCounter/NLog.config" />
        <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
        <p>
            To set up the log target programmatically use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/PerfCounter/Simple/Example.cs" />
      </example>
      <remarks>
            TODO:
            1. Unable to create a category allowing multiple counter instances (.Net 2.0 API only, probably)
            2. Is there any way of adding new counters without deleting the whole category?
            3. There should be some mechanism of resetting the counter (e.g every day starts from 0), or auto-switching to 
               another counter instance (with dynamic creation of new instance). This could be done with layouts. 
            </remarks>
    </member>
    <member name="M:NLog.Targets.PerformanceCounterTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.PerformanceCounterTarget" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.PerformanceCounterTarget.Install(NLog.Config.InstallationContext)">
      <summary>
            Performs installation which requires administrative permissions.
            </summary>
      <param name="installationContext">The installation context.</param>
    </member>
    <member name="M:NLog.Targets.PerformanceCounterTarget.Uninstall(NLog.Config.InstallationContext)">
      <summary>
            Performs uninstallation which requires administrative permissions.
            </summary>
      <param name="installationContext">The installation context.</param>
    </member>
    <member name="M:NLog.Targets.PerformanceCounterTarget.IsInstalled(NLog.Config.InstallationContext)">
      <summary>
            Determines whether the item is installed.
            </summary>
      <param name="installationContext">The installation context.</param>
      <returns>
            Value indicating whether the item is installed or null if it is not possible to determine.
            </returns>
    </member>
    <member name="M:NLog.Targets.PerformanceCounterTarget.Write(NLog.LogEventInfo)">
      <summary>
            Increments the configured performance counter.
            </summary>
      <param name="logEvent">Log event.</param>
    </member>
    <member name="M:NLog.Targets.PerformanceCounterTarget.CloseTarget">
      <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
    </member>
    <member name="M:NLog.Targets.PerformanceCounterTarget.EnsureInitialized">
      <summary>
            Ensures that the performance counter has been initialized.
            </summary>
      <returns>True if the performance counter is operational, false otherwise.</returns>
    </member>
    <member name="P:NLog.Targets.PerformanceCounterTarget.AutoCreate">
      <summary>
            Gets or sets a value indicating whether performance counter should be automatically created.
            </summary>
      <docgen category="Performance Counter Options" order="10" />
    </member>
    <member name="P:NLog.Targets.PerformanceCounterTarget.CategoryName">
      <summary>
            Gets or sets the name of the performance counter category.
            </summary>
      <docgen category="Performance Counter Options" order="10" />
    </member>
    <member name="P:NLog.Targets.PerformanceCounterTarget.CounterName">
      <summary>
            Gets or sets the name of the performance counter.
            </summary>
      <docgen category="Performance Counter Options" order="10" />
    </member>
    <member name="P:NLog.Targets.PerformanceCounterTarget.InstanceName">
      <summary>
            Gets or sets the performance counter instance name.
            </summary>
      <docgen category="Performance Counter Options" order="10" />
    </member>
    <member name="P:NLog.Targets.PerformanceCounterTarget.CounterHelp">
      <summary>
            Gets or sets the counter help text.
            </summary>
      <docgen category="Performance Counter Options" order="10" />
    </member>
    <member name="P:NLog.Targets.PerformanceCounterTarget.CounterType">
      <summary>
            Gets or sets the performance counter type.
            </summary>
      <docgen category="Performance Counter Options" order="10" />
    </member>
    <member name="T:NLog.Targets.RichTextBoxRowColoringRule">
      <summary>
            The row-coloring condition.
            </summary>
    </member>
    <member name="M:NLog.Targets.RichTextBoxRowColoringRule.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.RichTextBoxRowColoringRule" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.RichTextBoxRowColoringRule.#ctor(System.String,System.String,System.String,System.Drawing.FontStyle)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.RichTextBoxRowColoringRule" /> class.
            </summary>
      <param name="condition">The condition.</param>
      <param name="fontColor">Color of the foregroung text.</param>
      <param name="backColor">Color of the background text.</param>
      <param name="fontStyle">The font style.</param>
    </member>
    <member name="M:NLog.Targets.RichTextBoxRowColoringRule.#ctor(System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.RichTextBoxRowColoringRule" /> class.
            </summary>
      <param name="condition">The condition.</param>
      <param name="fontColor">Color of the text.</param>
      <param name="backColor">Color of the background.</param>
    </member>
    <member name="M:NLog.Targets.RichTextBoxRowColoringRule.CheckCondition(NLog.LogEventInfo)">
      <summary>
            Checks whether the specified log event matches the condition (if any).
            </summary>
      <param name="logEvent">
            Log event.
            </param>
      <returns>
            A value of <see langword="true" /> if the condition is not defined or 
            if it matches, <see langword="false" /> otherwise.
            </returns>
    </member>
    <member name="P:NLog.Targets.RichTextBoxRowColoringRule.Default">
      <summary>
            Gets the default highlighting rule. Doesn't change the color.
            </summary>
      <docgen category="Rule Matching Options" order="10" />
    </member>
    <member name="P:NLog.Targets.RichTextBoxRowColoringRule.Condition">
      <summary>
            Gets or sets the condition that must be met in order to set the specified font color.
            </summary>
      <docgen category="Rule Matching Options" order="10" />
    </member>
    <member name="P:NLog.Targets.RichTextBoxRowColoringRule.FontColor">
      <summary>
            Gets or sets the font color.
            </summary>
      <remarks>
            Names are identical with KnownColor enum extended with Empty value which means that background color won't be changed.
            </remarks>
      <docgen category="Formatting Options" order="10" />
    </member>
    <member name="P:NLog.Targets.RichTextBoxRowColoringRule.BackgroundColor">
      <summary>
            Gets or sets the background color.
            </summary>
      <remarks>
            Names are identical with KnownColor enum extended with Empty value which means that background color won't be changed.
            </remarks>
      <docgen category="Formatting Options" order="10" />
    </member>
    <member name="P:NLog.Targets.RichTextBoxRowColoringRule.Style">
      <summary>
            Gets or sets the font style of matched text. 
            </summary>
      <remarks>
            Possible values are the same as in <c>FontStyle</c> enum in <c>System.Drawing</c></remarks>
      <docgen category="Formatting Options" order="10" />
    </member>
    <member name="T:NLog.Targets.RichTextBoxTarget">
      <summary>
            Log text a Rich Text Box control in an existing or new form.
            </summary>
      <seealso href="http://nlog-project.org/wiki/RichTextBox_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/RichTextBox/Simple/NLog.config">
        </code>
        <p>
            The result is:
            </p>
        <img src="examples/targets/Screenshots/RichTextBox/Simple.gif" />
        <p>
            To set up the target with coloring rules in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/RichTextBox/RowColoring/NLog.config">
        </code>
        <code lang="XML" source="examples/targets/Configuration File/RichTextBox/WordColoring/NLog.config">
        </code>
        <p>
            The result is:
            </p>
        <img src="examples/targets/Screenshots/RichTextBox/RowColoring.gif" />
        <img src="examples/targets/Screenshots/RichTextBox/WordColoring.gif" />
        <p>
            To set up the log target programmatically similar to above use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/RichTextBox/Simple/Form1.cs">
        </code>
            ,
            <code lang="C#" source="examples/targets/Configuration API/RichTextBox/RowColoring/Form1.cs"></code>
            for RowColoring,
            <code lang="C#" source="examples/targets/Configuration API/RichTextBox/WordColoring/Form1.cs"></code>
            for WordColoring
            </example>
    </member>
    <member name="M:NLog.Targets.RichTextBoxTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.RichTextBoxTarget" /> class.
            </summary>
      <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
    </member>
    <member name="M:NLog.Targets.RichTextBoxTarget.InitializeTarget">
      <summary>
            Initializes the target. Can be used by inheriting classes
            to initialize logging.
            </summary>
    </member>
    <member name="M:NLog.Targets.RichTextBoxTarget.CloseTarget">
      <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
    </member>
    <member name="M:NLog.Targets.RichTextBoxTarget.Write(NLog.LogEventInfo)">
      <summary>
            Log message to RichTextBox.
            </summary>
      <param name="logEvent">The logging event.</param>
    </member>
    <member name="P:NLog.Targets.RichTextBoxTarget.DefaultRowColoringRules">
      <summary>
            Gets the default set of row coloring rules which applies when <see cref="P:NLog.Targets.RichTextBoxTarget.UseDefaultRowColoringRules" /> is set to true.
            </summary>
    </member>
    <member name="P:NLog.Targets.RichTextBoxTarget.ControlName">
      <summary>
            Gets or sets the Name of RichTextBox to which Nlog will write.
            </summary>
      <docgen category="Form Options" order="10" />
    </member>
    <member name="P:NLog.Targets.RichTextBoxTarget.FormName">
      <summary>
            Gets or sets the name of the Form on which the control is located. 
            If there is no open form of a specified name than NLog will create a new one.
            </summary>
      <docgen category="Form Options" order="10" />
    </member>
    <member name="P:NLog.Targets.RichTextBoxTarget.UseDefaultRowColoringRules">
      <summary>
            Gets or sets a value indicating whether to use default coloring rules.
            </summary>
      <docgen category="Highlighting Options" order="10" />
    </member>
    <member name="P:NLog.Targets.RichTextBoxTarget.RowColoringRules">
      <summary>
            Gets the row coloring rules.
            </summary>
      <docgen category="Highlighting Options" order="10" />
    </member>
    <member name="P:NLog.Targets.RichTextBoxTarget.WordColoringRules">
      <summary>
            Gets the word highlighting rules.
            </summary>
      <docgen category="Highlighting Options" order="10" />
    </member>
    <member name="P:NLog.Targets.RichTextBoxTarget.ToolWindow">
      <summary>
            Gets or sets a value indicating whether the created window will be a tool window.
            </summary>
      <remarks>
            This parameter is ignored when logging to existing form control.
            Tool windows have thin border, and do not show up in the task bar.
            </remarks>
      <docgen category="Form Options" order="10" />
    </member>
    <member name="P:NLog.Targets.RichTextBoxTarget.ShowMinimized">
      <summary>
            Gets or sets a value indicating whether the created form will be initially minimized.
            </summary>
      <remarks>
            This parameter is ignored when logging to existing form control.
            </remarks>
      <docgen category="Form Options" order="10" />
    </member>
    <member name="P:NLog.Targets.RichTextBoxTarget.Width">
      <summary>
            Gets or sets the initial width of the form with rich text box.
            </summary>
      <remarks>
            This parameter is ignored when logging to existing form control.
            </remarks>
      <docgen category="Form Options" order="10" />
    </member>
    <member name="P:NLog.Targets.RichTextBoxTarget.Height">
      <summary>
            Gets or sets the initial height of the form with rich text box.
            </summary>
      <remarks>
            This parameter is ignored when logging to existing form control.
            </remarks>
      <docgen category="Form Options" order="10" />
    </member>
    <member name="P:NLog.Targets.RichTextBoxTarget.AutoScroll">
      <summary>
            Gets or sets a value indicating whether scroll bar will be moved automatically to show most recent log entries.
            </summary>
      <docgen category="Form Options" order="10" />
    </member>
    <member name="P:NLog.Targets.RichTextBoxTarget.MaxLines">
      <summary>
            Gets or sets the maximum number of lines the rich text box will store (or 0 to disable this feature).
            </summary>
      <remarks>
            After exceeding the maximum number, first line will be deleted. 
            </remarks>
      <docgen category="Form Options" order="10" />
    </member>
    <member name="P:NLog.Targets.RichTextBoxTarget.TargetForm">
      <summary>
            Gets or sets the form to log to.
            </summary>
    </member>
    <member name="P:NLog.Targets.RichTextBoxTarget.TargetRichTextBox">
      <summary>
            Gets or sets the rich text box to log to.
            </summary>
    </member>
    <member name="T:NLog.Targets.RichTextBoxWordColoringRule">
      <summary>
            Highlighting rule for Win32 colorful console.
            </summary>
    </member>
    <member name="M:NLog.Targets.RichTextBoxWordColoringRule.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.RichTextBoxWordColoringRule" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.RichTextBoxWordColoringRule.#ctor(System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.RichTextBoxWordColoringRule" /> class.
            </summary>
      <param name="text">The text to be matched..</param>
      <param name="fontColor">Color of the text.</param>
      <param name="backgroundColor">Color of the background.</param>
    </member>
    <member name="M:NLog.Targets.RichTextBoxWordColoringRule.#ctor(System.String,System.String,System.String,System.Drawing.FontStyle)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.RichTextBoxWordColoringRule" /> class.
            </summary>
      <param name="text">The text to be matched..</param>
      <param name="textColor">Color of the text.</param>
      <param name="backgroundColor">Color of the background.</param>
      <param name="fontStyle">The font style.</param>
    </member>
    <member name="P:NLog.Targets.RichTextBoxWordColoringRule.Regex">
      <summary>
            Gets or sets the regular expression to be matched. You must specify either <c>text</c> or <c>regex</c>.
            </summary>
      <docgen category="Rule Matching Options" order="10" />
    </member>
    <member name="P:NLog.Targets.RichTextBoxWordColoringRule.Text">
      <summary>
            Gets or sets the text to be matched. You must specify either <c>text</c> or <c>regex</c>.
            </summary>
      <docgen category="Rule Matching Options" order="10" />
    </member>
    <member name="P:NLog.Targets.RichTextBoxWordColoringRule.WholeWords">
      <summary>
            Gets or sets a value indicating whether to match whole words only.
            </summary>
      <docgen category="Rule Matching Options" order="10" />
    </member>
    <member name="P:NLog.Targets.RichTextBoxWordColoringRule.IgnoreCase">
      <summary>
            Gets or sets a value indicating whether to ignore case when comparing texts.
            </summary>
      <docgen category="Rule Matching Options" order="10" />
    </member>
    <member name="P:NLog.Targets.RichTextBoxWordColoringRule.Style">
      <summary>
            Gets or sets the font style of matched text. 
            Possible values are the same as in <c>FontStyle</c> enum in <c>System.Drawing</c>.
            </summary>
      <docgen category="Formatting Options" order="10" />
    </member>
    <member name="P:NLog.Targets.RichTextBoxWordColoringRule.CompiledRegex">
      <summary>
            Gets the compiled regular expression that matches either Text or Regex property.
            </summary>
    </member>
    <member name="P:NLog.Targets.RichTextBoxWordColoringRule.FontColor">
      <summary>
            Gets or sets the font color.
            Names are identical with KnownColor enum extended with Empty value which means that font color won't be changed.
            </summary>
      <docgen category="Formatting Options" order="10" />
    </member>
    <member name="P:NLog.Targets.RichTextBoxWordColoringRule.BackgroundColor">
      <summary>
            Gets or sets the background color. 
            Names are identical with KnownColor enum extended with Empty value which means that background color won't be changed.
            </summary>
      <docgen category="Formatting Options" order="10" />
    </member>
    <member name="T:NLog.Targets.SmtpAuthenticationMode">
      <summary>
            SMTP authentication modes.
            </summary>
    </member>
    <member name="F:NLog.Targets.SmtpAuthenticationMode.None">
      <summary>
            No authentication.
            </summary>
    </member>
    <member name="F:NLog.Targets.SmtpAuthenticationMode.Basic">
      <summary>
            Basic - username and password.
            </summary>
    </member>
    <member name="F:NLog.Targets.SmtpAuthenticationMode.Ntlm">
      <summary>
            NTLM Authentication.
            </summary>
    </member>
    <member name="T:NLog.Targets.TargetAttribute">
      <summary>
            Marks class as a logging target and assigns a name to it.
            </summary>
    </member>
    <member name="M:NLog.Targets.TargetAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.TargetAttribute" /> class.
            </summary>
      <param name="name">Name of the target.</param>
    </member>
    <member name="P:NLog.Targets.TargetAttribute.IsWrapper">
      <summary>
            Gets or sets a value indicating whether to the target is a wrapper target (used to generate the target summary documentation page).
            </summary>
    </member>
    <member name="P:NLog.Targets.TargetAttribute.IsCompound">
      <summary>
            Gets or sets a value indicating whether to the target is a compound target (used to generate the target summary documentation page).
            </summary>
    </member>
    <member name="T:NLog.Targets.TraceTarget">
      <summary>
            Sends log messages through System.Diagnostics.Trace.
            </summary>
      <seealso href="http://nlog-project.org/wiki/Trace_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/Trace/NLog.config" />
        <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
        <p>
            To set up the log target programmatically use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/Trace/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.TraceTarget.Write(NLog.LogEventInfo)">
      <summary>
            Writes the specified logging event to the <see cref="T:System.Diagnostics.Trace" /> facility.
            If the log level is greater than or equal to <see cref="F:NLog.LogLevel.Error" /> it uses the
            <see cref="M:System.Diagnostics.Trace.Fail(System.String)" /> method, otherwise it uses
            <see cref="M:System.Diagnostics.Trace.Write(System.String)" /> method.
            </summary>
      <param name="logEvent">The logging event.</param>
    </member>
    <member name="T:NLog.Targets.WebServiceProtocol">
      <summary>
            Web service protocol.
            </summary>
    </member>
    <member name="F:NLog.Targets.WebServiceProtocol.Soap11">
      <summary>
            Use SOAP 1.1 Protocol.
            </summary>
    </member>
    <member name="F:NLog.Targets.WebServiceProtocol.Soap12">
      <summary>
            Use SOAP 1.2 Protocol.
            </summary>
    </member>
    <member name="F:NLog.Targets.WebServiceProtocol.HttpPost">
      <summary>
            Use HTTP POST Protocol.
            </summary>
    </member>
    <member name="F:NLog.Targets.WebServiceProtocol.HttpGet">
      <summary>
            Use HTTP GET Protocol.
            </summary>
    </member>
    <member name="T:NLog.Targets.WebServiceTarget">
      <summary>
            Calls the specified web service on each log message.
            </summary>
      <seealso href="http://nlog-project.org/wiki/WebService_target">Documentation on NLog Wiki</seealso>
      <remarks>
            The web service must implement a method that accepts a number of string parameters.
            </remarks>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/WebService/NLog.config" />
        <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
        <p>
            To set up the log target programmatically use code like this:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/WebService/Simple/Example.cs" />
        <p>The example web service that works with this example is shown below</p>
        <code lang="C#" source="examples/targets/Configuration API/WebService/Simple/WebService1/Service1.asmx.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.WebServiceTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.WebServiceTarget" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.WebServiceTarget.DoInvoke(System.Object[])">
      <summary>
            Calls the target method. Must be implemented in concrete classes.
            </summary>
      <param name="parameters">Method call parameters.</param>
    </member>
    <member name="M:NLog.Targets.WebServiceTarget.DoInvoke(System.Object[],NLog.Common.AsyncContinuation)">
      <summary>
            Invokes the web service method.
            </summary>
      <param name="parameters">Parameters to be passed.</param>
      <param name="continuation">The continuation.</param>
    </member>
    <member name="P:NLog.Targets.WebServiceTarget.Url">
      <summary>
            Gets or sets the web service URL.
            </summary>
      <docgen category="Web Service Options" order="10" />
    </member>
    <member name="P:NLog.Targets.WebServiceTarget.MethodName">
      <summary>
            Gets or sets the Web service method name.
            </summary>
      <docgen category="Web Service Options" order="10" />
    </member>
    <member name="P:NLog.Targets.WebServiceTarget.Namespace">
      <summary>
            Gets or sets the Web service namespace.
            </summary>
      <docgen category="Web Service Options" order="10" />
    </member>
    <member name="P:NLog.Targets.WebServiceTarget.Protocol">
      <summary>
            Gets or sets the protocol to be used when calling web service.
            </summary>
      <docgen category="Web Service Options" order="10" />
    </member>
    <member name="P:NLog.Targets.WebServiceTarget.Encoding">
      <summary>
            Gets or sets the encoding.
            </summary>
      <docgen category="Web Service Options" order="10" />
    </member>
    <member name="T:NLog.Targets.Win32FileAttributes">
      <summary>
            Win32 file attributes.
            </summary>
      <remarks>
            For more information see <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/fileio/fs/createfile.asp">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/fileio/fs/createfile.asp</a>.
            </remarks>
    </member>
    <member name="F:NLog.Targets.Win32FileAttributes.ReadOnly">
      <summary>
            Read-only file.
            </summary>
    </member>
    <member name="F:NLog.Targets.Win32FileAttributes.Hidden">
      <summary>
            Hidden file.
            </summary>
    </member>
    <member name="F:NLog.Targets.Win32FileAttributes.System">
      <summary>
            System file.
            </summary>
    </member>
    <member name="F:NLog.Targets.Win32FileAttributes.Archive">
      <summary>
            File should be archived.
            </summary>
    </member>
    <member name="F:NLog.Targets.Win32FileAttributes.Device">
      <summary>
            Device file.
            </summary>
    </member>
    <member name="F:NLog.Targets.Win32FileAttributes.Normal">
      <summary>
            Normal file.
            </summary>
    </member>
    <member name="F:NLog.Targets.Win32FileAttributes.Temporary">
      <summary>
            File is temporary (should be kept in cache and not 
            written to disk if possible).
            </summary>
    </member>
    <member name="F:NLog.Targets.Win32FileAttributes.SparseFile">
      <summary>
            Sparse file.
            </summary>
    </member>
    <member name="F:NLog.Targets.Win32FileAttributes.ReparsePoint">
      <summary>
            Reparse point.
            </summary>
    </member>
    <member name="F:NLog.Targets.Win32FileAttributes.Compressed">
      <summary>
            Compress file contents.
            </summary>
    </member>
    <member name="F:NLog.Targets.Win32FileAttributes.NotContentIndexed">
      <summary>
            File should not be indexed by the content indexing service. 
            </summary>
    </member>
    <member name="F:NLog.Targets.Win32FileAttributes.Encrypted">
      <summary>
            Encrypted file.
            </summary>
    </member>
    <member name="F:NLog.Targets.Win32FileAttributes.WriteThrough">
      <summary>
            The system writes through any intermediate cache and goes directly to disk. 
            </summary>
    </member>
    <member name="F:NLog.Targets.Win32FileAttributes.NoBuffering">
      <summary>
            The system opens a file with no system caching.
            </summary>
    </member>
    <member name="F:NLog.Targets.Win32FileAttributes.DeleteOnClose">
      <summary>
            Delete file after it is closed.
            </summary>
    </member>
    <member name="F:NLog.Targets.Win32FileAttributes.PosixSemantics">
      <summary>
            A file is accessed according to POSIX rules.
            </summary>
    </member>
    <member name="T:NLog.Targets.Wrappers.AsyncRequestQueue">
      <summary>
            Asynchronous request queue.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.AsyncRequestQueue.#ctor(System.Int32,NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction)">
      <summary>
            Initializes a new instance of the AsyncRequestQueue class.
            </summary>
      <param name="requestLimit">Request limit.</param>
      <param name="overflowAction">The overflow action.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.AsyncRequestQueue.Enqueue(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Enqueues another item. If the queue is overflown the appropriate
            action is taken as specified by <see cref="P:NLog.Targets.Wrappers.AsyncRequestQueue.OnOverflow" />.
            </summary>
      <param name="logEventInfo">The log event info.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.AsyncRequestQueue.DequeueBatch(System.Int32)">
      <summary>
            Dequeues a maximum of <c>count</c> items from the queue
            and adds returns the list containing them.
            </summary>
      <param name="count">Maximum number of items to be dequeued.</param>
      <returns>The array of log events.</returns>
    </member>
    <member name="M:NLog.Targets.Wrappers.AsyncRequestQueue.Clear">
      <summary>
            Clears the queue.
            </summary>
    </member>
    <member name="P:NLog.Targets.Wrappers.AsyncRequestQueue.RequestLimit">
      <summary>
            Gets or sets the request limit.
            </summary>
    </member>
    <member name="P:NLog.Targets.Wrappers.AsyncRequestQueue.OnOverflow">
      <summary>
            Gets or sets the action to be taken when there's no more room in
            the queue and another request is enqueued.
            </summary>
    </member>
    <member name="P:NLog.Targets.Wrappers.AsyncRequestQueue.RequestCount">
      <summary>
            Gets the number of requests currently in the queue.
            </summary>
    </member>
    <member name="T:NLog.Targets.Wrappers.WrapperTargetBase">
      <summary>
            Base class for targets wrap other (single) targets.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.WrapperTargetBase.ToString">
      <summary>
            Returns the text representation of the object. Used for diagnostics.
            </summary>
      <returns>A string that describes the target.</returns>
    </member>
    <member name="M:NLog.Targets.Wrappers.WrapperTargetBase.FlushAsync(NLog.Common.AsyncContinuation)">
      <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.WrapperTargetBase.Write(NLog.LogEventInfo)">
      <summary>
            Writes logging event to the log target. Must be overridden in inheriting
            classes.
            </summary>
      <param name="logEvent">Logging event to be written out.</param>
    </member>
    <member name="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget">
      <summary>
            Gets or sets the target that is wrapped by this target.
            </summary>
      <docgen category="General Options" order="11" />
    </member>
    <member name="T:NLog.Targets.Wrappers.AsyncTargetWrapper">
      <summary>
            Provides asynchronous, buffered execution of target writes.
            </summary>
      <seealso href="http://nlog-project.org/wiki/AsyncWrapper_target">Documentation on NLog Wiki</seealso>
      <remarks>
        <p>
            Asynchronous target wrapper allows the logger code to execute more quickly, by queueing
            messages and processing them in a separate thread. You should wrap targets
            that spend a non-trivial amount of time in their Write() method with asynchronous
            target to speed up logging.
            </p>
        <p>
            Because asynchronous logging is quite a common scenario, NLog supports a
            shorthand notation for wrapping all targets with AsyncWrapper. Just add async="true" to
            the &lt;targets/&gt; element in the configuration file.
            </p>
        <code lang="XML"><![CDATA[
            <targets async="true">
               ... your targets go here ...
            </targets>
            ]]></code>
      </remarks>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/AsyncWrapper/NLog.config" />
        <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/AsyncWrapper/Wrapping File/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AsyncTargetWrapper" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.#ctor(NLog.Targets.Target)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AsyncTargetWrapper" /> class.
            </summary>
      <param name="wrappedTarget">The wrapped target.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.#ctor(NLog.Targets.Target,System.Int32,NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AsyncTargetWrapper" /> class.
            </summary>
      <param name="wrappedTarget">The wrapped target.</param>
      <param name="queueLimit">Maximum number of requests in the queue.</param>
      <param name="overflowAction">The action to be taken when the queue overflows.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.FlushAsync(NLog.Common.AsyncContinuation)">
      <summary>
            Waits for the lazy writer thread to finish writing messages.
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.InitializeTarget">
      <summary>
            Initializes the target by starting the lazy writer timer.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.CloseTarget">
      <summary>
            Shuts down the lazy writer timer.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.StartLazyWriterTimer">
      <summary>
            Starts the lazy writer thread which periodically writes
            queued log messages.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.StopLazyWriterThread">
      <summary>
            Starts the lazy writer thread.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Adds the log event to asynchronous queue to be processed by
            the lazy writer thread.
            </summary>
      <param name="logEvent">The log event.</param>
      <remarks>
            The <see cref="M:NLog.Targets.Target.PrecalculateVolatileLayouts(NLog.LogEventInfo)" /> is called
            to ensure that the log event can be processed in another thread.
            </remarks>
    </member>
    <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.BatchSize">
      <summary>
            Gets or sets the number of log events that should be processed in a batch
            by the lazy writer thread.
            </summary>
      <docgen category="Buffering Options" order="100" />
    </member>
    <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.TimeToSleepBetweenBatches">
      <summary>
            Gets or sets the time in milliseconds to sleep between batches.
            </summary>
      <docgen category="Buffering Options" order="100" />
    </member>
    <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.OverflowAction">
      <summary>
            Gets or sets the action to be taken when the lazy writer thread request queue count
            exceeds the set limit.
            </summary>
      <docgen category="Buffering Options" order="100" />
    </member>
    <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.QueueLimit">
      <summary>
            Gets or sets the limit on the number of requests in the lazy writer thread request queue.
            </summary>
      <docgen category="Buffering Options" order="100" />
    </member>
    <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.RequestQueue">
      <summary>
            Gets the queue of lazy writer thread requests.
            </summary>
    </member>
    <member name="T:NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction">
      <summary>
            The action to be taken when the queue overflows.
            </summary>
    </member>
    <member name="F:NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction.Grow">
      <summary>
            Grow the queue.
            </summary>
    </member>
    <member name="F:NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction.Discard">
      <summary>
            Discard the overflowing item.
            </summary>
    </member>
    <member name="F:NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction.Block">
      <summary>
            Block until there's more room in the queue.
            </summary>
    </member>
    <member name="T:NLog.Targets.Wrappers.AutoFlushTargetWrapper">
      <summary>
            Causes a flush after each write on a wrapped target.
            </summary>
      <seealso href="http://nlog-project.org/wiki/AutoFlushWrapper_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/AutoFlushWrapper/NLog.config" />
        <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/AutoFlushWrapper/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.Wrappers.AutoFlushTargetWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AutoFlushTargetWrapper" /> class.
            </summary>
      <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
    </member>
    <member name="M:NLog.Targets.Wrappers.AutoFlushTargetWrapper.#ctor(NLog.Targets.Target)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AutoFlushTargetWrapper" /> class.
            </summary>
      <param name="wrappedTarget">The wrapped target.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.AutoFlushTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Forwards the call to the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget" />.Write()
            and calls <see cref="M:NLog.Targets.Target.Flush(NLog.Common.AsyncContinuation)" /> on it.
            </summary>
      <param name="logEvent">Logging event to be written out.</param>
    </member>
    <member name="T:NLog.Targets.Wrappers.BufferingTargetWrapper">
      <summary>
            A target that buffers log events and sends them in batches to the wrapped target.
            </summary>
      <seealso href="http://nlog-project.org/wiki/BufferingWrapper_target">Documentation on NLog Wiki</seealso>
    </member>
    <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.BufferingTargetWrapper" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.#ctor(NLog.Targets.Target)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.BufferingTargetWrapper" /> class.
            </summary>
      <param name="wrappedTarget">The wrapped target.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.#ctor(NLog.Targets.Target,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.BufferingTargetWrapper" /> class.
            </summary>
      <param name="wrappedTarget">The wrapped target.</param>
      <param name="bufferSize">Size of the buffer.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.#ctor(NLog.Targets.Target,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.BufferingTargetWrapper" /> class.
            </summary>
      <param name="wrappedTarget">The wrapped target.</param>
      <param name="bufferSize">Size of the buffer.</param>
      <param name="flushTimeout">The flush timeout.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.FlushAsync(NLog.Common.AsyncContinuation)">
      <summary>
            Flushes pending events in the buffer (if any).
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.InitializeTarget">
      <summary>
            Initializes the target.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.CloseTarget">
      <summary>
            Closes the target by flushing pending events in the buffer (if any).
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Adds the specified log event to the buffer and flushes
            the buffer in case the buffer gets full.
            </summary>
      <param name="logEvent">The log event.</param>
    </member>
    <member name="P:NLog.Targets.Wrappers.BufferingTargetWrapper.BufferSize">
      <summary>
            Gets or sets the number of log events to be buffered.
            </summary>
      <docgen category="Buffering Options" order="100" />
    </member>
    <member name="P:NLog.Targets.Wrappers.BufferingTargetWrapper.FlushTimeout">
      <summary>
            Gets or sets the timeout (in milliseconds) after which the contents of buffer will be flushed 
            if there's no write in the specified period of time. Use -1 to disable timed flushes.
            </summary>
      <docgen category="Buffering Options" order="100" />
    </member>
    <member name="P:NLog.Targets.Wrappers.BufferingTargetWrapper.SlidingTimeout">
      <summary>
            Gets or sets a value indicating whether to use sliding timeout.
            </summary>
      <remarks>
            This value determines how the inactivity period is determined. If sliding timeout is enabled,
            the inactivity timer is reset after each write, if it is disabled - inactivity timer will 
            count from the first event written to the buffer. 
            </remarks>
      <docgen category="Buffering Options" order="100" />
    </member>
    <member name="T:NLog.Targets.Wrappers.CompoundTargetBase">
      <summary>
            A base class for targets which wrap other (multiple) targets
            and provide various forms of target routing.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.CompoundTargetBase.#ctor(NLog.Targets.Target[])">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.CompoundTargetBase" /> class.
            </summary>
      <param name="targets">The targets.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.CompoundTargetBase.ToString">
      <summary>
            Returns the text representation of the object. Used for diagnostics.
            </summary>
      <returns>A string that describes the target.</returns>
    </member>
    <member name="M:NLog.Targets.Wrappers.CompoundTargetBase.Write(NLog.LogEventInfo)">
      <summary>
            Writes logging event to the log target.
            </summary>
      <param name="logEvent">Logging event to be written out.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.CompoundTargetBase.FlushAsync(NLog.Common.AsyncContinuation)">
      <summary>
            Flush any pending log messages for all wrapped targets.
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
    </member>
    <member name="P:NLog.Targets.Wrappers.CompoundTargetBase.Targets">
      <summary>
            Gets the collection of targets managed by this compound target.
            </summary>
    </member>
    <member name="T:NLog.Targets.Wrappers.FallbackGroupTarget">
      <summary>
            Provides fallback-on-error.
            </summary>
      <seealso href="http://nlog-project.org/wiki/FallbackGroup_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>This example causes the messages to be written to server1, 
            and if it fails, messages go to server2.</p>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/FallbackGroup/NLog.config" />
        <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/FallbackGroup/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.Wrappers.FallbackGroupTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.FallbackGroupTarget" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.FallbackGroupTarget.#ctor(NLog.Targets.Target[])">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.FallbackGroupTarget" /> class.
            </summary>
      <param name="targets">The targets.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.FallbackGroupTarget.Write(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Forwards the log event to the sub-targets until one of them succeeds.
            </summary>
      <param name="logEvent">The log event.</param>
      <remarks>
            The method remembers the last-known-successful target
            and starts the iteration from it.
            If <see cref="P:NLog.Targets.Wrappers.FallbackGroupTarget.ReturnToFirstOnSuccess" /> is set, the method
            resets the target to the first target
            stored in <see cref="N:NLog.Targets" />.
            </remarks>
    </member>
    <member name="P:NLog.Targets.Wrappers.FallbackGroupTarget.ReturnToFirstOnSuccess">
      <summary>
            Gets or sets a value indicating whether to return to the first target after any successful write.
            </summary>
      <docgen category="Fallback Options" order="10" />
    </member>
    <member name="T:NLog.Targets.Wrappers.FilteringRule">
      <summary>
            Filtering rule for <see cref="T:NLog.Targets.Wrappers.PostFilteringTargetWrapper" />.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.FilteringRule.#ctor">
      <summary>
            Initializes a new instance of the FilteringRule class.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.FilteringRule.#ctor(NLog.Conditions.ConditionExpression,NLog.Conditions.ConditionExpression)">
      <summary>
            Initializes a new instance of the FilteringRule class.
            </summary>
      <param name="whenExistsExpression">Condition to be tested against all events.</param>
      <param name="filterToApply">Filter to apply to all log events when the first condition matches any of them.</param>
    </member>
    <member name="P:NLog.Targets.Wrappers.FilteringRule.Exists">
      <summary>
            Gets or sets the condition to be tested.
            </summary>
      <docgen category="Filtering Options" order="10" />
    </member>
    <member name="P:NLog.Targets.Wrappers.FilteringRule.Filter">
      <summary>
            Gets or sets the resulting filter to be applied when the condition matches.
            </summary>
      <docgen category="Filtering Options" order="10" />
    </member>
    <member name="T:NLog.Targets.Wrappers.FilteringTargetWrapper">
      <summary>
            Filters log entries based on a condition.
            </summary>
      <seealso href="http://nlog-project.org/wiki/FilteringWrapper_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>This example causes the messages not contains the string '1' to be ignored.</p>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/FilteringWrapper/NLog.config" />
        <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/FilteringWrapper/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.Wrappers.FilteringTargetWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.FilteringTargetWrapper" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.FilteringTargetWrapper.#ctor(NLog.Targets.Target,NLog.Conditions.ConditionExpression)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.FilteringTargetWrapper" /> class.
            </summary>
      <param name="wrappedTarget">The wrapped target.</param>
      <param name="condition">The condition.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.FilteringTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Checks the condition against the passed log event.
            If the condition is met, the log event is forwarded to
            the wrapped target.
            </summary>
      <param name="logEvent">Log event.</param>
    </member>
    <member name="P:NLog.Targets.Wrappers.FilteringTargetWrapper.Condition">
      <summary>
            Gets or sets the condition expression. Log events who meet this condition will be forwarded 
            to the wrapped target.
            </summary>
      <docgen category="Filtering Options" order="10" />
    </member>
    <member name="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper">
      <summary>
            Impersonates another user for the duration of the write.
            </summary>
      <seealso href="http://nlog-project.org/wiki/ImpersonatingWrapper_target">Documentation on NLog Wiki</seealso>
    </member>
    <member name="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.ContextReverter">
      <summary>
            Helper class which reverts the given <see cref="T:System.Security.Principal.WindowsImpersonationContext" /> 
            to its original value as part of <see cref="M:System.IDisposable.Dispose" />.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.ContextReverter.#ctor(System.Security.Principal.WindowsImpersonationContext)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.ContextReverter" /> class.
            </summary>
      <param name="windowsImpersonationContext">The windows impersonation context.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.ContextReverter.Dispose">
      <summary>
            Reverts the impersonation context.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.#ctor(NLog.Targets.Target)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper" /> class.
            </summary>
      <param name="wrappedTarget">The wrapped target.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.InitializeTarget">
      <summary>
            Initializes the impersonation context.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.CloseTarget">
      <summary>
            Closes the impersonation context.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Changes the security context, forwards the call to the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget" />.Write()
            and switches the context back to original.
            </summary>
      <param name="logEvent">The log event.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo[])">
      <summary>
            Changes the security context, forwards the call to the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget" />.Write()
            and switches the context back to original.
            </summary>
      <param name="logEvents">Log events.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.FlushAsync(NLog.Common.AsyncContinuation)">
      <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
      <param name="asyncContinuation">The asynchronous continuation.</param>
    </member>
    <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.UserName">
      <summary>
            Gets or sets username to change context to.
            </summary>
      <docgen category="Impersonation Options" order="10" />
    </member>
    <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.Password">
      <summary>
            Gets or sets the user account password.
            </summary>
      <docgen category="Impersonation Options" order="10" />
    </member>
    <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.Domain">
      <summary>
            Gets or sets Windows domain name to change context to.
            </summary>
      <docgen category="Impersonation Options" order="10" />
    </member>
    <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.LogOnType">
      <summary>
            Gets or sets the Logon Type.
            </summary>
      <docgen category="Impersonation Options" order="10" />
    </member>
    <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.LogOnProvider">
      <summary>
            Gets or sets the type of the logon provider.
            </summary>
      <docgen category="Impersonation Options" order="10" />
    </member>
    <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.ImpersonationLevel">
      <summary>
            Gets or sets the required impersonation level.
            </summary>
      <docgen category="Impersonation Options" order="10" />
    </member>
    <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.RevertToSelf">
      <summary>
            Gets or sets a value indicating whether to revert to the credentials of the process instead of impersonating another user.
            </summary>
      <docgen category="Impersonation Options" order="10" />
    </member>
    <member name="T:NLog.Targets.Wrappers.LogOnProviderType">
      <summary>
            Logon provider.
            </summary>
    </member>
    <member name="F:NLog.Targets.Wrappers.LogOnProviderType.Default">
      <summary>
            Use the standard logon provider for the system.
            </summary>
      <remarks>
            The default security provider is negotiate, unless you pass NULL for the domain name and the user name
            is not in UPN format. In this case, the default provider is NTLM.
            NOTE: Windows 2000/NT:   The default security provider is NTLM.
            </remarks>
    </member>
    <member name="T:NLog.Targets.Wrappers.PostFilteringTargetWrapper">
      <summary>
            Filters buffered log entries based on a set of conditions that are evaluated on a group of events.
            </summary>
      <seealso href="http://nlog-project.org/wiki/PostFilteringWrapper_target">Documentation on NLog Wiki</seealso>
      <remarks>
            PostFilteringWrapper must be used with some type of buffering target or wrapper, such as
            AsyncTargetWrapper, BufferingWrapper or ASPNetBufferingWrapper.
            </remarks>
      <example>
        <p>
            This example works like this. If there are no Warn,Error or Fatal messages in the buffer
            only Info messages are written to the file, but if there are any warnings or errors, 
            the output includes detailed trace (levels &gt;= Debug). You can plug in a different type
            of buffering wrapper (such as ASPNetBufferingWrapper) to achieve different
            functionality.
            </p>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/PostFilteringWrapper/NLog.config" />
        <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/PostFilteringWrapper/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.Wrappers.PostFilteringTargetWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.PostFilteringTargetWrapper" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.PostFilteringTargetWrapper.Write(NLog.Common.AsyncLogEventInfo[])">
      <summary>
            Evaluates all filtering rules to find the first one that matches.
            The matching rule determines the filtering condition to be applied
            to all items in a buffer. If no condition matches, default filter
            is applied to the array of log events.
            </summary>
      <param name="logEvents">Array of log events to be post-filtered.</param>
    </member>
    <member name="P:NLog.Targets.Wrappers.PostFilteringTargetWrapper.DefaultFilter">
      <summary>
            Gets or sets the default filter to be applied when no specific rule matches.
            </summary>
      <docgen category="Filtering Options" order="10" />
    </member>
    <member name="P:NLog.Targets.Wrappers.PostFilteringTargetWrapper.Rules">
      <summary>
            Gets the collection of filtering rules. The rules are processed top-down
            and the first rule that matches determines the filtering condition to
            be applied to log events.
            </summary>
      <docgen category="Filtering Rules" order="10" />
    </member>
    <member name="T:NLog.Targets.Wrappers.RandomizeGroupTarget">
      <summary>
            Sends log messages to a randomly selected target.
            </summary>
      <seealso href="http://nlog-project.org/wiki/RandomizeGroup_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>This example causes the messages to be written to either file1.txt or file2.txt 
            chosen randomly on a per-message basis.
            </p>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/RandomizeGroup/NLog.config" />
        <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/RandomizeGroup/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.Wrappers.RandomizeGroupTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RandomizeGroupTarget" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.RandomizeGroupTarget.#ctor(NLog.Targets.Target[])">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RandomizeGroupTarget" /> class.
            </summary>
      <param name="targets">The targets.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.RandomizeGroupTarget.Write(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Forwards the log event to one of the sub-targets.
            The sub-target is randomly chosen.
            </summary>
      <param name="logEvent">The log event.</param>
    </member>
    <member name="T:NLog.Targets.Wrappers.RepeatingTargetWrapper">
      <summary>
            Repeats each log event the specified number of times.
            </summary>
      <seealso href="http://nlog-project.org/wiki/RepeatingWrapper_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>This example causes each log message to be repeated 3 times.</p>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/RepeatingWrapper/NLog.config" />
        <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/RepeatingWrapper/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.Wrappers.RepeatingTargetWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RepeatingTargetWrapper" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.RepeatingTargetWrapper.#ctor(NLog.Targets.Target,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RepeatingTargetWrapper" /> class.
            </summary>
      <param name="wrappedTarget">The wrapped target.</param>
      <param name="repeatCount">The repeat count.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.RepeatingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Forwards the log message to the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget" /> by calling the <see cref="M:NLog.Targets.Target.Write(NLog.LogEventInfo)" /> method <see cref="P:NLog.Targets.Wrappers.RepeatingTargetWrapper.RepeatCount" /> times.
            </summary>
      <param name="logEvent">The log event.</param>
    </member>
    <member name="P:NLog.Targets.Wrappers.RepeatingTargetWrapper.RepeatCount">
      <summary>
            Gets or sets the number of times to repeat each log message.
            </summary>
      <docgen category="Repeating Options" order="10" />
    </member>
    <member name="T:NLog.Targets.Wrappers.RetryingTargetWrapper">
      <summary>
            Retries in case of write error.
            </summary>
      <seealso href="http://nlog-project.org/wiki/RetryingWrapper_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>This example causes each write attempt to be repeated 3 times, 
            sleeping 1 second between attempts if first one fails.</p>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/RetryingWrapper/NLog.config" />
        <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/RetryingWrapper/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.Wrappers.RetryingTargetWrapper.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RetryingTargetWrapper" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.RetryingTargetWrapper.#ctor(NLog.Targets.Target,System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RetryingTargetWrapper" /> class.
            </summary>
      <param name="wrappedTarget">The wrapped target.</param>
      <param name="retryCount">The retry count.</param>
      <param name="retryDelayMilliseconds">The retry delay milliseconds.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.RetryingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Writes the specified log event to the wrapped target, retrying and pausing in case of an error.
            </summary>
      <param name="logEvent">The log event.</param>
    </member>
    <member name="P:NLog.Targets.Wrappers.RetryingTargetWrapper.RetryCount">
      <summary>
            Gets or sets the number of retries that should be attempted on the wrapped target in case of a failure.
            </summary>
      <docgen category="Retrying Options" order="10" />
    </member>
    <member name="P:NLog.Targets.Wrappers.RetryingTargetWrapper.RetryDelayMilliseconds">
      <summary>
            Gets or sets the time to wait between retries in milliseconds.
            </summary>
      <docgen category="Retrying Options" order="10" />
    </member>
    <member name="T:NLog.Targets.Wrappers.RoundRobinGroupTarget">
      <summary>
            Distributes log events to targets in a round-robin fashion.
            </summary>
      <seealso href="http://nlog-project.org/wiki/RoundRobinGroup_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>This example causes the messages to be written to either file1.txt or file2.txt.
            Each odd message is written to file2.txt, each even message goes to file1.txt.
            </p>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/RoundRobinGroup/NLog.config" />
        <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/RoundRobinGroup/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.Wrappers.RoundRobinGroupTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RoundRobinGroupTarget" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.RoundRobinGroupTarget.#ctor(NLog.Targets.Target[])">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RoundRobinGroupTarget" /> class.
            </summary>
      <param name="targets">The targets.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.RoundRobinGroupTarget.Write(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Forwards the write to one of the targets from
            the <see cref="N:NLog.Targets" /> collection.
            </summary>
      <param name="logEvent">The log event.</param>
      <remarks>
            The writes are routed in a round-robin fashion.
            The first log event goes to the first target, the second
            one goes to the second target and so on looping to the
            first target when there are no more targets available.
            In general request N goes to Targets[N % Targets.Count].
            </remarks>
    </member>
    <member name="T:NLog.Targets.Wrappers.SecurityImpersonationLevel">
      <summary>
            Impersonation level.
            </summary>
    </member>
    <member name="F:NLog.Targets.Wrappers.SecurityImpersonationLevel.Anonymous">
      <summary>
            Anonymous Level.
            </summary>
    </member>
    <member name="F:NLog.Targets.Wrappers.SecurityImpersonationLevel.Identification">
      <summary>
            Identification Level.
            </summary>
    </member>
    <member name="F:NLog.Targets.Wrappers.SecurityImpersonationLevel.Impersonation">
      <summary>
            Impersonation Level.
            </summary>
    </member>
    <member name="F:NLog.Targets.Wrappers.SecurityImpersonationLevel.Delegation">
      <summary>
            Delegation Level.
            </summary>
    </member>
    <member name="T:NLog.Targets.Wrappers.SecurityLogOnType">
      <summary>
            Logon type.
            </summary>
    </member>
    <member name="F:NLog.Targets.Wrappers.SecurityLogOnType.Interactive">
      <summary>
            Interactive Logon.
            </summary>
      <remarks>
            This logon type is intended for users who will be interactively using the computer, such as a user being logged on  
            by a terminal server, remote shell, or similar process.
            This logon type has the additional expense of caching logon information for disconnected operations;
            therefore, it is inappropriate for some client/server applications,
            such as a mail server.
            </remarks>
    </member>
    <member name="F:NLog.Targets.Wrappers.SecurityLogOnType.Network">
      <summary>
            Network Logon.
            </summary>
      <remarks>
            This logon type is intended for high performance servers to authenticate plaintext passwords.
            The LogonUser function does not cache credentials for this logon type.
            </remarks>
    </member>
    <member name="F:NLog.Targets.Wrappers.SecurityLogOnType.Batch">
      <summary>
            Batch Logon.
            </summary>
      <remarks>
            This logon type is intended for batch servers, where processes may be executing on behalf of a user without
            their direct intervention. This type is also for higher performance servers that process many plaintext
            authentication attempts at a time, such as mail or Web servers.
            The LogonUser function does not cache credentials for this logon type.
            </remarks>
    </member>
    <member name="F:NLog.Targets.Wrappers.SecurityLogOnType.Service">
      <summary>
            Logon as a Service.
            </summary>
      <remarks>
            Indicates a service-type logon. The account provided must have the service privilege enabled.
            </remarks>
    </member>
    <member name="F:NLog.Targets.Wrappers.SecurityLogOnType.NetworkClearText">
      <summary>
            Network Clear Text Logon.
            </summary>
      <remarks>
            This logon type preserves the name and password in the authentication package, which allows the server to make
            connections to other network servers while impersonating the client. A server can accept plaintext credentials
            from a client, call LogonUser, verify that the user can access the system across the network, and still
            communicate with other servers.
            NOTE: Windows NT:  This value is not supported.
            </remarks>
    </member>
    <member name="F:NLog.Targets.Wrappers.SecurityLogOnType.NewCredentials">
      <summary>
            New Network Credentials.
            </summary>
      <remarks>
            This logon type allows the caller to clone its current token and specify new credentials for outbound connections.
            The new logon session has the same local identifier but uses different credentials for other network connections.
            NOTE: This logon type is supported only by the LOGON32_PROVIDER_WINNT50 logon provider.
            NOTE: Windows NT:  This value is not supported.
            </remarks>
    </member>
    <member name="T:NLog.Targets.Wrappers.SplitGroupTarget">
      <summary>
            Writes log events to all targets.
            </summary>
      <seealso href="http://nlog-project.org/wiki/SplitGroup_target">Documentation on NLog Wiki</seealso>
      <example>
        <p>This example causes the messages to be written to both file1.txt or file2.txt 
            </p>
        <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
        <code lang="XML" source="examples/targets/Configuration File/SplitGroup/NLog.config" />
        <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
        <code lang="C#" source="examples/targets/Configuration API/SplitGroup/Simple/Example.cs" />
      </example>
    </member>
    <member name="M:NLog.Targets.Wrappers.SplitGroupTarget.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.SplitGroupTarget" /> class.
            </summary>
    </member>
    <member name="M:NLog.Targets.Wrappers.SplitGroupTarget.#ctor(NLog.Targets.Target[])">
      <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.SplitGroupTarget" /> class.
            </summary>
      <param name="targets">The targets.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.SplitGroupTarget.Write(NLog.Common.AsyncLogEventInfo)">
      <summary>
            Forwards the specified log event to all sub-targets.
            </summary>
      <param name="logEvent">The log event.</param>
    </member>
    <member name="M:NLog.Targets.Wrappers.SplitGroupTarget.Write(NLog.Common.AsyncLogEventInfo[])">
      <summary>
            Writes an array of logging events to the log target. By default it iterates on all
            events and passes them to "Write" method. Inheriting classes can use this method to
            optimize batch writes.
            </summary>
      <param name="logEvents">Logging events to be written out.</param>
    </member>
    <member name="T:Raven.Abstractions.Commands.ICommandData">
      <summary>
            A single operation inside a batch
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Commands.ICommandData.ToJson">
      <summary>
            Translate this instance to a Json object.
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Commands.ICommandData.Key">
      <summary>
            Gets the key.
            </summary>
      <value>The key.</value>
    </member>
    <member name="P:Raven.Abstractions.Commands.ICommandData.Method">
      <summary>
            Gets the method.
            </summary>
      <value>The method.</value>
    </member>
    <member name="P:Raven.Abstractions.Commands.ICommandData.Etag">
      <summary>
            Gets the etag.
            </summary>
      <value>The etag.</value>
    </member>
    <member name="P:Raven.Abstractions.Commands.ICommandData.TransactionInformation">
      <summary>
            Gets the transaction information.
            </summary>
      <value>The transaction information.</value>
    </member>
    <member name="P:Raven.Abstractions.Commands.ICommandData.Metadata">
      <summary>
            Gets the metadata.
            </summary>
      <value>The metadata.</value>
    </member>
    <member name="T:Raven.Abstractions.Commands.DeleteCommandData">
      <summary>
            A single batch operation for a document DELETE
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Commands.DeleteCommandData.ToJson">
      <summary>
            Translate this instance to a Json object.
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Commands.DeleteCommandData.Key">
      <summary>
            Gets or sets the key.
            </summary>
      <value>The key.</value>
    </member>
    <member name="P:Raven.Abstractions.Commands.DeleteCommandData.Method">
      <summary>
            Gets the method.
            </summary>
      <value>The method.</value>
    </member>
    <member name="P:Raven.Abstractions.Commands.DeleteCommandData.Etag">
      <summary>
            Gets or sets the etag.
            </summary>
      <value>The etag.</value>
    </member>
    <member name="P:Raven.Abstractions.Commands.DeleteCommandData.TransactionInformation">
      <summary>
            Gets or sets the transaction information.
            </summary>
      <value>The transaction information.</value>
    </member>
    <member name="P:Raven.Abstractions.Commands.DeleteCommandData.Metadata">
      <summary>
            Gets or sets the metadata.
            </summary>
      <value>The metadata.</value>
    </member>
    <member name="T:Raven.Abstractions.Commands.PatchCommandData">
      <summary>
             A single batch operation for a document PATCH
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Commands.PatchCommandData.ToJson">
      <summary>
            Translate this instance to a Json object.
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Commands.PatchCommandData.Patches">
      <summary>
            Gets or sets the patches applied to this document
            </summary>
      <value>The patches.</value>
    </member>
    <member name="P:Raven.Abstractions.Commands.PatchCommandData.Key">
      <summary>
            Gets the key.
            </summary>
      <value>The key.</value>
    </member>
    <member name="P:Raven.Abstractions.Commands.PatchCommandData.Method">
      <summary>
            Gets the method.
            </summary>
      <value>The method.</value>
    </member>
    <member name="P:Raven.Abstractions.Commands.PatchCommandData.Etag">
      <summary>
            Gets or sets the etag.
            </summary>
      <value>The etag.</value>
    </member>
    <member name="P:Raven.Abstractions.Commands.PatchCommandData.TransactionInformation">
      <summary>
            Gets the transaction information.
            </summary>
      <value>The transaction information.</value>
    </member>
    <member name="P:Raven.Abstractions.Commands.PatchCommandData.Metadata">
      <summary>
            Gets or sets the metadata.
            </summary>
      <value>The metadata.</value>
    </member>
    <member name="T:Raven.Abstractions.Commands.PutCommandData">
      <summary>
            A single batch operation for a document PUT
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Commands.PutCommandData.ToJson">
      <summary>
            Translate this instance to a Json object.
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Commands.PutCommandData.Key">
      <summary>
            Gets or sets the key.
            </summary>
      <value>The key.</value>
    </member>
    <member name="P:Raven.Abstractions.Commands.PutCommandData.Method">
      <summary>
            Gets the method.
            </summary>
      <value>The method.</value>
    </member>
    <member name="P:Raven.Abstractions.Commands.PutCommandData.Etag">
      <summary>
            Gets or sets the etag.
            </summary>
      <value>The etag.</value>
    </member>
    <member name="P:Raven.Abstractions.Commands.PutCommandData.Document">
      <summary>
            Gets or sets the document.
            </summary>
      <value>The document.</value>
    </member>
    <member name="P:Raven.Abstractions.Commands.PutCommandData.TransactionInformation">
      <summary>
            Gets the transaction information.
            </summary>
      <value>The transaction information.</value>
    </member>
    <member name="P:Raven.Abstractions.Commands.PutCommandData.Metadata">
      <summary>
            Gets or sets the metadata.
            </summary>
      <value>The metadata.</value>
    </member>
    <member name="T:Raven.Abstractions.Connection.WebResponseExtensions">
      <summary>
            Extensions for web requests
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Connection.WebResponseExtensions.GetResponseStreamWithHttpDecompression(System.Net.WebResponse)">
      <summary>
            Gets the response stream with HTTP decompression.
            </summary>
      <param name="response">The response.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Raven.Abstractions.Data.Attachment">
      <summary>
            Attachment data and metadata
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Data.Attachment.Data">
      <summary>
            Gets or sets the data.
            </summary>
      <value>The data.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.Attachment.Size">
      <summary>
            The size of the attachment
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Data.Attachment.Metadata">
      <summary>
            Gets or sets the metadata.
            </summary>
      <value>The metadata.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.Attachment.Etag">
      <summary>
            Gets or sets the etag.
            </summary>
      <value>The etag.</value>
    </member>
    <member name="T:Raven.Abstractions.Data.BatchResult">
      <summary>
            The result of a single operation inside a batch
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Data.BatchResult.Etag">
      <summary>
            Gets or sets the etag generated by the etag (if applicable)
            </summary>
      <value>The etag.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.BatchResult.Method">
      <summary>
            Gets or sets the method used for the operation (PUT,DELETE,PATCH).
            </summary>
      <value>The method.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.BatchResult.Key">
      <summary>
            Gets or sets the key of the document
            </summary>
      <value>The key.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.BatchResult.Metadata">
      <summary>
            Gets or sets the updated metadata.
            </summary>
      <value>The metadata.</value>
    </member>
    <member name="M:Raven.Abstractions.Data.ConnectionStringParser`1.ProcessConnectionStringOption(System.Net.NetworkCredential,System.String,System.String)">
      <summary>
            Parse the connection string option
            </summary>
    </member>
    <member name="T:Raven.Abstractions.Data.IJsonDocumentMetadata">
      <summary>
            Interface that is used purely internally
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Data.IJsonDocumentMetadata.Metadata">
      <summary>
            	Gets or sets the metadata for the document
            </summary>
      <value>The metadata.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.IJsonDocumentMetadata.Key">
      <summary>
            	Gets or sets the key for the document
            </summary>
      <value>The key.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.IJsonDocumentMetadata.NonAuthoritativeInformation">
      <summary>
            	Gets or sets a value indicating whether this document is non authoritative (modified by uncommitted transaction).
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Data.IJsonDocumentMetadata.Etag">
      <summary>
            Gets or sets the etag.
            </summary>
      <value>The etag.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.IJsonDocumentMetadata.LastModified">
      <summary>
            	Gets or sets the last modified date for the document
            </summary>
      <value>The last modified.</value>
    </member>
    <member name="T:Raven.Abstractions.Data.JsonDocument">
      <summary>
            A document representation:
            * Data / Projection
            * Etag
            * Metadata
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Data.JsonDocument.SerializedSizeOnDisk">
      <summary>
            How much space this document takes on disk
            Only relevant during indexing phases, and not available on the client
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Data.JsonDocument.#ctor">
      <summary>
            Create a new instance of JsonDocument
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Data.JsonDocument.ToJson">
      <summary>
            Translate the json document to a <see cref="T:Raven.Json.Linq.RavenJObject" /></summary>
      <returns>
      </returns>
    </member>
    <member name="P:Raven.Abstractions.Data.JsonDocument.DataAsJson">
      <summary>
            Gets or sets the document data as json.
            </summary>
      <value>The data as json.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.JsonDocument.Metadata">
      <summary>
            Gets or sets the metadata for the document
            </summary>
      <value>The metadata.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.JsonDocument.Key">
      <summary>
            Gets or sets the key for the document
            </summary>
      <value>The key.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.JsonDocument.NonAuthoritativeInformation">
      <summary>
            Gets or sets a value indicating whether this document is non authoritative (modified by uncommitted transaction).
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Data.JsonDocument.Etag">
      <summary>
            Gets or sets the etag.
            </summary>
      <value>The etag.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.JsonDocument.LastModified">
      <summary>
            Gets or sets the last modified date for the document
            </summary>
      <value>The last modified.</value>
    </member>
    <member name="T:Raven.Abstractions.Data.JsonDocumentMetadata">
      <summary>
            A document representation:
            * Etag
            * Metadata
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Data.JsonDocumentMetadata.Metadata">
      <summary>
            	Gets or sets the metadata for the document
            </summary>
      <value>The metadata.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.JsonDocumentMetadata.Key">
      <summary>
            	Gets or sets the key for the document
            </summary>
      <value>The key.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.JsonDocumentMetadata.NonAuthoritativeInformation">
      <summary>
            	Gets or sets a value indicating whether this document is non authoritative (modified by uncommitted transaction).
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Data.JsonDocumentMetadata.Etag">
      <summary>
            Gets or sets the etag.
            </summary>
      <value>The etag.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.JsonDocumentMetadata.LastModified">
      <summary>
            	Gets or sets the last modified date for the document
            </summary>
      <value>The last modified.</value>
    </member>
    <member name="T:Raven.Abstractions.Data.MultiLoadResult">
      <summary>
            Represent a result which include both document results and included documents
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Data.MultiLoadResult.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Data.MultiLoadResult" /> class.
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Data.MultiLoadResult.Results">
      <summary>
            Gets or sets the document results.
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Data.MultiLoadResult.Includes">
      <summary>
            Gets or sets the included documents
            </summary>
    </member>
    <member name="T:Raven.Abstractions.Data.PatchCommandType">
      <summary>
            Patch command options
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Data.PatchCommandType.Set">
      <summary>
            Set a property
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Data.PatchCommandType.Unset">
      <summary>
            Unset (remove) a property
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Data.PatchCommandType.Add">
      <summary>
            Add an item to an array
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Data.PatchCommandType.Insert">
      <summary>
            Insert an item to an array at a specified position
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Data.PatchCommandType.Remove">
      <summary>
            Remove an item from an array at a specified position
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Data.PatchCommandType.Modify">
      <summary>
            Modify a property value by providing a nested set of patch operation
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Data.PatchCommandType.Inc">
      <summary>
            Increment a property by a specified value
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Data.PatchCommandType.Copy">
      <summary>
            Copy a property value to another property
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Data.PatchCommandType.Rename">
      <summary>
            Rename a property
            </summary>
    </member>
    <member name="T:Raven.Abstractions.Data.PatchRequest">
      <summary>
            A patch request for a specified document
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Data.PatchRequest.ToJson">
      <summary>
            Translate this instance to json
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Data.PatchRequest.FromJson(Raven.Json.Linq.RavenJObject)">
      <summary>
            Create an instance from a json object
            </summary>
      <param name="patchRequestJson">The patch request json.</param>
    </member>
    <member name="P:Raven.Abstractions.Data.PatchRequest.Type">
      <summary>
            Gets or sets the type of the operation
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.PatchRequest.PrevVal">
      <summary>
            Gets or sets the previous value, which is compared against the current value to verify a
            change isn't overwriting new values.
            If the value is null, the operation is always successful
            </summary>
      <value>The previous value.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.PatchRequest.Value">
      <summary>
            Gets or sets the value.
            </summary>
      <value>The value.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.PatchRequest.Nested">
      <summary>
            Gets or sets the nested operations to perform. This is only valid when the <see cref="P:Raven.Abstractions.Data.PatchRequest.Type" /> is <see cref="F:Raven.Abstractions.Data.PatchCommandType.Modify" />.
            </summary>
      <value>The nested.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.PatchRequest.Name">
      <summary>
            Gets or sets the name.
            </summary>
      <value>The name.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.PatchRequest.Position">
      <summary>
            Gets or sets the position.
            </summary>
      <value>The position.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.PatchRequest.AllPositions">
      <summary>
            Get or sets AllPositions. Set this property to true if you want to modify all items in an collection.
            </summary>
      <value>AllPositions true/false</value>
    </member>
    <member name="T:Raven.Abstractions.Data.PatchResult">
      <summary>
            The result of a patch operation
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Data.PatchResult.DocumentDoesNotExists">
      <summary>
            The document does not exists, operation was a no-op
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Data.PatchResult.Patched">
      <summary>
            Document was properly patched
            </summary>
    </member>
    <member name="T:Raven.Abstractions.Data.PutResult">
      <summary>
            The result of a PUT operation
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Data.PutResult.Key">
      <summary>
            Gets or sets the key.
            </summary>
      <value>The key.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.PutResult.ETag">
      <summary>
            Gets or sets the generated Etag for the PUT operation
            </summary>
      <value>The Etag.</value>
    </member>
    <member name="T:Raven.Abstractions.Data.SortedField">
      <summary>
            Represent a field sort options
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Data.SortedField.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Data.SortedField" /> class.
            </summary>
      <param name="fieldWithPotentialPrefix">The field with potential prefix.</param>
    </member>
    <member name="P:Raven.Abstractions.Data.SortedField.Field">
      <summary>
            Gets or sets the field.
            </summary>
      <value>The field.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.SortedField.Descending">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Raven.Abstractions.Data.SortedField" /> is descending.
            </summary>
      <value>
        <c>true</c> if descending; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Raven.Abstractions.Data.IndexQuery">
      <summary>
            All the information required to query a Raven index
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Data.IndexQuery.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Data.IndexQuery" /> class.
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Data.IndexQuery.GetIndexQueryUrl(System.String,System.String,System.String)">
      <summary>
            Gets the index query URL.
            </summary>
      <param name="operationUrl">The operation URL.</param>
      <param name="index">The index.</param>
      <param name="operationName">Name of the operation.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Abstractions.Data.IndexQuery.GetCustomQueryStringVariables">
      <summary>
            Gets the custom query string variables.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Raven.Abstractions.Data.IndexQuery.Query">
      <summary>
            Gets or sets the query.
            </summary>
      <value>The query.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.IndexQuery.TotalSize">
      <summary>
            Gets or sets the total size.
            </summary>
      <value>The total size.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.IndexQuery.Start">
      <summary>
            Gets or sets the start of records to read.
            </summary>
      <value>The start.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.IndexQuery.PageSize">
      <summary>
            Gets or sets the size of the page.
            </summary>
      <value>The size of the page.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.IndexQuery.AggregationOperation">
      <summary>
            The aggregation operation for this query
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Data.IndexQuery.GroupBy">
      <summary>
            The fields to group the query by
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Data.IndexQuery.FieldsToFetch">
      <summary>
            Gets or sets the fields to fetch.
            </summary>
      <value>The fields to fetch.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.IndexQuery.SortedFields">
      <summary>
            Gets or sets the fields to sort by
            </summary>
      <value>The sorted fields.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.IndexQuery.Cutoff">
      <summary>
            Gets or sets the cutoff date
            </summary>
      <value>The cutoff.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.IndexQuery.CutoffEtag">
      <summary>
            Gets or sets the cutoff etag
            </summary>
      <remarks>
            Cutoff etag is used to check if the index has already process a document with the given
            etag. Unlike Cutoff, which uses dates and is susceptible to clock syncronization issues between
            machines, cutoff etag doesn't rely on both the server and client having a syncronized clock and 
            can work without it.
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this
            etag belong to is actually considered for the results. 
            What it does it guarantee that the document has been mapped, but not that the mapped values has been reduce. 
            Since map/reduce queries, by their nature,tend to be far less susceptible to issues with staleness, this is 
            considered to be an acceptable tradeoff.
            If you need absolute no staleness with a map/reduce index, you will need to ensure syncronized clocks and 
            use the Cutoff date option, instead.
            </remarks>
    </member>
    <member name="P:Raven.Abstractions.Data.IndexQuery.DefaultField">
      <summary>
            The default field to use when querying directly on the Lucene query
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Data.IndexQuery.SkipTransformResults">
      <summary>
            If set to true, RavenDB won't execute the transform results function
            returning just the raw results instead
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Data.IndexQuery.SkippedResults">
      <summary>
            Gets or sets the number of skipped results.
            </summary>
      <value>The skipped results.</value>
    </member>
    <member name="T:Raven.Abstractions.Data.SpatialIndexQuery">
      <summary>
            A query using spatial filtering
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Data.SpatialIndexQuery.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Data.SpatialIndexQuery" /> class.
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Data.SpatialIndexQuery.#ctor(Raven.Abstractions.Data.IndexQuery)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Data.SpatialIndexQuery" /> class.
            </summary>
      <param name="query">The query.</param>
    </member>
    <member name="M:Raven.Abstractions.Data.SpatialIndexQuery.GetCustomQueryStringVariables">
      <summary>
            Gets the custom query string variables.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Raven.Abstractions.Data.SpatialIndexQuery.Latitude">
      <summary>
            Gets or sets the latitude.
            </summary>
      <value>The latitude.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.SpatialIndexQuery.Longitude">
      <summary>
            Gets or sets the longitude.
            </summary>
      <value>The longitude.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.SpatialIndexQuery.Radius">
      <summary>
            Gets or sets the radius.
            </summary>
      <value>The radius, in miles.</value>
    </member>
    <member name="T:Raven.Abstractions.Data.StringDistanceTypes">
      <summary>
            String distance algorithms used in suggestion query
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Data.StringDistanceTypes.Default">
      <summary>
            Default, equivalent to Levenshtein
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Data.StringDistanceTypes.JaroWinkler">
      <summary>
            JaroWinkler distance algorithm
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Data.StringDistanceTypes.Levenshtein">
      <summary>
            Levenshtein distance algorithm (default)
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Data.StringDistanceTypes.NGram">
      <summary>
            NGram distance algorithm
            </summary>
    </member>
    <member name="T:Raven.Abstractions.Data.SuggestionQuery">
      <summary>
      </summary>
    </member>
    <member name="M:Raven.Abstractions.Data.SuggestionQuery.#ctor">
      <summary>
            Create a new instance of <seealso cref="T:Raven.Abstractions.Data.SuggestionQuery" /></summary>
    </member>
    <member name="P:Raven.Abstractions.Data.SuggestionQuery.Term">
      <summary>
            Gets or sets the term. The term is what the user likely entered, and will used as the basis of the suggestions.
            </summary>
      <value>The term.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.SuggestionQuery.Field">
      <summary>
            Gets or sets the field to be used in conjunction with the index.
            </summary>
      <value>The field.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.SuggestionQuery.MaxSuggestions">
      <summary>
            Gets or sets the number of suggestions to return.
            </summary>
      <value>The number of suggestions.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.SuggestionQuery.Distance">
      <summary>
            Gets or sets the string distance algorithm.
            </summary>
      <value>The distance.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.SuggestionQuery.Accuracy">
      <summary>
            Gets or sets the accuracy.
            </summary>
      <value>The accuracy.</value>
    </member>
    <member name="T:Raven.Abstractions.Data.SuggestionQueryResult">
      <summary>
            The result of the suggestion query
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Data.SuggestionQueryResult.Suggestions">
      <summary>
            The suggestions based on the term and dictionary
            </summary>
      <value>The suggestions.</value>
    </member>
    <member name="T:Raven.Abstractions.Data.TransactionInformation">
      <summary>
            Transaction information that identify the transaction id and timeout
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Data.TransactionInformation.Id">
      <summary>
            Gets or sets the id.
            </summary>
      <value>The id.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.TransactionInformation.Timeout">
      <summary>
            Gets or sets the timeout.
            </summary>
      <value>The timeout.</value>
    </member>
    <member name="T:Raven.Abstractions.Extensions.ExceptionExtensions">
      <summary>
             Extension methods to handle common scenarios
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Extensions.ExceptionExtensions.ExtractSingleInnerException(System.AggregateException)">
      <summary>
            Recursively examines the inner exceptions of an <see cref="T:System.AggregateException" /> and returns a single child exception.
            </summary>
      <returns>
            If any of the aggregated exceptions have more than one inner exception, null is returned.
            </returns>
    </member>
    <member name="M:Raven.Abstractions.Extensions.ExceptionExtensions.SimplifyError(System.Exception)">
      <summary>
            Extracts a portion of an exception for a user friendly display
            </summary>
      <param name="e">The exception.</param>
      <returns>The primary portion of the exception message.</returns>
    </member>
    <member name="T:Raven.Abstractions.Exceptions.ConcurrencyException">
      <summary>
            This exception is raised when a concurrency conflict is encountered
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Exceptions.ConcurrencyException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Exceptions.ConcurrencyException" /> class.
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Exceptions.ConcurrencyException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Exceptions.ConcurrencyException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Raven.Abstractions.Exceptions.ConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Exceptions.ConcurrencyException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="inner">The inner.</param>
    </member>
    <member name="P:Raven.Abstractions.Exceptions.ConcurrencyException.ExpectedETag">
      <summary>
            Gets or sets the expected E tag.
            </summary>
      <value>The expected E tag.</value>
    </member>
    <member name="P:Raven.Abstractions.Exceptions.ConcurrencyException.ActualETag">
      <summary>
            Gets or sets the actual E tag.
            </summary>
      <value>The actual E tag.</value>
    </member>
    <member name="T:Raven.Abstractions.Extensions.DisposableAction">
      <summary>
            A helper class that translate between Disposable and Action
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Extensions.DisposableAction.#ctor(System.Action)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Extensions.DisposableAction" /> class.
            </summary>
      <param name="action">The action.</param>
    </member>
    <member name="M:Raven.Abstractions.Extensions.DisposableAction.Dispose">
      <summary>
            Execute the relevant actions
            </summary>
    </member>
    <member name="T:Raven.Abstractions.Extensions.ExpressionExtensions">
      <summary>
             Extensions for Linq expressions
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Extensions.ExpressionExtensions.ToPropertyPath``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String)">
      <summary>
             Turn an expression like x=&lt; x.User.Name to "User.Name"
            </summary>
    </member>
    <member name="T:Raven.Abstractions.Extensions.JsonExtensions">
      <summary>
            Json extensions 
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Extensions.JsonExtensions.ToJObject(System.Byte[])">
      <summary>
            Convert a byte array to a RavenJObject
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Extensions.JsonExtensions.ToJObject(System.IO.Stream)">
      <summary>
            Convert a byte array to a RavenJObject
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Extensions.JsonExtensions.WriteTo(Raven.Json.Linq.RavenJToken,System.IO.Stream)">
      <summary>
            Convert a RavenJToken to a byte array
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Extensions.JsonExtensions.JsonDeserialization``1(System.Byte[])">
      <summary>
            Deserialize a <param name="self" /> to an instance of <typeparam name="T" /></summary>
    </member>
    <member name="M:Raven.Abstractions.Extensions.JsonExtensions.JsonDeserialization``1(Raven.Json.Linq.RavenJObject)">
      <summary>
            Deserialize a <param name="self" /> to an instance of<typeparam name="T" /></summary>
    </member>
    <member name="M:Raven.Abstractions.Extensions.JsonExtensions.JsonDeserialization``1(System.IO.StreamReader)">
      <summary>
            Deserialize a <param name="self" /> to an instance of<typeparam name="T" /></summary>
    </member>
    <member name="M:Raven.Json.Linq.Extensions.Value``1(System.Collections.Generic.IEnumerable{Raven.Json.Linq.RavenJToken})">
      <summary>
            Converts the value.
            </summary>
      <typeparam name="U">The type to convert the value to.</typeparam>
      <param name="value">A <see cref="T:Raven.Json.Linq.RavenJToken" /> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Raven.Json.Linq.RavenJToken" />.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:Raven.Json.Linq.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Converts the value.
            </summary>
      <typeparam name="T">The source collection type.</typeparam>
      <typeparam name="U">The type to convert the value to.</typeparam>
      <param name="value">A <see cref="T:Raven.Json.Linq.RavenJToken" /> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Raven.Json.Linq.RavenJToken" />.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:Raven.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Raven.Json.Linq.RavenJToken})">
      <summary>
            Returns a collection of converted child values of every object in the source collection.
            </summary>
      <typeparam name="U">The type to convert the values to.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Raven.Json.Linq.RavenJToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every node in the source collection.</returns>
    </member>
    <member name="M:Raven.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Raven.Json.Linq.RavenJToken},System.String)">
      <summary>
            Returns a collection of child values of every object in the source collection with the given key.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Raven.Json.Linq.RavenJToken" /> that contains the source collection.</param>
      <param name="key">The token key.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Raven.Json.Linq.RavenJToken" /> that contains the values of every node in the source collection with the given key.</returns>
    </member>
    <member name="M:Raven.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Raven.Json.Linq.RavenJToken})">
      <summary>
            Returns a collection of child values of every object in the source collection.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Raven.Json.Linq.RavenJToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Raven.Json.Linq.RavenJToken" /> that contains the values of every node in the source collection.</returns>
    </member>
    <member name="T:Raven.Json.Linq.RavenJToken">
      <summary>
            Represents an abstract JSON token.
            </summary>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.CloneToken">
      <summary>
            Clones this object
            </summary>
      <returns>A cloned RavenJToken</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.FromObject(System.Object)">
      <summary>
            Creates a <see cref="T:Raven.Json.Linq.RavenJToken" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Raven.Json.Linq.RavenJToken" />.</param>
      <returns>A <see cref="T:Raven.Json.Linq.RavenJToken" /> with the value of the specified object</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates a <see cref="T:Raven.Json.Linq.RavenJToken" /> from an object using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Raven.Json.Linq.RavenJToken" />.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when reading the object.</param>
      <returns>A <see cref="T:Raven.Json.Linq.RavenJToken" /> with the value of the specified object</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.ToString">
      <summary>
            Returns the indented JSON for this token.
            </summary>
      <returns>
            The indented JSON for this token.
            </returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.ToString(Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Returns the JSON for this token using the given formatting and converters.
            </summary>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
      <returns>The JSON for this token using the given formatting and converters.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.ReadFrom(Newtonsoft.Json.JsonReader)">
      <summary>
            Creates a <see cref="T:Raven.Json.Linq.RavenJToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Raven.Json.Linq.RavenJToken" />.</param>
      <returns>
            An <see cref="T:Raven.Json.Linq.RavenJToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.Parse(System.String)">
      <summary>
            Load a <see cref="T:Raven.Json.Linq.RavenJToken" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Raven.Json.Linq.RavenJToken" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Creates a <see cref="T:Raven.Json.Linq.RavenJToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Raven.Json.Linq.RavenJToken" />.</param>
      <returns>
            An <see cref="T:Raven.Json.Linq.RavenJToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.Value``1(System.String)">
      <summary>
            Gets the <see cref="T:Raven.Json.Linq.RavenJToken" /> with the specified key converted to the specified type.
            </summary>
      <typeparam name="T">The type to convert the token to.</typeparam>
      <param name="key">The token key.</param>
      <returns>The converted token value.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.DeepEquals(Raven.Json.Linq.RavenJToken,Raven.Json.Linq.RavenJToken)">
      <summary>
            Compares the values of two tokens, including the values of all descendant tokens.
            </summary>
      <param name="t1">The first <see cref="T:Raven.Json.Linq.RavenJToken" /> to compare.</param>
      <param name="t2">The second <see cref="T:Raven.Json.Linq.RavenJToken" /> to compare.</param>
      <returns>true if the tokens are equal; otherwise false.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.SelectToken(System.String)">
      <summary>
            Selects the token that matches the object path.
            </summary>
      <param name="path">
            The object path from the current <see cref="T:Raven.Json.Linq.RavenJToken" /> to the <see cref="T:Raven.Json.Linq.RavenJToken" />
            to be returned. This must be a string of property names or array indexes separated
            by periods, such as <code>Tables[0].DefaultView[0].Price</code> in C# or
            <code>Tables(0).DefaultView(0).Price</code> in Visual Basic.
            </param>
      <returns>The <see cref="T:Raven.Json.Linq.RavenJToken" /> that matches the object path or a null reference if no matching token is found.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.SelectToken(System.String,System.Boolean)">
      <summary>
            Selects the token that matches the object path.
            </summary>
      <param name="path">
            The object path from the current <see cref="T:Raven.Json.Linq.RavenJToken" /> to the <see cref="T:Raven.Json.Linq.RavenJToken" />
            to be returned. This must be a string of property names or array indexes separated
            by periods, such as <code>Tables[0].DefaultView[0].Price</code> in C# or
            <code>Tables(0).DefaultView(0).Price</code> in Visual Basic.
            </param>
      <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no token is found.</param>
      <returns>The <see cref="T:Raven.Json.Linq.RavenJToken" /> that matches the object path.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.Values``1">
      <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
      <typeparam name="T">The type to convert the values to.</typeparam>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the child values of this <see cref="T:Raven.Json.Linq.RavenJToken" />, in document order.
            </returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.Values">
      <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Boolean)~Raven.Json.Linq.RavenJToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean" /> to <see cref="T:Raven.Json.Linq.RavenJToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue" /> from.</param>
      <returns>The <see cref="T:Raven.Json.Linq.RavenJValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.DateTimeOffset)~Raven.Json.Linq.RavenJToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.DateTimeOffset" /> to <see cref="T:Raven.Json.Linq.RavenJToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue" /> from.</param>
      <returns>The <see cref="T:Raven.Json.Linq.RavenJValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.Boolean})~Raven.Json.Linq.RavenJToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Raven.Json.Linq.RavenJToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue" /> from.</param>
      <returns>The <see cref="T:Raven.Json.Linq.RavenJValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Int64)~Raven.Json.Linq.RavenJToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Raven.Json.Linq.RavenJToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue" /> from.</param>
      <returns>The <see cref="T:Raven.Json.Linq.RavenJValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.DateTime})~Raven.Json.Linq.RavenJToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Raven.Json.Linq.RavenJToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue" /> from.</param>
      <returns>The <see cref="T:Raven.Json.Linq.RavenJValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.DateTimeOffset})~Raven.Json.Linq.RavenJToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Raven.Json.Linq.RavenJToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue" /> from.</param>
      <returns>The <see cref="T:Raven.Json.Linq.RavenJValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.Decimal})~Raven.Json.Linq.RavenJToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Raven.Json.Linq.RavenJToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue" /> from.</param>
      <returns>The <see cref="T:Raven.Json.Linq.RavenJValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.Double})~Raven.Json.Linq.RavenJToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Raven.Json.Linq.RavenJToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue" /> from.</param>
      <returns>The <see cref="T:Raven.Json.Linq.RavenJValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Int16)~Raven.Json.Linq.RavenJToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Int16" /> to <see cref="T:Raven.Json.Linq.RavenJToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue" /> from.</param>
      <returns>The <see cref="T:Raven.Json.Linq.RavenJValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.UInt16)~Raven.Json.Linq.RavenJToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16" /> to <see cref="T:Raven.Json.Linq.RavenJToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue" /> from.</param>
      <returns>The <see cref="T:Raven.Json.Linq.RavenJValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Int32)~Raven.Json.Linq.RavenJToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Int32" /> to <see cref="T:Raven.Json.Linq.RavenJToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue" /> from.</param>
      <returns>The <see cref="T:Raven.Json.Linq.RavenJValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.Int32})~Raven.Json.Linq.RavenJToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Raven.Json.Linq.RavenJToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue" /> from.</param>
      <returns>The <see cref="T:Raven.Json.Linq.RavenJValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.DateTime)~Raven.Json.Linq.RavenJToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime" /> to <see cref="T:Raven.Json.Linq.RavenJToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue" /> from.</param>
      <returns>The <see cref="T:Raven.Json.Linq.RavenJValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.Int64})~Raven.Json.Linq.RavenJToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Raven.Json.Linq.RavenJToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue" /> from.</param>
      <returns>The <see cref="T:Raven.Json.Linq.RavenJValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.Single})~Raven.Json.Linq.RavenJToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Raven.Json.Linq.RavenJToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue" /> from.</param>
      <returns>The <see cref="T:Raven.Json.Linq.RavenJValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Decimal)~Raven.Json.Linq.RavenJToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal" /> to <see cref="T:Raven.Json.Linq.RavenJToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue" /> from.</param>
      <returns>The <see cref="T:Raven.Json.Linq.RavenJValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.Int16})~Raven.Json.Linq.RavenJToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Raven.Json.Linq.RavenJToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue" /> from.</param>
      <returns>The <see cref="T:Raven.Json.Linq.RavenJValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.UInt16})~Raven.Json.Linq.RavenJToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Raven.Json.Linq.RavenJToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue" /> from.</param>
      <returns>The <see cref="T:Raven.Json.Linq.RavenJValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.UInt32})~Raven.Json.Linq.RavenJToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Raven.Json.Linq.RavenJToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue" /> from.</param>
      <returns>The <see cref="T:Raven.Json.Linq.RavenJValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.UInt64})~Raven.Json.Linq.RavenJToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Raven.Json.Linq.RavenJToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue" /> from.</param>
      <returns>The <see cref="T:Raven.Json.Linq.RavenJValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Double)~Raven.Json.Linq.RavenJToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Double" /> to <see cref="T:Raven.Json.Linq.RavenJToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue" /> from.</param>
      <returns>The <see cref="T:Raven.Json.Linq.RavenJValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Single)~Raven.Json.Linq.RavenJToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Single" /> to <see cref="T:Raven.Json.Linq.RavenJToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue" /> from.</param>
      <returns>The <see cref="T:Raven.Json.Linq.RavenJValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.String)~Raven.Json.Linq.RavenJToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.String" /> to <see cref="T:Raven.Json.Linq.RavenJToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue" /> from.</param>
      <returns>The <see cref="T:Raven.Json.Linq.RavenJValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.UInt32)~Raven.Json.Linq.RavenJToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32" /> to <see cref="T:Raven.Json.Linq.RavenJToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue" /> from.</param>
      <returns>The <see cref="T:Raven.Json.Linq.RavenJValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.UInt64)~Raven.Json.Linq.RavenJToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64" /> to <see cref="T:Raven.Json.Linq.RavenJToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue" /> from.</param>
      <returns>The <see cref="T:Raven.Json.Linq.RavenJValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Byte[])~Raven.Json.Linq.RavenJToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Byte[]" /> to <see cref="T:Raven.Json.Linq.RavenJToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue" /> from.</param>
      <returns>The <see cref="T:Raven.Json.Linq.RavenJValue" /> initialized with the specified value.</returns>
    </member>
    <member name="P:Raven.Json.Linq.RavenJToken.Type">
      <summary>
            Gets the node type for this <see cref="T:Raven.Json.Linq.RavenJToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="T:Raven.Json.Linq.RavenJArray">
      <summary>
            Represents a JSON array.
            </summary>
    </member>
    <member name="M:Raven.Json.Linq.RavenJArray.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJArray" /> class.
            </summary>
    </member>
    <member name="M:Raven.Json.Linq.RavenJArray.#ctor(System.Collections.IEnumerable)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJArray" /> class with the specified content.
            </summary>
      <param name="content">The contents of the array.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJArray.#ctor(System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJArray" /> class with the specified content.
            </summary>
      <param name="content">The contents of the array.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJArray.Parse(System.String)">
      <summary>
            Load a <see cref="T:Raven.Json.Linq.RavenJArray" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Raven.Json.Linq.RavenJArray" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJArray.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="P:Raven.Json.Linq.RavenJArray.Type">
      <summary>
            Gets the node type for this <see cref="T:Raven.Json.Linq.RavenJToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Raven.Json.Linq.RavenJArray.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Raven.Json.Linq.RavenJToken" /> at the specified index.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Raven.Json.Linq.RavenJObject">
      <summary>
            Represents a JSON object.
            </summary>
    </member>
    <member name="M:Raven.Json.Linq.RavenJObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJObject" /> class.
            </summary>
    </member>
    <member name="M:Raven.Json.Linq.RavenJObject.Value``1(System.String)">
      <summary>
            Gets the <see cref="T:Raven.Json.Linq.RavenJToken" /> with the specified key converted to the specified type.
            </summary>
      <typeparam name="T">The type to convert the token to.</typeparam>
      <param name="key">The token key.</param>
      <returns>The converted token value.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJObject.FromObject(System.Object)">
      <summary>
            Creates a <see cref="T:Raven.Json.Linq.RavenJObject" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Raven.Json.Linq.RavenJObject" />.</param>
      <returns>A <see cref="T:Raven.Json.Linq.RavenJObject" /> with the values of the specified object</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJObject.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates a <see cref="T:Raven.Json.Linq.RavenJArray" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Raven.Json.Linq.RavenJArray" />.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used to read the object.</param>
      <returns>A <see cref="T:Raven.Json.Linq.RavenJArray" /> with the values of the specified object</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJObject.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Raven.Json.Linq.RavenJObject" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Raven.Json.Linq.RavenJObject" />.</param>
      <returns>A <see cref="T:Raven.Json.Linq.RavenJObject" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJObject.Parse(System.String)">
      <summary>
            Load a <see cref="T:Raven.Json.Linq.RavenJObject" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Raven.Json.Linq.RavenJObject" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJObject.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="P:Raven.Json.Linq.RavenJObject.Type">
      <summary>
            Gets the node type for this <see cref="T:Raven.Json.Linq.RavenJToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Raven.Json.Linq.RavenJObject.Item(System.String)">
      <summary>
            Gets or sets the <see cref="T:Raven.Json.Linq.RavenJToken" /> with the specified property name.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Raven.Json.Linq.RavenJTokenEqualityComparer">
      <summary>
            Compares tokens to determine whether they are equal.
            </summary>
    </member>
    <member name="M:Raven.Json.Linq.RavenJTokenEqualityComparer.Equals(Raven.Json.Linq.RavenJToken,Raven.Json.Linq.RavenJToken)">
      <summary>
            Determines whether the specified objects are equal.
            </summary>
      <param name="x">The first object of type <see cref="T:Raven.Json.Linq.RavenJToken" /> to compare.</param>
      <param name="y">The second object of type <see cref="T:Raven.Json.Linq.RavenJToken" /> to compare.</param>
      <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJTokenEqualityComparer.GetHashCode(Raven.Json.Linq.RavenJToken)">
      <summary>
            Returns a hash code for the specified object.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
      <returns>A hash code for the specified object.</returns>
      <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.</exception>
    </member>
    <member name="T:Raven.Json.Linq.RavenJTokenReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
    </member>
    <member name="M:Raven.Json.Linq.RavenJTokenReader.#ctor(Raven.Json.Linq.RavenJToken)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJTokenReader" /> class.
            </summary>
      <param name="token">The token to read from.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJTokenReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null.
            </returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJTokenReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJTokenReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJTokenReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJTokenReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="T:Raven.Json.Linq.RavenJTokenWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
    </member>
    <member name="M:Raven.Json.Linq.RavenJTokenWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the end.
            </summary>
      <param name="token">The token.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Guid)">
      <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.TimeSpan)">
      <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Uri)">
      <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
    </member>
    <member name="P:Raven.Json.Linq.RavenJTokenWriter.Token">
      <summary>
            Gets the token being writen.
            </summary>
      <value>The token being writen.</value>
    </member>
    <member name="T:Raven.Json.Linq.RavenJValue">
      <summary>
            Represents a value in JSON (string, integer, date, etc).
            </summary>
    </member>
    <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.UInt64)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.Uri)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.TimeSpan)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJValue.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Raven.Json.Linq.RavenJValue.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception>
    </member>
    <member name="M:Raven.Json.Linq.RavenJValue.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJValue.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJValue.ToString(System.String)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="format">The format.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJValue.ToString(System.IFormatProvider)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="formatProvider">The format provider.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Raven.Json.Linq.RavenJValue.ToString(System.String,System.IFormatProvider)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="format">The format.</param>
      <param name="formatProvider">The format provider.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:Raven.Json.Linq.RavenJValue.Type">
      <summary>
            Gets the node type for this <see cref="T:Raven.Json.Linq.RavenJToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Raven.Json.Linq.RavenJValue.Value">
      <summary>
            Gets or sets the underlying token value.
            </summary>
      <value>The underlying token value.</value>
    </member>
    <member name="M:Raven.Abstractions.Json.JsonDateTimeOffsetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Raven.Abstractions.Json.JsonDateTimeOffsetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>
            The object value.
            </returns>
    </member>
    <member name="M:Raven.Abstractions.Json.JsonDateTimeOffsetConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Raven.Abstractions.Json.JsonMultiDimensionalArrayConverter">
      <summary>
            Convert a MultiDimensional Array to a json string
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Json.JsonMultiDimensionalArrayConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Raven.Abstractions.Json.JsonMultiDimensionalArrayConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Raven.Abstractions.Json.JsonMultiDimensionalArrayConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Raven.Abstractions.Json.JsonMultiDimensionalArrayConverter.ReadRank(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Read in all the values from the Json reader and populate a nested ArrayList
            </summary>
      <param name="reader">JsonReader to use</param>
      <param name="serializer">JsonSerializer to use</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Abstractions.Json.JsonMultiDimensionalArrayConverter.GetRankLengthList(System.Collections.Generic.List{System.Object})">
      <summary>
            Retrieve a list of lengths for each rank represented
            </summary>
      <param name="arrayList">The list to process</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Abstractions.Json.JsonMultiDimensionalArrayConverter.SetValues(System.Array,System.Int32[],System.Int32[],System.Int32,System.Collections.Generic.List{System.Object})">
      <summary>
            Assign values from the ArrayList into their respective place in the multidimensional array
            </summary>
      <param name="multiDimensionalArray">Array that will be receiving the newValues</param>
      <param name="rankLengthList">A list of the lengths of each rank</param>
      <param name="assignToIndexList">A list of the current index settings to be used for assignments</param>
      <param name="currentRank">Rank currently being processed</param>
      <param name="newValues">New Values that will be used in the assignment</param>
    </member>
    <member name="M:Raven.Abstractions.Json.JsonMultiDimensionalArrayConverter.WriteRank(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonSerializer,System.Array,System.Int32,System.Int32[])">
      <summary>
            Write a rank of an array in Json format
            </summary>
      <param name="writer">JsonWriter in use</param>
      <param name="serializer">JsonSerializer in use</param>
      <param name="array">Array to be written</param>
      <param name="currentRank">Current rank "depth"</param>
      <param name="assignFromIndexList">List of indexes currently being used to read from the array</param>
    </member>
    <member name="T:Raven.Abstractions.Extensions.MetadataExtensions">
      <summary>
            Extensions for handling metadata
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Extensions.MetadataExtensions.FilterHeaders(Raven.Json.Linq.RavenJObject,System.Boolean)">
      <summary>
            Filters the headers from unwanted headers
            </summary>
      <param name="self">The self.</param>
      <param name="isServerDocument">if set to <c>true</c> [is server document].</param>
      <returns>
      </returns>public static RavenJObject FilterHeaders(this System.Collections.Specialized.NameValueCollection self, bool isServerDocument)
        </member>
    <member name="M:Raven.Abstractions.Extensions.MetadataExtensions.FilterHeaders(System.Collections.Specialized.NameValueCollection,System.Boolean)">
      <summary>
            Filters the headers from unwanted headers
            </summary>
      <param name="self">The self.</param>
      <param name="isServerDocument">if set to <c>true</c> [is server document].</param>
      <returns>
      </returns>public static RavenJObject FilterHeaders(this System.Collections.Specialized.NameValueCollection self, bool isServerDocument)
        </member>
    <member name="T:Raven.Abstractions.Extensions.Reference`1">
      <summary>
            A reference that can be used with lambda expression
            to pass a value out.
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Extensions.Reference`1.Value">
      <summary>
            Gets or sets the value.
            </summary>
      <value>The value.</value>
    </member>
    <member name="T:Raven.Abstractions.Extensions.StreamExtensions">
      <summary>
            Extensions for working with streams
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Extensions.StreamExtensions.ReadData(System.IO.Stream)">
      <summary>
            Reads the entire request buffer to memory and return it as a byte array.
            </summary>
      <param name="stream">The stream to read.</param>
      <returns>The returned byte array.</returns>
    </member>
    <member name="T:Raven.Abstractions.Indexing.FieldIndexing">
      <summary>
            Options for indexing a field
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Indexing.FieldIndexing.No">
      <summary>
            Do not index the field value. This field can thus not be searched, but one can still access its contents provided it is stored.
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Indexing.FieldIndexing.Analyzed">
      <summary>
            Index the tokens produced by running the field's value through an Analyzer. This is useful for common text.
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Indexing.FieldIndexing.NotAnalyzed">
      <summary>
            Index the field's value without using an Analyzer, so it can be searched.  As no analyzer is used the 
            value will be stored as a single term. This is useful for unique Ids like product numbers.
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Indexing.FieldIndexing.Default">
      <summary>
            Index this field using the default internal analyzer: LowerCaseKeywordAnalyzer
            </summary>
    </member>
    <member name="T:Raven.Abstractions.Indexing.FieldStorage">
      <summary>
            Specifies whether and how a field should be stored.
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Indexing.FieldStorage.Yes">
      <summary>
            Store the original field value in the index. This is useful for short texts like a document's title which should be displayed with the results. 
            The value is stored in its original form, i.e. no analyzer is used before it is stored.
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Indexing.FieldStorage.No">
      <summary>
            Do not store the field value in the index.
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Indexing.FieldStorage.Compress">
      <summary>
            Store the original field value in the index in a compressed form. This is useful for long documents and for binary valued fields.
            </summary>
    </member>
    <member name="T:Raven.Abstractions.Indexing.IndexDefinition">
      <summary>
            A definition of a RavenIndex
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Indexing.IndexDefinition.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Indexing.IndexDefinition" /> class.
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Indexing.IndexDefinition.Equals(Raven.Abstractions.Indexing.IndexDefinition)">
      <summary>
            Equals the specified other.
            </summary>
      <param name="other">The other.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Abstractions.Indexing.IndexDefinition.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Raven.Abstractions.Indexing.IndexDefinition.GetIndexHash">
      <summary>
            Provide a cached version of the index hash code, which is used when generating
            the index etag. 
            It isn't really useful for anything else, in particular, we cache that because
            we want to avoid calculating the cost of doing this over and over again on each 
            query.
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Indexing.IndexDefinition.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="M:Raven.Abstractions.Indexing.IndexDefinition.RemoveDefaultValues">
      <summary>
            Remove the default values that we don't actually need
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Indexing.IndexDefinition.Name">
      <summary>
            Get or set the name of the index
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Indexing.IndexDefinition.Map">
      <summary>
            Gets or sets the map function, if there is only one
            </summary>
      <remarks>
            This property only exists for backward compatability purposes
            </remarks>
    </member>
    <member name="P:Raven.Abstractions.Indexing.IndexDefinition.Maps">
      <summary>
            All the map functions for this index
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Indexing.IndexDefinition.Reduce">
      <summary>
            Gets or sets the reduce function
            </summary>
      <value>The reduce.</value>
    </member>
    <member name="P:Raven.Abstractions.Indexing.IndexDefinition.TransformResults">
      <summary>
            Gets or sets the translator function
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Indexing.IndexDefinition.IsMapReduce">
      <summary>
            Gets a value indicating whether this instance is map reduce index definition
            </summary>
      <value>
        <c>true</c> if this instance is map reduce; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Raven.Abstractions.Indexing.IndexDefinition.IsTemp">
      <summary>
            Returns a boolean value indicating whether this IndexDefinition is of a temporary index
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Indexing.IndexDefinition.Stores">
      <summary>
            Gets or sets the stores options
            </summary>
      <value>The stores.</value>
    </member>
    <member name="P:Raven.Abstractions.Indexing.IndexDefinition.Indexes">
      <summary>
            Gets or sets the indexing options
            </summary>
      <value>The indexes.</value>
    </member>
    <member name="P:Raven.Abstractions.Indexing.IndexDefinition.SortOptions">
      <summary>
            Gets or sets the sort options.
            </summary>
      <value>The sort options.</value>
    </member>
    <member name="P:Raven.Abstractions.Indexing.IndexDefinition.Analyzers">
      <summary>
            Gets or sets the analyzers options
            </summary>
      <value>The analyzers.</value>
    </member>
    <member name="P:Raven.Abstractions.Indexing.IndexDefinition.Fields">
      <summary>
            The fields that are queryable in the index
            </summary>
    </member>
    <member name="T:Raven.Abstractions.Indexing.NumberUtil">
      <summary>
            Helper function for numeric to indexed string and vice versa
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Indexing.NumberUtil.NumberToString(System.Int32)">
      <summary>
            Translate a number to an indexable string
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Indexing.NumberUtil.NumberToString(System.Int64)">
      <summary>
            Translate a number to an indexable string
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Indexing.NumberUtil.NumberToString(System.Single)">
      <summary>
            Translate a number to an indexable string
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Indexing.NumberUtil.NumberToString(System.Double)">
      <summary>
            Translate a number to an indexable string
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Indexing.NumberUtil.StringToNumber(System.String)">
      <summary>
            Translate an indexable string to a number
            </summary>
    </member>
    <member name="T:Raven.Abstractions.Json.DynamicUtil">
      <summary>
            Helper class for working with dynamic values completely dynamically
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Json.DynamicUtil.GetValueDynamically(System.Object,System.String)">
      <summary>
            Gets the value dynamically.
            </summary>
      <param name="entity">The entity.</param>
      <param name="dynamicMemberName">Name of the dynamic member.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Raven.Abstractions.Json.JsonDynamicConverter">
      <summary>
            Convert a dynamic variable to a json value and vice versa
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Json.JsonDynamicConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Raven.Abstractions.Json.JsonDynamicConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Raven.Abstractions.Json.JsonDynamicConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Raven.Abstractions.Json.JsonEnumConverter">
      <summary>
            Convert an enum to a json string
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Json.JsonEnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Raven.Abstractions.Json.JsonEnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Raven.Abstractions.Json.JsonEnumConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Raven.Abstractions.Json.JTokenExtensions">
      <summary>
            Extensions for RavenJToken
            </summary>
    </member>
    <member name="T:Raven.Abstractions.Linq.DateTools">
      <summary> Provides support for converting dates to strings and vice-versa.
            The strings are structured so that lexicographic sorting orders 
            them by date, which makes them suitable for use as field values 
            and search terms.
            
            <p />This class also helps you to limit the resolution of your dates. Do not
            save dates with a finer resolution than you really need, as then
            RangeQuery and PrefixQuery will require more memory and become slower.
            
            <p />Compared to {@link DateField} the strings generated by the methods
            in this class take slightly more space, unless your selected resolution
            is set to <code>Resolution.DAY</code> or lower.
            
            <p />
            Another approach is {@link NumericUtils}, which provides
            a sortable binary representation (prefix encoded) of numeric values, which
            date/time are.
            For indexing a {@link Date} or {@link Calendar}, just get the Unix timestamp as
            <code>long</code> using {@link Date#getTime} or {@link Calendar#getTimeInMillis} and
            index this as a numeric value with {@link NumericField}
            and use {@link NumericRangeQuery} to query it.
            </summary>
    </member>
    <member name="T:Raven.Abstractions.Linq.DateTools.Resolution">
      <summary>Specifies the time granularity. </summary>
    </member>
    <member name="M:Raven.Abstractions.Linq.DateTools.Resolution.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Raven.Abstractions.Linq.DateTools.DateToString(System.DateTime,Raven.Abstractions.Linq.DateTools.Resolution)">
      <summary> Converts a Date to a string suitable for indexing.
            
            </summary>
      <param name="date">the date to be converted
            </param>
      <param name="resolution">the desired resolution, see
            {@link #Round(Date, DateTools.Resolution)}
            </param>
      <returns> a string in format <code>yyyyMMddHHmmssSSS</code> or shorter,
            depending on <code>resolution</code>; using GMT as timezone 
            </returns>
    </member>
    <member name="M:Raven.Abstractions.Linq.DateTools.TimeToString(System.Int64,Raven.Abstractions.Linq.DateTools.Resolution)">
      <summary> Converts a millisecond time to a string suitable for indexing.
            
            </summary>
      <param name="time">the date expressed as milliseconds since January 1, 1970, 00:00:00 GMT
            </param>
      <param name="resolution">the desired resolution, see
            {@link #Round(long, DateTools.Resolution)}
            </param>
      <returns> a string in format <code>yyyyMMddHHmmssSSS</code> or shorter,
            depending on <code>resolution</code>; using GMT as timezone
            </returns>
    </member>
    <member name="M:Raven.Abstractions.Linq.DateTools.StringToTime(System.String)">
      <summary> Converts a string produced by <code>timeToString</code> or
            <code>DateToString</code> back to a time, represented as the
            number of milliseconds since January 1, 1970, 00:00:00 GMT.
            
            </summary>
      <param name="dateString">the date string to be converted
            </param>
      <returns> the number of milliseconds since January 1, 1970, 00:00:00 GMT
            </returns>
      <throws>  ParseException if <code>dateString</code> is not in the  </throws>
      <summary>  expected format 
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Linq.DateTools.StringToDate(System.String)">
      <summary> Converts a string produced by <code>timeToString</code> or
            <code>DateToString</code> back to a time, represented as a
            Date object.
            
            </summary>
      <param name="dateString">the date string to be converted
            </param>
      <returns> the parsed time as a Date object 
            </returns>
      <throws>  ParseException if <code>dateString</code> is not in the  </throws>
      <summary>  expected format 
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Linq.DateTools.Round(System.DateTime,Raven.Abstractions.Linq.DateTools.Resolution)">
      <summary>
            Limit a date's resolution. For example, the date <code>2004-09-21 13:50:11</code>
            will be changed to <code>2004-09-01 00:00:00</code> when using
            <code>Resolution.MONTH</code>.
            </summary>
      <param name="date">The date.</param>
      <param name="resolution">The desired resolution of the date to be returned</param>
      <returns>
            the date with all values more precise than <code>resolution</code>
            set to 0 or 1
            </returns>
    </member>
    <member name="M:Raven.Abstractions.Linq.DateTools.Round(System.Int64,Raven.Abstractions.Linq.DateTools.Resolution)">
      <summary> Limit a date's resolution. For example, the date <code>1095767411000</code>
            (which represents 2004-09-21 13:50:11) will be changed to 
            <code>1093989600000</code> (2004-09-01 00:00:00) when using
            <code>Resolution.MONTH</code>.
            
            </summary>
      <param name="time">The time in milliseconds (not ticks).</param>
      <param name="resolution">The desired resolution of the date to be returned
            </param>
      <returns> the date with all values more precise than <code>resolution</code>
            set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT
            </returns>
    </member>
    <member name="P:Raven.Abstractions.Linq.IDynamicJsonObject.Inner">
      <summary>
            Gets the inner json object
            </summary>
      <value>The inner.</value>
    </member>
    <member name="T:Raven.Abstractions.Linq.DynamicJsonObject">
      <summary>
            A dynamic implementation on top of <see cref="T:Raven.Json.Linq.RavenJObject" /></summary>
    </member>
    <member name="M:Raven.Abstractions.Linq.DynamicJsonObject.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Raven.Abstractions.Linq.DynamicJsonObject.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <param name="other">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Raven.Abstractions.Linq.DynamicJsonObject.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Raven.Abstractions.Linq.DynamicJsonObject.#ctor(Raven.Json.Linq.RavenJObject)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Linq.DynamicJsonObject" /> class.
            </summary>
      <param name="inner">The obj.</param>
    </member>
    <member name="M:Raven.Abstractions.Linq.DynamicJsonObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
      <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
      <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</param>
      <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
    </member>
    <member name="M:Raven.Abstractions.Linq.DynamicJsonObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
      <summary>
            Provides the implementation for operations that get a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for indexing operations.
            </summary>
      <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
    </member>
    <member name="M:Raven.Abstractions.Linq.DynamicJsonObject.GetValue(System.String)">
      <summary>
            Gets the value for the specified name
            </summary>
      <param name="name">The name.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Abstractions.Linq.DynamicJsonObject.GetDocumentId">
      <summary>
            Gets the document id.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Raven.Abstractions.Linq.DynamicList.Length">
      <summary>
            Gets the length.
            </summary>
      <value>The length.</value>
    </member>
    <member name="T:Raven.Abstractions.Data.QueryResult">
      <summary>
            The result of a query
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Data.QueryResult.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Data.QueryResult" /> class.
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Data.QueryResult.EnsureSnapshot">
      <summary>
            Ensures that the query results can be used in snapshots
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Data.QueryResult.CreateSnapshot">
      <summary>
            Creates a snapshot of the query results
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Data.QueryResult.Results">
      <summary>
            Gets or sets the document resulting from this query.
            </summary>
      <value>The results.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.QueryResult.Includes">
      <summary>
            Gets or sets the document included in the result.
            </summary>
      <value>The includes.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.QueryResult.IsStale">
      <summary>
            Gets or sets a value indicating whether the index is stale.
            </summary>
      <value>
        <c>true</c> if the index is stale; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.QueryResult.IndexTimestamp">
      <summary>
            The last time the index was updated.
            This can be used to determine the freshness of the data.
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Data.QueryResult.TotalResults">
      <summary>
            Gets or sets the total results for this query
            </summary>
      <value>The total results.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.QueryResult.SkippedResults">
      <summary>
            Gets or sets the skipped results (duplicate documents);
            </summary>
      <value>The skipped results.</value>
    </member>
    <member name="P:Raven.Abstractions.Data.QueryResult.IndexName">
      <summary>
            The index used to answer this query
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Data.QueryResult.IndexEtag">
      <summary>
            The last etag indexed by the index.
            This can be used to determine whatever the results can be cached.
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Data.QueryResult.ResultEtag">
      <summary>
            The ETag value for this index current state, which include what we docs we indexed,
            what document were deleted, etc.
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Data.QueryResult.NonAuthoritativeInformation">
      <summary>
            Gets or sets a value indicating whether any of the documents returned by this query
            are non authoritative (modified by uncommitted transaction).
            </summary>
    </member>
    <member name="T:Raven.Abstractions.Indexing.SortOptions">
      <summary>
            The sort options to use for a particular field
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Indexing.SortOptions.None">
      <summary>
            No sort options
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Indexing.SortOptions.String">
      <summary>Sort using term values as Strings.  Sort values are String and lower
            values are at the front. 
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Indexing.SortOptions.Int">
      <summary>Sort using term values as encoded Integers.  Sort values are Integer and
            lower values are at the front. 
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Indexing.SortOptions.Float">
      <summary>Sort using term values as encoded Floats.  Sort values are Float and
            lower values are at the front. 
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Indexing.SortOptions.Long">
      <summary>Sort using term values as encoded Longs.  Sort values are Long and
            lower values are at the front. 
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Indexing.SortOptions.Double">
      <summary>Sort using term values as encoded Doubles.  Sort values are Double and
            lower values are at the front. 
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Indexing.SortOptions.Short">
      <summary>Sort using term values as encoded Shorts.  Sort values are Short and
            lower values are at the front. 
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Indexing.SortOptions.Custom">
      <summary>Sort using a custom Comparator.  Sort values are any Comparable and
            sorting is done according to natural order. 
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Indexing.SortOptions.Byte">
      <summary>Sort using term values as encoded Bytes.  Sort values are Byte and
            lower values are at the front. 
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Indexing.SortOptions.StringVal">
      <summary>Sort using term values as Strings, but comparing by
            value (using String.compareTo) for all comparisons.
            This is typically slower than {@link #STRING}, which
            uses ordinals to do the sorting. 
            </summary>
    </member>
    <member name="T:Raven.Abstractions.Replication.ReplicationDestination">
      <summary>
            Data class for replication destination documents
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Replication.ReplicationDestination.ConnectionStringName">
      <summary>
            The name of the connection string specified in the 
            server configuration file. 
            Override all other properties of the destination
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Replication.ReplicationDestination.Url">
      <summary>
            Gets or sets the URL of the replication destination
            </summary>
      <value>The URL.</value>
    </member>
    <member name="P:Raven.Abstractions.Replication.ReplicationDestination.Username">
      <summary>
            The replication server username to use
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Replication.ReplicationDestination.Password">
      <summary>
            The replication server password to use
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Replication.ReplicationDestination.Domain">
      <summary>
            The replication server domain to use
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Replication.ReplicationDestination.ApiKey">
      <summary>
            The replication server api key to use
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Replication.ReplicationDestination.Database">
      <summary>
            The database to use
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Replication.ReplicationDestination.TransitiveReplicationBehavior">
      <summary>
            How should the replication bundle behave with respect to replicated documents.
            If a document was replicated to us from another node, should we replicate that to
            this destination, or should we replicate only documents that were locally modified.
            </summary>
    </member>
    <member name="T:Raven.Abstractions.Replication.TransitiveReplicationOptions">
      <summary>
            Options for how to replicate replicated documents
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Replication.TransitiveReplicationOptions.None">
      <summary>
            Don't replicate replicated documents
            </summary>
    </member>
    <member name="F:Raven.Abstractions.Replication.TransitiveReplicationOptions.Replicate">
      <summary>
            Replicate replicated documents
            </summary>
    </member>
    <member name="T:Raven.Abstractions.Replication.ReplicationDocument">
      <summary>
            This class represent the list of replication destinations for the server
            </summary>
    </member>
    <member name="M:Raven.Abstractions.Replication.ReplicationDocument.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Replication.ReplicationDocument" /> class.
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Replication.ReplicationDocument.Destinations">
      <summary>
            Gets or sets the list of replication destinations.
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Replication.ReplicationDocument.Id">
      <summary>
            Gets or sets the id.
            </summary>
      <value>The id.</value>
    </member>
    <member name="P:Raven.Abstractions.Smuggler.SmugglerOptions.File">
      <summary>
            A file to write to when doing an export or read from when doing an import.
            </summary>
    </member>
    <member name="P:Raven.Abstractions.Smuggler.SmugglerOptions.OperateOnTypes">
      <summary>
            Specify the types to operate on. You can specify more than one type by combining items with the OR parameter.
            Default is all items.
            Usage example: OperateOnTypes = ItemType.Indexes | ItemType.Documents | ItemType.Attachments.
            </summary>
    </member>
    <member name="T:Raven.Client.Connection.Profiling.IHoldProfilingInformation">
      <summary>
            Interface for getting profiling information about the actions of the system
            within a given context, usually the context is database commands or async database commands
            </summary>
    </member>
    <member name="P:Raven.Client.Connection.Profiling.IHoldProfilingInformation.ProfilingInformation">
      <summary>
            The profiling information
            </summary>
    </member>
    <member name="T:Raven.Client.Connection.Async.IAsyncDatabaseCommands">
      <summary>
            An async database command operations
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetAsync(System.String)">
      <summary>
            Begins an async get operation
            </summary>
      <param name="key">The key.</param>
    </member>
    <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetAsync(System.String[],System.String[])">
      <summary>
            Begins an async multi get operation
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetDocumentsAsync(System.Int32,System.Int32)">
      <summary>
            Begins an async get operation for documents
            </summary>
      <param name="start">Paging start</param>
      <param name="pageSize">Size of the page.</param>
      <remarks>
            This is primarily useful for administration of a database
            </remarks>
    </member>
    <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetDocumentsStartingWithAsync(System.String,System.Int32,System.Int32)">
      <summary>
            Begins an async get operation for documents whose id starts with the specified prefix
            </summary>
      <param name="prefix">Prefix that the ids begin with.</param>
      <param name="start">Paging start.</param>
      <param name="pageSize">Size of the page.</param>
      <remarks>
            This is primarily useful for administration of a database
            </remarks>
    </member>
    <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.QueryAsync(System.String,Raven.Abstractions.Data.IndexQuery,System.String[])">
      <summary>
            Begins the async query.
            </summary>
      <param name="index">The index.</param>
      <param name="query">The query.</param>
      <param name="includes">The include paths</param>
    </member>
    <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.BatchAsync(Raven.Abstractions.Commands.ICommandData[])">
      <summary>
            Begins the async batch operation
            </summary>
      <param name="commandDatas">The command data.</param>
    </member>
    <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.SuggestAsync(System.String,Raven.Abstractions.Data.SuggestionQuery)">
      <summary>
            Returns a list of suggestions based on the specified suggestion query.
            </summary>
      <param name="index">The index to query for suggestions</param>
      <param name="suggestionQuery">The suggestion query.</param>
    </member>
    <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetIndexNamesAsync(System.Int32,System.Int32)">
      <summary>
            Gets the index names from the server asynchronously
            </summary>
      <param name="start">Paging start</param>
      <param name="pageSize">Size of the page.</param>
    </member>
    <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetIndexesAsync(System.Int32,System.Int32)">
      <summary>
            Gets the indexes from the server asynchronously
            </summary>
      <param name="start">Paging start</param>
      <param name="pageSize">Size of the page.</param>
    </member>
    <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.ResetIndexAsync(System.String)">
      <summary>
            Resets the specified index asynchronously
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetIndexAsync(System.String)">
      <summary>
            Gets the index definition for the specified name asynchronously
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PutIndexAsync(System.String,Raven.Abstractions.Indexing.IndexDefinition,System.Boolean)">
      <summary>
            Puts the index definition for the specified name asynchronously
            </summary>
      <param name="name">The name.</param>
      <param name="indexDef">The index def.</param>
      <param name="overwrite">Should overwrite index</param>
    </member>
    <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.DeleteIndexAsync(System.String)">
      <summary>
            Deletes the index definition for the specified name asynchronously
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.DeleteByIndexAsync(System.String,Raven.Abstractions.Data.IndexQuery,System.Boolean)">
      <summary>
            Perform a set based deletes using the specified index.
            </summary>
      <param name="indexName">Name of the index.</param>
      <param name="queryToDelete">The query to delete.</param>
      <param name="allowStale">if set to <c>true</c> allow the operation while the index is stale.</param>
    </member>
    <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.DeleteDocumentAsync(System.String)">
      <summary>
            Deletes the document for the specified id asynchronously
            </summary>
      <param name="id">The id.</param>
    </member>
    <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PutAsync(System.String,System.Nullable{System.Guid},Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
      <summary>
            Puts the document with the specified key in the database
            </summary>
      <param name="key">The key.</param>
      <param name="etag">The etag.</param>
      <param name="document">The document.</param>
      <param name="metadata">The metadata.</param>
    </member>
    <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.ForDatabase(System.String)">
      <summary>
            Create a new instance of <see cref="T:Raven.Client.Connection.Async.IAsyncDatabaseCommands" /> that will interacts
            with the specified database
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.ForDefaultDatabase">
      <summary>
            Create a new instance of <see cref="T:Raven.Client.Connection.Async.IAsyncDatabaseCommands" /> that will interacts
            with the default database
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.With(System.Net.ICredentials)">
      <summary>
            Returns a new <see cref="T:Raven.Client.Connection.Async.IAsyncDatabaseCommands" /> using the specified credentials
            </summary>
      <param name="credentialsForSession">The credentials for session.</param>
    </member>
    <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetStatisticsAsync">
      <summary>
            Retrieve the statistics for the database asynchronously
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetDatabaseNamesAsync(System.Int32)">
      <summary>
            Gets the list of databases from the server asynchronously
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PutAttachmentAsync(System.String,System.Nullable{System.Guid},System.Byte[],Raven.Json.Linq.RavenJObject)">
      <summary>
            Puts the attachment with the specified key asynchronously
            </summary>
      <param name="key">The key.</param>
      <param name="etag">The etag.</param>
      <param name="data">The data.</param>
      <param name="metadata">The metadata.</param>
    </member>
    <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetAttachmentAsync(System.String)">
      <summary>
            Gets the attachment by the specified key asynchronously
            </summary>
      <param name="key">The key.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.DeleteAttachmentAsync(System.String,System.Nullable{System.Guid})">
      <summary>
            Deletes the attachment with the specified key asynchronously
            </summary>
      <param name="key">The key.</param>
      <param name="etag">The etag.</param>
    </member>
    <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetTermsAsync(System.String,System.String,System.String,System.Int32)">
      <summary>
             Get the possible terms for the specified field in the index asynchronously
             You can page through the results by use fromValue parameter as the 
             starting point for the next query
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.EnsureSilverlightStartUpAsync">
      <summary>
            Ensures that the silverlight startup tasks have run
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.DisableAllCaching">
      <summary>
            Disable all caching within the given scope
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.MultiGetAsync(Raven.Abstractions.Data.GetRequest[])">
      <summary>
            Perform a single POST request containing multiple nested GET requests
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetFacetsAsync(System.String,Raven.Abstractions.Data.IndexQuery,System.String)">
      <summary>
            Using the given Index, calculate the facets as per the specified doc
            </summary>
    </member>
    <member name="P:Raven.Client.Connection.Async.IAsyncDatabaseCommands.OperationsHeaders">
      <summary>
            Gets or sets the operations headers.
            </summary>
      <value>The operations headers.</value>
    </member>
    <member name="T:Raven.Client.Connection.Async.AsyncServerClient">
      <summary>
            Access the database commands in async fashion
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.Async.AsyncServerClient.#ctor(System.String,Raven.Client.Document.DocumentConvention,System.Net.ICredentials,Raven.Client.Connection.HttpJsonRequestFactory,System.Nullable{System.Guid})">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Connection.Async.AsyncServerClient" /> class.
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.Async.AsyncServerClient.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.Async.AsyncServerClient.With(System.Net.ICredentials)">
      <summary>
            Returns a new <see cref="T:Raven.Client.Connection.Async.IAsyncDatabaseCommands" /> using the specified credentials
            </summary>
      <param name="credentialsForSession">The credentials for session.</param>
    </member>
    <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetIndexNamesAsync(System.Int32,System.Int32)">
      <summary>
            Gets the index names from the server asynchronously
            </summary>
      <param name="start">Paging start</param>
      <param name="pageSize">Size of the page.</param>
    </member>
    <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetIndexesAsync(System.Int32,System.Int32)">
      <summary>
            Gets the indexes from the server asynchronously
            </summary>
      <param name="start">Paging start</param>
      <param name="pageSize">Size of the page.</param>
    </member>
    <member name="M:Raven.Client.Connection.Async.AsyncServerClient.ResetIndexAsync(System.String)">
      <summary>
            Resets the specified index asynchronously
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetIndexAsync(System.String)">
      <summary>
            Gets the index definition for the specified name asynchronously
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Raven.Client.Connection.Async.AsyncServerClient.PutIndexAsync(System.String,Raven.Abstractions.Indexing.IndexDefinition,System.Boolean)">
      <summary>
            Puts the index definition for the specified name asynchronously
            </summary>
      <param name="name">The name.</param>
      <param name="indexDef">The index def.</param>
      <param name="overwrite">Should overwrite index</param>
    </member>
    <member name="M:Raven.Client.Connection.Async.AsyncServerClient.DeleteIndexAsync(System.String)">
      <summary>
            Deletes the index definition for the specified name asynchronously
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Raven.Client.Connection.Async.AsyncServerClient.DeleteDocumentAsync(System.String)">
      <summary>
            Deletes the document for the specified id asynchronously
            </summary>
      <param name="id">The id.</param>
    </member>
    <member name="M:Raven.Client.Connection.Async.AsyncServerClient.PutAsync(System.String,System.Nullable{System.Guid},Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
      <summary>
            Puts the document with the specified key in the database
            </summary>
      <param name="key">The key.</param>
      <param name="etag">The etag.</param>
      <param name="document">The document.</param>
      <param name="metadata">The metadata.</param>
    </member>
    <member name="M:Raven.Client.Connection.Async.AsyncServerClient.ForDatabase(System.String)">
      <summary>
            Create a new instance of <see cref="T:Raven.Client.Connection.IDatabaseCommands" /> that will interacts
            with the specified database
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.Async.AsyncServerClient.ForDefaultDatabase">
      <summary>
            Create a new instance of <see cref="T:Raven.Client.Connection.IDatabaseCommands" /> that will interact
            with the root database. Useful if the database has works against a tenant database.
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetAsync(System.String)">
      <summary>
            Begins an async get operation
            </summary>
      <param name="key">The key.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetAsync(System.String[],System.String[])">
      <summary>
            Begins an async multi get operation
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetDocumentsAsync(System.Int32,System.Int32)">
      <summary>
            Begins an async get operation for documents
            </summary>
      <remarks>
            This is primarily useful for administration of a database
            </remarks>
    </member>
    <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetFacetsAsync(System.String,Raven.Abstractions.Data.IndexQuery,System.String)">
      <summary>
            Using the given Index, calculate the facets as per the specified doc
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.Async.AsyncServerClient.MultiGetAsync(Raven.Abstractions.Data.GetRequest[])">
      <summary>
            Perform a single POST requst containing multiple nested GET requests
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetDocumentsStartingWithAsync(System.String,System.Int32,System.Int32)">
      <summary>
            Begins an async get operation for documents whose id starts with the specified prefix
            </summary>
      <param name="prefix">Prefix that the ids begin with.</param>
      <param name="start">Paging start.</param>
      <param name="pageSize">Size of the page.</param>
      <remarks>
            This is primarily useful for administration of a database
            </remarks>
    </member>
    <member name="M:Raven.Client.Connection.Async.AsyncServerClient.QueryAsync(System.String,Raven.Abstractions.Data.IndexQuery,System.String[])">
      <summary>
            Begins the async query.
            </summary>
      <param name="index">The index.</param>
      <param name="query">The query.</param>
      <param name="includes">The include paths</param>
    </member>
    <member name="M:Raven.Client.Connection.Async.AsyncServerClient.SuggestAsync(System.String,Raven.Abstractions.Data.SuggestionQuery)">
      <summary>
            Returns a list of suggestions based on the specified suggestion query.
            </summary>
      <param name="index">The index to query for suggestions</param>
      <param name="suggestionQuery">The suggestion query.</param>
    </member>
    <member name="M:Raven.Client.Connection.Async.AsyncServerClient.BatchAsync(Raven.Abstractions.Commands.ICommandData[])">
      <summary>
            Begins the async batch operation
            </summary>
      <param name="commandDatas">The command data.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetStatisticsAsync">
      <summary>
            Begins retrieving the statistics for the database
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetDatabaseNamesAsync(System.Int32)">
      <summary>
            Gets the list of databases from the server asynchronously
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.Async.AsyncServerClient.PutAttachmentAsync(System.String,System.Nullable{System.Guid},System.Byte[],Raven.Json.Linq.RavenJObject)">
      <summary>
            Puts the attachment with the specified key asynchronously
            </summary>
      <param name="key">The key.</param>
      <param name="etag">The etag.</param>
      <param name="data">The data.</param>
      <param name="metadata">The metadata.</param>
    </member>
    <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetAttachmentAsync(System.String)">
      <summary>
            Gets the attachment by the specified key asynchronously
            </summary>
      <param name="key">The key.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.Async.AsyncServerClient.DeleteAttachmentAsync(System.String,System.Nullable{System.Guid})">
      <summary>
            Deletes the attachment with the specified key asynchronously
            </summary>
      <param name="key">The key.</param>
      <param name="etag">The etag.</param>
    </member>
    <member name="M:Raven.Client.Connection.Async.AsyncServerClient.DisableAllCaching">
      <summary>
            Disable all caching within the given scope
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.Async.AsyncServerClient.EnsureSilverlightStartUpAsync">
      <summary>
            Ensures that the silverlight startup tasks have run
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetTermsAsync(System.String,System.String,System.String,System.Int32)">
      <summary>
             Get the possible terms for the specified field in the index asynchronously
             You can page through the results by use fromValue parameter as the 
             starting point for the next query
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Raven.Client.Connection.Async.AsyncServerClient.OperationsHeaders">
      <summary>
            Gets or sets the operations headers.
            </summary>
      <value>The operations headers.</value>
    </member>
    <member name="P:Raven.Client.Connection.Async.AsyncServerClient.ProfilingInformation">
      <summary>
            The profiling information
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.CreateHttpJsonRequestParams.AddOperationHeaders(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>
            Adds the operation headers.
            </summary>
      <param name="operationsHeaders">The operations headers.</param>
    </member>
    <member name="M:Raven.Client.Connection.CreateHttpJsonRequestParams.AddOperationHeaders(System.Collections.Specialized.NameValueCollection)">
      <summary>
            Adds the operation headers.
            </summary>
      <param name="operationsHeaders">The operations headers.</param>
    </member>
    <member name="T:Raven.Client.Connection.HttpJsonRequest">
      <summary>
            A representation of an HTTP json request to the RavenDB server
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.HttpJsonRequest.ReadResponseStringAsync">
      <summary>
            Begins the read response string.
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.HttpJsonRequest.ReadResponseString">
      <summary>
            Reads the response string.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.HttpJsonRequest.CalculateDuration">
      <summary>
            The request duration
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.HttpJsonRequest.Write(System.String)">
      <summary>
            Writes the specified data.
            </summary>
      <param name="data">The data.</param>
    </member>
    <member name="M:Raven.Client.Connection.HttpJsonRequest.BeginWrite(System.String,System.AsyncCallback,System.Object)">
      <summary>
            Begins the write operation
            </summary>
      <param name="dataToWrite">The byte array.</param>
      <param name="callback">The callback.</param>
      <param name="state">The state.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.HttpJsonRequest.EndWrite(System.IAsyncResult)">
      <summary>
            Ends the write operation.
            </summary>
      <param name="result">The result.</param>
    </member>
    <member name="P:Raven.Client.Connection.HttpJsonRequest.ResponseHeaders">
      <summary>
            Gets or sets the response headers.
            </summary>
      <value>The response headers.</value>
    </member>
    <member name="P:Raven.Client.Connection.HttpJsonRequest.ResponseStatusCode">
      <summary>
            Gets or sets the response status code.
            </summary>
      <value>The response status code.</value>
    </member>
    <member name="P:Raven.Client.Connection.HttpJsonRequest.SkipServerCheck">
      <summary>
             Whatever we can skip the server check and directly return the cached result
            </summary>
    </member>
    <member name="P:Raven.Client.Connection.HttpJsonRequest.ContentType">
      <summary>
            The underlying request content type
            </summary>
    </member>
    <member name="T:Raven.Client.Connection.HttpJsonRequestFactory">
      <summary>
             Create the HTTP Json Requests to the RavenDB Server
             and manages the http cache
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.HttpJsonRequestFactory.InvokeLogRequest(Raven.Client.Connection.Profiling.IHoldProfilingInformation,Raven.Client.Connection.Profiling.RequestResultArgs)">
      <summary>
            Invoke the LogRequest event
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.HttpJsonRequestFactory.CreateHttpJsonRequest(Raven.Client.Connection.CreateHttpJsonRequestParams)">
      <summary>
            Creates the HTTP json request.
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.HttpJsonRequestFactory.ResetCache">
      <summary>
            Reset the number of cached requests and clear the entire cache
            Mostly used for testing
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.HttpJsonRequestFactory.#ctor(System.Int32)">
      <summary>
            default ctor
            </summary>
      <param name="maxNumberOfCachedRequests">
      </param>
    </member>
    <member name="M:Raven.Client.Connection.HttpJsonRequestFactory.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Raven.Client.Connection.HttpJsonRequestFactory.DisableAllCaching">
      <summary>
            Disable all caching within the given scope
            </summary>
    </member>
    <member name="P:Raven.Client.Connection.HttpJsonRequestFactory.EnableBasicAuthenticationOverUnsecureHttpEvenThoughPasswordsWouldBeSentOverTheWireInClearTextToBeStolenByHackers">
      <summary>
            Advanced: Don't set this unless you know what you are doing!
            
            Enable using basic authentication using http
            By default, RavenDB only allows basic authentication over HTTPS, setting this property to true
            will instruct RavenDB to make unsecure calls (usually only good for testing / internal networks).
            </summary>
    </member>
    <member name="P:Raven.Client.Connection.HttpJsonRequestFactory.NumberOfCachedRequests">
      <summary>
            The number of requests that we got 304 for 
            and were able to handle purely from the cache
            </summary>
    </member>
    <member name="P:Raven.Client.Connection.HttpJsonRequestFactory.DisableRequestCompression">
      <summary>
            Determine whether to use compression or not 
            </summary>
    </member>
    <member name="P:Raven.Client.Connection.HttpJsonRequestFactory.AggressiveCacheDuration">
      <summary>
             The aggressive cache duration
            </summary>
    </member>
    <member name="P:Raven.Client.Connection.HttpJsonRequestFactory.DisableHttpCaching">
      <summary>
            Disable the HTTP caching
            </summary>
    </member>
    <member name="E:Raven.Client.Connection.HttpJsonRequestFactory.ConfigureRequest">
      <summary>
            Occurs when a json request is created
            </summary>
    </member>
    <member name="E:Raven.Client.Connection.HttpJsonRequestFactory.LogRequest">
      <summary>
            Occurs when a json request is completed
            </summary>
    </member>
    <member name="T:Raven.Client.Connection.IDatabaseCommands">
      <summary>
             Expose the set of operations by the RavenDB server
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.StartsWith(System.String,System.Int32,System.Int32)">
      <summary>
            Retrieves documents for the specified key prefix
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.Get(System.String)">
      <summary>
            Retrieves the document for the specified key
            </summary>
      <param name="key">The key.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.Get(System.String[],System.String[])">
      <summary>
            Retrieves documents with the specified ids, optionally specifying includes to fetch along
            </summary>
      <param name="ids">The ids.</param>
      <param name="includes">The includes.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.Put(System.String,System.Nullable{System.Guid},Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
      <summary>
            Puts the document in the database with the specified key
            </summary>
      <param name="key">The key.</param>
      <param name="etag">The etag.</param>
      <param name="document">The document.</param>
      <param name="metadata">The metadata.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.Delete(System.String,System.Nullable{System.Guid})">
      <summary>
            Deletes the document with the specified key
            </summary>
      <param name="key">The key.</param>
      <param name="etag">The etag.</param>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.PutAttachment(System.String,System.Nullable{System.Guid},System.IO.Stream,Raven.Json.Linq.RavenJObject)">
      <summary>
            Puts a byte array as attachment with the specified key
            </summary>
      <param name="key">The key.</param>
      <param name="etag">The etag.</param>
      <param name="data">The data.</param>
      <param name="metadata">The metadata.</param>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.GetAttachment(System.String)">
      <summary>
            Retrieves the attachment with the specified key
            </summary>
      <param name="key">The key.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.HeadAttachment(System.String)">
      <summary>
            Retrieves the attachment metadata with the specified key, not the actual attachmet
            </summary>
      <param name="key">The key.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.DeleteAttachment(System.String,System.Nullable{System.Guid})">
      <summary>
            Deletes the attachment with the specified key
            </summary>
      <param name="key">The key.</param>
      <param name="etag">The etag.</param>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.GetDatabaseNames(System.Int32)">
      <summary>
            Returns the names of all tenant databases on the RavenDB server
            </summary>
      <returns>List of tenant database names</returns>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.GetIndexNames(System.Int32,System.Int32)">
      <summary>
            Returns the names of all indexes that exist on the server
            </summary>
      <param name="start">Paging start</param>
      <param name="pageSize">Size of the page.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.ResetIndex(System.String)">
      <summary>
            Resets the specified index
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.GetIndex(System.String)">
      <summary>
            Gets the index definition for the specified name
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.PutIndex(System.String,Raven.Abstractions.Indexing.IndexDefinition)">
      <summary>
            Creates an index with the specified name, based on an index definition
            </summary>
      <param name="name">The name.</param>
      <param name="indexDef">The index def.</param>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.PutIndex(System.String,Raven.Abstractions.Indexing.IndexDefinition,System.Boolean)">
      <summary>
            Creates an index with the specified name, based on an index definition
            </summary>
      <param name="name">The name.</param>
      <param name="indexDef">The index def.</param>
      <param name="overwrite">if set to <c>true</c> [overwrite].</param>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.PutIndex``2(System.String,Raven.Client.Indexes.IndexDefinitionBuilder{``0,``1})">
      <summary>
            Creates an index with the specified name, based on an index definition that is created by the supplied
            IndexDefinitionBuilder
            </summary>
      <typeparam name="TDocument">The type of the document.</typeparam>
      <typeparam name="TReduceResult">The type of the reduce result.</typeparam>
      <param name="name">The name.</param>
      <param name="indexDef">The index def.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.PutIndex``2(System.String,Raven.Client.Indexes.IndexDefinitionBuilder{``0,``1},System.Boolean)">
      <summary>
            Creates an index with the specified name, based on an index definition that is created by the supplied
            IndexDefinitionBuilder
            </summary>
      <typeparam name="TDocument">The type of the document.</typeparam>
      <typeparam name="TReduceResult">The type of the reduce result.</typeparam>
      <param name="name">The name.</param>
      <param name="indexDef">The index def.</param>
      <param name="overwrite">if set to <c>true</c> [overwrite].</param>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.Query(System.String,Raven.Abstractions.Data.IndexQuery,System.String[])">
      <summary>
            Queries the specified index in the Raven flavoured Lucene query syntax
            </summary>
      <param name="index">The index.</param>
      <param name="query">The query.</param>
      <param name="includes">The includes.</param>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.DeleteIndex(System.String)">
      <summary>
            Deletes the specified index
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.Batch(System.Collections.Generic.IEnumerable{Raven.Abstractions.Commands.ICommandData})">
      <summary>
            Executed the specified commands as a single batch
            </summary>
      <param name="commandDatas">The command data.</param>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.Commit(System.Guid)">
      <summary>
            Commits the specified tx id
            </summary>
      <param name="txId">The tx id.</param>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.Rollback(System.Guid)">
      <summary>
            Rollbacks the specified tx id
            </summary>
      <param name="txId">The tx id.</param>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.PromoteTransaction(System.Guid)">
      <summary>
            Promotes the transaction
            </summary>
      <param name="fromTxId">From tx id.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.With(System.Net.ICredentials)">
      <summary>
            Returns a new <see cref="T:Raven.Client.Connection.IDatabaseCommands" /> using the specified credentials
            </summary>
      <param name="credentialsForSession">The credentials for session.</param>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.DeleteByIndex(System.String,Raven.Abstractions.Data.IndexQuery)">
      <summary>
            Perform a set based deletes using the specified index, not allowing the operation
            if the index is stale
            </summary>
      <param name="indexName">Name of the index.</param>
      <param name="queryToDelete">The query to delete.</param>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.DeleteByIndex(System.String,Raven.Abstractions.Data.IndexQuery,System.Boolean)">
      <summary>
            Perform a set based deletes using the specified index
            </summary>
      <param name="indexName">Name of the index.</param>
      <param name="queryToDelete">The query to delete.</param>
      <param name="allowStale">if set to <c>true</c> [allow stale].</param>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.UpdateByIndex(System.String,Raven.Abstractions.Data.IndexQuery,Raven.Abstractions.Data.PatchRequest[])">
      <summary>
            Perform a set based update using the specified index, not allowing the operation
            if the index is stale
            </summary>
      <param name="indexName">Name of the index.</param>
      <param name="queryToUpdate">The query to update.</param>
      <param name="patchRequests">The patch requests.</param>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.UpdateByIndex(System.String,Raven.Abstractions.Data.IndexQuery,Raven.Abstractions.Data.PatchRequest[],System.Boolean)">
      <summary>
            Perform a set based update using the specified index
            </summary>
      <param name="indexName">Name of the index.</param>
      <param name="queryToUpdate">The query to update.</param>
      <param name="patchRequests">The patch requests.</param>
      <param name="allowStale">if set to <c>true</c> [allow stale].</param>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.ForDatabase(System.String)">
      <summary>
            Create a new instance of <see cref="T:Raven.Client.Connection.IDatabaseCommands" /> that will interacts
            with the specified database
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.ForDefaultDatabase">
      <summary>
            Create a new instance of <see cref="T:Raven.Client.Connection.IDatabaseCommands" /> that will interacts
            with the default database
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.Suggest(System.String,Raven.Abstractions.Data.SuggestionQuery)">
      <summary>
            Returns a list of suggestions based on the specified suggestion query
            </summary>
      <param name="index">The index to query for suggestions</param>
      <param name="suggestionQuery">The suggestion query.</param>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.GetTerms(System.String,System.String,System.String,System.Int32)">
      <summary>
             Get the all terms stored in the index for the specified field
             You can page through the results by use fromValue parameter as the 
             starting point for the next query
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.GetFacets(System.String,Raven.Abstractions.Data.IndexQuery,System.String)">
      <summary>
            Using the given Index, calculate the facets as per the specified doc
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.Patch(System.String,Raven.Abstractions.Data.PatchRequest[])">
      <summary>
            Sends a patch request for a specific document, ignoring the document's Etag
            </summary>
      <param name="key">Id of the document to patch</param>
      <param name="patches">Array of patch requests</param>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.Patch(System.String,Raven.Abstractions.Data.PatchRequest[],System.Nullable{System.Guid})">
      <summary>
            Sends a patch request for a specific document
            </summary>
      <param name="key">Id of the document to patch</param>
      <param name="patches">Array of patch requests</param>
      <param name="etag">Require specific Etag [null to ignore]</param>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.DisableAllCaching">
      <summary>
            Disable all caching within the given scope
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.MultiGet(Raven.Abstractions.Data.GetRequest[])">
      <summary>
            Perform a single POST request containing multiple nested GET requests
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.GetStatistics">
      <summary>
            Retrieve the statistics for the database
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.Head(System.String)">
      <summary>
            Retrieves the document metadata for the specified document key.
            </summary>
      <param name="key">The key.</param>
      <returns>The document metadata for the specified document, or null if the document does not exist</returns>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.UrlFor(System.String)">
      <summary>
            Get the full URL for the given document key
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.IDatabaseCommands.ForceReadFromMaster">
      <summary>
            Force the database commands to read directly from the master, unless there has been a failover.
            </summary>
    </member>
    <member name="P:Raven.Client.Connection.IDatabaseCommands.OperationsHeaders">
      <summary>
            Gets or sets the operations headers
            </summary>
      <value>The operations headers.</value>
    </member>
    <member name="P:Raven.Client.Connection.IDatabaseCommands.SupportsPromotableTransactions">
      <summary>
            Gets a value indicating whether [supports promotable transactions].
            </summary>
      <value>
        <c>true</c> if [supports promotable transactions]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Raven.Client.Connection.IRavenQueryInspector">
      <summary>
            Provide access to the underlying <see cref="T:Raven.Client.IDocumentQuery`1" /></summary>
    </member>
    <member name="M:Raven.Client.Connection.IRavenQueryInspector.GetLastEqualityTerm">
      <summary>
            The last term that we asked the query to use equals on
            </summary>
    </member>
    <member name="P:Raven.Client.Connection.IRavenQueryInspector.IndexQueried">
      <summary>
            Get the name of the index being queried
            </summary>
    </member>
    <member name="P:Raven.Client.Connection.IRavenQueryInspector.DatabaseCommands">
      <summary>
            Grant access to the database commands
            </summary>
    </member>
    <member name="P:Raven.Client.Connection.IRavenQueryInspector.AsyncDatabaseCommands">
      <summary>
            Grant access to the async database commands
            </summary>
    </member>
    <member name="P:Raven.Client.Connection.IRavenQueryInspector.Session">
      <summary>
            The query session
            </summary>
    </member>
    <member name="T:Raven.Client.Connection.JsonExtensions">
      <summary>
            Extension to json objects
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.JsonExtensions.Deserialize``1(Raven.Json.Linq.RavenJObject,Raven.Client.Document.DocumentConvention)">
      <summary>
            Deserializes the specified instance <param name="self" /> to an instance of <typeparam name="T" /> using the specified <param name="convention" /></summary>
    </member>
    <member name="M:Raven.Client.Connection.JsonExtensions.Deserialize(Raven.Json.Linq.RavenJObject,System.Type,Raven.Client.Document.DocumentConvention)">
      <summary>
            Deserializes the specified instance <param name="self" /> to an instance of <param name="type" /> using the specified <param name="convention" /></summary>
    </member>
    <member name="T:Raven.Client.Connection.JsonLuceneDateTimeConverter">
      <summary>
            Convert a lucene data format to and from json values
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.JsonLuceneDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Raven.Client.Connection.JsonLuceneDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Raven.Client.Connection.JsonLuceneDateTimeConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Raven.Client.Connection.JsonLuceneDateTimeConverter.CanWrite">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Raven.Client.Connection.Profiling.ProfilingContext">
      <summary>
            Manages all profiling activities for a given item
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.Profiling.ProfilingContext.RecordAction(System.Object,Raven.Client.Connection.Profiling.RequestResultArgs)">
      <summary>
            Register the action as associated with the sender
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.Profiling.ProfilingContext.TryGet(System.Guid)">
      <summary>
            Try to get a session matching the specified id.
            </summary>
    </member>
    <member name="T:Raven.Client.Connection.Profiling.RequestStatus">
      <summary>
            The status of the request
            </summary>
    </member>
    <member name="F:Raven.Client.Connection.Profiling.RequestStatus.SentToServer">
      <summary>
            The request was sent to the server
            </summary>
    </member>
    <member name="F:Raven.Client.Connection.Profiling.RequestStatus.Cached">
      <summary>
            The request was served directly from the local cache
            after checking with the server to see if it was still 
            up to date
            </summary>
    </member>
    <member name="F:Raven.Client.Connection.Profiling.RequestStatus.AggresivelyCached">
      <summary>
            The request was served from the local cache without
            checking with the server and may be out of date
            </summary>
    </member>
    <member name="F:Raven.Client.Connection.Profiling.RequestStatus.ErrorOnServer">
      <summary>
            The server returned an error
            </summary>
    </member>
    <member name="T:Raven.Client.Connection.Profiling.RequestResultArgs">
      <summary>
            The result of a request made to the server
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.Profiling.RequestResultArgs.#ctor">
      <summary>
            Creates a new instance of <seealso cref="T:Raven.Client.Connection.Profiling.RequestResultArgs" /></summary>
    </member>
    <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.AdditionalInformation">
      <summary>
            Any additional information that might be required
            </summary>
    </member>
    <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.At">
      <summary>
            When the request completed
            </summary>
    </member>
    <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.Status">
      <summary>
            The request status
            </summary>
    </member>
    <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.Url">
      <summary>
            The request Url
            </summary>
    </member>
    <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.DurationMilliseconds">
      <summary>
            How long this request took
            </summary>
    </member>
    <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.Method">
      <summary>
            The request method
            </summary>
    </member>
    <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.PostedData">
      <summary>
            The data posted to the server
            </summary>
    </member>
    <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.HttpResult">
      <summary>
            The HTTP result for this request
            </summary>
    </member>
    <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.Result">
      <summary>
            The result of this request
            </summary>
    </member>
    <member name="T:Raven.Client.Connection.Profiling.ProfilingInformation">
      <summary>
            Information about a particular session
            </summary>
    </member>
    <member name="F:Raven.Client.Connection.Profiling.ProfilingInformation.Requests">
      <summary>
             The requests made by this session
            </summary>
    </member>
    <member name="F:Raven.Client.Connection.Profiling.ProfilingInformation.Id">
      <summary>
            Uniquely identify the session
            </summary>
    </member>
    <member name="F:Raven.Client.Connection.Profiling.ProfilingInformation.At">
      <summary>
            The time when the session was created
            </summary>
    </member>
    <member name="F:Raven.Client.Connection.Profiling.ProfilingInformation.DurationMilliseconds">
      <summary>
            The duration this session was opened
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.Profiling.ProfilingInformation.CreateProfilingInformation(System.Nullable{System.Guid})">
      <summary>
             Create a new instance of profiling information and provide additional context information
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.Profiling.ProfilingInformation.#ctor(System.Nullable{System.Guid})">
      <summary>
             Create a new instance of this class
            </summary>
    </member>
    <member name="P:Raven.Client.Connection.Profiling.ProfilingInformation.Context">
      <summary>
            Additional information that is added by extension
            </summary>
    </member>
    <member name="E:Raven.Client.Connection.Profiling.ProfilingInformation.OnContextCreated">
      <summary>
             A hook that allows extensions to provide additional information about the created context
            </summary>
    </member>
    <member name="T:Raven.Client.Connection.RavenQuery">
      <summary>
            Helper class that provide a way to escape query terms
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.RavenQuery.Escape(System.String)">
      <summary>
            Escapes Lucene operators and quotes phrases
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.RavenQuery.Escape(System.String,System.Boolean,System.Boolean)">
      <summary>
            Escapes Lucene operators and quotes phrases
            </summary>
      <returns>escaped term</returns>
      <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Escaping%20Special%20Characters
            </remarks>
    </member>
    <member name="T:Raven.Client.Connection.RavenTransactionAccessor">
      <summary>
            Provide access to the current transaction 
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.RavenTransactionAccessor.StartTransaction">
      <summary>
            Starts a transaction
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.RavenTransactionAccessor.StartTransaction(System.TimeSpan)">
      <summary>
            Starts a transaction with the specified timeout
            </summary>
      <param name="timeout">The timeout.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.RavenTransactionAccessor.GetTransactionInformation">
      <summary>
            Gets the transaction information for the current transaction
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Raven.Client.Connection.ReplicationInformer">
      <summary>
            Replication and failover management on the client side
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.ReplicationInformer.#ctor(Raven.Client.Document.DocumentConvention)">
      <summary>
             Create a new instance of this class
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.ReplicationInformer.UpdateReplicationInformationIfNeeded(Raven.Client.Connection.ServerClient)">
      <summary>
            Updates the replication information if needed.
            </summary>
      <param name="serverClient">The server client.</param>
    </member>
    <member name="M:Raven.Client.Connection.ReplicationInformer.GetFailureCount(System.String)">
      <summary>
            Get the current failure count for the url
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.ReplicationInformer.ShouldExecuteUsing(System.String,System.Int32,System.String,System.Boolean)">
      <summary>
            Should execute the operation using the specified operation URL
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.ReplicationInformer.IsFirstFailure(System.String)">
      <summary>
            Determines whether this is the first failure on the specified operation URL.
            </summary>
      <param name="operationUrl">The operation URL.</param>
    </member>
    <member name="M:Raven.Client.Connection.ReplicationInformer.IncrementFailureCount(System.String)">
      <summary>
            Increments the failure count for the specified operation URL
            </summary>
      <param name="operationUrl">The operation URL.</param>
    </member>
    <member name="M:Raven.Client.Connection.ReplicationInformer.RefreshReplicationInformation(Raven.Client.Connection.ServerClient)">
      <summary>
            Refreshes the replication information.
            Expert use only.
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.ReplicationInformer.ResetFailureCount(System.String)">
      <summary>
            Resets the failure count for the specified URL
            </summary>
      <param name="operationUrl">The operation URL.</param>
    </member>
    <member name="P:Raven.Client.Connection.ReplicationInformer.ReplicationDestinations">
      <summary>
            Gets the replication destinations.
            </summary>
      <value>The replication destinations.</value>
    </member>
    <member name="E:Raven.Client.Connection.ReplicationInformer.FailoverStatusChanged">
      <summary>
            Notify when the failover status changed
            </summary>
    </member>
    <member name="T:Raven.Client.Connection.FailoverStatusChangedEventArgs">
      <summary>
            The event arguments for when the failover status changed
            </summary>
    </member>
    <member name="P:Raven.Client.Connection.FailoverStatusChangedEventArgs.Failing">
      <summary>
            Whatever that url is now failing
            </summary>
    </member>
    <member name="P:Raven.Client.Connection.FailoverStatusChangedEventArgs.Url">
      <summary>
            The url whose failover status changed
            </summary>
    </member>
    <member name="T:Raven.Client.Connection.SerializationHelper">
      <summary>
             Helper method to do serialization from RavenJObject to JsonDocument
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.SerializationHelper.RavenJObjectsToJsonDocuments(System.Collections.Generic.IEnumerable{Raven.Json.Linq.RavenJObject})">
      <summary>
             Translate a collection of RavenJObject to JsonDocuments
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.SerializationHelper.ToJsonDocuments(System.Collections.Generic.IEnumerable{Raven.Json.Linq.RavenJObject})">
      <summary>
             Translate a collection of RavenJObject to JsonDocuments
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.SerializationHelper.ToJsonDocument(Raven.Json.Linq.RavenJObject)">
      <summary>
             Translate a collection of RavenJObject to JsonDocuments
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.SerializationHelper.ToQueryResult(Raven.Json.Linq.RavenJObject,System.String)">
      <summary>
            Translate a result for a query
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.SerializationHelper.DeserializeJsonDocument(System.String,Raven.Json.Linq.RavenJToken,System.Collections.Specialized.NameValueCollection,System.Net.HttpStatusCode)">
      <summary>
            Deserialize a request to a JsonDocument
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.SerializationHelper.DeserializeJsonDocumentMetadata(System.String,System.Collections.Specialized.NameValueCollection,System.Net.HttpStatusCode)">
      <summary>
            Deserialize a request to a JsonDocument
            </summary>
    </member>
    <member name="T:Raven.Client.Connection.ServerClient">
      <summary>
            Access the RavenDB operations using HTTP
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.#ctor(System.String,Raven.Client.Document.DocumentConvention,System.Net.ICredentials,System.Func{System.String,Raven.Client.Connection.ReplicationInformer},System.String,Raven.Client.Connection.HttpJsonRequestFactory,System.Nullable{System.Guid})">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Connection.ServerClient" /> class.
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.Get(System.String)">
      <summary>
            Gets the document for the specified key.
            </summary>
      <param name="key">The key.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.StartsWith(System.String,System.Int32,System.Int32)">
      <summary>
            Gets documents for the specified key prefix
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.ExecuteGetRequest(System.String)">
      <summary>
            Execute a GET request against the provided url
            and return the result as a json object
            </summary>
      <param name="requestUrl">The relative url to the server</param>
      <remarks>
            This method respects the replication semantics against the database.
            </remarks>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.InFailoverMode">
      <summary>
            Allow to query whatever we are in failover mode or not
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.DirectGet(System.String,System.String)">
      <summary>
            Perform a direct get for a document with the specified key on the specified server URL.
            </summary>
      <param name="serverUrl">The server URL.</param>
      <param name="key">The key.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.Put(System.String,System.Nullable{System.Guid},Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
      <summary>
            Puts the document with the specified key in the database
            </summary>
      <param name="key">The key.</param>
      <param name="etag">The etag.</param>
      <param name="document">The document.</param>
      <param name="metadata">The metadata.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.Delete(System.String,System.Nullable{System.Guid})">
      <summary>
            Deletes the document with the specified key.
            </summary>
      <param name="key">The key.</param>
      <param name="etag">The etag.</param>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.PutAttachment(System.String,System.Nullable{System.Guid},System.IO.Stream,Raven.Json.Linq.RavenJObject)">
      <summary>
            Puts the attachment with the specified key
            </summary>
      <param name="key">The key.</param>
      <param name="etag">The etag.</param>
      <param name="data">The data.</param>
      <param name="metadata">The metadata.</param>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.GetAttachment(System.String)">
      <summary>
            Gets the attachment by the specified key
            </summary>
      <param name="key">The key.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.HeadAttachment(System.String)">
      <summary>
            Retrieves the attachment metadata with the specified key, not the actual attachmet
            </summary>
      <param name="key">The key.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.DeleteAttachment(System.String,System.Nullable{System.Guid})">
      <summary>
            Deletes the attachment with the specified key
            </summary>
      <param name="key">The key.</param>
      <param name="etag">The etag.</param>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.GetIndexNames(System.Int32,System.Int32)">
      <summary>
            Gets the index names from the server
            </summary>
      <param name="start">Paging start</param>
      <param name="pageSize">Size of the page.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.ResetIndex(System.String)">
      <summary>
            Resets the specified index
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.GetIndex(System.String)">
      <summary>
            Gets the index definition for the specified name
            </summary>
      <param name="name">The name.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.PutIndex(System.String,Raven.Abstractions.Indexing.IndexDefinition)">
      <summary>
            Puts the index.
            </summary>
      <param name="name">The name.</param>
      <param name="definition">The definition.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.PutIndex(System.String,Raven.Abstractions.Indexing.IndexDefinition,System.Boolean)">
      <summary>
            Puts the index.
            </summary>
      <param name="name">The name.</param>
      <param name="definition">The definition.</param>
      <param name="overwrite">if set to <c>true</c> overwrite the index.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.PutIndex``2(System.String,Raven.Client.Indexes.IndexDefinitionBuilder{``0,``1})">
      <summary>
            Puts the index definition for the specified name
            </summary>
      <typeparam name="TDocument">The type of the document.</typeparam>
      <typeparam name="TReduceResult">The type of the reduce result.</typeparam>
      <param name="name">The name.</param>
      <param name="indexDef">The index def.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.PutIndex``2(System.String,Raven.Client.Indexes.IndexDefinitionBuilder{``0,``1},System.Boolean)">
      <summary>
            Puts the index for the specified name
            </summary>
      <typeparam name="TDocument">The type of the document.</typeparam>
      <typeparam name="TReduceResult">The type of the reduce result.</typeparam>
      <param name="name">The name.</param>
      <param name="indexDef">The index def.</param>
      <param name="overwrite">if set to <c>true</c> [overwrite].</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.Query(System.String,Raven.Abstractions.Data.IndexQuery,System.String[])">
      <summary>
            Queries the specified index.
            </summary>
      <param name="index">The index.</param>
      <param name="query">The query.</param>
      <param name="includes">The includes.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.DeleteIndex(System.String)">
      <summary>
            Deletes the index.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.Get(System.String[],System.String[])">
      <summary>
            Gets the results for the specified ids.
            </summary>
      <param name="ids">The ids.</param>
      <param name="includes">The includes.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.DirectGet(System.String[],System.String,System.String[])">
      <summary>
            Perform a direct get for loading multiple ids in one request
            </summary>
      <param name="ids">The ids.</param>
      <param name="operationUrl">The operation URL.</param>
      <param name="includes">The includes.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.Batch(System.Collections.Generic.IEnumerable{Raven.Abstractions.Commands.ICommandData})">
      <summary>
            Executed the specified commands as a single batch
            </summary>
      <param name="commandDatas">The command data.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.Commit(System.Guid)">
      <summary>
            Commits the specified tx id.
            </summary>
      <param name="txId">The tx id.</param>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.Rollback(System.Guid)">
      <summary>
            Rollbacks the specified tx id.
            </summary>
      <param name="txId">The tx id.</param>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.PromoteTransaction(System.Guid)">
      <summary>
            Promotes the transaction.
            </summary>
      <param name="fromTxId">From tx id.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.With(System.Net.ICredentials)">
      <summary>
            Returns a new <see cref="T:Raven.Client.Connection.IDatabaseCommands" /> using the specified credentials
            </summary>
      <param name="credentialsForSession">The credentials for session.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.ForceReadFromMaster">
      <summary>
            Force the database commands to read directly from the master, unless there has been a failover.
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.ForDatabase(System.String)">
      <summary>
            Create a new instance of <see cref="T:Raven.Client.Connection.IDatabaseCommands" /> that will interacts
            with the specified database
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.DeleteByIndex(System.String,Raven.Abstractions.Data.IndexQuery,System.Boolean)">
      <summary>
            Perform a set based deletes using the specified index.
            </summary>
      <param name="indexName">Name of the index.</param>
      <param name="queryToDelete">The query to delete.</param>
      <param name="allowStale">if set to <c>true</c> [allow stale].</param>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.UpdateByIndex(System.String,Raven.Abstractions.Data.IndexQuery,Raven.Abstractions.Data.PatchRequest[])">
      <summary>
            Perform a set based update using the specified index, not allowing the operation
            if the index is stale
            </summary>
      <param name="indexName">Name of the index.</param>
      <param name="queryToUpdate">The query to update.</param>
      <param name="patchRequests">The patch requests.</param>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.DeleteByIndex(System.String,Raven.Abstractions.Data.IndexQuery)">
      <summary>
            Perform a set based deletes using the specified index, not allowing the operation
            if the index is stale
            </summary>
      <param name="indexName">Name of the index.</param>
      <param name="queryToDelete">The query to delete.</param>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.UpdateByIndex(System.String,Raven.Abstractions.Data.IndexQuery,Raven.Abstractions.Data.PatchRequest[],System.Boolean)">
      <summary>
            Perform a set based update using the specified index.
            </summary>
      <param name="indexName">Name of the index.</param>
      <param name="queryToUpdate">The query to update.</param>
      <param name="patchRequests">The patch requests.</param>
      <param name="allowStale">if set to <c>true</c> [allow stale].</param>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.Suggest(System.String,Raven.Abstractions.Data.SuggestionQuery)">
      <summary>
            Returns a list of suggestions based on the specified suggestion query.
            </summary>
      <param name="index">The index to query for suggestions</param>
      <param name="suggestionQuery">The suggestion query.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.GetStatistics">
      <summary>
            Retrieve the statistics for the database
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.UrlFor(System.String)">
      <summary>
            Get the full URL for the given document key
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.Head(System.String)">
      <summary>
            Check if the document exists for the specified key
            </summary>
      <param name="key">The key.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.DirectHead(System.String,System.String)">
      <summary>
            Do a direct HEAD request against the server for the specified document
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.MultiGet(Raven.Abstractions.Data.GetRequest[])">
      <summary>
            Perform a single POST requst containing multiple nested GET requests
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.GetTerms(System.String,System.String,System.String,System.Int32)">
      <summary>
             Get the possible terms for the specified field in the index 
             You can page through the results by use fromValue parameter as the 
             starting point for the next query
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.GetFacets(System.String,Raven.Abstractions.Data.IndexQuery,System.String)">
      <summary>
            Using the given Index, calculate the facets as per the specified doc
            </summary>
      <param name="index">
      </param>
      <param name="query">
      </param>
      <param name="facetSetupDoc">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.Patch(System.String,Raven.Abstractions.Data.PatchRequest[])">
      <summary>
            Sends a patch request for a specific document, ignoring the document's Etag
            </summary>
      <param name="key">Id of the document to patch</param>
      <param name="patches">Array of patch requests</param>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.Patch(System.String,Raven.Abstractions.Data.PatchRequest[],System.Nullable{System.Guid})">
      <summary>
            Sends a patch request for a specific document
            </summary>
      <param name="key">Id of the document to patch</param>
      <param name="patches">Array of patch requests</param>
      <param name="etag">Require specific Etag [null to ignore]</param>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.DisableAllCaching">
      <summary>
            Disable all caching within the given scope
            </summary>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:Raven.Client.Connection.ServerClient.Finalize">
      <summary>
            Allows an <see cref="T:System.Object" /> to attempt to free resources and perform other cleanup operations before the <see cref="T:System.Object" /> is reclaimed by garbage collection.
            </summary>
    </member>
    <member name="P:Raven.Client.Connection.ServerClient.ReplicationInformer">
      <summary>
            Allow access to the replication informer used to determine how we replicate requests
            </summary>
    </member>
    <member name="P:Raven.Client.Connection.ServerClient.OperationsHeaders">
      <summary>
            Gets or sets the operations headers.
            </summary>
      <value>The operations headers.</value>
    </member>
    <member name="P:Raven.Client.Connection.ServerClient.SupportsPromotableTransactions">
      <summary>
            Gets a value indicating whether [supports promotable transactions].
            </summary>
      <value>
        <c>true</c> if [supports promotable transactions]; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Raven.Client.Connection.ServerClient.Url">
      <summary>
            Gets the URL.
            </summary>
      <value>The URL.</value>
    </member>
    <member name="P:Raven.Client.Connection.ServerClient.ProfilingInformation">
      <summary>
            The profiling information
            </summary>
    </member>
    <member name="E:Raven.Client.Connection.ServerClient.FailoverStatusChanged">
      <summary>
            Notify when the failover status changed
            </summary>
    </member>
    <member name="T:Raven.Client.Connection.WebRequestEventArgs">
      <summary>
            Event arguments for the event of creating a <see cref="T:System.Net.WebRequest" /></summary>
    </member>
    <member name="P:Raven.Client.Connection.WebRequestEventArgs.Request">
      <summary>
            Gets or sets the web request.
            </summary>
      <value>The request.</value>
    </member>
    <member name="T:Raven.Client.Converters.ITypeConverter">
      <summary>
            Interface for performing type conversions.
            We couldn't use the built-in TypeConverter because it is too big an interface for people to build on.
            </summary>
    </member>
    <member name="M:Raven.Client.Converters.ITypeConverter.CanConvertFrom(System.Type)">
      <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter.
            </summary>
      <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from.</param>
    </member>
    <member name="M:Raven.Client.Converters.ITypeConverter.ConvertFrom(System.String,System.Object,System.Boolean)">
      <summary>
            Converts the given object to the type of this converter.
            </summary>
      <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
      <param name="tag">The tag prefix to use</param>
      <param name="value">The <see cref="T:System.Object" /> to convert. </param>
      <param name="allowNull">Whatever null is a valid value</param>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
    </member>
    <member name="M:Raven.Client.Converters.ITypeConverter.ConvertTo(System.String)">
      <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
      <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
      <param name="value">The <see cref="T:System.Object" /> to convert. </param>
    </member>
    <member name="T:Raven.Client.Converters.GuidConverter">
      <summary>
            Convert strings from / to guids
            </summary>
    </member>
    <member name="M:Raven.Client.Converters.GuidConverter.CanConvertFrom(System.Type)">
      <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
      <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from.</param>
    </member>
    <member name="M:Raven.Client.Converters.GuidConverter.ConvertFrom(System.String,System.Object,System.Boolean)">
      <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
      <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
    </member>
    <member name="M:Raven.Client.Converters.GuidConverter.ConvertTo(System.String)">
      <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
      <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
      <param name="value">The <see cref="T:System.Object" /> to convert. </param>
    </member>
    <member name="T:Raven.Client.Converters.Int32Converter">
      <summary>
            Convert strings from / to int32
            </summary>
    </member>
    <member name="M:Raven.Client.Converters.Int32Converter.CanConvertFrom(System.Type)">
      <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
      <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from. 
                            </param>
    </member>
    <member name="M:Raven.Client.Converters.Int32Converter.ConvertFrom(System.String,System.Object,System.Boolean)">
      <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
      <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
    </member>
    <member name="M:Raven.Client.Converters.Int32Converter.ConvertTo(System.String)">
      <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
      <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
      <param name="value">The <see cref="T:System.Object" /> to convert. </param>
    </member>
    <member name="T:Raven.Client.Converters.Int64Converter">
      <summary>
            Convert strings from / to int64
            </summary>
    </member>
    <member name="M:Raven.Client.Converters.Int64Converter.CanConvertFrom(System.Type)">
      <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
      <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from. 
                            </param>
    </member>
    <member name="M:Raven.Client.Converters.Int64Converter.ConvertFrom(System.String,System.Object,System.Boolean)">
      <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
      <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
      <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
    </member>
    <member name="M:Raven.Client.Converters.Int64Converter.ConvertTo(System.String)">
      <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
      <returns>
            An <see cref="T:System.Object" /> that represents the converted value.
            </returns>
      <param name="value">The <see cref="T:System.Object" /> to convert. </param>
    </member>
    <member name="T:Raven.Client.IDisposalNotification">
      <summary>
            Provide a way for interested party to tell whatever implementers have been disposed
            </summary>
    </member>
    <member name="P:Raven.Client.IDisposalNotification.WasDisposed">
      <summary>
            Whatever the instance has been disposed
            </summary>
    </member>
    <member name="E:Raven.Client.IDisposalNotification.AfterDispose">
      <summary>
            Called after dispose is completed
            </summary>
    </member>
    <member name="T:Raven.Client.IDocumentStore">
      <summary>
            Interface for managing access to RavenDB and open sessions.
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentStore.AggressivelyCacheFor(System.TimeSpan)">
      <summary>
            Setup the context for aggressive caching.
            </summary>
      <param name="cahceDuration">Specify the aggressive cache duration</param>
      <remarks>
            Aggressive caching means that we will not check the server to see whatever the response
            we provide is current or not, but will serve the information directly from the local cache
            without touching the server.
            </remarks>
    </member>
    <member name="M:Raven.Client.IDocumentStore.DisableAggressiveCaching">
      <summary>
            Setup the context for no aggressive caching
            </summary>
      <remarks>
            This is mainly useful for internal use inside RavenDB, when we are executing
            queries that has been marked with WaitForNonStaleResults, we temporarily disable
            aggressive caching.
            </remarks>
    </member>
    <member name="M:Raven.Client.IDocumentStore.Initialize">
      <summary>
            Initializes this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.IDocumentStore.OpenAsyncSession">
      <summary>
            Opens the async session.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.IDocumentStore.OpenAsyncSession(System.String)">
      <summary>
            Opens the async session.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.IDocumentStore.OpenSession">
      <summary>
            Opens the session.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.IDocumentStore.OpenSession(System.String)">
      <summary>
            Opens the session for a particular database
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentStore.OpenSession(Raven.Client.Document.OpenSessionOptions)">
      <summary>
            Opens the session with the specified options.
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentStore.ExecuteIndex(Raven.Client.Indexes.AbstractIndexCreationTask)">
      <summary>
            Executes the index creation.
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentStore.GetLastWrittenEtag">
      <summary>
             Gets the etag of the last document written by any session belonging to this 
             document store
            </summary>
    </member>
    <member name="P:Raven.Client.IDocumentStore.SharedOperationsHeaders">
      <summary>
            Gets the shared operations headers.
            </summary>
      <value>The shared operations headers.</value>
    </member>
    <member name="P:Raven.Client.IDocumentStore.JsonRequestFactory">
      <summary>
            Get the <see cref="T:Raven.Client.Connection.HttpJsonRequestFactory" /> for this store
            </summary>
    </member>
    <member name="P:Raven.Client.IDocumentStore.Identifier">
      <summary>
            Gets or sets the identifier for this store.
            </summary>
      <value>The identifier.</value>
    </member>
    <member name="P:Raven.Client.IDocumentStore.AsyncDatabaseCommands">
      <summary>
            Gets the async database commands.
            </summary>
      <value>The async database commands.</value>
    </member>
    <member name="P:Raven.Client.IDocumentStore.DatabaseCommands">
      <summary>
            Gets the database commands.
            </summary>
      <value>The database commands.</value>
    </member>
    <member name="P:Raven.Client.IDocumentStore.Conventions">
      <summary>
            Gets the conventions.
            </summary>
      <value>The conventions.</value>
    </member>
    <member name="P:Raven.Client.IDocumentStore.Url">
      <summary>
            Gets the URL.
            </summary>
    </member>
    <member name="T:Raven.Client.DocumentStoreBase">
      <summary>
            Contains implementation of some IDocumentStore operations shared by DocumentStore implementations
            </summary>
    </member>
    <member name="M:Raven.Client.DocumentStoreBase.ExecuteIndex(Raven.Client.Indexes.AbstractIndexCreationTask)">
      <summary>
            Executes the index creation.
            </summary>
    </member>
    <member name="M:Raven.Client.DocumentStoreBase.GetLastWrittenEtag">
      <summary>
             Gets the etag of the last document written by any session belonging to this 
             document store
            </summary>
    </member>
    <member name="M:Raven.Client.DocumentStoreBase.RegisterListener(Raven.Client.Listeners.IDocumentDeleteListener)">
      <summary>
            Registers the delete listener.
            </summary>
      <param name="deleteListener">The delete listener.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.DocumentStoreBase.RegisterListener(Raven.Client.Listeners.IDocumentQueryListener)">
      <summary>
            Registers the query listener.
            </summary>
    </member>
    <member name="M:Raven.Client.DocumentStoreBase.RegisterListener(Raven.Client.Listeners.IDocumentConversionListener)">
      <summary>
            Registers the convertion listener.
            </summary>
    </member>
    <member name="M:Raven.Client.DocumentStoreBase.RegisterListener(Raven.Client.Listeners.IDocumentStoreListener)">
      <summary>
            Registers the store listener.
            </summary>
      <param name="documentStoreListener">The document store listener.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.DocumentStoreBase.GetProfilingInformationFor(System.Guid)">
      <summary>
             Get the profiling information for the given id
            </summary>
    </member>
    <member name="P:Raven.Client.DocumentStoreBase.WasDisposed">
      <summary>
            Whatever the instance has been disposed
            </summary>
    </member>
    <member name="P:Raven.Client.DocumentStoreBase.SharedOperationsHeaders">
      <summary>
            Gets the shared operations headers.
            </summary>
      <value>The shared operations headers.</value>
    </member>
    <member name="P:Raven.Client.DocumentStoreBase.Conventions">
      <summary>
            Gets the conventions.
            </summary>
      <value>The conventions.</value>
    </member>
    <member name="P:Raven.Client.DocumentStoreBase.Url">
      <summary>
            Gets or sets the URL.
            </summary>
    </member>
    <member name="P:Raven.Client.DocumentStoreBase.EnlistInDistributedTransactions">
      <summary>
             Whatever or not we will automatically enlist in distributed transactions
            </summary>
    </member>
    <member name="P:Raven.Client.DocumentStoreBase.ResourceManagerId">
      <summary>
            The resource manager id for the document store.
            IMPORTANT: Using Guid.NewGuid() to set this value is almost certainly a mistake, you should set
            it to a value that remains consistent between restart of the system.
            </summary>
    </member>
    <member name="E:Raven.Client.DocumentStoreBase.AfterDispose">
      <summary>
      </summary>
    </member>
    <member name="E:Raven.Client.DocumentStoreBase.SessionCreatedInternal">
      <summary>
             Internal notification for integration tools, mainly
            </summary>
    </member>
    <member name="T:Raven.Client.IDocumentQueryCustomization">
      <summary>
            Customize the document query
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOfLastWrite">
      <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOfLastWrite(System.TimeSpan)">
      <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOfNow">
      <summary>
            Instructs the query to wait for non stale results as of now.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
      <summary>
            Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
      <param name="waitTimeout">The wait timeout.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOf(System.DateTime)">
      <summary>
            Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
      <param name="cutOff">The cut off.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
      <summary>
            Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
      <param name="cutOff">The cut off.</param>
      <param name="waitTimeout">The wait timeout.</param>
    </member>
    <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResults">
      <summary>
            EXPERT ONLY: Instructs the query to wait for non stale results.
            This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentQueryCustomization.Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
      <typeparam name="TResult">The type of the object that holds the id that you want to include.</typeparam>
      <param name="path">The path, which is name of the property that holds the id of the object to include.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.IDocumentQueryCustomization.Include``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
      <typeparam name="TResult">The type of the object that holds the id that you want to include.</typeparam>
      <typeparam name="TInclude">The type of the object that you want to include.</typeparam>
      <param name="path">The path, which is name of the property that holds the id of the object to include.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.IDocumentQueryCustomization.Include(System.String)">
      <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
      <param name="path">The path.</param>
    </member>
    <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResults(System.TimeSpan)">
      <summary>
            EXPERT ONLY: Instructs the query to wait for non stale results for the specified wait timeout.
            This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
      <param name="waitTimeout">The wait timeout.</param>
    </member>
    <member name="M:Raven.Client.IDocumentQueryCustomization.WithinRadiusOf(System.Double,System.Double,System.Double)">
      <summary>
            Filter matches to be inside the specified radius
            </summary>
      <param name="radius">The radius.</param>
      <param name="latitude">The latitude.</param>
      <param name="longitude">The longitude.</param>
    </member>
    <member name="M:Raven.Client.IDocumentQueryCustomization.RandomOrdering">
      <summary>
            Order the search results randomly
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentQueryCustomization.RandomOrdering(System.String)">
      <summary>
            Order the search results randomly using the specified seed
            this is useful if you want to have repeatable random queries
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentQueryCustomization.TransformResults(System.Func{Raven.Abstractions.Data.IndexQuery,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object}})">
      <summary>
            Execute the transfromation function on the results of this query.
            </summary>
    </member>
    <member name="T:Raven.Client.Document.IAbstractDocumentQuery`1">
      <summary>
             Mostly used by the linq provider
            </summary>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WaitForNonStaleResults(System.TimeSpan)">
      <summary>
              Instruct the query to wait for non stale result for the specified wait timeout.
            </summary>
      <param name="waitTimeout">The wait timeout.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.GetProjectionFields">
      <summary>
              Gets the fields for projection
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.RandomOrdering">
      <summary>
            Order the search results randomly
            </summary>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.RandomOrdering(System.String)">
      <summary>
            Order the search results randomly using the specified seed
            this is useful if you want to have repeatable random queries
            </summary>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.AddOrder(System.String,System.Boolean)">
      <summary>
              Adds an ordering for a specific field to the query
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="descending">if set to <c>true</c> [descending].</param>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.AddOrder(System.String,System.Boolean,System.Type)">
      <summary>
              Adds an ordering for a specific field to the query and specifies the type of field for sorting purposes
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="descending">if set to <c>true</c> [descending].</param>
      <param name="fieldType">the type of the field to be sorted.</param>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Include(System.String)">
      <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
      <param name="path">The path.</param>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
      <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
      <param name="path">The path.</param>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Take(System.Int32)">
      <summary>
              Takes the specified count.
            </summary>
      <param name="count">The count.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Skip(System.Int32)">
      <summary>
              Skips the specified count.
            </summary>
      <param name="count">The count.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Where(System.String)">
      <summary>
              Filter the results from the index using the specified where clause.
            </summary>
      <param name="whereClause">The where clause.</param>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereEquals(System.String,System.Object)">
      <summary>
              Matches exact value
            </summary>
      <remarks>
              Defaults to NotAnalyzed
            </remarks>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereEquals(System.String,System.Object,System.Boolean)">
      <summary>
              Matches exact value
            </summary>
      <remarks>
              Defaults to allow wildcards only if analyzed
            </remarks>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.OpenSubclause">
      <summary>
              Simplified method for opening a new clause within the query
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.GroupBy(Raven.Abstractions.Data.AggregationOperation,System.String[])">
      <summary>
              Instruct the index to group by the specified fields using the specified aggregation operation
            </summary>
      <remarks>
              This is only valid on dynamic indexes queries
            </remarks>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.CloseSubclause">
      <summary>
              Simplified method for closing a clause within the query
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereEquals(Raven.Client.WhereParams)">
      <summary>
              Matches exact value
            </summary>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.NegateNext">
      <summary>
             Negate the next operation
            </summary>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereIn(System.String,System.Collections.Generic.IEnumerable{System.Object})">
      <summary>
            Check that the field has one of the specified value
            </summary>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereContains(System.String,System.Object)">
      <summary>
              Avoid using WhereContains(), use Search() instead
            </summary>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereContains(System.String,System.Object[])">
      <summary>
              Avoid using WhereContains(), use Search() instead
            </summary>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereContains(System.String,System.Collections.Generic.IEnumerable{System.Object})">
      <summary>
              Avoid using WhereContains(), use Search() instead
            </summary>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereStartsWith(System.String,System.Object)">
      <summary>
              Matches fields which starts with the specified value.
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereEndsWith(System.String,System.Object)">
      <summary>
              Matches fields which ends with the specified value.
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereBetween(System.String,System.Object,System.Object)">
      <summary>
              Matches fields where the value is between the specified start and end, exclusive
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereBetweenOrEqual(System.String,System.Object,System.Object)">
      <summary>
              Matches fields where the value is between the specified start and end, inclusive
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereGreaterThan(System.String,System.Object)">
      <summary>
              Matches fields where the value is greater than the specified value
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereGreaterThanOrEqual(System.String,System.Object)">
      <summary>
              Matches fields where the value is greater than or equal to the specified value
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereLessThan(System.String,System.Object)">
      <summary>
              Matches fields where the value is less than the specified value
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereLessThanOrEqual(System.String,System.Object)">
      <summary>
              Matches fields where the value is less than or equal to the specified value
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.AndAlso">
      <summary>
              Add an AND to the query
            </summary>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.OrElse">
      <summary>
              Add an OR to the query
            </summary>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Boost(System.Decimal)">
      <summary>
              Specifies a boost weight to the last where clause.
              The higher the boost factor, the more relevant the term will be.
            </summary>
      <param name="boost">boosting factor where 1.0 is default, less than 1.0 is lower weight, greater than 1.0 is higher weight</param>
      <returns>
      </returns>
      <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Boosting%20a%20Term
            </remarks>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Fuzzy(System.Decimal)">
      <summary>
              Specifies a fuzziness factor to the single word term in the last where clause
            </summary>
      <param name="fuzzy">0.0 to 1.0 where 1.0 means closer match</param>
      <returns>
      </returns>
      <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Fuzzy%20Searches
            </remarks>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Proximity(System.Int32)">
      <summary>
              Specifies a proximity distance for the phrase in the last where clause
            </summary>
      <param name="proximity">number of words within</param>
      <returns>
      </returns>
      <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Proximity%20Searches
            </remarks>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.OrderBy(System.String[])">
      <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by ascending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
      <param name="fields">The fields.</param>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WaitForNonStaleResultsAsOfNow">
      <summary>
              Instructs the query to wait for non stale results as of now.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
      <summary>
              Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
      <param name="waitTimeout">The wait timeout.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WaitForNonStaleResultsAsOf(System.DateTime)">
      <summary>
              Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
      <param name="cutOff">The cut off.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
      <summary>
              Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
      <param name="cutOff">The cut off.</param>
      <param name="waitTimeout">The wait timeout.</param>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WaitForNonStaleResults">
      <summary>
              EXPERT ONLY: Instructs the query to wait for non stale results.
              This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Search(System.String,System.String,Raven.Client.Linq.EscapeQueryOptions)">
      <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.ToString">
      <summary>
              Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
              A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.GetLastEqualityTerm">
      <summary>
              The last term that we asked the query to use equals on
            </summary>
    </member>
    <member name="P:Raven.Client.Document.IAbstractDocumentQuery`1.IndexQueried">
      <summary>
              Get the name of the index being queried
            </summary>
    </member>
    <member name="P:Raven.Client.Document.IAbstractDocumentQuery`1.DocumentConvention">
      <summary>
            Gets the document convention from the query session
            </summary>
    </member>
    <member name="T:Raven.Client.Document.AbstractDocumentQuery`2">
      <summary>
              A query against a Raven index
            </summary>
    </member>
    <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.negate">
      <summary>
            Whatever to negate the next operation
            </summary>
    </member>
    <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.theDatabaseCommands">
      <summary>
            The database commands to use
            </summary>
    </member>
    <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.theAsyncDatabaseCommands">
      <summary>
            Async database commands to use
            </summary>
    </member>
    <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.indexName">
      <summary>
            The index to query
            </summary>
    </member>
    <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.projectionFields">
      <summary>
              The list of fields to project directly from the index
            </summary>
    </member>
    <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.queryListeners">
      <summary>
            The query listeners for this query
            </summary>
    </member>
    <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.theSession">
      <summary>
            The session for this query
            </summary>
    </member>
    <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.cutoff">
      <summary>
              The cutoff date to use for detecting staleness in the index
            </summary>
    </member>
    <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.orderByFields">
      <summary>
              The fields to order the results by
            </summary>
    </member>
    <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.sortByHints">
      <summary>
              The types to sort the fields by (NULL if not specified)
            </summary>
    </member>
    <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.pageSize">
      <summary>
              The page size to use when querying the index
            </summary>
    </member>
    <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.theQueryText">
      <summary>
            The query to use
            </summary>
    </member>
    <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.start">
      <summary>
              which record to start reading from
            </summary>
    </member>
    <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.timeout">
      <summary>
            Timeout for this query
            </summary>
    </member>
    <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.theWaitForNonStaleResults">
      <summary>
            Should we wait for non stale results
            </summary>
    </member>
    <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.includes">
      <summary>
            The paths to include when loading the query
            </summary>
    </member>
    <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.aggregationOp">
      <summary>
            What aggregated operation to execute
            </summary>
    </member>
    <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.groupByFields">
      <summary>
            Fields to group on
            </summary>
    </member>
    <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.queryStats">
      <summary>
            Holds the query stats
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.#ctor(Raven.Client.Document.InMemoryDocumentSessionOperations,Raven.Client.Connection.IDatabaseCommands,System.String,System.String[],Raven.Client.Listeners.IDocumentQueryListener[])">
      <summary>
              Initializes a new instance of the <see cref="T:Raven.Client.Document.DocumentQuery`1" /> class.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.#ctor(Raven.Client.Document.InMemoryDocumentSessionOperations,Raven.Client.Connection.IDatabaseCommands,Raven.Client.Connection.Async.IAsyncDatabaseCommands,System.String,System.String[],Raven.Client.Listeners.IDocumentQueryListener[])">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.AbstractDocumentQuery`2" /> class.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.#ctor(Raven.Client.Document.AbstractDocumentQuery{`0,`1})">
      <summary>
              Initializes a new instance of the <see cref="T:Raven.Client.IDocumentQuery`1" /> class.
            </summary>
      <param name="other">The other.</param>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GenerateQueryWithinRadiusOf(System.Double,System.Double,System.Double)">
      <summary>
              Filter matches to be inside the specified radius
            </summary>
      <param name="radius">The radius.</param>
      <param name="latitude">The latitude.</param>
      <param name="longitude">The longitude.</param>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResults(System.TimeSpan)">
      <summary>
              Instruct the query to wait for non stale result for the specified wait timeout.
            </summary>
      <param name="waitTimeout">The wait timeout.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Lazily">
      <summary>
            Register the query as a lazy query in the session and return a lazy
            instance that will evaluate the query only when needed
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Lazily(System.Action{System.Collections.Generic.IEnumerable{`0}})">
      <summary>
            Register the query as a lazy query in the session and return a lazy
            instance that will evaluate the query only when needed
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GetProjectionFields">
      <summary>
              Gets the fields for projection
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.RandomOrdering">
      <summary>
            Order the search results randomly
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.RandomOrdering(System.String)">
      <summary>
            Order the search results randomly using the specified seed
            this is useful if you want to have repeatable random queries
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.AddOrder(System.String,System.Boolean)">
      <summary>
              Adds an ordering for a specific field to the query
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="descending">if set to <c>true</c> [descending].</param>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.AddOrder(System.String,System.Boolean,System.Type)">
      <summary>
              Adds an ordering for a specific field to the query and specifies the type of field for sorting purposes
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="descending">if set to <c>true</c> [descending].</param>
      <param name="fieldType">the type of the field to be sorted.</param>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GetEnumerator">
      <summary>
              Gets the enumerator.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Include(System.String)">
      <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
      <param name="path">The path.</param>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Where(System.Func{`0,System.Boolean})">
      <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Count(System.Func{`0,System.Boolean})">
      <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Count">
      <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
      <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
      <param name="path">The path.</param>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Take(System.Int32)">
      <summary>
              Takes the specified count.
            </summary>
      <param name="count">The count.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Skip(System.Int32)">
      <summary>
              Skips the specified count.
            </summary>
      <param name="count">The count.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Where(System.String)">
      <summary>
              Filter the results from the index using the specified where clause.
            </summary>
      <param name="whereClause">The where clause.</param>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereEquals(System.String,System.Object)">
      <summary>
              Matches exact value
            </summary>
      <remarks>
              Defaults to NotAnalyzed
            </remarks>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereEquals(System.String,System.Object,System.Boolean)">
      <summary>
              Matches exact value
            </summary>
      <remarks>
              Defaults to allow wildcards only if analyzed
            </remarks>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.OpenSubclause">
      <summary>
              Simplified method for opening a new clause within the query
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GroupBy(Raven.Abstractions.Data.AggregationOperation,System.String[])">
      <summary>
              Instruct the index to group by the specified fields using the specified aggregation operation
            </summary>
      <remarks>
              This is only valid on dynamic indexes queries
            </remarks>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.CloseSubclause">
      <summary>
              Simplified method for closing a clause within the query
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereEquals(Raven.Client.WhereParams)">
      <summary>
              Matches exact value
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.NegateNext">
      <summary>
             Negate the next operation
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereContains(System.String,System.Object)">
      <summary>
              Avoid using WhereContains(), use Search() instead
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereContains(System.String,System.Object[])">
      <summary>
              Avoid using WhereContains(), use Search() instead
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereIn(System.String,System.Collections.Generic.IEnumerable{System.Object})">
      <summary>
            Check that the field has one of the specified value
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereContains(System.String,System.Collections.Generic.IEnumerable{System.Object})">
      <summary>
              Avoid using WhereContains(), use Search() instead
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereStartsWith(System.String,System.Object)">
      <summary>
              Matches fields which starts with the specified value.
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereEndsWith(System.String,System.Object)">
      <summary>
              Matches fields which ends with the specified value.
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereBetween(System.String,System.Object,System.Object)">
      <summary>
              Matches fields where the value is between the specified start and end, exclusive
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereBetweenOrEqual(System.String,System.Object,System.Object)">
      <summary>
              Matches fields where the value is between the specified start and end, inclusive
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereGreaterThan(System.String,System.Object)">
      <summary>
              Matches fields where the value is greater than the specified value
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereGreaterThanOrEqual(System.String,System.Object)">
      <summary>
              Matches fields where the value is greater than or equal to the specified value
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereLessThan(System.String,System.Object)">
      <summary>
              Matches fields where the value is less than the specified value
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereLessThanOrEqual(System.String,System.Object)">
      <summary>
              Matches fields where the value is less than or equal to the specified value
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.AndAlso">
      <summary>
              Add an AND to the query
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.OrElse">
      <summary>
              Add an OR to the query
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Boost(System.Decimal)">
      <summary>
              Specifies a boost weight to the last where clause.
              The higher the boost factor, the more relevant the term will be.
            </summary>
      <param name="boost">boosting factor where 1.0 is default, less than 1.0 is lower weight, greater than 1.0 is higher weight</param>
      <returns>
      </returns>
      <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Boosting%20a%20Term
            </remarks>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Fuzzy(System.Decimal)">
      <summary>
              Specifies a fuzziness factor to the single word term in the last where clause
            </summary>
      <param name="fuzzy">0.0 to 1.0 where 1.0 means closer match</param>
      <returns>
      </returns>
      <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Fuzzy%20Searches
            </remarks>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Proximity(System.Int32)">
      <summary>
              Specifies a proximity distance for the phrase in the last where clause
            </summary>
      <param name="proximity">number of words within</param>
      <returns>
      </returns>
      <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Proximity%20Searches
            </remarks>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.OrderBy(System.String[])">
      <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by ascending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
      <param name="fields">The fields.</param>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOfNow">
      <summary>
              Instructs the query to wait for non stale results as of now.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
      <summary>
              Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
      <param name="waitTimeout">The wait timeout.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOf(System.DateTime)">
      <summary>
              Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
      <param name="cutOff">The cut off.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
      <summary>
              Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
      <param name="cutOff">The cut off.</param>
      <param name="waitTimeout">The wait timeout.</param>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOfLastWrite">
      <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOfLastWrite(System.TimeSpan)">
      <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResults">
      <summary>
              EXPERT ONLY: Instructs the query to wait for non stale results.
              This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Statistics(Raven.Client.Linq.RavenQueryStatistics@)">
      <summary>
            Provide statistics about the query, such as total count of matching records
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.AfterQueryExecuted(System.Action{Raven.Abstractions.Data.QueryResult})">
      <summary>
            Callback to get the results of the query
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.InvokeAfterQueryExecuted(Raven.Abstractions.Data.QueryResult)">
      <summary>
            Called externally to raise the after query executed callback
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GenerateIndexQuery(System.String)">
      <summary>
              Generates the index query.
            </summary>
      <param name="query">The query.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Search(System.String,System.String,Raven.Client.Linq.EscapeQueryOptions)">
      <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.ToString">
      <summary>
              Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
              A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GetLastEqualityTerm">
      <summary>
              The last term that we asked the query to use equals on
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.ToListAsync">
      <summary>
            Returns a list of results for a query asynchronously. 
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.CountAsync">
      <summary>
            Gets the total count of records for this query
            </summary>
    </member>
    <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.IndexQueried">
      <summary>
              Get the name of the index being queried
            </summary>
    </member>
    <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.DatabaseCommands">
      <summary>
              Grant access to the database commands
            </summary>
    </member>
    <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.AsyncDatabaseCommands">
      <summary>
              Grant access to the async database commands
            </summary>
    </member>
    <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.DocumentConvention">
      <summary>
            Gets the document convention from the query session
            </summary>
    </member>
    <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.Session">
      <summary>
              Gets the session associated with this document query
            </summary>
    </member>
    <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.QueryText">
      <summary>
              Gets the query text built so far
            </summary>
    </member>
    <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.QueryResult">
      <summary>
              Gets the query result
              Execute the query the first time that this is called.
            </summary>
      <value>The query result.</value>
    </member>
    <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.QueryResultAsync">
      <summary>
              Gets the query result
              Execute the query the first time that this is called.
            </summary>
      <value>The query result.</value>
    </member>
    <member name="T:Raven.Client.IDocumentQueryBase`2">
      <summary>
              A query against a Raven index
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.NegateNext">
      <summary>
              Negate the next operation
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.Include(System.String)">
      <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
      <param name="path">The path.</param>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.Where(System.Func{`0,System.Boolean})">
      <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.Count(System.Func{`0,System.Boolean})">
      <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.Count">
      <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
      <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
      <param name="path">The path.</param>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.Take(System.Int32)">
      <summary>
              Takes the specified count.
            </summary>
      <param name="count">The count.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.Skip(System.Int32)">
      <summary>
              Skips the specified count.
            </summary>
      <param name="count">The count.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.Where(System.String)">
      <summary>
              Filter the results from the index using the specified where clause.
            </summary>
      <param name="whereClause">The where clause.</param>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEquals(System.String,System.Object)">
      <summary>
              Matches exact value
            </summary>
      <remarks>
              Defaults to NotAnalyzed
            </remarks>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEquals``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
      <summary>
              Matches exact value
            </summary>
      <remarks>
              Defaults to NotAnalyzed
            </remarks>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEquals(System.String,System.Object,System.Boolean)">
      <summary>
              Matches exact value
            </summary>
      <remarks>
              Defaults to allow wildcards only if analyzed
            </remarks>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEquals``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,System.Boolean)">
      <summary>
              Matches exact value
            </summary>
      <remarks>
              Defaults to allow wildcards only if analyzed
            </remarks>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEquals(Raven.Client.WhereParams)">
      <summary>
              Matches exact value
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WhereContains(System.String,System.Object)">
      <summary>
              Matches substrings of the field
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WhereContains(System.String,System.Object[])">
      <summary>
              Matches substrings of the field
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WhereContains(System.String,System.Collections.Generic.IEnumerable{System.Object})">
      <summary>
              Matches substrings of the field
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WhereIn(System.String,System.Collections.Generic.IEnumerable{System.Object})">
      <summary>
            Check that the field has one of the specified value
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WhereIn``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Check that the field has one of the specified value
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WhereStartsWith(System.String,System.Object)">
      <summary>
              Matches fields which starts with the specified value.
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WhereStartsWith``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
      <summary>
              Matches fields which starts with the specified value.
            </summary>
      <param name="propertySelector">Property selector for the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEndsWith(System.String,System.Object)">
      <summary>
              Matches fields which ends with the specified value.
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEndsWith``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
      <summary>
              Matches fields which ends with the specified value.
            </summary>
      <param name="propertySelector">Property selector for the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WhereBetween(System.String,System.Object,System.Object)">
      <summary>
              Matches fields where the value is between the specified start and end, exclusive
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WhereBetween``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,``0)">
      <summary>
              Matches fields where the value is between the specified start and end, exclusive
            </summary>
      <param name="propertySelector">Property selector for the field.</param>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WhereBetweenOrEqual(System.String,System.Object,System.Object)">
      <summary>
              Matches fields where the value is between the specified start and end, inclusive
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WhereBetweenOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,``0)">
      <summary>
              Matches fields where the value is between the specified start and end, inclusive
            </summary>
      <param name="propertySelector">Property selector for the field.</param>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WhereGreaterThan(System.String,System.Object)">
      <summary>
              Matches fields where the value is greater than the specified value
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WhereGreaterThan``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
      <summary>
              Matches fields where the value is greater than the specified value
            </summary>
      <param name="propertySelector">Property selector for the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WhereGreaterThanOrEqual(System.String,System.Object)">
      <summary>
              Matches fields where the value is greater than or equal to the specified value
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WhereGreaterThanOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
      <summary>
              Matches fields where the value is greater than or equal to the specified value
            </summary>
      <param name="propertySelector">Property selector for the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WhereLessThan(System.String,System.Object)">
      <summary>
              Matches fields where the value is less than the specified value
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WhereLessThan``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
      <summary>
              Matches fields where the value is less than the specified value
            </summary>
      <param name="propertySelector">Property selector for the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WhereLessThanOrEqual(System.String,System.Object)">
      <summary>
              Matches fields where the value is less than or equal to the specified value
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WhereLessThanOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
      <summary>
              Matches fields where the value is less than or equal to the specified value
            </summary>
      <param name="propertySelector">Property selector for the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.AndAlso">
      <summary>
              Add an AND to the query
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.OrElse">
      <summary>
              Add an OR to the query
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.Boost(System.Decimal)">
      <summary>
              Specifies a boost weight to the last where clause.
              The higher the boost factor, the more relevant the term will be.
            </summary>
      <param name="boost">boosting factor where 1.0 is default, less than 1.0 is lower weight, greater than 1.0 is higher weight</param>
      <returns>
      </returns>
      <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Boosting%20a%20Term
            </remarks>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.Fuzzy(System.Decimal)">
      <summary>
              Specifies a fuzziness factor to the single word term in the last where clause
            </summary>
      <param name="fuzzy">0.0 to 1.0 where 1.0 means closer match</param>
      <returns>
      </returns>
      <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Fuzzy%20Searches
            </remarks>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.Proximity(System.Int32)">
      <summary>
              Specifies a proximity distance for the phrase in the last where clause
            </summary>
      <param name="proximity">number of words within</param>
      <returns>
      </returns>
      <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Proximity%20Searches
            </remarks>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WithinRadiusOf(System.Double,System.Double,System.Double)">
      <summary>
              Filter matches to be inside the specified radius
            </summary>
      <param name="radius">The radius.</param>
      <param name="latitude">The latitude.</param>
      <param name="longitude">The longitude.</param>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.SortByDistance">
      <summary>
              Sorts the query results by distance.
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.OrderBy(System.String[])">
      <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by ascending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
      <param name="fields">The fields.</param>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
      <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by ascending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
      <param name="propertySelectors">Property selectors for the fields.</param>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOfNow">
      <summary>
              Instructs the query to wait for non stale results as of now.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOfLastWrite">
      <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOfLastWrite(System.TimeSpan)">
      <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
      <summary>
              Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
      <param name="waitTimeout">The wait timeout.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOf(System.DateTime)">
      <summary>
              Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
      <param name="cutOff">The cut off.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
      <summary>
              Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
      <param name="cutOff">The cut off.</param>
      <param name="waitTimeout">The wait timeout.</param>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResults">
      <summary>
              EXPERT ONLY: Instructs the query to wait for non stale results.
              This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResults(System.TimeSpan)">
      <summary>
              EXPERT ONLY: Instructs the query to wait for non stale results for the specified wait timeout.
              This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
      <param name="waitTimeout">The wait timeout.</param>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.RandomOrdering">
      <summary>
            Order the search results randomly
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.RandomOrdering(System.String)">
      <summary>
            Order the search results randomly using the specified seed
            this is useful if you want to have repeatable random queries
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.AddOrder(System.String,System.Boolean)">
      <summary>
              Adds an ordering for a specific field to the query
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="descending">if set to <c>true</c> [descending].</param>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.AddOrder``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
      <summary>
              Adds an ordering for a specific field to the query
            </summary>
      <param name="propertySelector">Property selector for the field.</param>
      <param name="descending">if set to <c>true</c> [descending].</param>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.AddOrder(System.String,System.Boolean,System.Type)">
      <summary>
              Adds an ordering for a specific field to the query and specifies the type of field for sorting purposes
            </summary>
      <param name="fieldName">Name of the field.</param>
      <param name="descending">if set to <c>true</c> [descending].</param>
      <param name="fieldType">the type of the field to be sorted.</param>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.OpenSubclause">
      <summary>
              Simplified method for opening a new clause within the query
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.CloseSubclause">
      <summary>
              Simplified method for closing a clause within the query
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.Search(System.String,System.String)">
      <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.Search``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.GroupBy(Raven.Abstractions.Data.AggregationOperation,System.String[])">
      <summary>
              Instruct the index to group by the specified fields using the specified aggregation operation
            </summary>
      <remarks>
              This is only valid on dynamic indexes queries
            </remarks>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.GroupBy``1(Raven.Abstractions.Data.AggregationOperation,System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
      <summary>
              Instruct the index to group by the specified fields using the specified aggregation operation
            </summary>
      <remarks>
              This is only valid on dynamic indexes queries
            </remarks>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.Intersect">
      <summary>
            Partition the query so we can intersect different parts of the query
            across different index entries.
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.AfterQueryExecuted(System.Action{Raven.Abstractions.Data.QueryResult})">
      <summary>
            Callback to get the results of the query
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.InvokeAfterQueryExecuted(Raven.Abstractions.Data.QueryResult)">
      <summary>
            Called externally to raise the after query executed callback
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.Statistics(Raven.Client.Linq.RavenQueryStatistics@)">
      <summary>
            Provide statistics about the query, such as total count of matching records
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentQueryBase`2.UsingDefaultField(System.String)">
      <summary>
            Select the default field to use for this query
            </summary>
    </member>
    <member name="P:Raven.Client.IDocumentQueryBase`2.DocumentConvention">
      <summary>
            Gets the document convention from the query session
            </summary>
    </member>
    <member name="P:Raven.Client.IDocumentQueryBase`2.Not">
      <summary>
              Negate the next operation
            </summary>
    </member>
    <member name="T:Raven.Client.IAsyncDocumentQuery`1">
      <summary>
             Asynchronous query against a raven index
            </summary>
    </member>
    <member name="M:Raven.Client.IAsyncDocumentQuery`1.SelectFields``1(System.String[])">
      <summary>
            Selects the specified fields directly from the index
            </summary>
      <typeparam name="TProjection">The type of the projection.</typeparam>
      <param name="fields">The fields.</param>
    </member>
    <member name="M:Raven.Client.IAsyncDocumentQuery`1.ToListAsync">
      <summary>
            Gets the query result
            </summary>
      <value>The query result.</value>
    </member>
    <member name="P:Raven.Client.IAsyncDocumentQuery`1.QueryResultAsync">
      <summary>
            Gets the query result
            Execute the query the first time that this is called.
            </summary>
      <value>The query result.</value>
    </member>
    <member name="T:Raven.Client.Document.AsyncDocumentQuery`1">
      <summary>
            A query against a Raven index
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.#ctor(Raven.Client.Document.InMemoryDocumentSessionOperations,Raven.Client.Connection.IDatabaseCommands,Raven.Client.Connection.Async.IAsyncDatabaseCommands,System.String,System.String[],Raven.Client.Listeners.IDocumentQueryListener[])">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.AsyncDocumentQuery`1" /> class.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.#ctor(Raven.Client.Document.AsyncDocumentQuery{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.AbstractDocumentQuery`2" /> class.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereEquals``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
      <summary>
              Matches exact value
            </summary>
      <remarks>
              Defaults to NotAnalyzed
            </remarks>
    </member>
    <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereEquals``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,System.Boolean)">
      <summary>
              Matches exact value
            </summary>
      <remarks>
              Defaults to allow wildcards only if analyzed
            </remarks>
    </member>
    <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereIn``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Check that the field has one of the specified value
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereStartsWith``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
      <summary>
              Matches fields which starts with the specified value.
            </summary>
      <param name="propertySelector">Property selector for the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereEndsWith``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
      <summary>
              Matches fields which ends with the specified value.
            </summary>
      <param name="propertySelector">Property selector for the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereBetween``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,``0)">
      <summary>
              Matches fields where the value is between the specified start and end, exclusive
            </summary>
      <param name="propertySelector">Property selector for the field.</param>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
    </member>
    <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereBetweenOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,``0)">
      <summary>
              Matches fields where the value is between the specified start and end, inclusive
            </summary>
      <param name="propertySelector">Property selector for the field.</param>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
    </member>
    <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereGreaterThan``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
      <summary>
              Matches fields where the value is greater than the specified value
            </summary>
      <param name="propertySelector">Property selector for the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereGreaterThanOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
      <summary>
              Matches fields where the value is greater than or equal to the specified value
            </summary>
      <param name="propertySelector">Property selector for the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereLessThan``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
      <summary>
              Matches fields where the value is less than the specified value
            </summary>
      <param name="propertySelector">Property selector for the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereLessThanOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
      <summary>
              Matches fields where the value is less than or equal to the specified value
            </summary>
      <param name="propertySelector">Property selector for the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
      <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by ascending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
      <param name="propertySelectors">Property selectors for the fields.</param>
    </member>
    <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.SelectFields``1(System.String[])">
      <summary>
            Selects the specified fields directly from the index
            </summary>
      <typeparam name="TProjection">The type of the projection.</typeparam>
      <param name="fields">The fields.</param>
    </member>
    <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.AddOrder``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
      <summary>
              Adds an ordering for a specific field to the query
            </summary>
      <param name="propertySelector">Property selector for the field.</param>
      <param name="descending">if set to <c>true</c> [descending].</param>
    </member>
    <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Search``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.GroupBy``1(Raven.Abstractions.Data.AggregationOperation,System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
      <summary>
              Instruct the index to group by the specified fields using the specified aggregation operation
            </summary>
      <remarks>
              This is only valid on dynamic indexes queries
            </remarks>
    </member>
    <member name="T:Raven.Client.Document.InMemoryDocumentSessionOperations">
      <summary>
            Abstract implementation for in memory session operations
            </summary>
    </member>
    <member name="T:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata">
      <summary>
            Metadata held about an entity by the session
            </summary>
    </member>
    <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.OriginalValue">
      <summary>
            Gets or sets the original value.
            </summary>
      <value>The original value.</value>
    </member>
    <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.Metadata">
      <summary>
            Gets or sets the metadata.
            </summary>
      <value>The metadata.</value>
    </member>
    <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.ETag">
      <summary>
            Gets or sets the ETag.
            </summary>
      <value>The ETag.</value>
    </member>
    <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.Key">
      <summary>
            Gets or sets the key.
            </summary>
      <value>The key.</value>
    </member>
    <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.OriginalMetadata">
      <summary>
            Gets or sets the original metadata.
            </summary>
      <value>The original metadata.</value>
    </member>
    <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.ForceConcurrencyCheck">
      <summary>
            A concurrency check will be forced on this entity 
            even if UseOptimisticConcurrency is set to false
            </summary>
    </member>
    <member name="T:Raven.Client.Document.InMemoryDocumentSessionOperations.SaveChangesData">
      <summary>
            Data for a batch command to the server
            </summary>
    </member>
    <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.SaveChangesData.Commands">
      <summary>
            Gets or sets the commands.
            </summary>
      <value>The commands.</value>
    </member>
    <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.SaveChangesData.Entities">
      <summary>
            Gets or sets the entities.
            </summary>
      <value>The entities.</value>
    </member>
    <member name="F:Raven.Client.Document.InMemoryDocumentSessionOperations.deletedEntities">
      <summary>
            The entities waiting to be deleted
            </summary>
    </member>
    <member name="F:Raven.Client.Document.InMemoryDocumentSessionOperations.entitiesAndMetadata">
      <summary>
            hold the data required to manage the data for RavenDB's Unit of Work
            </summary>
    </member>
    <member name="F:Raven.Client.Document.InMemoryDocumentSessionOperations.entitiesByKey">
      <summary>
            Translate between a key and its associated entity
            </summary>
    </member>
    <member name="F:Raven.Client.Document.InMemoryDocumentSessionOperations.listeners">
      <summary>
            all the listeners for this session
            </summary>
    </member>
    <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.#ctor(Raven.Client.DocumentStoreBase,Raven.Client.Document.DocumentSessionListeners,System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.InMemoryDocumentSessionOperations" /> class.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.GetEtagFor``1(``0)">
      <summary>
            Gets the ETag for the specified entity.
            If the entity is transient, it will load the etag from the store
            and associate the current state of the entity with the etag from the server.
            </summary>
      <param name="instance">The instance.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.GetMetadataFor``1(``0)">
      <summary>
            Gets the metadata for the specified entity.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="instance">The instance.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.GetJsonDocument(System.String)">
      <summary>
            Get the json document by key from the store
            </summary>
    </member>
    <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.IsLoaded(System.String)">
      <summary>
            Returns whatever a document with the specified id is loaded in the 
            current session
            </summary>
    </member>
    <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.GetDocumentId(System.Object)">
      <summary>
            Gets the document id.
            </summary>
      <param name="instance">The instance.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.HasChanged(System.Object)">
      <summary>
            Determines whether the specified entity has changed.
            </summary>
      <param name="entity">The entity.</param>
      <returns>
        <c>true</c> if the specified entity has changed; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.TrackEntity``1(Raven.Abstractions.Data.JsonDocument)">
      <summary>
            Tracks the entity inside the unit of work
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="documentFound">The document found.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.TrackEntity``1(System.String,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
      <summary>
            Tracks the entity.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="key">The key.</param>
      <param name="document">The document.</param>
      <param name="metadata">The metadata.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Delete``1(``0)">
      <summary>
            Marks the specified entity for deletion. The entity will be deleted when SaveChanges is called.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="entity">The entity.</param>
    </member>
    <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.ConvertToEntity``1(System.String,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
      <summary>
            Converts the json document to an entity.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="id">The id.</param>
      <param name="documentFound">The document found.</param>
      <param name="metadata">The metadata.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.TrySetIdentity``1(``0,System.String)">
      <summary>
            Tries to set the identity property
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="entity">The entity.</param>
      <param name="id">The id.</param>
    </member>
    <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Store(System.Object)">
      <summary>
            Stores the specified entity in the session. The entity will be saved when SaveChanges is called.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Store(System.Object,System.Guid)">
      <summary>
            Stores the specified entity in the session. The entity will be saved when SaveChanges is called.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Store(System.Object,System.String)">
      <summary>
            Stores the specified entity in the session, explicitly specifying its Id. The entity will be saved when SaveChanges is called.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Store(System.Object,System.Guid,System.String)">
      <summary>
            Stores the specified entity in the session, explicitly specifying its Id. The entity will be saved when SaveChanges is called.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.GetOrGenerateDocumentKey(System.Object)">
      <summary>
            Tries to get the identity.
            </summary>
      <param name="entity">The entity.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.TryGetIdFromInstance(System.Object,System.String@)">
      <summary>
            Attempts to get the document key from an instance 
            </summary>
    </member>
    <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.CreatePutEntityCommand(System.Object,Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata)">
      <summary>
            Creates the put entity command.
            </summary>
      <param name="entity">The entity.</param>
      <param name="documentMetadata">The document metadata.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.UpdateBatchResults(System.Collections.Generic.IList{Raven.Abstractions.Data.BatchResult},Raven.Client.Document.InMemoryDocumentSessionOperations.SaveChangesData)">
      <summary>
            Updates the batch results.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.PrepareForSaveChanges">
      <summary>
            Prepares for save changes.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.MarkReadOnly(System.Object)">
      <summary>
            Mark the entity as read only, change tracking won't apply 
            to such an entity. This can be done as an optimization step, so 
            we don't need to check the entity for changes.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.EntityChanged(System.Object,Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata)">
      <summary>
            Determines if the entity have changed.
            </summary>
      <param name="entity">The entity.</param>
      <param name="documentMetadata">The document metadata.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.EntitiesToJsonCachingScope">
      <summary>
            All calls to convert an entity to a json object would be cache
            This is used inside the SaveChanges() action, where we need to access the entities json
            in several disparate places.
            
            Note: This assumes that no modifications can happen during the SaveChanges. This is naturally true
            Note: for SaveChanges (and multi threaded access will cause undefined behavior anyway).
            Note: For SaveChangesAsync, the same holds true as well.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Evict``1(``0)">
      <summary>
            Evicts the specified entity from the session.
            Remove the entity from the delete queue and stops tracking changes for this entity.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="entity">The entity.</param>
    </member>
    <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Clear">
      <summary>
            Clears this instance.
            Remove all entities from the delete queue and stops tracking changes for all entities.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Defer(Raven.Abstractions.Commands.ICommandData[])">
      <summary>
            Defer commands to be executed on SaveChanges()
            </summary>
      <param name="commands">The commands to be executed</param>
    </member>
    <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Commit(System.Guid)">
      <summary>
            Commits the specified tx id.
            </summary>
      <param name="txId">The tx id.</param>
    </member>
    <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Rollback(System.Guid)">
      <summary>
            Rollbacks the specified tx id.
            </summary>
      <param name="txId">The tx id.</param>
    </member>
    <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.PromoteTransaction(System.Guid)">
      <summary>
            Promotes the transaction.
            </summary>
      <param name="fromTxId">From tx id.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.ClearEnlistment">
      <summary>
            Clears the enlistment.
            </summary>
    </member>
    <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.Id">
      <summary>
            The session id 
            </summary>
    </member>
    <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentStore">
      <summary>
             The document store associated with this session
            </summary>
    </member>
    <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NumberOfRequests">
      <summary>
            Gets the number of requests for this session
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NonAuthoritativeInformationTimeout">
      <summary>
            Gets or sets the timeout to wait for authoritative information if encountered non authoritative document.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.StoreIdentifier">
      <summary>
            Gets the store identifier for this session.
            The store identifier is the identifier for the particular RavenDB instance.
            </summary>
      <value>The store identifier.</value>
    </member>
    <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.Conventions">
      <summary>
            Gets the conventions used by this session
            </summary>
      <value>The conventions.</value>
      <remarks>
            This instance is shared among all sessions, changes to the <see cref="T:Raven.Client.Document.DocumentConvention" /> should be done
            via the <see cref="T:Raven.Client.IDocumentStore" /> instance, not on a single session.
            </remarks>
    </member>
    <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.ResourceManagerId">
      <summary>
            The transaction resource manager identifier
            </summary>
    </member>
    <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.MaxNumberOfRequestsPerSession">
      <summary>
            Gets or sets the max number of requests per session.
            If the <see cref="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NumberOfRequests" /> rise above <see cref="P:Raven.Client.Document.InMemoryDocumentSessionOperations.MaxNumberOfRequestsPerSession" />, an exception will be thrown.
            </summary>
      <value>The max number of requests per session.</value>
    </member>
    <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.UseOptimisticConcurrency">
      <summary>
            Gets or sets a value indicating whether the session should use optimistic concurrency.
            When set to <c>true</c>, a check is made so that a change made behind the session back would fail
            and raise <see cref="T:Raven.Abstractions.Exceptions.ConcurrencyException" />.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.HasChanges">
      <summary>
            Gets a value indicating whether any of the entities tracked by the session has changes.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.AllowNonAuthoritativeInformation">
      <summary>
            Gets or sets a value indicating whether non authoritative information is allowed.
            Non authoritative information is document that has been modified by a transaction that hasn't been committed.
            The server provides the latest committed version, but it is known that attempting to write to a non authoritative document
            will fail, because it is already modified.
            If set to <c>false</c>, the session will wait <see cref="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NonAuthoritativeInformationTimeout" /> for the transaction to commit to get an
            authoritative information. If the wait is longer than <see cref="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NonAuthoritativeInformationTimeout" />, <see cref="T:Raven.Client.Exceptions.NonAuthoritativeInformationException" /> is thrown.
            </summary>
      <value>
        <c>true</c> if non authoritative information is allowed; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Raven.Client.IAsyncDocumentSession">
      <summary>
            Interface for document session using async approaches
            </summary>
    </member>
    <member name="M:Raven.Client.IAsyncDocumentSession.Include(System.String)">
      <summary>
            Begin a load while including the specified path 
            </summary>
      <param name="path">The path.</param>
    </member>
    <member name="M:Raven.Client.IAsyncDocumentSession.Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
            Begin a load while including the specified path 
            </summary>
      <param name="path">The path.</param>
    </member>
    <member name="M:Raven.Client.IAsyncDocumentSession.Store(System.Object,System.Guid)">
      <summary>
            Stores the specified entity with the specified etag.
            The entity will be saved when <see cref="M:Raven.Client.IAsyncDocumentSession.SaveChangesAsync" /> is called.
            </summary>
    </member>
    <member name="M:Raven.Client.IAsyncDocumentSession.Store(System.Object)">
      <summary>
            Stores the specified entity in the session. The entity will be saved when <see cref="M:Raven.Client.IAsyncDocumentSession.SaveChangesAsync" /> is called.
            </summary>
      <param name="entity">The entity.</param>
    </member>
    <member name="M:Raven.Client.IAsyncDocumentSession.Store(System.Object,System.Guid,System.String)">
      <summary>
            Stores the specified entity with the specified etag, under the specified id
            </summary>
    </member>
    <member name="M:Raven.Client.IAsyncDocumentSession.Store(System.Object,System.String)">
      <summary>
            Stores the specified dynamic entity, under the specified id
            </summary>
      <param name="entity">The entity.</param>
      <param name="id">The id to store this entity under. If other entity exists with the same id it will be overridden.</param>
    </member>
    <member name="M:Raven.Client.IAsyncDocumentSession.Delete``1(``0)">
      <summary>
            Marks the specified entity for deletion. The entity will be deleted when <see cref="M:Raven.Client.IAsyncDocumentSession.SaveChangesAsync" /> is called.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="entity">The entity.</param>
    </member>
    <member name="M:Raven.Client.IAsyncDocumentSession.LoadAsync``1(System.String)">
      <summary>
            Begins the async load operation
            </summary>
      <param name="id">The id.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.IAsyncDocumentSession.LoadAsync``1(System.ValueType)">
      <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
      <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
    </member>
    <member name="M:Raven.Client.IAsyncDocumentSession.LoadAsync``1(System.String[])">
      <summary>
            Begins the async multi load operation
            </summary>
      <param name="ids">The ids.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.IAsyncDocumentSession.SaveChangesAsync">
      <summary>
            Begins the async save changes operation
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.IAsyncDocumentSession.Query``1(System.String)">
      <summary>
            Queries the specified index using Linq.
            </summary>
      <typeparam name="T">The result of the query</typeparam>
      <param name="indexName">Name of the index.</param>
    </member>
    <member name="M:Raven.Client.IAsyncDocumentSession.Query``1">
      <summary>
            Dynamically queries RavenDB using LINQ
            </summary>
      <typeparam name="T">The result of the query</typeparam>
    </member>
    <member name="M:Raven.Client.IAsyncDocumentSession.Query``2">
      <summary>
            Queries the index specified by <typeparamref name="TIndexCreator" /> using Linq.
            </summary>
      <typeparam name="T">The result of the query</typeparam>
      <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
      <returns>
      </returns>
    </member>
    <member name="P:Raven.Client.IAsyncDocumentSession.Advanced">
      <summary>
            Get the accessor for advanced operations
            </summary>
      <remarks>
            Those operations are rarely needed, and have been moved to a separate 
            property to avoid cluttering the API
            </remarks>
    </member>
    <member name="T:Raven.Client.IAdvancedDocumentSessionOperations">
      <summary>
            Advanced session operations
            </summary>
    </member>
    <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.IsLoaded(System.String)">
      <summary>
            Returns whatever a document with the specified id is loaded in the 
            current session
            </summary>
    </member>
    <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.Evict``1(``0)">
      <summary>
            Evicts the specified entity from the session.
            Remove the entity from the delete queue and stops tracking changes for this entity.
            </summary>
      <param name="entity">The entity.</param>
    </member>
    <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.Clear">
      <summary>
            Clears this instance.
            Remove all entities from the delete queue and stops tracking changes for all entities.
            </summary>
    </member>
    <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.MarkReadOnly(System.Object)">
      <summary>
            Mark the entity as read only, change tracking won't apply 
            to such an entity. This can be done as an optimization step, so 
            we don't need to check the entity for changes.
            </summary>
    </member>
    <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.GetMetadataFor``1(``0)">
      <summary>
            Gets the metadata for the specified entity.
            If the entity is transient, it will load the metadata from the store
            and associate the current state of the entity with the metadata from the server.
            </summary>
      <param name="instance">The instance.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.GetEtagFor``1(``0)">
      <summary>
            Gets the ETag for the specified entity.
            If the entity is transient, it will load the etag from the store
            and associate the current state of the entity with the etag from the server.
            </summary>
      <param name="instance">The instance.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.GetDocumentId(System.Object)">
      <summary>
            Gets the document id for the specified entity.
            </summary>
      <remarks>
            This function may return <c>null</c> if the entity isn't tracked by the session, or if the entity is 
            a new entity with a key that should be generated on the server. 
            </remarks>
      <param name="entity">The entity.</param>
    </member>
    <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.HasChanged(System.Object)">
      <summary>
            Determines whether the specified entity has changed.
            </summary>
      <param name="entity">The entity.</param>
      <returns>
        <c>true</c> if the specified entity has changed; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.Defer(Raven.Abstractions.Commands.ICommandData[])">
      <summary>
            Defer commands to be executed on SaveChanges()
            </summary>
      <param name="commands">The commands to be executed</param>
    </member>
    <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.DocumentStore">
      <summary>
            The document store associated with this session
            </summary>
    </member>
    <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.StoreIdentifier">
      <summary>
            Gets the store identifier for this session.
            The store identifier is the identifier for the particular RavenDB instance. 
            </summary>
      <value>The store identifier.</value>
    </member>
    <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.UseOptimisticConcurrency">
      <summary>
            Gets or sets a value indicating whether the session should use optimistic concurrency.
            When set to <c>true</c>, a check is made so that a change made behind the session back would fail
            and raise <see cref="T:Raven.Abstractions.Exceptions.ConcurrencyException" />.
            </summary>
    </member>
    <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.AllowNonAuthoritativeInformation">
      <summary>
            Gets or sets a value indicating whether non authoritative information is allowed.
            Non authoritative information is document that has been modified by a transaction that hasn't been committed.
            The server provides the latest committed version, but it is known that attempting to write to a non authoritative document
            will fail, because it is already modified.
            If set to <c>false</c>, the session will wait <see cref="P:Raven.Client.IAdvancedDocumentSessionOperations.NonAuthoritativeInformationTimeout" /> for the transaction to commit to get an
            authoritative information. If the wait is longer than <see cref="P:Raven.Client.IAdvancedDocumentSessionOperations.NonAuthoritativeInformationTimeout" />, <see cref="T:Raven.Client.Exceptions.NonAuthoritativeInformationException" /> is thrown.
            </summary>
      <value>
        <c>true</c> if non authoritative information is allowed; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.NonAuthoritativeInformationTimeout">
      <summary>
            Gets or sets the timeout to wait for authoritative information if encountered non authoritative document.
            </summary>
    </member>
    <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.MaxNumberOfRequestsPerSession">
      <summary>
            Gets or sets the max number of requests per session.
            If the <see cref="P:Raven.Client.IAdvancedDocumentSessionOperations.NumberOfRequests" /> rise above <see cref="P:Raven.Client.IAdvancedDocumentSessionOperations.MaxNumberOfRequestsPerSession" />, an exception will be thrown.
            </summary>
      <value>The max number of requests per session.</value>
    </member>
    <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.NumberOfRequests">
      <summary>
            Gets the number of requests for this session
            </summary>
    </member>
    <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.HasChanges">
      <summary>
            Gets a value indicating whether any of the entities tracked by the session has changes.
            </summary>
    </member>
    <member name="T:Raven.Client.IAsyncAdvancedSessionOperations">
      <summary>
            Advanced async session operations
            </summary>
    </member>
    <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.LoadStartingWithAsync``1(System.String,System.Int32,System.Int32)">
      <summary>
            Load documents with the specified key prefix
            </summary>
    </member>
    <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.AsyncLuceneQuery``1(System.String)">
      <summary>
            Query the specified index using Lucene syntax
            </summary>
    </member>
    <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.AsyncLuceneQuery``1">
      <summary>
            Dynamically query RavenDB using Lucene syntax
            </summary>
    </member>
    <member name="P:Raven.Client.IAsyncAdvancedSessionOperations.AsyncDatabaseCommands">
      <summary>
            Gets the async database commands.
            </summary>
      <value>The async database commands.</value>
    </member>
    <member name="T:Raven.Client.Linq.IDocumentQueryGenerator">
      <summary>
             Generate a new document query
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.IDocumentQueryGenerator.Query``1(System.String)">
      <summary>
            Create a new query for <typeparam name="T" /></summary>
    </member>
    <member name="M:Raven.Client.Linq.IDocumentQueryGenerator.AsyncQuery``1(System.String)">
      <summary>
            Create a new query for <typeparam name="T" /></summary>
    </member>
    <member name="P:Raven.Client.Linq.IDocumentQueryGenerator.Conventions">
      <summary>
            Gets the conventions associated with this query
            </summary>
    </member>
    <member name="T:Raven.Client.Document.Async.AsyncDocumentSession">
      <summary>
            Implementation for async document session 
            </summary>
    </member>
    <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.#ctor(Raven.Client.Document.DocumentStore,Raven.Client.Connection.Async.IAsyncDatabaseCommands,Raven.Client.Document.DocumentSessionListeners,System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.Async.AsyncDocumentSession" /> class.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.LoadStartingWithAsync``1(System.String,System.Int32,System.Int32)">
      <summary>
            Load documents with the specified key prefix
            </summary>
    </member>
    <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.AsyncLuceneQuery``1(System.String)">
      <summary>
            Query the specified index using Lucene syntax
            </summary>
    </member>
    <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.AsyncLuceneQuery``1">
      <summary>
            Dynamically query RavenDB using Lucene syntax
            </summary>
    </member>
    <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Include(System.String)">
      <summary>
            Begin a load while including the specified path 
            </summary>
      <param name="path">The path.</param>
    </member>
    <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
            Begin a load while including the specified path 
            </summary>
      <param name="path">The path.</param>
    </member>
    <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.LoadAsync``1(System.ValueType)">
      <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
      <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
    </member>
    <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.LoadAsync``1(System.String)">
      <summary>
            Begins the async load operation
            </summary>
      <param name="id">The id.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.LoadAsync``1(System.String[])">
      <summary>
            Begins the async multi load operation
            </summary>
      <param name="ids">The ids.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.LoadAsyncInternal``1(System.String[],System.String[])">
      <summary>
            Begins the async multi load operation
            </summary>
    </member>
    <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.SaveChangesAsync">
      <summary>
            Begins the async save changes operation
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.GetJsonDocument(System.String)">
      <summary>
            Get the json document by key from the store
            </summary>
    </member>
    <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Commit(System.Guid)">
      <summary>
            Commits the specified tx id.
            </summary>
      <param name="txId">The tx id.</param>
    </member>
    <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Rollback(System.Guid)">
      <summary>
            Rollbacks the specified tx id.
            </summary>
      <param name="txId">The tx id.</param>
    </member>
    <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.PromoteTransaction(System.Guid)">
      <summary>
            Promotes the transaction.
            </summary>
      <param name="fromTxId">From tx id.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Query``1">
      <summary>
            Dynamically queries RavenDB using LINQ
            </summary>
      <typeparam name="T">The result of the query</typeparam>
    </member>
    <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.AsyncQuery``1(System.String)">
      <summary>
            Create a new query for <typeparam name="T" /></summary>
    </member>
    <member name="P:Raven.Client.Document.Async.AsyncDocumentSession.AsyncDatabaseCommands">
      <summary>
            Gets the async database commands.
            </summary>
      <value>The async database commands.</value>
    </member>
    <member name="P:Raven.Client.Document.Async.AsyncDocumentSession.Advanced">
      <summary>
            Get the accessor for advanced operations
            </summary>
      <remarks>
            Those operations are rarely needed, and have been moved to a separate 
            property to avoid cluttering the API
            </remarks>
    </member>
    <member name="T:Raven.Client.Document.IAsyncLoaderWithInclude`1">
      <summary>
            Fluent interface for specifying include paths
            for loading documents
            </summary>
    </member>
    <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.Include(System.String)">
      <summary>
            Includes the specified path.
            </summary>
      <param name="path">The path.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
      <summary>
            Includes the specified path.
            </summary>
      <param name="path">The path.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.LoadAsync(System.String[])">
      <summary>
            Loads the specified ids.
            </summary>
      <param name="ids">The ids.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.Load(System.String)">
      <summary>
            Loads the specified id.
            </summary>
      <param name="id">The id.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.Load(System.ValueType)">
      <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
      <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
    </member>
    <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.Load``1(System.String[])">
      <summary>
            Loads the specified ids.
            </summary>
      <param name="ids">The ids.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.Load``1(System.String)">
      <summary>
            Loads the specified id.
            </summary>
      <typeparam name="TResult">
      </typeparam>
      <param name="id">The id.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.Load``1(System.ValueType)">
      <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
      <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
    </member>
    <member name="T:Raven.Client.Document.AsyncMultiLoaderWithInclude`1">
      <summary>
            Fluent implementation for specifying include paths
            for loading documents
            </summary>
    </member>
    <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.Include(System.String)">
      <summary>
            Includes the specified path.
            </summary>
      <param name="path">The path.</param>
    </member>
    <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
      <summary>
            Includes the specified path.
            </summary>
      <param name="path">The path.</param>
    </member>
    <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.LoadAsync(System.String[])">
      <summary>
            Loads the specified ids.
            </summary>
      <param name="ids">The ids.</param>
    </member>
    <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.Load(System.String)">
      <summary>
            Loads the specified id.
            </summary>
      <param name="id">The id.</param>
    </member>
    <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.Load(System.ValueType)">
      <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
      <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
    </member>
    <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.#ctor(Raven.Client.Document.Async.AsyncDocumentSession)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.AsyncMultiLoaderWithInclude`1" /> class.
            </summary>
      <param name="session">The session.</param>
    </member>
    <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.Load``1(System.String[])">
      <summary>
            Loads the specified ids.
            </summary>
      <typeparam name="TResult">
      </typeparam>
      <param name="ids">The ids.</param>
    </member>
    <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.Load``1(System.String)">
      <summary>
            Loads the specified id.
            </summary>
      <typeparam name="TResult">
      </typeparam>
      <param name="id">The id.</param>
    </member>
    <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.Load``1(System.ValueType)">
      <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
      <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
    </member>
    <member name="T:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1">
      <summary>
            Fluent interface for specifying include paths
            for loading documents lazily
            </summary>
    </member>
    <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Include(System.String)">
      <summary>
            Includes the specified path.
            </summary>
      <param name="path">The path.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
      <summary>
            Includes the specified path.
            </summary>
      <param name="path">The path.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load(System.String[])">
      <summary>
            Loads the specified ids.
            </summary>
      <param name="ids">The ids.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load(System.String)">
      <summary>
            Loads the specified id.
            </summary>
      <param name="id">The id.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load(System.ValueType)">
      <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
      <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
    </member>
    <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load``1(System.String[])">
      <summary>
            Loads the specified ids.
            </summary>
      <param name="ids">The ids.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load``1(System.String)">
      <summary>
            Loads the specified id.
            </summary>
      <typeparam name="TResult">
      </typeparam>
      <param name="id">The id.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load``1(System.ValueType)">
      <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
      <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
    </member>
    <member name="T:Raven.Client.Document.Batches.ILazySessionOperations">
      <summary>
            Specify interface for lazy operation for the session
            </summary>
    </member>
    <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Include(System.String)">
      <summary>
            Begin a load while including the specified path 
            </summary>
      <param name="path">The path.</param>
    </member>
    <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
            Begin a load while including the specified path 
            </summary>
      <param name="path">The path.</param>
    </member>
    <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``1(System.String[])">
      <summary>
            Loads the specified ids.
            </summary>
      <param name="ids">The ids.</param>
    </member>
    <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``1(System.Collections.Generic.IEnumerable{System.String},System.Action{``0[]})">
      <summary>
            Loads the specified ids and a function to call when it is evaluated
            </summary>
    </member>
    <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``1(System.String)">
      <summary>
            Loads the specified id.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``1(System.String,System.Action{``0})">
      <summary>
            Loads the specified id and a function to call when it is evaluated
            </summary>
    </member>
    <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``1(System.ValueType)">
      <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
      <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
    </member>
    <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``1(System.ValueType,System.Action{``0})">
      <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
      <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
    </member>
    <member name="T:Raven.Client.Document.Batches.IEagerSessionOperations">
      <summary>
            Allow to perform eager operations on the session
            </summary>
    </member>
    <member name="M:Raven.Client.Document.Batches.IEagerSessionOperations.ExecuteAllPendingLazyOperations">
      <summary>
            Execute all the lazy requests pending within this session
            </summary>
    </member>
    <member name="M:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1.#ctor(Raven.Client.IDocumentSessionImpl)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1" /> class.
            </summary>
      <param name="session">The session.</param>
    </member>
    <member name="M:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1.Include(System.String)">
      <summary>
            Includes the specified path.
            </summary>
      <param name="path">The path.</param>
    </member>
    <member name="M:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
      <summary>
            Includes the specified path.
            </summary>
      <param name="path">The path.</param>
    </member>
    <member name="M:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1.Load(System.String[])">
      <summary>
            Loads the specified ids.
            </summary>
      <param name="ids">The ids.</param>
    </member>
    <member name="M:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1.Load(System.String)">
      <summary>
            Loads the specified id.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1.Load(System.ValueType)">
      <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
      <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
    </member>
    <member name="M:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1.Load``1(System.String[])">
      <summary>
            Loads the specified ids.
            </summary>
      <typeparam name="TResult">
      </typeparam>
      <param name="ids">The ids.</param>
    </member>
    <member name="M:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1.Load``1(System.String)">
      <summary>
            Loads the specified id.
            </summary>
      <typeparam name="TResult">
      </typeparam>
      <param name="id">The id.</param>
    </member>
    <member name="M:Raven.Client.Document.Batches.LazyMultiLoaderWithInclude`1.Load``1(System.ValueType)">
      <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
      <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
    </member>
    <member name="T:Raven.Client.Document.DefaultRavenContractResolver">
      <summary>
            The default json contract will serialize all properties and all public fields
            </summary>
    </member>
    <member name="M:Raven.Client.Document.DefaultRavenContractResolver.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DefaultRavenContractResolver" /> class.
            </summary>
      <param name="shareCache">If set to <c>true</c> the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> will use a cached shared with other resolvers of the same type.
            Sharing the cache will significantly performance because expensive reflection will only happen once but could cause unexpected
            behavior if different instances of the resolver are suppose to produce different results. When set to false it is highly
            recommended to reuse <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> instances with the <see cref="T:Newtonsoft.Json.JsonSerializer" />.</param>
    </member>
    <member name="M:Raven.Client.Document.DefaultRavenContractResolver.GetSerializableMembers(System.Type)">
      <summary>
            Gets the serializable members for the type.
            </summary>
      <param name="objectType">The type to get serializable members for.</param>
      <returns>The serializable members for the type.</returns>
    </member>
    <member name="T:Raven.Client.Document.DocumentConvention">
      <summary>
            The set of conventions used by the <see cref="T:Raven.Client.Document.DocumentStore" /> which allow the users to customize
            the way the Raven client API behaves
            </summary>
    </member>
    <member name="M:Raven.Client.Document.DocumentConvention.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DocumentConvention" /> class.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.DocumentConvention.DefaultFindFullDocumentKeyFromNonStringIdentifier(System.Object,System.Type,System.Boolean)">
      <summary>
             Find the full document name assuming that we are using the standard conventions
             for generating a document key
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.DocumentConvention.GenerateDocumentKeyUsingIdentity(Raven.Client.Document.DocumentConvention,System.Object)">
      <summary>
            Generates the document key using identity.
            </summary>
      <param name="conventions">The conventions.</param>
      <param name="entity">The entity.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.DocumentConvention.DefaultTypeTagName(System.Type)">
      <summary>
            Get the default tag name for the specified type.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.DocumentConvention.GetTypeTagName(System.Type)">
      <summary>
            Gets the name of the type tag.
            </summary>
      <param name="type">The type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.DocumentConvention.GenerateDocumentKey(System.Object)">
      <summary>
            Generates the document key.
            </summary>
      <param name="entity">The entity.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.DocumentConvention.GetIdentityProperty(System.Type)">
      <summary>
            Gets the identity property.
            </summary>
      <param name="type">The type.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.DocumentConvention.CreateSerializer">
      <summary>
            Creates the serializer.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.DocumentConvention.GetClrType(System.String,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
      <summary>
            Get the CLR type (if exists) from the document
            </summary>
    </member>
    <member name="M:Raven.Client.Document.DocumentConvention.GetClrTypeName(System.Type)">
      <summary>
             Get the CLR type name to be stored in the entity metadata
            </summary>
    </member>
    <member name="M:Raven.Client.Document.DocumentConvention.Clone">
      <summary>
            Clone the current conventions to a new instance
            </summary>
    </member>
    <member name="P:Raven.Client.Document.DocumentConvention.FailoverBehavior">
      <summary>
            How should we behave in a replicated environment when we can't 
            reach the primary node and need to failover to secondary node(s).
            </summary>
    </member>
    <member name="P:Raven.Client.Document.DocumentConvention.CustomizeJsonSerializer">
      <summary>
            Register an action to customize the json serializer used by the <see cref="T:Raven.Client.Document.DocumentStore" /></summary>
    </member>
    <member name="P:Raven.Client.Document.DocumentConvention.DisableProfiling">
      <summary>
            Disable all profiling support
            </summary>
    </member>
    <member name="P:Raven.Client.Document.DocumentConvention.IdentityTypeConvertors">
      <summary>
             A list of type converters that can be used to translate the document key (string)
             to whatever type it is that is used on the entity, if the type isn't already a string
            </summary>
    </member>
    <member name="P:Raven.Client.Document.DocumentConvention.IdentityPartsSeparator">
      <summary>
            Gets or sets the identity parts separator used by the HiLo generators
            </summary>
      <value>The identity parts separator.</value>
    </member>
    <member name="P:Raven.Client.Document.DocumentConvention.MaxNumberOfRequestsPerSession">
      <summary>
            Gets or sets the default max number of requests per session.
            </summary>
      <value>The max number of requests per session.</value>
    </member>
    <member name="P:Raven.Client.Document.DocumentConvention.DefaultQueryingConsistency">
      <summary>
            The consistency options used when querying the database by default
            Note that this option impact only queries, since we have Strong Consistency model for the documents
            </summary>
    </member>
    <member name="P:Raven.Client.Document.DocumentConvention.FindClrType">
      <summary>
            Gets or sets the function to find the clr type of a document.
            </summary>
    </member>
    <member name="P:Raven.Client.Document.DocumentConvention.FindClrTypeName">
      <summary>
            Gets or sets the function to find the clr type name from a clr type
            </summary>
    </member>
    <member name="P:Raven.Client.Document.DocumentConvention.FindFullDocumentKeyFromNonStringIdentifier">
      <summary>
            Gets or sets the function to find the full document key based on the type of a document
            and the value type identifier (just the numeric part of the id).
            </summary>
    </member>
    <member name="P:Raven.Client.Document.DocumentConvention.JsonContractResolver">
      <summary>
            Gets or sets the json contract resolver.
            </summary>
      <value>The json contract resolver.</value>
    </member>
    <member name="P:Raven.Client.Document.DocumentConvention.FindTypeTagName">
      <summary>
            Gets or sets the function to find the type tag.
            </summary>
      <value>The name of the find type tag.</value>
    </member>
    <member name="P:Raven.Client.Document.DocumentConvention.FindPropertyNameForIndex">
      <summary>
            Gets or sets the function to find the indexed property name
            given the indexed document type, the index name, the current path and the property path.
            </summary>
    </member>
    <member name="P:Raven.Client.Document.DocumentConvention.FindPropertyNameForDynamicIndex">
      <summary>
            Gets or sets the function to find the indexed property name
            given the indexed document type, the index name, the current path and the property path.
            </summary>
    </member>
    <member name="P:Raven.Client.Document.DocumentConvention.ShouldCacheRequest">
      <summary>
            Whatever or not RavenDB should cache the request to the specified url.
            </summary>
    </member>
    <member name="P:Raven.Client.Document.DocumentConvention.FindIdentityProperty">
      <summary>
            Gets or sets the function to find the identity property.
            </summary>
      <value>The find identity property.</value>
    </member>
    <member name="P:Raven.Client.Document.DocumentConvention.FindIdentityPropertyNameFromEntityName">
      <summary>
            Get or sets the function to get the identity property name from the entity name
            </summary>
    </member>
    <member name="P:Raven.Client.Document.DocumentConvention.DocumentKeyGenerator">
      <summary>
            Gets or sets the document key generator.
            </summary>
      <value>The document key generator.</value>
    </member>
    <member name="P:Raven.Client.Document.DocumentConvention.UseParallelMultiGet">
      <summary>
            Instruct RavenDB to parallel Multi Get processing 
            when handling lazy requests
            </summary>
    </member>
    <member name="P:Raven.Client.Document.DocumentConvention.HandleUnauthorizedResponse">
      <summary>
            Handles unauthenticated responses, usually by authenticating against the oauth server
            </summary>
    </member>
    <member name="P:Raven.Client.Document.DocumentConvention.HandleUnauthorizedResponseAsync">
      <summary>
            Begins handling of unauthenticated responses, usually by authenticating against the oauth server
            in async manner
            </summary>
    </member>
    <member name="P:Raven.Client.Document.DocumentConvention.FindIdValuePartForValueTypeConversion">
      <summary>
            When RavenDB needs to convert between a string id to a value type like int or guid, it calls
            this to perform the actual work
            </summary>
    </member>
    <member name="P:Raven.Client.Document.DocumentConvention.SaveEnumsAsIntegers">
      <summary>
            Saves Enums as integers and instruct the Linq provider to query enums as integer values.
            </summary>
    </member>
    <member name="P:Raven.Client.Document.DocumentConvention.TransformTypeTagNameToDocumentKeyPrefix">
      <summary>
            Translate the type tag name to the document key prefix
            </summary>
    </member>
    <member name="P:Raven.Client.Document.DocumentConvention.EnlistInDistributedTransactions">
      <summary>
             Whatever or not RavenDB will automatically enlist in distributed transactions
            </summary>
    </member>
    <member name="P:Raven.Client.Document.DocumentConvention.ApplyReduceFunction">
      <summary>
            This is called in order to ensure that reduce function in a sharded environment is run 
            over the merged results
            </summary>
    </member>
    <member name="T:Raven.Client.Document.ConsistencyOptions">
      <summary>
            The consistency options for all queries, fore more details about the consistency options, see:
            http://www.allthingsdistributed.com/2008/12/eventually_consistent.html
            
            Note that this option impact only queries, since we have Strong Consistency model for the documents
            </summary>
    </member>
    <member name="F:Raven.Client.Document.ConsistencyOptions.MonotonicRead">
      <summary>
            Ensures that after querying an index at time T, you will never see the results
            of the index at a time prior to T.
            This is ensured by the server, and require no action from the client
            </summary>
    </member>
    <member name="F:Raven.Client.Document.ConsistencyOptions.QueryYourWrites">
      <summary>
             After updating a documents, will only accept queries which already indexed the updated value.
            </summary>
    </member>
    <member name="T:Raven.Client.IDocumentQuery`1">
      <summary>
            A query against a Raven index
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentQuery`1.SelectFields``1(System.String[])">
      <summary>
            Selects the specified fields directly from the index
            </summary>
      <typeparam name="TProjection">The type of the projection.</typeparam>
      <param name="fields">The fields.</param>
    </member>
    <member name="M:Raven.Client.IDocumentQuery`1.Lazily">
      <summary>
            Register the query as a lazy query in the session and return a lazy
            instance that will evaluate the query only when needed
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentQuery`1.Lazily(System.Action{System.Collections.Generic.IEnumerable{`0}})">
      <summary>
            Register the query as a lazy query in the session and return a lazy
            instance that will evaluate the query only when needed.
            Also provide a function to execute when the value is evaluated
            </summary>
    </member>
    <member name="P:Raven.Client.IDocumentQuery`1.QueryResult">
      <summary>
            Gets the query result
            Execute the query the first time that this is called.
            </summary>
      <value>The query result.</value>
    </member>
    <member name="T:Raven.Client.Document.DocumentQuery`1">
      <summary>
            A query against a Raven index
            </summary>
    </member>
    <member name="M:Raven.Client.Document.DocumentQuery`1.#ctor(Raven.Client.Document.InMemoryDocumentSessionOperations,Raven.Client.Connection.IDatabaseCommands,Raven.Client.Connection.Async.IAsyncDatabaseCommands,System.String,System.String[],Raven.Client.Listeners.IDocumentQueryListener[])">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DocumentQuery`1" /> class.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.DocumentQuery`1.#ctor(Raven.Client.Document.DocumentQuery{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DocumentQuery`1" /> class.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.DocumentQuery`1.SelectFields``1(System.String[])">
      <summary>
            Selects the specified fields directly from the index
            </summary>
      <typeparam name="TProjection">The type of the projection.</typeparam>
      <param name="fields">The fields.</param>
    </member>
    <member name="M:Raven.Client.Document.DocumentQuery`1.AddOrder``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
      <summary>
              Adds an ordering for a specific field to the query
            </summary>
      <param name="propertySelector">Property selector for the field.</param>
      <param name="descending">if set to <c>true</c> [descending].</param>
    </member>
    <member name="M:Raven.Client.Document.DocumentQuery`1.Search``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.DocumentQuery`1.GroupBy``1(Raven.Abstractions.Data.AggregationOperation,System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
      <summary>
              Instruct the index to group by the specified fields using the specified aggregation operation
            </summary>
      <remarks>
              This is only valid on dynamic indexes queries
            </remarks>
    </member>
    <member name="M:Raven.Client.Document.DocumentQuery`1.WhereEquals``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
      <summary>
              Matches exact value
            </summary>
      <remarks>
              Defaults to NotAnalyzed
            </remarks>
    </member>
    <member name="M:Raven.Client.Document.DocumentQuery`1.WhereEquals``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,System.Boolean)">
      <summary>
              Matches exact value
            </summary>
      <remarks>
              Defaults to allow wildcards only if analyzed
            </remarks>
    </member>
    <member name="M:Raven.Client.Document.DocumentQuery`1.WhereIn``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Check that the field has one of the specified value
            </summary>
    </member>
    <member name="M:Raven.Client.Document.DocumentQuery`1.WhereStartsWith``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
      <summary>
              Matches fields which starts with the specified value.
            </summary>
      <param name="propertySelector">Property selector for the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.Document.DocumentQuery`1.WhereEndsWith``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
      <summary>
              Matches fields which ends with the specified value.
            </summary>
      <param name="propertySelector">Property selector for the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.Document.DocumentQuery`1.WhereBetween``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,``0)">
      <summary>
              Matches fields where the value is between the specified start and end, exclusive
            </summary>
      <param name="propertySelector">Property selector for the field.</param>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
    </member>
    <member name="M:Raven.Client.Document.DocumentQuery`1.WhereBetweenOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,``0)">
      <summary>
              Matches fields where the value is between the specified start and end, inclusive
            </summary>
      <param name="propertySelector">Property selector for the field.</param>
      <param name="start">The start.</param>
      <param name="end">The end.</param>
    </member>
    <member name="M:Raven.Client.Document.DocumentQuery`1.WhereGreaterThan``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
      <summary>
              Matches fields where the value is greater than the specified value
            </summary>
      <param name="propertySelector">Property selector for the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.Document.DocumentQuery`1.WhereGreaterThanOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
      <summary>
              Matches fields where the value is greater than or equal to the specified value
            </summary>
      <param name="propertySelector">Property selector for the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.Document.DocumentQuery`1.WhereLessThan``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
      <summary>
              Matches fields where the value is less than the specified value
            </summary>
      <param name="propertySelector">Property selector for the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.Document.DocumentQuery`1.WhereLessThanOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
      <summary>
              Matches fields where the value is less than or equal to the specified value
            </summary>
      <param name="propertySelector">Property selector for the field.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Raven.Client.Document.DocumentQuery`1.WithinRadiusOf(System.Double,System.Double,System.Double)">
      <summary>
            Filter matches to be inside the specified radius
            </summary>
      <param name="radius">The radius.</param>
      <param name="latitude">The latitude.</param>
      <param name="longitude">The longitude.</param>
    </member>
    <member name="M:Raven.Client.Document.DocumentQuery`1.GenerateQueryWithinRadiusOf(System.Double,System.Double,System.Double)">
      <summary>
              Filter matches to be inside the specified radius
            </summary>
      <param name="radius">The radius.</param>
      <param name="latitude">The latitude.</param>
      <param name="longitude">The longitude.</param>
    </member>
    <member name="M:Raven.Client.Document.DocumentQuery`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
      <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by ascending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
      <param name="propertySelectors">Property selectors for the fields.</param>
    </member>
    <member name="M:Raven.Client.Document.DocumentQuery`1.ToString">
      <summary>
              Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
              A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="T:Raven.Client.IDocumentSession">
      <summary>
            Interface for document session
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentSession.Delete``1(``0)">
      <summary>
            Marks the specified entity for deletion. The entity will be deleted when <see cref="M:Raven.Client.IDocumentSession.SaveChanges" /> is called.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="entity">The entity.</param>
    </member>
    <member name="M:Raven.Client.IDocumentSession.Load``1(System.String)">
      <summary>
            Loads the specified entity with the specified id.
            </summary>
      <param name="id">The id.</param>
    </member>
    <member name="M:Raven.Client.IDocumentSession.Load``1(System.String[])">
      <summary>
            Loads the specified entities with the specified ids.
            </summary>
      <param name="ids">The ids.</param>
    </member>
    <member name="M:Raven.Client.IDocumentSession.Load``1(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Loads the specified entities with the specified ids.
            </summary>
      <param name="ids">The ids.</param>
    </member>
    <member name="M:Raven.Client.IDocumentSession.Load``1(System.ValueType)">
      <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
      <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
    </member>
    <member name="M:Raven.Client.IDocumentSession.Query``1(System.String)">
      <summary>
            Queries the specified index using Linq.
            </summary>
      <typeparam name="T">The result of the query</typeparam>
      <param name="indexName">Name of the index.</param>
    </member>
    <member name="M:Raven.Client.IDocumentSession.Query``1">
      <summary>
            Dynamically queries RavenDB using LINQ
            </summary>
      <typeparam name="T">The result of the query</typeparam>
    </member>
    <member name="M:Raven.Client.IDocumentSession.Query``2">
      <summary>
            Queries the index specified by <typeparamref name="TIndexCreator" /> using Linq.
            </summary>
      <typeparam name="T">The result of the query</typeparam>
      <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.IDocumentSession.Include(System.String)">
      <summary>
            Begin a load while including the specified path 
            </summary>
      <param name="path">The path.</param>
    </member>
    <member name="M:Raven.Client.IDocumentSession.Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
            Begin a load while including the specified path 
            </summary>
      <param name="path">The path.</param>
    </member>
    <member name="M:Raven.Client.IDocumentSession.Include``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
            Begin a load while including the specified path 
            </summary>
      <param name="path">The path.</param>
    </member>
    <member name="M:Raven.Client.IDocumentSession.SaveChanges">
      <summary>
            Saves all the changes to the Raven server.
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentSession.Store(System.Object,System.Guid)">
      <summary>
            Stores the specified entity with the specified etag
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentSession.Store(System.Object,System.Guid,System.String)">
      <summary>
            Stores the specified entity with the specified etag, under the specified id
            </summary>
    </member>
    <member name="M:Raven.Client.IDocumentSession.Store(System.Object)">
      <summary>
            Stores the specified dynamic entity.
            </summary>
      <param name="entity">The entity.</param>
    </member>
    <member name="M:Raven.Client.IDocumentSession.Store(System.Object,System.String)">
      <summary>
            Stores the specified dynamic entity, under the specified id
            </summary>
      <param name="entity">The entity.</param>
      <param name="id">The id to store this entity under. If other entity exists with the same id it will be overridden.</param>
    </member>
    <member name="P:Raven.Client.IDocumentSession.Advanced">
      <summary>
            Get the accessor for advanced operations
            </summary>
      <remarks>
            Those operations are rarely needed, and have been moved to a separate 
            property to avoid cluttering the API
            </remarks>
    </member>
    <member name="T:Raven.Client.IDocumentSessionImpl">
      <summary>
            Interface for document session which holds the internal operations
            </summary>
    </member>
    <member name="T:Raven.Client.ITransactionalDocumentSession">
      <summary>
            Implementers of this interface provide transactional operations
            Note that this interface is mostly useful only for expert usage
            </summary>
    </member>
    <member name="M:Raven.Client.ITransactionalDocumentSession.Commit(System.Guid)">
      <summary>
            Commits the transaction specified.
            </summary>
      <param name="txId">The tx id.</param>
    </member>
    <member name="M:Raven.Client.ITransactionalDocumentSession.Rollback(System.Guid)">
      <summary>
            Rollbacks the transaction specified.
            </summary>
      <param name="txId">The tx id.</param>
    </member>
    <member name="M:Raven.Client.ITransactionalDocumentSession.PromoteTransaction(System.Guid)">
      <summary>
            Promotes a transaction specified to a distributed transaction
            </summary>
      <param name="fromTxId">From tx id.</param>
      <returns>The token representing the distributed transaction</returns>
    </member>
    <member name="P:Raven.Client.ITransactionalDocumentSession.ResourceManagerId">
      <summary>
            The transaction resource manager identifier
            </summary>
    </member>
    <member name="T:Raven.Client.ISyncAdvancedSessionOperation">
      <summary>
            Advanced synchronous session operations
            </summary>
    </member>
    <member name="M:Raven.Client.ISyncAdvancedSessionOperation.Refresh``1(``0)">
      <summary>
            Refreshes the specified entity from Raven server.
            </summary>
      <param name="entity">The entity.</param>
    </member>
    <member name="M:Raven.Client.ISyncAdvancedSessionOperation.LoadStartingWith``1(System.String,System.Int32,System.Int32)">
      <summary>
            Load documents with the specified key prefix
            </summary>
    </member>
    <member name="M:Raven.Client.ISyncAdvancedSessionOperation.LuceneQuery``2">
      <summary>
            Queries the index specified by <typeparamref name="TIndexCreator" /> using lucene syntax.
            </summary>
      <typeparam name="T">The result of the query</typeparam>
      <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.ISyncAdvancedSessionOperation.LuceneQuery``1(System.String)">
      <summary>
            Query the specified index using Lucene syntax
            </summary>
      <param name="indexName">Name of the index.</param>
    </member>
    <member name="M:Raven.Client.ISyncAdvancedSessionOperation.LuceneQuery``1">
      <summary>
            Dynamically query RavenDB using Lucene syntax
            </summary>
    </member>
    <member name="M:Raven.Client.ISyncAdvancedSessionOperation.GetDocumentUrl(System.Object)">
      <summary>
            Gets the document URL for the specified entity.
            </summary>
      <param name="entity">The entity.</param>
      <returns>
      </returns>
    </member>
    <member name="P:Raven.Client.ISyncAdvancedSessionOperation.DatabaseCommands">
      <summary>
            Gets the database commands.
            </summary>
      <value>The database commands.</value>
    </member>
    <member name="P:Raven.Client.ISyncAdvancedSessionOperation.AsyncDatabaseCommands">
      <summary>
            Gets the async database commands.
            </summary>
      <value>The async database commands.</value>
    </member>
    <member name="P:Raven.Client.ISyncAdvancedSessionOperation.Lazily">
      <summary>
            Access the lazy operations
            </summary>
    </member>
    <member name="P:Raven.Client.ISyncAdvancedSessionOperation.Eagerly">
      <summary>
            Access the eager operations
            </summary>
    </member>
    <member name="T:Raven.Client.Document.DocumentSession">
      <summary>
            Implements Unit of Work for accessing the RavenDB server
            </summary>
    </member>
    <member name="M:Raven.Client.Document.DocumentSession.#ctor(Raven.Client.Document.DocumentStore,Raven.Client.Document.DocumentSessionListeners,System.Guid,Raven.Client.Connection.IDatabaseCommands,Raven.Client.Connection.Async.IAsyncDatabaseCommands)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DocumentSession" /> class.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.DocumentSession.Load``1(System.Collections.Generic.IEnumerable{System.String},System.Action{``0[]})">
      <summary>
            Loads the specified ids and a function to call when it is evaluated
            </summary>
    </member>
    <member name="M:Raven.Client.Document.DocumentSession.Load``1(System.String,System.Action{``0})">
      <summary>
            Loads the specified id and a function to call when it is evaluated
            </summary>
    </member>
    <member name="M:Raven.Client.Document.DocumentSession.Load``1(System.String)">
      <summary>
            Loads the specified entity with the specified id.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="id">The id.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.DocumentSession.Load``1(System.String[])">
      <summary>
            Loads the specified entities with the specified ids.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="ids">The ids.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.DocumentSession.Load``1(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Loads the specified entities with the specified ids.
            </summary>
      <param name="ids">The ids.</param>
    </member>
    <member name="M:Raven.Client.Document.DocumentSession.Load``1(System.ValueType)">
      <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
      <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
    </member>
    <member name="M:Raven.Client.Document.DocumentSession.Query``1(System.String)">
      <summary>
            Queries the specified index using Linq.
            </summary>
      <typeparam name="T">The result of the query</typeparam>
      <param name="indexName">Name of the index.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.DocumentSession.Query``2">
      <summary>
            Queries the index specified by <typeparamref name="TIndexCreator" /> using Linq.
            </summary>
      <typeparam name="T">The result of the query</typeparam>
      <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.DocumentSession.Refresh``1(``0)">
      <summary>
            Refreshes the specified entity from Raven server.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="entity">The entity.</param>
    </member>
    <member name="M:Raven.Client.Document.DocumentSession.GetJsonDocument(System.String)">
      <summary>
            Get the json document by key from the store
            </summary>
    </member>
    <member name="M:Raven.Client.Document.DocumentSession.Include(System.String)">
      <summary>
            Begin a load while including the specified path
            </summary>
      <param name="path">The path.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.DocumentSession.Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
            Begin a load while including the specified path
            </summary>
      <param name="path">The path.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.DocumentSession.GetDocumentUrl(System.Object)">
      <summary>
            Gets the document URL for the specified entity.
            </summary>
      <param name="entity">The entity.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.DocumentSession.SaveChanges">
      <summary>
            Saves all the changes to the Raven server.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.DocumentSession.LuceneQuery``2">
      <summary>
            Queries the index specified by <typeparamref name="TIndexCreator" /> using lucene syntax.
            </summary>
      <typeparam name="T">The result of the query</typeparam>
      <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.DocumentSession.LuceneQuery``1(System.String)">
      <summary>
            Query the specified index using Lucene syntax
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="indexName">Name of the index.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.DocumentSession.Commit(System.Guid)">
      <summary>
            Commits the specified tx id.
            </summary>
      <param name="txId">The tx id.</param>
    </member>
    <member name="M:Raven.Client.Document.DocumentSession.Rollback(System.Guid)">
      <summary>
            Rollbacks the specified tx id.
            </summary>
      <param name="txId">The tx id.</param>
    </member>
    <member name="M:Raven.Client.Document.DocumentSession.PromoteTransaction(System.Guid)">
      <summary>
            Promotes a transaction specified to a distributed transaction
            </summary>
      <param name="fromTxId">From tx id.</param>
      <returns>The token representing the distributed transaction</returns>
    </member>
    <member name="M:Raven.Client.Document.DocumentSession.Query``1">
      <summary>
            Query RavenDB dynamically using LINQ
            </summary>
      <typeparam name="T">The result of the query</typeparam>
    </member>
    <member name="M:Raven.Client.Document.DocumentSession.LuceneQuery``1">
      <summary>
            Dynamically query RavenDB using Lucene syntax
            </summary>
    </member>
    <member name="M:Raven.Client.Document.DocumentSession.LazyLoadInternal``1(System.String[],System.String[],System.Action{``0[]})">
      <summary>
            Register to lazily load documents and include
            </summary>
    </member>
    <member name="P:Raven.Client.Document.DocumentSession.DatabaseCommands">
      <summary>
            Gets the database commands.
            </summary>
      <value>The database commands.</value>
    </member>
    <member name="P:Raven.Client.Document.DocumentSession.AsyncDatabaseCommands">
      <summary>
            Gets the async database commands.
            </summary>
      <value>The async database commands.</value>
    </member>
    <member name="P:Raven.Client.Document.DocumentSession.Lazily">
      <summary>
            Access the lazy operations
            </summary>
    </member>
    <member name="P:Raven.Client.Document.DocumentSession.Eagerly">
      <summary>
            Access the eager operations
            </summary>
    </member>
    <member name="P:Raven.Client.Document.DocumentSession.Advanced">
      <summary>
            Get the accessor for advanced operations
            </summary>
      <remarks>
            Those operations are rarely needed, and have been moved to a separate 
            property to avoid cluttering the API
            </remarks>
    </member>
    <member name="T:Raven.Client.Document.DocumentStore">
      <summary>
            Manages access to RavenDB and open sessions to work with RavenDB.
            </summary>
    </member>
    <member name="F:Raven.Client.Document.DocumentStore.currentSessionId">
      <summary>
            The current session id - only used during construction
            </summary>
    </member>
    <member name="F:Raven.Client.Document.DocumentStore.databaseCommandsGenerator">
      <summary>
            Generate new instance of database commands
            </summary>
    </member>
    <member name="M:Raven.Client.Document.DocumentStore.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DocumentStore" /> class.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.DocumentStore.ParseConnectionString(System.String)">
      <summary>
            Set document store settings based on a given connection string.
            </summary>
      <param name="connString">The connection string to parse</param>
    </member>
    <member name="M:Raven.Client.Document.DocumentStore.SetConnectionStringSettings(Raven.Abstractions.Data.RavenConnectionStringOptions)">
      <summary>
            Copy the relevant connection string settings
            </summary>
    </member>
    <member name="M:Raven.Client.Document.DocumentStore.GetConnectionStringOptions">
      <summary>
            Create the connection string parser
            </summary>
    </member>
    <member name="M:Raven.Client.Document.DocumentStore.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.DocumentStore.OpenSession">
      <summary>
            Opens the session.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.DocumentStore.OpenSession(System.String)">
      <summary>
            Opens the session for a particular database
            </summary>
    </member>
    <member name="M:Raven.Client.Document.DocumentStore.Initialize">
      <summary>
            Initializes this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.DocumentStore.AssertValidConfiguration">
      <summary>
            validate the configuration for the document store
            </summary>
    </member>
    <member name="M:Raven.Client.Document.DocumentStore.InitializeInternal">
      <summary>
            Initialize the document store access method to RavenDB
            </summary>
    </member>
    <member name="M:Raven.Client.Document.DocumentStore.DisableAggressiveCaching">
      <summary>
            Setup the context for no aggressive caching
            </summary>
      <remarks>
            This is mainly useful for internal use inside RavenDB, when we are executing
            queries that have been marked with WaitForNonStaleResults, we temporarily disable
            aggressive caching.
            </remarks>
    </member>
    <member name="M:Raven.Client.Document.DocumentStore.AggressivelyCacheFor(System.TimeSpan)">
      <summary>
            Setup the context for aggressive caching.
            </summary>
      <param name="cacheDuration">Specify the aggressive cache duration</param>
      <remarks>
            Aggressive caching means that we will not check the server to see whatever the response
            we provide is current or not, but will serve the information directly from the local cache
            without touching the server.
            </remarks>
    </member>
    <member name="M:Raven.Client.Document.DocumentStore.OpenAsyncSession">
      <summary>
            Opens the async session.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.DocumentStore.OpenAsyncSession(System.String)">
      <summary>
            Opens the async session.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Raven.Client.Document.DocumentStore.JsonRequestFactory">
      <summary>
             Get the <see cref="T:Raven.Client.Connection.HttpJsonRequestFactory" /> for the stores
            </summary>
    </member>
    <member name="P:Raven.Client.Document.DocumentStore.DatabaseCommands">
      <summary>
            Gets the database commands.
            </summary>
      <value>The database commands.</value>
    </member>
    <member name="P:Raven.Client.Document.DocumentStore.AsyncDatabaseCommands">
      <summary>
            Gets the async database commands.
            </summary>
      <value>The async database commands.</value>
    </member>
    <member name="P:Raven.Client.Document.DocumentStore.Credentials">
      <summary>
            Gets or sets the credentials.
            </summary>
      <value>The credentials.</value>
    </member>
    <member name="P:Raven.Client.Document.DocumentStore.Identifier">
      <summary>
            Gets or sets the identifier for this store.
            </summary>
      <value>The identifier.</value>
    </member>
    <member name="P:Raven.Client.Document.DocumentStore.ApiKey">
      <summary>
            The API Key to use when authenticating against a RavenDB server that
            supports API Key authentication
            </summary>
    </member>
    <member name="P:Raven.Client.Document.DocumentStore.ConnectionStringName">
      <summary>
            Gets or sets the name of the connection string name.
            </summary>
    </member>
    <member name="P:Raven.Client.Document.DocumentStore.DefaultDatabase">
      <summary>
            Gets or sets the default database name.
            </summary>
      <value>The default database name.</value>
    </member>
    <member name="P:Raven.Client.Document.DocumentStore.MaxNumberOfCachedRequests">
      <summary>
            Max number of cached requests (default: 2048)
            </summary>
    </member>
    <member name="E:Raven.Client.Document.DocumentStore.AfterDispose">
      <summary>
            Called after dispose is completed
            </summary>
    </member>
    <member name="T:Raven.Client.Document.FailoverBehavior">
      <summary>
            Options for handling failover scenarios in replication environment
            </summary>
    </member>
    <member name="F:Raven.Client.Document.FailoverBehavior.AllowReadsFromSecondaries">
      <summary>
            Allow to read from the secondary server(s), but immediately fail writes
            to the secondary server(s).
            </summary>
      <remarks>
            This is usually the safest approach, because it means that you can still serve
            read requests when the primary node is down, but don't have to deal with replication
            conflicts if there are writes to the secondary when the primary node is down.
            </remarks>
    </member>
    <member name="F:Raven.Client.Document.FailoverBehavior.AllowReadsFromSecondariesAndWritesToSecondaries">
      <summary>
            Allow to read from the secondary server(s), but immediately fail writes
            to the secondary server(s).
            </summary>
      <remarks>
            Choosing this option requires that you'll have some way of propogating changes
            made to the secondary server(s) to the primary node when the primary goes back
            up. 
            A typical strategy to handle this is to make sure that the replication is setup
            in a master/master relationship, so any writes to the secondary server will be 
            replicated to the master server.
            Please note, however, that this means that your code must be prepared to handle
            conflicts in case of different writes to the same document across nodes.
            </remarks>
    </member>
    <member name="F:Raven.Client.Document.FailoverBehavior.FailImmediately">
      <summary>
            Immediately fail the request, without attempting any failover. This is true for both 
            reads and writes. The RavenDB client will not even check that you are using replication.
            </summary>
      <remarks>
            This is mostly useful when your replication setup is meant to be used for backups / external
            needs, and is not meant to be a failover storage.
            </remarks>
    </member>
    <member name="F:Raven.Client.Document.FailoverBehavior.ReadFromAllServers">
      <summary>
            Read requests will be spread across all the servers, instead of doing all the work against the master.
            Write requests will always go to the master.
            </summary>
      <remarks>
            This is useful for striping, spreading the read load among multiple servers. The idea is that this will give us better read performance overall.
            A single session will always use the same server, we don't do read striping within a single session.
            Note that using this means that you cannot set UserOptimisticConcurrency to true, because that would generate concurrency exceptions.
            If you want to use that, you have to open the session with ForceReadFromMaster set to true.
            </remarks>
    </member>
    <member name="T:Raven.Client.Document.HiLoKeyGenerator">
      <summary>
            Generate hilo numbers against a RavenDB document
            </summary>
    </member>
    <member name="M:Raven.Client.Document.HiLoKeyGenerator.#ctor(Raven.Client.Connection.IDatabaseCommands,System.String,System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.HiLoKeyGenerator" /> class.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.HiLoKeyGenerator.GenerateDocumentKey(Raven.Client.Document.DocumentConvention,System.Object)">
      <summary>
            Generates the document key.
            </summary>
      <param name="convention">The convention.</param>
      <param name="entity">The entity.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.HiLoKeyGenerator.NextId">
      <summary>
             Create the next id (numeric)
            </summary>
    </member>
    <member name="T:Raven.Client.Document.ILoaderWithInclude`1">
      <summary>
            Fluent interface for specifying include paths
            for loading documents
            </summary>
    </member>
    <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Include(System.String)">
      <summary>
            Includes the specified path.
            </summary>
      <param name="path">The path.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
      <summary>
            Includes the specified path.
            </summary>
      <param name="path">The path.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Include``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
      <summary>
            Includes the specified path.
            </summary>
      <param name="path">The path.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Load(System.String[])">
      <summary>
            Loads the specified ids.
            </summary>
      <param name="ids">The ids.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Load(System.String)">
      <summary>
            Loads the specified id.
            </summary>
      <param name="id">The id.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Load(System.ValueType)">
      <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
      <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
    </member>
    <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Load``1(System.String[])">
      <summary>
            Loads the specified ids.
            </summary>
      <param name="ids">The ids.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Load``1(System.String)">
      <summary>
            Loads the specified id.
            </summary>
      <typeparam name="TResult">
      </typeparam>
      <param name="id">The id.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Document.ILoaderWithInclude`1.Load``1(System.ValueType)">
      <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
      <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
    </member>
    <member name="T:Raven.Client.Document.DocumentSessionListeners">
      <summary>
            Holder for all the listeners for the session
            </summary>
    </member>
    <member name="M:Raven.Client.Document.DocumentSessionListeners.#ctor">
      <summary>
            Create a new instance of this class
            </summary>
    </member>
    <member name="P:Raven.Client.Document.DocumentSessionListeners.ConversionListeners">
      <summary>
            The conversion listeners
            </summary>
    </member>
    <member name="P:Raven.Client.Document.DocumentSessionListeners.QueryListeners">
      <summary>
            The query listeners allow to modify queries before it is executed
            </summary>
    </member>
    <member name="P:Raven.Client.Document.DocumentSessionListeners.StoreListeners">
      <summary>
            The store listeners
            </summary>
    </member>
    <member name="P:Raven.Client.Document.DocumentSessionListeners.DeleteListeners">
      <summary>
            The delete listeners
            </summary>
    </member>
    <member name="T:Raven.Client.Document.MultiLoaderWithInclude`1">
      <summary>
            Fluent implementation for specifying include paths
            for loading documents
            </summary>
    </member>
    <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Include(System.String)">
      <summary>
            Includes the specified path.
            </summary>
      <param name="path">The path.</param>
    </member>
    <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
      <summary>
            Includes the specified path.
            </summary>
      <param name="path">The path.</param>
    </member>
    <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Load(System.String[])">
      <summary>
            Loads the specified ids.
            </summary>
      <param name="ids">The ids.</param>
    </member>
    <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Load(System.String)">
      <summary>
            Loads the specified id.
            </summary>
      <param name="id">The id.</param>
    </member>
    <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Load(System.ValueType)">
      <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
      <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
    </member>
    <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.#ctor(Raven.Client.IDocumentSessionImpl)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.MultiLoaderWithInclude`1" /> class.
            </summary>
      <param name="session">The session.</param>
    </member>
    <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Load``1(System.String[])">
      <summary>
            Loads the specified ids.
            </summary>
      <typeparam name="TResult">
      </typeparam>
      <param name="ids">The ids.</param>
    </member>
    <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Load``1(System.String)">
      <summary>
            Loads the specified id.
            </summary>
      <typeparam name="TResult">
      </typeparam>
      <param name="id">The id.</param>
    </member>
    <member name="M:Raven.Client.Document.MultiLoaderWithInclude`1.Load``1(System.ValueType)">
      <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
      <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
    </member>
    <member name="T:Raven.Client.Document.MultiTypeHiLoKeyGenerator">
      <summary>
            Generate a hilo key for each given type
            </summary>
    </member>
    <member name="M:Raven.Client.Document.MultiTypeHiLoKeyGenerator.#ctor(Raven.Client.Connection.IDatabaseCommands,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.MultiTypeHiLoKeyGenerator" /> class.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.MultiTypeHiLoKeyGenerator.#ctor(Raven.Client.IDocumentStore,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.MultiTypeHiLoKeyGenerator" /> class.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.MultiTypeHiLoKeyGenerator.GenerateDocumentKey(Raven.Client.Document.DocumentConvention,System.Object)">
      <summary>
            Generates the document key.
            </summary>
      <param name="conventions">The conventions.</param>
      <param name="entity">The entity.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Raven.Client.Document.PromotableRavenClientEnlistment">
      <summary>
            An implementation of <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" /> for RavenDB Client API
            </summary>
    </member>
    <member name="M:Raven.Client.Document.PromotableRavenClientEnlistment.#ctor(Raven.Client.ITransactionalDocumentSession,System.Action)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.PromotableRavenClientEnlistment" /> class.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.PromotableRavenClientEnlistment.Promote">
      <summary>
            Notifies an enlisted object that an escalation of the delegated transaction has been requested.
            </summary>
      <returns>
            A transmitter/receiver propagation token that marshals a distributed transaction. For more information, see <see cref="M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])" />.
            </returns>
    </member>
    <member name="M:Raven.Client.Document.PromotableRavenClientEnlistment.Initialize">
      <summary>
            Notifies a transaction participant that enlistment has completed successfully.
            </summary>
      <exception cref="T:System.Transactions.TransactionException">An attempt to enlist or serialize a transaction.</exception>
    </member>
    <member name="M:Raven.Client.Document.PromotableRavenClientEnlistment.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)">
      <summary>
            Notifies an enlisted object that the transaction is being committed.
            </summary>
      <param name="singlePhaseEnlistment">A <see cref="T:System.Transactions.SinglePhaseEnlistment" /> interface used to send a response to the transaction manager.</param>
    </member>
    <member name="M:Raven.Client.Document.PromotableRavenClientEnlistment.Rollback(System.Transactions.SinglePhaseEnlistment)">
      <summary>
            Notifies an enlisted object that the transaction is being rolled back.
            </summary>
      <param name="singlePhaseEnlistment">A <see cref="T:System.Transactions.SinglePhaseEnlistment" /> object used to send a response to the transaction manager.</param>
    </member>
    <member name="M:Raven.Client.Document.PromotableRavenClientEnlistment.GetLocalOrDistributedTransactionId(System.Transactions.TransactionInformation)">
      <summary>
            Gets the local or distributed transaction id.
            </summary>
      <param name="transactionInformation">The transaction information.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Raven.Client.Document.RavenClientEnlistment">
      <summary>
            An implementation of <see cref="T:System.Transactions.IEnlistmentNotification" /> for the Raven Client API, allowing Raven
            Client API to participate in Distributed Transactions
            </summary>
    </member>
    <member name="M:Raven.Client.Document.RavenClientEnlistment.#ctor(Raven.Client.ITransactionalDocumentSession,System.Action)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.RavenClientEnlistment" /> class.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.RavenClientEnlistment.Prepare(System.Transactions.PreparingEnlistment)">
      <summary>
            Notifies an enlisted object that a transaction is being prepared for commitment.
            </summary>
      <param name="preparingEnlistment">A <see cref="T:System.Transactions.PreparingEnlistment" /> object used to send a response to the transaction manager.</param>
    </member>
    <member name="M:Raven.Client.Document.RavenClientEnlistment.Commit(System.Transactions.Enlistment)">
      <summary>
            Notifies an enlisted object that a transaction is being committed.
            </summary>
      <param name="enlistment">An <see cref="T:System.Transactions.Enlistment" /> object used to send a response to the transaction manager.</param>
    </member>
    <member name="M:Raven.Client.Document.RavenClientEnlistment.Rollback(System.Transactions.Enlistment)">
      <summary>
            Notifies an enlisted object that a transaction is being rolled back (aborted).
            </summary>
      <param name="enlistment">A <see cref="T:System.Transactions.Enlistment" /> object used to send a response to the transaction manager.</param>
    </member>
    <member name="M:Raven.Client.Document.RavenClientEnlistment.InDoubt(System.Transactions.Enlistment)">
      <summary>
            Notifies an enlisted object that the status of a transaction is in doubt.
            </summary>
      <param name="enlistment">An <see cref="T:System.Transactions.Enlistment" /> object used to send a response to the transaction manager.</param>
    </member>
    <member name="M:Raven.Client.Document.RavenClientEnlistment.Initialize">
      <summary>
            Initializes this instance.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.RavenClientEnlistment.Rollback(System.Transactions.SinglePhaseEnlistment)">
      <summary>
            Rollbacks the specified single phase enlistment.
            </summary>
      <param name="singlePhaseEnlistment">The single phase enlistment.</param>
    </member>
    <member name="T:Raven.Client.Document.ReflectionUtil">
      <summary>
            Helper class for reflection operations
            </summary>
    </member>
    <member name="M:Raven.Client.Document.ReflectionUtil.GetFullNameWithoutVersionInformation(System.Type)">
      <summary>
            Gets the full name without version information.
            </summary>
      <param name="entityType">Type of the entity.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Raven.Client.Document.ShardedDocumentQuery`1">
      <summary>
            A query that is executed against sharded instances
            </summary>
    </member>
    <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.#ctor(Raven.Client.Document.InMemoryDocumentSessionOperations,System.Func{Raven.Client.Shard.ShardRequestData,System.Collections.Generic.IList{System.Tuple{System.String,Raven.Client.Connection.IDatabaseCommands}}},Raven.Client.Shard.ShardStrategy,System.String,System.String[],Raven.Client.Listeners.IDocumentQueryListener[])">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.ShardedDocumentQuery`1" /> class.
            </summary>
    </member>
    <member name="M:Raven.Client.Document.ShardedDocumentQuery`1.Lazily(System.Action{System.Collections.Generic.IEnumerable{`0}})">
      <summary>
            Register the query as a lazy query in the session and return a lazy
            instance that will evaluate the query only when needed
            </summary>
    </member>
    <member name="P:Raven.Client.Document.ShardedDocumentQuery`1.DatabaseCommands">
      <summary>
              Grant access to the database commands
            </summary>
    </member>
    <member name="P:Raven.Client.Document.ShardedDocumentQuery`1.AsyncDatabaseCommands">
      <summary>
              Grant access to the async database commands
            </summary>
    </member>
    <member name="T:Raven.Client.EntityStored">
      <summary>
            Delegate definition when an entity is stored in the session
            </summary>
    </member>
    <member name="T:Raven.Client.EntityToDocument">
      <summary>
            Delegate definition for converting an entity to a document and metadata
            </summary>
    </member>
    <member name="T:Raven.Client.DocumentToEntity">
      <summary>
            Delegate definition for converting a document and metadata to an entity
            </summary>
    </member>
    <member name="T:Raven.Client.Exceptions.ConflictException">
      <summary>
            This exception occurs when a (replication) conflict is encountered.
            Usually this required a user to manually resolve the conflict.
            </summary>
    </member>
    <member name="M:Raven.Client.Exceptions.ConflictException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ConflictException" /> class.
            </summary>
    </member>
    <member name="M:Raven.Client.Exceptions.ConflictException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ConflictException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Raven.Client.Exceptions.ConflictException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ConflictException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="inner">The inner.</param>
    </member>
    <member name="M:Raven.Client.Exceptions.ConflictException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ConflictException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="P:Raven.Client.Exceptions.ConflictException.ConflictedVersionIds">
      <summary>
            Gets or sets the conflicted version ids.
            </summary>
      <value>The conflicted version ids.</value>
    </member>
    <member name="P:Raven.Client.Exceptions.ConflictException.Etag">
      <summary>
            Gets or sets the conflicted document etag
            </summary>
    </member>
    <member name="T:Raven.Client.Exceptions.NonAuthoritativeInformationException">
      <summary>
            This exception is raised when a non authoritative information is encountered
            </summary>
    </member>
    <member name="M:Raven.Client.Exceptions.NonAuthoritativeInformationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonAuthoritativeInformationException" /> class.
            </summary>
    </member>
    <member name="M:Raven.Client.Exceptions.NonAuthoritativeInformationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonAuthoritativeInformationException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Raven.Client.Exceptions.NonAuthoritativeInformationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonAuthoritativeInformationException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="inner">The inner.</param>
    </member>
    <member name="M:Raven.Client.Exceptions.NonAuthoritativeInformationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonAuthoritativeInformationException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="T:Raven.Client.Exceptions.NonUniqueObjectException">
      <summary>
            This exception is thrown when a separate instance of an entity is added to the session
            when a different entity with the same key already exists within the session.
            </summary>
    </member>
    <member name="M:Raven.Client.Exceptions.NonUniqueObjectException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonUniqueObjectException" /> class.
            </summary>
    </member>
    <member name="M:Raven.Client.Exceptions.NonUniqueObjectException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonUniqueObjectException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Raven.Client.Exceptions.NonUniqueObjectException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonUniqueObjectException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="inner">The inner.</param>
    </member>
    <member name="M:Raven.Client.Exceptions.NonUniqueObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonUniqueObjectException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="T:Raven.Client.Exceptions.ReadVetoException">
      <summary>
            This exception is raised whenever a trigger vetoes the read by the session
            </summary>
    </member>
    <member name="M:Raven.Client.Exceptions.ReadVetoException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ReadVetoException" /> class.
            </summary>
    </member>
    <member name="M:Raven.Client.Exceptions.ReadVetoException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ReadVetoException" /> class.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:Raven.Client.Exceptions.ReadVetoException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ReadVetoException" /> class.
            </summary>
      <param name="message">The message.</param>
      <param name="inner">The inner.</param>
    </member>
    <member name="M:Raven.Client.Exceptions.ReadVetoException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ReadVetoException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="T:Raven.Client.Extensions.DatabaseCommandsExtensions">
      <summary>
             Extension methods that make certain database command operations more convenient to use
            </summary>
    </member>
    <member name="M:Raven.Client.Extensions.DatabaseCommandsExtensions.PutIndexAsync``1(Raven.Client.Connection.Async.IAsyncDatabaseCommands,System.Boolean)">
      <summary>
            Asynchronously creates an index
            </summary>
      <typeparam name="T">The type that defines the index to be create.</typeparam>
      <param name="commands">The hook to the database commands.</param>
      <param name="overwrite">Should the index be overwritten if it already exists.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Raven.Client.Extensions.MultiDatabase">
      <summary>
             Methods to create mutli tenants databases
            </summary>
    </member>
    <member name="T:Raven.Client.Extensions.MultiTenancyExtensions">
      <summary>
             Extension methods to create mutli tenants databases
            </summary>
    </member>
    <member name="M:Raven.Client.Extensions.MultiTenancyExtensions.EnsureDatabaseExists(Raven.Client.Connection.IDatabaseCommands,System.String,System.Boolean)">
      <summary>
             Ensures that the database exists, creating it if needed
            </summary>
      <remarks>
             This operation happens _outside_ of any transaction
             </remarks>
    </member>
    <member name="M:Raven.Client.Extensions.MultiTenancyExtensions.EnsureDatabaseExistsAsync(Raven.Client.Connection.Async.IAsyncDatabaseCommands,System.String,System.Boolean)">
      <summary>
             Ensures that the database exists, creating it if needed
            </summary>
    </member>
    <member name="T:Raven.Client.Indexes.AbstractIndexCreationTask">
      <summary>
            Base class for creating indexes
            </summary>
      <remarks>
            The naming convention is that underscores in the inherited class names are replaced by slashed
            For example: Posts_ByName will be saved to Posts/ByName
            </remarks>
    </member>
    <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.CreateIndexDefinition">
      <summary>
            Creates the index definition.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.CreateField(System.String,System.Object,System.Boolean,System.Boolean)">
      <summary>
            Provide a way to dynamically index values with runtime known values
            </summary>
    </member>
    <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.CreateField(System.String,System.Object)">
      <summary>
            Provide a way to dynamically index values with runtime known values
            </summary>
    </member>
    <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.Recurse``2(``0,System.Func{``0,``1})">
      <summary>
            Allows to use lambdas recursively
            </summary>
    </member>
    <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.MetadataFor(System.Object)">
      <summary>
            Allow to get to the metadata of the document
            </summary>
    </member>
    <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.AsDocument(System.Object)">
      <summary>
            Allow to get to the metadata of the document
            </summary>
    </member>
    <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.Execute(Raven.Client.IDocumentStore)">
      <summary>
            Executes the index creation against the specified document store.
            </summary>
    </member>
    <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.Execute(Raven.Client.Connection.IDatabaseCommands,Raven.Client.Document.DocumentConvention)">
      <summary>
            Executes the index creation against the specified document database using the specified conventions
            </summary>
    </member>
    <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.ExecuteAsync(Raven.Client.Connection.Async.IAsyncDatabaseCommands,Raven.Client.Document.DocumentConvention)">
      <summary>
            Executes the index creation against the specified document store.
            </summary>
    </member>
    <member name="P:Raven.Client.Indexes.AbstractIndexCreationTask.IndexName">
      <summary>
            Gets the name of the index.
            </summary>
      <value>The name of the index.</value>
    </member>
    <member name="P:Raven.Client.Indexes.AbstractIndexCreationTask.Conventions">
      <summary>
            Gets or sets the document store.
            </summary>
      <value>The document store.</value>
    </member>
    <member name="T:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1">
      <summary>
            Abstract class used to provide infrastructure service for actual creation tasks
            </summary>
    </member>
    <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.#ctor">
      <summary>
            Create a new instance
            </summary>
    </member>
    <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Index(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Raven.Abstractions.Indexing.FieldIndexing)">
      <summary>
            Register a field to be indexed
            </summary>
    </member>
    <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Index(System.String,Raven.Abstractions.Indexing.FieldIndexing)">
      <summary>
            Register a field to be indexed
            </summary>
    </member>
    <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Store(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Raven.Abstractions.Indexing.FieldStorage)">
      <summary>
            Register a field to be stored
            </summary>
    </member>
    <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Store(System.String,Raven.Abstractions.Indexing.FieldStorage)">
      <summary>
            Register a field to be stored
            </summary>
    </member>
    <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Analyze(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
      <summary>
            Register a field to be analyzed
            </summary>
    </member>
    <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Analyze(System.String,System.String)">
      <summary>
            Register a field to be analyzed
            </summary>
    </member>
    <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Sort(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Raven.Abstractions.Indexing.SortOptions)">
      <summary>
            Register a field to be sorted
            </summary>
    </member>
    <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.TransformResults">
      <summary>
            The result translator definition
            </summary>
    </member>
    <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Reduce">
      <summary>
            The reduce definition
            </summary>
    </member>
    <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Stores">
      <summary>
            Index storage options
            </summary>
    </member>
    <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.StoresStrings">
      <summary>
            Index storage options
            </summary>
    </member>
    <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.IndexSortOptions">
      <summary>
            Index sort options
            </summary>
    </member>
    <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Analyzers">
      <summary>
            Index sort options
            </summary>
    </member>
    <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.AnalyzersStrings">
      <summary>
            Index sort options
            </summary>
    </member>
    <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Indexes">
      <summary>
            Indexing options
            </summary>
    </member>
    <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.IndexesStrings">
      <summary>
            Indexing options
            </summary>
    </member>
    <member name="T:Raven.Client.Indexes.AbstractMultiMapIndexCreationTask`1">
      <summary>
            Allow to create indexes with multiple maps
            </summary>
    </member>
    <member name="M:Raven.Client.Indexes.AbstractMultiMapIndexCreationTask`1.AddMapForAll``1(System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.IEnumerable}})">
      <summary>
            Uses reflection to call <see cref="M:Raven.Client.Indexes.AbstractMultiMapIndexCreationTask`1.AddMap``1(System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.IEnumerable}})" /> for the base type and all available subclasses.
            </summary>
      <remarks>This is taken from Oren's code in this thread https://groups.google.com/d/msg/ravendb/eFUlQG-spzE/Ac0PrvsFyJYJ </remarks>
      <typeparam name="TBase">The base class type whose descendant types are to be included in the index.</typeparam>
      <param name="expr">
      </param>
    </member>
    <member name="M:Raven.Client.Indexes.AbstractMultiMapIndexCreationTask`1.CreateIndexDefinition">
      <summary>
            Creates the index definition.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="T:Raven.Client.Indexes.AbstractMultiMapIndexCreationTask">
      <summary>
            Allow to create indexes with multiple maps
            </summary>
    </member>
    <member name="T:Raven.Client.Linq.Indexing.IndexingLinqExtensions">
      <summary>
            Extension methods that adds additional behavior during indexing operations
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.Indexing.IndexingLinqExtensions.WhereEntityIs``1(System.Collections.Generic.IEnumerable{System.Object},System.String[])">
      <summary>
            Marker method for allowing complex (multi entity) queries on the server.
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.Indexing.IndexingLinqExtensions.Boost(System.Object,System.Single)">
      <summary>
            Boost the value with the given amount
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.Indexing.IndexingLinqExtensions.IfEntityIs``1(System.Object,System.String)">
      <summary>
            Marker method for allowing complex (multi entity) queries on the server.
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.Indexing.IndexingLinqExtensions.Hierarchy``1(``0,System.String)">
      <summary>
            Marker method for allowing hierarchical queries on the server.
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.Indexing.IndexingLinqExtensions.Hierarchy``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}})">
      <summary>
            Marker method for allowing hierarchical queries on the server.
            </summary>
    </member>
    <member name="T:Raven.Client.Listeners.IDocumentConversionListener">
      <summary>
            Hook for users to provide additional logic for converting to / from 
            entities to document/metadata pairs.
            </summary>
    </member>
    <member name="M:Raven.Client.Listeners.IDocumentConversionListener.EntityToDocument(System.Object,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
      <summary>
            Called when converting an entity to a document and metadata
            </summary>
    </member>
    <member name="M:Raven.Client.Listeners.IDocumentConversionListener.DocumentToEntity(System.Object,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
      <summary>
            Called when converting a document and metadata to an entity
            </summary>
    </member>
    <member name="T:Raven.Client.Listeners.IDocumentDeleteListener">
      <summary>
            Hook for users to provide additional logic on delete operations
            </summary>
    </member>
    <member name="M:Raven.Client.Listeners.IDocumentDeleteListener.BeforeDelete(System.String,System.Object,Raven.Json.Linq.RavenJObject)">
      <summary>
            Invoked before the delete request is sent to the server.
            </summary>
      <param name="key">The key.</param>
      <param name="entityInstance">The entity instance.</param>
      <param name="metadata">The metadata.</param>
    </member>
    <member name="T:Raven.Client.Listeners.IDocumentQueryListener">
      <summary>
            Hook for users to modify all queries globally
            </summary>
    </member>
    <member name="M:Raven.Client.Listeners.IDocumentQueryListener.BeforeQueryExecuted(Raven.Client.IDocumentQueryCustomization)">
      <summary>
            Allow to customize a query globally
            </summary>
    </member>
    <member name="T:Raven.Client.Listeners.IDocumentStoreListener">
      <summary>
            Hook for users to provide additional logic on store operations
            </summary>
    </member>
    <member name="M:Raven.Client.Listeners.IDocumentStoreListener.BeforeStore(System.String,System.Object,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
      <summary>
            Invoked before the store request is sent to the server.
            </summary>
      <param name="key">The key.</param>
      <param name="entityInstance">The entity instance.</param>
      <param name="metadata">The metadata.</param>
      <param name="original">The original document that was loaded from the server</param>
      <returns>
            Whatever the entity instance was modified and requires us re-serialize it.
            Returning true would force re-serialization of the entity, returning false would 
            mean that any changes to the entityInstance would be ignored in the current SaveChanges call.
            </returns>
    </member>
    <member name="M:Raven.Client.Listeners.IDocumentStoreListener.AfterStore(System.String,System.Object,Raven.Json.Linq.RavenJObject)">
      <summary>
            Invoked after the store request is sent to the server.
            </summary>
      <param name="key">The key.</param>
      <param name="entityInstance">The entity instance.</param>
      <param name="metadata">The metadata.</param>
    </member>
    <member name="T:Raven.Client.Indexes.AbstractIndexCreationTask`2">
      <summary>
            Base class for creating indexes
            </summary>
    </member>
    <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask`2.CreateIndexDefinition">
      <summary>
            Creates the index definition.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Raven.Client.Indexes.AbstractIndexCreationTask`2.Map">
      <summary>
            The map definition
            </summary>
    </member>
    <member name="T:Raven.Client.Indexes.AbstractIndexCreationTask`1">
      <summary>
            Base class for creating indexes
            </summary>
    </member>
    <member name="T:Raven.Client.Indexes.ExpressionOperatorPrecedence">
      <summary>
            Precedence values for operations
            </summary>
    </member>
    <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Primary">
      <summary>
            x.y  f(x)  a[x]  x++  x--  new
            </summary>
    </member>
    <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Unary">
      <summary>
            +  -  !  ~  ++x  --x  (T)x
            </summary>
    </member>
    <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Multiplicative">
      <summary>
            *  /  %
            </summary>
    </member>
    <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Additive">
      <summary>
            +  -
            </summary>
    </member>
    <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Shift">
      <summary>
            &lt;&lt; &gt;&gt;
            </summary>
    </member>
    <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.RelationalAndTypeTesting">
      <summary>
            &lt;  &gt;  &lt;=  &gt;=  is  as
            </summary>
    </member>
    <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Equality">
      <summary>
            ==  !=
            </summary>
    </member>
    <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.LogicalAND">
      <summary>
            &amp;
            </summary>
    </member>
    <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.LogicalXOR">
      <summary>
            ^
            </summary>
    </member>
    <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.LogicalOR">
      <summary>
            |
            </summary>
    </member>
    <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.ConditionalAND">
      <summary>
            &amp;&amp; (AndAlso in VB)
            </summary>
    </member>
    <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.ConditionalOR">
      <summary>
            ||
            </summary>
    </member>
    <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.NullCoalescing">
      <summary>
            ??
            </summary>
    </member>
    <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Conditional">
      <summary>
            ?:
            </summary>
    </member>
    <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Assignment">
      <summary>
            =  *=  /=  %=  +=  -=  &lt;&lt;=  &gt;&gt;=  &amp;=  ^=  |=
            </summary>
    </member>
    <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.ParenthesisNotNeeded">
      <summary>
            pseudo operator for comparisons
            </summary>
    </member>
    <member name="T:Raven.Client.Indexes.ExpressionOperatorPrecedenceExtension">
      <summary>
            Methods on the enum
            </summary>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionOperatorPrecedenceExtension.NeedsParenthesisFor(Raven.Client.Indexes.ExpressionOperatorPrecedence,Raven.Client.Indexes.ExpressionOperatorPrecedence)">
      <summary>
            Needs parenthesis for the expression
            </summary>
    </member>
    <member name="T:Raven.Client.Indexes.ExpressionStringBuilder">
      <summary>
              Based off of System.Linq.Expressions.ExpressionStringBuilder
            </summary>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.ExpressionToString(Raven.Client.Document.DocumentConvention,System.Boolean,System.Type,System.String,System.Linq.Expressions.Expression)">
      <summary>
              Convert the expression to a string
            </summary>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.ToString">
      <summary>
              Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
              A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitBinary(System.Linq.Expressions.BinaryExpression)">
      <summary>
              Visits the children of the <see cref="T:System.Linq.Expressions.BinaryExpression" />.
            </summary>
      <param name="node">The expression to visit.</param>
      <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitBlock(System.Linq.Expressions.BlockExpression)">
      <summary>
              Visits the children of the <see cref="T:System.Linq.Expressions.BlockExpression" />.
            </summary>
      <param name="node">The expression to visit.</param>
      <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
      <summary>
              Visits the children of the <see cref="T:System.Linq.Expressions.CatchBlock" />.
            </summary>
      <param name="node">The expression to visit.</param>
      <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
      <summary>
              Visits the children of the <see cref="T:System.Linq.Expressions.ConditionalExpression" />.
            </summary>
      <param name="node">The expression to visit.</param>
      <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitConstant(System.Linq.Expressions.ConstantExpression)">
      <summary>
              Visits the <see cref="T:System.Linq.Expressions.ConstantExpression" />.
            </summary>
      <param name="node">The expression to visit.</param>
      <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
      <summary>
              Visits the <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.
            </summary>
      <param name="node">The expression to visit.</param>
      <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitDefault(System.Linq.Expressions.DefaultExpression)">
      <summary>
              Visits the <see cref="T:System.Linq.Expressions.DefaultExpression" />.
            </summary>
      <param name="node">The expression to visit.</param>
      <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary>
              Visits the children of the <see cref="T:System.Linq.Expressions.DynamicExpression" />.
            </summary>
      <param name="node">The expression to visit.</param>
      <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitElementInit(System.Linq.Expressions.ElementInit)">
      <summary>
              Visits the element init.
            </summary>
      <param name="initializer">The initializer.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitExtension(System.Linq.Expressions.Expression)">
      <summary>
              Visits the children of the extension expression.
            </summary>
      <param name="node">The expression to visit.</param>
      <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitGoto(System.Linq.Expressions.GotoExpression)">
      <summary>
              Visits the children of the <see cref="T:System.Linq.Expressions.GotoExpression" />.
            </summary>
      <param name="node">The expression to visit.</param>
      <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitIndex(System.Linq.Expressions.IndexExpression)">
      <summary>
              Visits the children of the <see cref="T:System.Linq.Expressions.IndexExpression" />.
            </summary>
      <param name="node">The expression to visit.</param>
      <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
      <summary>
              Visits the children of the <see cref="T:System.Linq.Expressions.InvocationExpression" />.
            </summary>
      <param name="node">The expression to visit.</param>
      <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitLabel(System.Linq.Expressions.LabelExpression)">
      <summary>
              Visits the children of the <see cref="T:System.Linq.Expressions.LabelExpression" />.
            </summary>
      <param name="node">The expression to visit.</param>
      <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
      <summary>
              Visits the lambda.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="node">The node.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitListInit(System.Linq.Expressions.ListInitExpression)">
      <summary>
              Visits the children of the <see cref="T:System.Linq.Expressions.ListInitExpression" />.
            </summary>
      <param name="node">The expression to visit.</param>
      <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitLoop(System.Linq.Expressions.LoopExpression)">
      <summary>
              Visits the children of the <see cref="T:System.Linq.Expressions.LoopExpression" />.
            </summary>
      <param name="node">The expression to visit.</param>
      <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMember(System.Linq.Expressions.MemberExpression)">
      <summary>
              Visits the children of the <see cref="T:System.Linq.Expressions.MemberExpression" />.
            </summary>
      <param name="node">The expression to visit.</param>
      <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
      <summary>
              Visits the member assignment.
            </summary>
      <param name="assignment">The assignment.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
      <summary>
              Visits the children of the <see cref="T:System.Linq.Expressions.MemberInitExpression" />.
            </summary>
      <param name="node">The expression to visit.</param>
      <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
      <summary>
              Visits the member list binding.
            </summary>
      <param name="binding">The binding.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
      <summary>
              Visits the member member binding.
            </summary>
      <param name="binding">The binding.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
      <summary>
              Visits the children of the <see cref="T:System.Linq.Expressions.MethodCallExpression" />.
            </summary>
      <param name="node">The expression to visit.</param>
      <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitNew(System.Linq.Expressions.NewExpression)">
      <summary>
              Visits the children of the <see cref="T:System.Linq.Expressions.NewExpression" />.
            </summary>
      <param name="node">The expression to visit.</param>
      <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
      <summary>
              Visits the children of the <see cref="T:System.Linq.Expressions.NewArrayExpression" />.
            </summary>
      <param name="node">The expression to visit.</param>
      <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
      <summary>
              Visits the <see cref="T:System.Linq.Expressions.ParameterExpression" />.
            </summary>
      <param name="node">The expression to visit.</param>
      <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
      <summary>
              Visits the children of the <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.
            </summary>
      <param name="node">The expression to visit.</param>
      <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
      <summary>
              Visits the children of the <see cref="T:System.Linq.Expressions.SwitchExpression" />.
            </summary>
      <param name="node">The expression to visit.</param>
      <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
      <summary>
              Visits the children of the <see cref="T:System.Linq.Expressions.SwitchCase" />.
            </summary>
      <param name="node">The expression to visit.</param>
      <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitTry(System.Linq.Expressions.TryExpression)">
      <summary>
              Visits the children of the <see cref="T:System.Linq.Expressions.TryExpression" />.
            </summary>
      <param name="node">The expression to visit.</param>
      <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
      <summary>
              Visits the children of the <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.
            </summary>
      <param name="node">The expression to visit.</param>
      <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
    </member>
    <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitUnary(System.Linq.Expressions.UnaryExpression)">
      <summary>
              Visits the children of the <see cref="T:System.Linq.Expressions.UnaryExpression" />.
            </summary>
      <param name="node">The expression to visit.</param>
      <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
    </member>
    <member name="T:Raven.Client.Indexes.IClientSideDatabase">
      <summary>
            DatabaseAccessor for loading documents in the translator
            </summary>
    </member>
    <member name="M:Raven.Client.Indexes.IClientSideDatabase.Load``1(System.String)">
      <summary>
            Loading a document during result transformers
            </summary>
    </member>
    <member name="M:Raven.Client.Indexes.IClientSideDatabase.Load``1(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Loading documents during result transformers
            </summary>
    </member>
    <member name="M:Raven.Client.Indexes.IClientSideDatabase.Include(System.String)">
      <summary>
            Will ask RavenDB to include this document in the query results
            </summary>
    </member>
    <member name="M:Raven.Client.Indexes.IClientSideDatabase.Include(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Will ask RavenDB to include these documents in the query results
            </summary>
    </member>
    <member name="T:Raven.Client.Indexes.IndexCreation">
      <summary>
            Helper class for creating indexes from implementations of <see cref="T:Raven.Client.Indexes.AbstractIndexCreationTask" />.
            </summary>
    </member>
    <member name="M:Raven.Client.Indexes.IndexCreation.CreateIndexes(System.Reflection.Assembly,Raven.Client.IDocumentStore)">
      <summary>
            Creates the indexes found in the specified assembly.
            </summary>
      <param name="assemblyToScanForIndexingTasks">The assembly to scan for indexing tasks.</param>
      <param name="documentStore">The document store.</param>
    </member>
    <member name="M:Raven.Client.Indexes.IndexCreation.CreateIndexes(System.ComponentModel.Composition.Hosting.ExportProvider,Raven.Client.Connection.IDatabaseCommands,Raven.Client.Document.DocumentConvention)">
      <summary>
            Creates the indexes found in the specified catalog
            </summary>
      <param name="catalogToGetnIndexingTasksFrom">The catalog to get indexing tasks from.</param>
    </member>
    <member name="M:Raven.Client.Indexes.IndexCreation.CreateIndexes(System.ComponentModel.Composition.Hosting.ExportProvider,Raven.Client.IDocumentStore)">
      <summary>
            Creates the indexes found in the specified catalog
            </summary>
      <param name="catalogToGetnIndexingTasksFrom">The catalog to get indexing tasks from.</param>
      <param name="documentStore">The document store.</param>
    </member>
    <member name="M:Raven.Client.Indexes.IndexCreation.CreateIndexesAsync(System.Reflection.Assembly,Raven.Client.IDocumentStore)">
      <summary>
            Creates the indexes found in the specified assembly.
            </summary>
      <param name="assemblyToScanForIndexingTasks">The assembly to scan for indexing tasks.</param>
      <param name="documentStore">The document store.</param>
    </member>
    <member name="M:Raven.Client.Indexes.IndexCreation.CreateIndexesAsync(System.ComponentModel.Composition.Hosting.ExportProvider,Raven.Client.IDocumentStore)">
      <summary>
            Creates the indexes found in the specified catalog
            </summary>
      <param name="catalogToGetnIndexingTasksFrom">The catalog to get indexing tasks from.</param>
      <param name="documentStore">The document store.</param>
    </member>
    <member name="M:Raven.Client.Indexes.IndexCreation.CreateIndexesAsync(System.ComponentModel.Composition.Hosting.ExportProvider,Raven.Client.Connection.Async.IAsyncDatabaseCommands,Raven.Client.Document.DocumentConvention)">
      <summary>
            Creates the indexes found in the specified catalog
            </summary>
    </member>
    <member name="T:Raven.Client.Indexes.IndexDefinitionBuilder`2">
      <summary>
            This class provides a way to define a strongly typed index on the client.
            </summary>
    </member>
    <member name="M:Raven.Client.Indexes.IndexDefinitionBuilder`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Indexes.IndexDefinitionBuilder`2" /> class.
            </summary>
    </member>
    <member name="M:Raven.Client.Indexes.IndexDefinitionBuilder`2.ToIndexDefinition(Raven.Client.Document.DocumentConvention,System.Boolean)">
      <summary>
            Toes the index definition.
            </summary>
    </member>
    <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.Map">
      <summary>
            Gets or sets the map function
            </summary>
      <value>The map.</value>
    </member>
    <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.Reduce">
      <summary>
            Gets or sets the reduce function
            </summary>
      <value>The reduce.</value>
    </member>
    <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.TransformResults">
      <summary>
            Gets or sets the reduce function
            </summary>
      <value>The reduce.</value>
    </member>
    <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.Stores">
      <summary>
            Gets or sets the stores options
            </summary>
      <value>The stores.</value>
    </member>
    <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.StoresStrings">
      <summary>
            Gets or sets the stores options
            </summary>
      <value>The stores.</value>
    </member>
    <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.Indexes">
      <summary>
            Gets or sets the indexing options
            </summary>
      <value>The indexes.</value>
    </member>
    <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.IndexesStrings">
      <summary>
            Gets or sets the indexing options
            </summary>
      <value>The indexes.</value>
    </member>
    <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.SortOptions">
      <summary>
            Gets or sets the sort options.
            </summary>
      <value>The sort options.</value>
    </member>
    <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.Analyzers">
      <summary>
            Get os set the analyzers
            </summary>
    </member>
    <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.AnalyzersStrings">
      <summary>
            Get os set the analyzers
            </summary>
    </member>
    <member name="T:Raven.Client.Indexes.IndexDefinitionBuilder`1">
      <summary>
            This class provides a way to define a strongly typed index on the client.
            </summary>
    </member>
    <member name="T:Raven.Client.Indexes.IndexDefinitionHelper">
      <summary>
            Generate index defintion from linq expressions
            </summary>
    </member>
    <member name="M:Raven.Client.Indexes.IndexDefinitionHelper.PruneToFailureLinqQueryAsStringToWorkableCode``2(System.Linq.Expressions.LambdaExpression,Raven.Client.Document.DocumentConvention,System.String,System.Boolean)">
      <summary>
            Perform the actual generation
            </summary>
    </member>
    <member name="T:Raven.Client.Indexes.RavenDocumentsByEntityName">
      <summary>
             Create an index that allows to tag entities by their entity name
            </summary>
    </member>
    <member name="M:Raven.Client.Indexes.RavenDocumentsByEntityName.CreateIndexDefinition">
      <summary>
            Creates the Raven/DocumentsByEntityName index
            </summary>
    </member>
    <member name="P:Raven.Client.Indexes.RavenDocumentsByEntityName.IndexName">
      <summary>
            Return the actual index name
            </summary>
    </member>
    <member name="T:Raven.Client.Indexes.SpatialIndex">
      <summary>
            Accessor for generating spatial queries on the client side
            </summary>
    </member>
    <member name="M:Raven.Client.Indexes.SpatialIndex.Generate(System.Double,System.Double)">
      <summary>
            Marker method for allowing generating spatial indexes on the client
            </summary>
    </member>
    <member name="T:Raven.Client.Linq.ExpressionInfo">
      <summary>
            This class represents a node in an expression, usually a member - but in the case of dynamic queries the path to a member
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.ExpressionInfo.#ctor(System.String,System.Type,System.Boolean)">
      <summary>
            Creates an ExpressionMemberInfo
            </summary>
    </member>
    <member name="P:Raven.Client.Linq.ExpressionInfo.Path">
      <summary>
            Gets the full path of the member being referred to by this node
            </summary>
    </member>
    <member name="P:Raven.Client.Linq.ExpressionInfo.Type">
      <summary>
            Gets the actual type being referred to
            </summary>
    </member>
    <member name="P:Raven.Client.Linq.ExpressionInfo.IsNestedPath">
      <summary>
            Whatever the expression is of a nested path
            </summary>
    </member>
    <member name="T:Raven.Client.Linq.IRavenQueryable`1">
      <summary>
            An implementation of <see cref="T:System.Linq.IOrderedQueryable`1" /> with Raven specific operation
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.IRavenQueryable`1.Statistics(Raven.Client.Linq.RavenQueryStatistics@)">
      <summary>
            Provide statistics about the query, such as total count of matching records
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.IRavenQueryable`1.Customize(System.Action{Raven.Client.IDocumentQueryCustomization})">
      <summary>
            Customizes the query using the specified action
            </summary>
      <param name="action">The action.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Raven.Client.Linq.IRavenQueryProvider">
      <summary>
            Extension for the built-in <see cref="T:System.Linq.IQueryProvider" /> allowing for Raven specific operations
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.IRavenQueryProvider.AfterQueryExecuted(System.Action{Raven.Abstractions.Data.QueryResult})">
      <summary>
            Callback to get the results of the query
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.IRavenQueryProvider.Customize(System.Action{Raven.Client.IDocumentQueryCustomization})">
      <summary>
            Customizes the query using the specified action
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.IRavenQueryProvider.For``1">
      <summary>
            Change the result type for the query provider
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.IRavenQueryProvider.ToAsyncLuceneQuery``1(System.Linq.Expressions.Expression)">
      <summary>
            Convert the Linq query to a Lucene query
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Linq.IRavenQueryProvider.Lazily``1(System.Linq.Expressions.Expression,System.Action{System.Collections.Generic.IEnumerable{``0}})">
      <summary>
            Convert the Linq query to a lazy Lucene query and provide a function to execute when it is being evaluate
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.IRavenQueryProvider.MoveAfterQueryExecuted``1(Raven.Client.IAsyncDocumentQuery{``0})">
      <summary>
            Move the registered after query actions
            </summary>
    </member>
    <member name="P:Raven.Client.Linq.IRavenQueryProvider.IndexName">
      <summary>
            Gets the name of the index.
            </summary>
      <value>The name of the index.</value>
    </member>
    <member name="P:Raven.Client.Linq.IRavenQueryProvider.QueryGenerator">
      <summary>
            Get the query generator
            </summary>
    </member>
    <member name="P:Raven.Client.Linq.IRavenQueryProvider.CustomizeQuery">
      <summary>
            The action to execute on the customize query
            </summary>
    </member>
    <member name="P:Raven.Client.Linq.IRavenQueryProvider.FieldsToFetch">
      <summary>
            Set the fields to fetch
            </summary>
    </member>
    <member name="T:Raven.Client.Linq.LinqExtensions">
      <summary>
             Extensions to the linq syntax
            </summary>
      <summary>
             Extensions to the linq syntax
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.LinqExtensions.ToFacets``1(System.Linq.IQueryable{``0},System.String)">
      <summary>
            Query the facets results for this query using the specified facet document
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.LinqExtensions.ToFacetsAsync``1(System.Linq.IQueryable{``0},System.String)">
      <summary>
            Query the facets results for this query using the specified facet document
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.LinqExtensions.As``1(System.Linq.IQueryable)">
      <summary>
            Project using a different type
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.LinqExtensions.Intersect``1(System.Linq.IQueryable{``0})">
      <summary>
            Partition the query so we can intersect different parts of the query
            across different index entries.
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.LinqExtensions.AsProjection``1(System.Linq.IQueryable)">
      <summary>
            Project using a different type
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.LinqExtensions.Suggest(System.Linq.IQueryable)">
      <summary>
            Suggest alternative values for the queried term
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.LinqExtensions.Suggest(System.Linq.IQueryable,Raven.Abstractions.Data.SuggestionQuery)">
      <summary>
            Suggest alternative values for the queried term
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.LinqExtensions.SuggestLazy(System.Linq.IQueryable)">
      <summary>
            Lazy Suggest alternative values for the queried term
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.LinqExtensions.SuggestLazy(System.Linq.IQueryable,Raven.Abstractions.Data.SuggestionQuery)">
      <summary>
            Lazy Suggest alternative values for the queried term
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.LinqExtensions.SuggestAsync(System.Linq.IQueryable,Raven.Abstractions.Data.SuggestionQuery)">
      <summary>
            Suggest alternative values for the queried term
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.LinqExtensions.SuggestAsync(System.Linq.IQueryable)">
      <summary>
            Suggest alternative values for the queried term
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.LinqExtensions.Search``1(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Decimal,Raven.Client.Linq.SearchOptions,Raven.Client.Linq.EscapeQueryOptions)">
      <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.LinqExtensions.Lazily``1(System.Linq.IQueryable{``0})">
      <summary>
            Register the query as a lazy query in the session and return a lazy
            instance that will evaluate the query only when needed
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.LinqExtensions.Lazily``1(System.Linq.IQueryable{``0},System.Action{System.Collections.Generic.IEnumerable{``0}})">
      <summary>
            Register the query as a lazy query in the session and return a lazy
            instance that will evaluate the query only when needed
            As well as a function to execute when the value is evaluated
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.LinqExtensions.ToListAsync``1(System.Linq.IQueryable{``0})">
      <summary>
            Returns a list of results for a query asynchronously. 
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.LinqExtensions.CountAsync``1(System.Linq.IQueryable{``0})">
      <summary>
            Returns the total count of results for a query asynchronously. 
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.LinqExtensions.Include``1(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
      <typeparam name="TResult">The type of the object that holds the id that you want to include.</typeparam>
      <param name="source">The source for querying</param>
      <param name="path">The path, which is name of the property that holds the id of the object to include.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Linq.LinqExtensions.Include``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
      <typeparam name="TResult">The type of the object that holds the id that you want to include.</typeparam>
      <typeparam name="TInclude">The type of the object that you want to include.</typeparam>
      <param name="source">The source for querying</param>
      <param name="path">The path, which is name of the property that holds the id of the object to include.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Linq.LinqExtensions.Where``1(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>
            Filters a sequence of values based on a predicate.
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.LinqExtensions.Where``1(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>
            Filters a sequence of values based on a predicate.
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.LinqExtensions.OrderBy``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.LinqExtensions.OrderBy``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.LinqExtensions.OrderByDescending``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.LinqExtensions.OrderByDescending``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.LinqExtensions.Select``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>
            Projects each element of a sequence into a new form.
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.LinqExtensions.Select``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
      <summary>
            Projects each element of a sequence into a new form.
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.LinqExtensions.In``1(``0,System.Collections.Generic.IEnumerable{``0})">
      <summary>
             implementation of In operator
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.LinqExtensions.In``1(``0,``0[])">
      <summary>
             implementation of In operator
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.LinqExtensions.Skip``1(Raven.Client.Linq.IRavenQueryable{``0},System.Int32)">
      <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
            Summary:
        </member>
    <member name="T:Raven.Client.Linq.RavenQueryInspector`1">
      <summary>
            Implements <see cref="T:Raven.Client.Linq.IRavenQueryable`1" /></summary>
    </member>
    <member name="M:Raven.Client.Linq.RavenQueryInspector`1.#ctor(Raven.Client.Linq.IRavenQueryProvider,Raven.Client.Linq.RavenQueryStatistics,System.String,System.Linq.Expressions.Expression,Raven.Client.Document.InMemoryDocumentSessionOperations,Raven.Client.Connection.IDatabaseCommands,Raven.Client.Connection.Async.IAsyncDatabaseCommands)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Linq.RavenQueryInspector`1" /> class.
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.RavenQueryInspector`1.GetEnumerator">
      <summary>
            Gets the enumerator.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Linq.RavenQueryInspector`1.Statistics(Raven.Client.Linq.RavenQueryStatistics@)">
      <summary>
            Provide statistics about the query, such as total count of matching records
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.RavenQueryInspector`1.Customize(System.Action{Raven.Client.IDocumentQueryCustomization})">
      <summary>
            Customizes the query using the specified action
            </summary>
      <param name="action">The action.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Linq.RavenQueryInspector`1.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Raven.Client.Linq.RavenQueryInspector`1.GetLastEqualityTerm">
      <summary>
             Get the last equality term for the query
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.RavenQueryInspector`1.FieldsToFetch(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Set the fields to fetch
            </summary>
    </member>
    <member name="P:Raven.Client.Linq.RavenQueryInspector`1.IndexQueried">
      <summary>
            Get the name of the index being queried
            </summary>
    </member>
    <member name="P:Raven.Client.Linq.RavenQueryInspector`1.DatabaseCommands">
      <summary>
            Grant access to the database commands
            </summary>
    </member>
    <member name="P:Raven.Client.Linq.RavenQueryInspector`1.AsyncDatabaseCommands">
      <summary>
            Grant access to the async database commands
            </summary>
    </member>
    <member name="T:Raven.Client.Linq.RavenQueryProvider`1">
      <summary>
            An implementation of <see cref="T:Raven.Client.Linq.IRavenQueryProvider" /></summary>
    </member>
    <member name="M:Raven.Client.Linq.RavenQueryProvider`1.#ctor(Raven.Client.Linq.IDocumentQueryGenerator,System.String,Raven.Client.Linq.RavenQueryStatistics,Raven.Client.Connection.IDatabaseCommands,Raven.Client.Connection.Async.IAsyncDatabaseCommands)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Linq.RavenQueryProvider`1" /> class.
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.RavenQueryProvider`1.For``1">
      <summary>
            Change the result type for the query provider
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.RavenQueryProvider`1.Execute(System.Linq.Expressions.Expression)">
      <summary>
            Executes the query represented by a specified expression tree.
            </summary>
      <param name="expression">An expression tree that represents a LINQ query.</param>
      <returns>
            The value that results from executing the specified query.
            </returns>
    </member>
    <member name="M:Raven.Client.Linq.RavenQueryProvider`1.AfterQueryExecuted(System.Action{Raven.Abstractions.Data.QueryResult})">
      <summary>
            Callback to get the results of the query
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.RavenQueryProvider`1.Customize(System.Action{Raven.Client.IDocumentQueryCustomization})">
      <summary>
            Customizes the query using the specified action
            </summary>
      <param name="action">The action.</param>
    </member>
    <member name="M:Raven.Client.Linq.RavenQueryProvider`1.MoveAfterQueryExecuted``1(Raven.Client.IAsyncDocumentQuery{``0})">
      <summary>
            Move the registered after query actions
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.RavenQueryProvider`1.ToAsyncLuceneQuery``1(System.Linq.Expressions.Expression)">
      <summary>
            Convert the expression to a Lucene query
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.RavenQueryProvider`1.Lazily``1(System.Linq.Expressions.Expression,System.Action{System.Collections.Generic.IEnumerable{``0}})">
      <summary>
            Register the query as a lazy query in the session and return a lazy
            instance that will evaluate the query only when needed
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.RavenQueryProvider`1.ToLuceneQuery``1(System.Linq.Expressions.Expression)">
      <summary>
            Convert the expression to a Lucene query
            </summary>
    </member>
    <member name="P:Raven.Client.Linq.RavenQueryProvider`1.CustomizedQuery">
      <summary>
            Gets the actions for customizing the generated lucene query
            </summary>
    </member>
    <member name="P:Raven.Client.Linq.RavenQueryProvider`1.IndexName">
      <summary>
            Gets the name of the index.
            </summary>
      <value>The name of the index.</value>
    </member>
    <member name="P:Raven.Client.Linq.RavenQueryProvider`1.QueryGenerator">
      <summary>
            Get the query generator
            </summary>
    </member>
    <member name="P:Raven.Client.Linq.RavenQueryProvider`1.FieldsToFetch">
      <summary>
            Set the fields to fetch
            </summary>
    </member>
    <member name="P:Raven.Client.Linq.RavenQueryProvider`1.FieldsToRename">
      <summary>
            Set the fields to rename
            </summary>
    </member>
    <member name="T:Raven.Client.Linq.RavenQueryProviderProcessor`1">
      <summary>
            Process a Linq expression to a Lucene query
            </summary>
    </member>
    <member name="T:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType">
      <summary>
            Different query types 
            </summary>
    </member>
    <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.queryGenerator">
      <summary>
            The query generator
            </summary>
    </member>
    <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.indexName">
      <summary>
            The index name
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.#ctor(Raven.Client.Linq.IDocumentQueryGenerator,System.Action{Raven.Client.IDocumentQueryCustomization},System.Action{Raven.Abstractions.Data.QueryResult},System.String,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Linq.RavenQueryProviderProcessor`1" /> class.
            </summary>
      <param name="queryGenerator">The document query generator.</param>
      <param name="customizeQuery">The customize query.</param>
      <param name="afterQueryExecuted">Executed after the query run, allow access to the query results</param>
      <param name="indexName">The name of the index the query is executed against.</param>
      <param name="fieldsToFetch">The fields to fetch in this query</param>
      <param name="fieldsTRename">The fields to rename for the results of this query</param>
    </member>
    <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.VisitExpression(System.Linq.Expressions.Expression)">
      <summary>
            Visits the expression and generate the lucene query
            </summary>
      <param name="expression">The expression.</param>
    </member>
    <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.GetMember(System.Linq.Expressions.Expression)">
      <summary>
            Gets member info for the specified expression and the path to that expression
            </summary>
      <param name="expression">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.GetPath(System.Linq.Expressions.Expression,System.String@,System.Type@,System.Boolean@)">
      <summary>
            Get the path from the expression, including considering dictionary calls
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.GetMemberExpression(System.Linq.Expressions.Expression)">
      <summary>
            Get the member expression from the expression
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.GetValueFromExpression(System.Linq.Expressions.Expression,System.Type)">
      <summary>
            Get the actual value from the expression
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.GetLuceneQueryFor(System.Linq.Expressions.Expression)">
      <summary>
            Gets the lucene query.
            </summary>
      <value>The lucene query.</value>
    </member>
    <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.GetAsyncLuceneQueryFor(System.Linq.Expressions.Expression)">
      <summary>
            Gets the lucene query.
            </summary>
      <value>The lucene query.</value>
    </member>
    <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.Execute(System.Linq.Expressions.Expression)">
      <summary>
            Executes the specified expression.
            </summary>
      <param name="expression">The expression.</param>
      <returns>
      </returns>
    </member>
    <member name="P:Raven.Client.Linq.RavenQueryProviderProcessor`1.CurrentPath">
      <summary>
            Gets the current path in the case of expressions within collections
            </summary>
    </member>
    <member name="P:Raven.Client.Linq.RavenQueryProviderProcessor`1.FieldsToFetch">
      <summary>
            Gets or sets the fields to fetch.
            </summary>
      <value>The fields to fetch.</value>
    </member>
    <member name="P:Raven.Client.Linq.RavenQueryProviderProcessor`1.FieldsToRename">
      <summary>
            Rename the fields from one name to another
            </summary>
    </member>
    <member name="T:Raven.Client.Linq.RavenQueryStatistics">
      <summary>
            Statistics about a raven query.
            Such as how many records match the query
            </summary>
    </member>
    <member name="M:Raven.Client.Linq.RavenQueryStatistics.UpdateQueryStats(Raven.Abstractions.Data.QueryResult)">
      <summary>
            Update the query stats from the query results
            </summary>
    </member>
    <member name="P:Raven.Client.Linq.RavenQueryStatistics.IsStale">
      <summary>
            Whatever the query returned potentially stale results
            </summary>
    </member>
    <member name="P:Raven.Client.Linq.RavenQueryStatistics.TotalResults">
      <summary>
            What was the total count of the results that matched the query
            </summary>
    </member>
    <member name="P:Raven.Client.Linq.RavenQueryStatistics.SkippedResults">
      <summary>
            Gets or sets the skipped results (duplicate documents);
            </summary>
    </member>
    <member name="P:Raven.Client.Linq.RavenQueryStatistics.Timestamp">
      <summary>
            The time when the query results were unstale.
            </summary>
    </member>
    <member name="P:Raven.Client.Linq.RavenQueryStatistics.IndexName">
      <summary>
            The name of the index queried
            </summary>
    </member>
    <member name="P:Raven.Client.Linq.RavenQueryStatistics.IndexTimestamp">
      <summary>
            The timestamp of the queried index
            </summary>
    </member>
    <member name="P:Raven.Client.Linq.RavenQueryStatistics.IndexEtag">
      <summary>
            The etag of the queried index
            </summary>
    </member>
    <member name="P:Raven.Client.Linq.RavenQueryStatistics.NonAuthoritativeInformation">
      <summary>
            Gets or sets a value indicating whether any of the documents returned by this query
            are non authoritative (modified by uncommitted transaction).
            </summary>
    </member>
    <member name="T:Raven.Client.Shard.IShardResolutionStrategy">
      <summary>
            Implementers of this interface provide a way to decide which shards will be queried
            for a specified operation
            </summary>
    </member>
    <member name="M:Raven.Client.Shard.IShardResolutionStrategy.GenerateShardIdFor(System.Object)">
      <summary>
             Generate a shard id for the specified entity
             </summary>
    </member>
    <member name="M:Raven.Client.Shard.IShardResolutionStrategy.MetadataShardIdFor(System.Object)">
      <summary>
             The shard id for the server that contains the metadata (such as the HiLo documents)
             for the given entity
             </summary>
    </member>
    <member name="M:Raven.Client.Shard.IShardResolutionStrategy.PotentialShardsFor(Raven.Client.Shard.ShardRequestData)">
      <summary>
             Selects the shard ids appropriate for the specified data.
             </summary>
      <returns>Return a list of shards ids that will be search. Returning null means search all shards.</returns>
    </member>
    <member name="T:Raven.Client.Shard.ShardedDocumentSession">
      <summary>
            Implements Unit of Work for accessing a set of sharded RavenDB servers
            </summary>
    </member>
    <member name="M:Raven.Client.Shard.ShardedDocumentSession.#ctor(Raven.Client.Shard.ShardedDocumentStore,Raven.Client.Document.DocumentSessionListeners,System.Guid,Raven.Client.Shard.ShardStrategy,System.Collections.Generic.IDictionary{System.String,Raven.Client.Connection.IDatabaseCommands})">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Shard.ShardedDocumentSession" /> class.
            </summary>
      <param name="shardStrategy">The shard strategy.</param>
      <param name="shardDbCommands">The shard IDatabaseCommands.</param>
      <param name="id">
      </param>
      <param name="documentStore">
      </param>
      <param name="listeners">
      </param>
    </member>
    <member name="M:Raven.Client.Shard.ShardedDocumentSession.PromoteTransaction(System.Guid)">
      <summary>
            Promotes a transaction specified to a distributed transaction
            </summary>
      <param name="fromTxId">From tx id.</param>
      <returns>The token representing the distributed transaction</returns>
    </member>
    <member name="M:Raven.Client.Shard.ShardedDocumentSession.Load``1(System.Collections.Generic.IEnumerable{System.String},System.Action{``0[]})">
      <summary>
            Loads the specified ids and a function to call when it is evaluated
            </summary>
    </member>
    <member name="M:Raven.Client.Shard.ShardedDocumentSession.Load``1(System.String,System.Action{``0})">
      <summary>
            Loads the specified id and a function to call when it is evaluated
            </summary>
    </member>
    <member name="M:Raven.Client.Shard.ShardedDocumentSession.Load``1(System.ValueType,System.Action{``0})">
      <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
      <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
    </member>
    <member name="M:Raven.Client.Shard.ShardedDocumentSession.LazyLoadInternal``1(System.String[],System.String[],System.Action{``0[]})">
      <summary>
            Register to lazily load documents and include
            </summary>
    </member>
    <member name="M:Raven.Client.Shard.ShardedDocumentSession.Query``1(System.String)">
      <summary>
            Queries the specified index using Linq.
            </summary>
      <typeparam name="T">The result of the query</typeparam>
      <param name="indexName">Name of the index.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Shard.ShardedDocumentSession.Query``1">
      <summary>
            Query RavenDB dynamically using LINQ
            </summary>
      <typeparam name="T">The result of the query</typeparam>
    </member>
    <member name="M:Raven.Client.Shard.ShardedDocumentSession.Query``2">
      <summary>
            Queries the index specified by <typeparamref name="TIndexCreator" /> using Linq.
            </summary>
      <typeparam name="T">The result of the query</typeparam>
      <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Shard.ShardedDocumentSession.SaveChanges">
      <summary>
            Saves all the changes to the Raven server.
            </summary>
    </member>
    <member name="P:Raven.Client.Shard.ShardedDocumentSession.AsyncDatabaseCommands">
      <summary>
            Gets the async database commands.
            </summary>
      <value>The async database commands.</value>
    </member>
    <member name="P:Raven.Client.Shard.ShardedDocumentSession.Lazily">
      <summary>
            Access the lazy operations
            </summary>
    </member>
    <member name="P:Raven.Client.Shard.ShardedDocumentSession.Eagerly">
      <summary>
            Access the eager operations
            </summary>
    </member>
    <member name="T:Raven.Client.Shard.ShardedDocumentStore">
      <summary>
            Implements a sharded document store
            Hiding most sharding details behind this and the <see cref="T:Raven.Client.Shard.ShardedDocumentSession" /> gives you the ability to use
            sharding without really thinking about this too much
            </summary>
    </member>
    <member name="M:Raven.Client.Shard.ShardedDocumentStore.#ctor(Raven.Client.Shard.ShardStrategy)">
      <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Shard.ShardedDocumentStore" /> class.
            </summary>
      <param name="shardStrategy">The shard strategy.</param>
    </member>
    <member name="M:Raven.Client.Shard.ShardedDocumentStore.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="M:Raven.Client.Shard.ShardedDocumentStore.OpenAsyncSession">
      <summary>
            Opens the async session.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Shard.ShardedDocumentStore.OpenAsyncSession(System.String)">
      <summary>
            Opens the async session.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Shard.ShardedDocumentStore.AggressivelyCacheFor(System.TimeSpan)">
      <summary>
            Setup the context for aggressive caching.
            </summary>
      <param name="cacheDuration">Specify the aggressive cache duration</param>
      <remarks>
            aggressive caching means that we will not check the server to see whatever the response
            we provide is current or not, but will serve the information directly from the local cache
            without touching the server.
            </remarks>
    </member>
    <member name="M:Raven.Client.Shard.ShardedDocumentStore.DisableAggressiveCaching">
      <summary>
            Setup the context for no aggressive caching
            </summary>
      <remarks>
            This is mainly useful for internal use inside RavenDB, when we are executing
            queries that has been marked with WaitForNonStaleResults, we temporarily disable
            aggressive caching.
            </remarks>
    </member>
    <member name="M:Raven.Client.Shard.ShardedDocumentStore.OpenSession">
      <summary>
            Opens the session.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Shard.ShardedDocumentStore.OpenSession(System.String)">
      <summary>
            Opens the session for a particular database
            </summary>
    </member>
    <member name="M:Raven.Client.Shard.ShardedDocumentStore.OpenSession(Raven.Client.Document.OpenSessionOptions)">
      <summary>
            Opens the session with the specified options.
            </summary>
    </member>
    <member name="M:Raven.Client.Shard.ShardedDocumentStore.GetLastWrittenEtag">
      <summary>
             Gets the etag of the last document written by any session belonging to this 
             document store
            </summary>
    </member>
    <member name="M:Raven.Client.Shard.ShardedDocumentStore.Initialize">
      <summary>
            Initializes this instance.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Shard.ShardedDocumentStore.ExecuteIndex(Raven.Client.Indexes.AbstractIndexCreationTask)">
      <summary>
            Executes the index creation against each of the shards.
            </summary>
    </member>
    <member name="P:Raven.Client.Shard.ShardedDocumentStore.SharedOperationsHeaders">
      <summary>
            Gets the shared operations headers.
            </summary>
      <value>The shared operations headers.</value>
      <exception cref="T:System.NotSupportedException">
      </exception>
    </member>
    <member name="P:Raven.Client.Shard.ShardedDocumentStore.JsonRequestFactory">
      <summary>
            Get the <see cref="T:Raven.Client.Connection.HttpJsonRequestFactory" /> for this store
            </summary>
    </member>
    <member name="P:Raven.Client.Shard.ShardedDocumentStore.Identifier">
      <summary>
            Gets or sets the identifier for this store.
            </summary>
      <value>The identifier.</value>
    </member>
    <member name="P:Raven.Client.Shard.ShardedDocumentStore.AsyncDatabaseCommands">
      <summary>
            Gets the async database commands.
            </summary>
      <value>The async database commands.</value>
    </member>
    <member name="P:Raven.Client.Shard.ShardedDocumentStore.DatabaseCommands">
      <summary>
            Gets the database commands.
            </summary>
      <value>The database commands.</value>
    </member>
    <member name="P:Raven.Client.Shard.ShardedDocumentStore.Url">
      <summary>
            Gets or sets the URL.
            </summary>
    </member>
    <member name="E:Raven.Client.Shard.ShardedDocumentStore.AfterDispose">
      <summary>
            Called after dispose is completed
            </summary>
    </member>
    <member name="T:Raven.Client.Shard.IShardAccessStrategy">
      <summary>
            Apply an operation to all the shard session
            </summary>
    </member>
    <member name="M:Raven.Client.Shard.IShardAccessStrategy.Apply``1(System.Collections.Generic.IList{Raven.Client.Connection.IDatabaseCommands},Raven.Client.Shard.ShardRequestData,System.Func{Raven.Client.Connection.IDatabaseCommands,System.Int32,``0})">
      <summary>
            Applies the specified action to all shard sessions.
            </summary>
    </member>
    <member name="E:Raven.Client.Shard.IShardAccessStrategy.OnError">
      <summary>
            Occurs on error, allows to handle an error one (or more) of the nodes
            is failing
            </summary>
    </member>
    <member name="T:Raven.Client.Shard.ParallelShardAccessStrategy">
      <summary>
            Apply an operation to all the shard session in parallel
            </summary>
    </member>
    <member name="M:Raven.Client.Shard.ParallelShardAccessStrategy.Apply``1(System.Collections.Generic.IList{Raven.Client.Connection.IDatabaseCommands},Raven.Client.Shard.ShardRequestData,System.Func{Raven.Client.Connection.IDatabaseCommands,System.Int32,``0})">
      <summary>
            Applies the specified action to all shard sessions in parallel
            </summary>
    </member>
    <member name="T:Raven.Client.Shard.SequentialShardAccessStrategy">
      <summary>
            Apply an operation to all the shard session in sequence
            </summary>
    </member>
    <member name="M:Raven.Client.Shard.SequentialShardAccessStrategy.Apply``1(System.Collections.Generic.IList{Raven.Client.Connection.IDatabaseCommands},Raven.Client.Shard.ShardRequestData,System.Func{Raven.Client.Connection.IDatabaseCommands,System.Int32,``0})">
      <summary>
            Applies the specified action for all shard sessions.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="commands">The shard sessions.</param>
      <param name="operation">The operation.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Raven.Client.Shard.DefaultShardResolutionStrategy.GenerateShardIdFor(System.Object)">
      <summary>
             Generate a shard id for the specified entity
             </summary>
    </member>
    <member name="M:Raven.Client.Shard.DefaultShardResolutionStrategy.MetadataShardIdFor(System.Object)">
      <summary>
             The shard id for the server that contains the metadata (such as the HiLo documents)
             for the given entity
             </summary>
    </member>
    <member name="M:Raven.Client.Shard.DefaultShardResolutionStrategy.PotentialShardsFor(Raven.Client.Shard.ShardRequestData)">
      <summary>
             Selects the shard ids appropriate for the specified data.
             </summary>
      <returns>Return a list of shards ids that will be search. Returning null means search all shards.</returns>
    </member>
    <member name="T:Raven.Client.Shard.ShardRequestData">
      <summary>
            Information required to resolve the appropriate shard for an entity / entity and key
            </summary>
    </member>
    <member name="P:Raven.Client.Shard.ShardRequestData.Keys">
      <summary>
            Gets or sets the key.
            </summary>
      <value>The key.</value>
    </member>
    <member name="P:Raven.Client.Shard.ShardRequestData.EntityType">
      <summary>
            Gets or sets the type of the entity.
            </summary>
      <value>The type of the entity.</value>
    </member>
    <member name="P:Raven.Client.Shard.ShardRequestData.Query">
      <summary>
            Gets or sets the query being executed
            </summary>
    </member>
    <member name="T:Raven.Client.Shard.ShardStrategy">
      <summary>
            Default shard strategy for the sharding document store
            </summary>
    </member>
    <member name="M:Raven.Client.Shard.ShardStrategy.DefaultMergeQueryResults(Raven.Abstractions.Data.IndexQuery,System.Collections.Generic.IList{Raven.Abstractions.Data.QueryResult})">
      <summary>
            Merge the query results from all the shards into a single query results object by simply
            concatenating all of the values
            </summary>
    </member>
    <member name="M:Raven.Client.Shard.ShardStrategy.ShardingOn``1">
      <summary>
            Instructs the sharding strategy to shard the <typeparamref name="TEntity" /> instances based on 
            round robin strategy.
            </summary>
    </member>
    <member name="M:Raven.Client.Shard.ShardStrategy.ShardingOn``1(System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Func{System.String,System.String})">
      <summary>
            Instructs the sharding strategy to shard the <typeparamref name="TEntity" /> instances based on 
            the property specified in <paramref name="shardingProperty" />, with an optional translation to
            the shard id.
            </summary>
    </member>
    <member name="M:Raven.Client.Shard.ShardStrategy.ShardingOn``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Func{``1,System.String},System.Func{System.String,System.String})">
      <summary>
            Instructs the sharding strategy to shard the <typeparamref name="TEntity" /> instances based on 
            the property specified in <paramref name="shardingProperty" />, with an optional translation of the value
            from a non string representation to a string and from a string to the shard id.
            </summary>
    </member>
    <member name="P:Raven.Client.Shard.ShardStrategy.MergeQueryResults">
      <summary>
            Merge the query results from all the shards into a single query results object
            </summary>
    </member>
    <member name="P:Raven.Client.Shard.ShardStrategy.ShardResolutionStrategy">
      <summary>
            Gets or sets the shard resolution strategy.
            </summary>
    </member>
    <member name="P:Raven.Client.Shard.ShardStrategy.ShardAccessStrategy">
      <summary>
            Gets or sets the shard access strategy.
            </summary>
    </member>
    <member name="P:Raven.Client.Shard.ShardStrategy.ModifyDocumentId">
      <summary>
            Get or sets the modification for the document id for sharding
            </summary>
    </member>
    <member name="T:Raven.Client.StoredEntityEventArgs">
      <summary>
            The event arguments raised when an entity is stored
            </summary>
    </member>
    <member name="P:Raven.Client.StoredEntityEventArgs.SessionIdentifier">
      <summary>
            Gets or sets the session identifier.
            </summary>
      <value>The session identifier.</value>
    </member>
    <member name="P:Raven.Client.StoredEntityEventArgs.EntityInstance">
      <summary>
            Gets or sets the entity instance.
            </summary>
      <value>The entity instance.</value>
    </member>
    <member name="T:Raven.Client.Util.Inflector">
      <summary>
            The Inflector class transforms words from one 
            form to another. For example, from singular to plural.
            </summary>
    </member>
    <member name="M:Raven.Client.Util.Inflector.Pluralize(System.String)">
      <summary>
            Return the plural of a word.
            </summary>
      <param name="word">The singular form</param>
      <returns>The plural form of <paramref name="word" /></returns>
    </member>
    <member name="M:Raven.Client.Util.Inflector.Singularize(System.String)">
      <summary>
            Return the singular of a word.
            </summary>
      <param name="word">The plural form</param>
      <returns>The singular form of <paramref name="word" /></returns>
    </member>
    <member name="M:Raven.Client.Util.Inflector.Capitalize(System.String)">
      <summary>
            Capitalizes a word.
            </summary>
      <param name="word">The word to be capitalized.</param>
      <returns>
        <paramref name="word" /> capitalized.</returns>
    </member>
    <member name="T:Raven.Client.Util.ObjectReferenceEqualityComparerer`1">
      <summary>
            A generic object comparerer that would only use object's reference, 
            ignoring any <see cref="T:System.IEquatable`1" /> or <see cref="M:System.Object.Equals(System.Object)" />  overrides.
            </summary>
    </member>
    <member name="F:Raven.Client.Util.ObjectReferenceEqualityComparerer`1.Default">
      <summary>
            The default ObjectReferenceEqualityComparerer instance
            </summary>
    </member>
    <member name="M:Raven.Client.Util.ObjectReferenceEqualityComparerer`1.Equals(`0,`0)">
      <summary>
            When overridden in a derived class, determines whether two objects of type <typeparamref name="T" /> are equal.
            </summary>
      <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
      <param name="x">The first object to compare.</param>
      <param name="y">The second object to compare.</param>
    </member>
    <member name="M:Raven.Client.Util.ObjectReferenceEqualityComparerer`1.GetHashCode(`0)">
      <summary>
            When overridden in a derived class, serves as a hash function for the specified object for hashing algorithms and data structures, such as a hash table.
            </summary>
      <returns>
            A hash code for the specified object.
            </returns>
      <param name="obj">The object for which to get a hash code.</param>
      <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.</exception>
    </member>
    <member name="T:Raven.Client.WhereParams">
      <summary>
            Parameters for the Where Equals call
            </summary>
    </member>
    <member name="M:Raven.Client.WhereParams.#ctor">
      <summary>
            Create a new instance 
            </summary>
    </member>
    <member name="P:Raven.Client.WhereParams.FieldName">
      <summary>
            The field name
            </summary>
    </member>
    <member name="P:Raven.Client.WhereParams.Value">
      <summary>
            The field value
            </summary>
    </member>
    <member name="P:Raven.Client.WhereParams.IsAnalyzed">
      <summary>
            Should the field be analyzed
            </summary>
    </member>
    <member name="P:Raven.Client.WhereParams.AllowWildcards">
      <summary>
            Should the field allow wildcards
            </summary>
    </member>
    <member name="P:Raven.Client.WhereParams.IsNestedPath">
      <summary>
            Is this a root property or not?
            </summary>
    </member>
    <member name="T:Rhino.Licensing.AbstractLicenseValidator">
      <summary>
            Base license validator.
            </summary>
    </member>
    <member name="F:Rhino.Licensing.AbstractLicenseValidator.Log">
      <summary>
            License validator logger
            </summary>
    </member>
    <member name="F:Rhino.Licensing.AbstractLicenseValidator.TimeServers">
      <summary>
            Standard Time servers
            </summary>
    </member>
    <member name="M:Rhino.Licensing.AbstractLicenseValidator.#ctor(System.String)">
      <summary>
            Creates a license validator with specfied public key.
            </summary>
      <param name="publicKey">public key</param>
    </member>
    <member name="M:Rhino.Licensing.AbstractLicenseValidator.#ctor(System.String,System.String,System.Guid)">
      <summary>
            Creates a license validator using the client information
            and a service endpoint address to validate the license.
            </summary>
      <param name="publicKey">
      </param>
      <param name="licenseServerUrl">
      </param>
      <param name="clientId">
      </param>
    </member>
    <member name="M:Rhino.Licensing.AbstractLicenseValidator.AssertValidLicense">
      <summary>
            Validates loaded license
            </summary>
    </member>
    <member name="M:Rhino.Licensing.AbstractLicenseValidator.TryOverwritingWithNewLicense(System.String)">
      <summary>
            Loads the license file.
            </summary>
      <param name="newLicense">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Rhino.Licensing.AbstractLicenseValidator.RemoveExistingLicense">
      <summary>
            Removes existing license from the machine.
            </summary>
    </member>
    <member name="M:Rhino.Licensing.AbstractLicenseValidator.TryLoadingLicenseValuesFromValidatedXml">
      <summary>
            Loads license data from validated license file.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Rhino.Licensing.AbstractLicenseValidator.DisableFutureChecks">
      <summary>
            Disables further license checks for the session.
            </summary>
    </member>
    <member name="P:Rhino.Licensing.AbstractLicenseValidator.ExpirationDate">
      <summary>
            Gets the expiration date of the license
            </summary>
    </member>
    <member name="P:Rhino.Licensing.AbstractLicenseValidator.SubscriptionEndpoint">
      <summary>
            Gets or Sets the endpoint address of the subscription service
            </summary>
    </member>
    <member name="P:Rhino.Licensing.AbstractLicenseValidator.LicenseType">
      <summary>
            Gets the Type of the license
            </summary>
    </member>
    <member name="P:Rhino.Licensing.AbstractLicenseValidator.UserId">
      <summary>
            Gets the Id of the license holder
            </summary>
    </member>
    <member name="P:Rhino.Licensing.AbstractLicenseValidator.Name">
      <summary>
            Gets the name of the license holder
            </summary>
    </member>
    <member name="P:Rhino.Licensing.AbstractLicenseValidator.DisableFloatingLicenses">
      <summary>
            Gets or Sets Floating license support
            </summary>
    </member>
    <member name="P:Rhino.Licensing.AbstractLicenseValidator.LicenseAttributes">
      <summary>
            Gets extra license information
            </summary>
    </member>
    <member name="P:Rhino.Licensing.AbstractLicenseValidator.License">
      <summary>
            Gets or Sets the license content
            </summary>
    </member>
    <member name="E:Rhino.Licensing.AbstractLicenseValidator.LicenseInvalidated">
      <summary>
            Fired when license data is invalidated
            </summary>
    </member>
    <member name="T:Rhino.Licensing.RhinoLicensingException">
      <summary>
            Base class for all licensing exceptions.
            </summary>
    </member>
    <member name="M:Rhino.Licensing.RhinoLicensingException.#ctor">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException" />.
            </summary>
    </member>
    <member name="M:Rhino.Licensing.RhinoLicensingException.#ctor(System.String)">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException" />.
            </summary>
      <param name="message">error message</param>
    </member>
    <member name="M:Rhino.Licensing.RhinoLicensingException.#ctor(System.String,System.Exception)">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException" />.
            </summary>
      <param name="message">error message</param>
      <param name="inner">inner exception</param>
    </member>
    <member name="M:Rhino.Licensing.RhinoLicensingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException" />.
            </summary>
      <param name="info">serialization information</param>
      <param name="context">streaming context</param>
    </member>
    <member name="T:Rhino.Licensing.LicenseExpiredException">
      <summary>
             Thrown when license is found but is past it's expiration date
            </summary>
    </member>
    <member name="M:Rhino.Licensing.LicenseExpiredException.#ctor">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException" />.
            </summary>
    </member>
    <member name="M:Rhino.Licensing.LicenseExpiredException.#ctor(System.String)">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException" />.
            </summary>
      <param name="message">error message</param>
    </member>
    <member name="M:Rhino.Licensing.LicenseExpiredException.#ctor(System.String,System.Exception)">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException" />.
            </summary>
      <param name="message">error message</param>
      <param name="inner">inner exception</param>
    </member>
    <member name="M:Rhino.Licensing.LicenseExpiredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException" />.
            </summary>
      <param name="info">serialization information</param>
      <param name="context">streaming context</param>
    </member>
    <member name="T:Rhino.Licensing.InvalidationType">
      <summary>
            InvalidationType
            </summary>
    </member>
    <member name="F:Rhino.Licensing.InvalidationType.CannotGetNewLicense">
      <summary>
            Can not create a new license
            </summary>
    </member>
    <member name="F:Rhino.Licensing.InvalidationType.TimeExpired">
      <summary>
            License is expired
            </summary>
    </member>
    <member name="T:Rhino.Licensing.StringLicenseValidator">
      <summary>
            Validates content of a license file
            </summary>
    </member>
    <member name="M:Rhino.Licensing.StringLicenseValidator.#ctor(System.String,System.String)">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.StringLicenseValidator" /></summary>
      <param name="publicKey">public key</param>
      <param name="license">license content</param>
    </member>
    <member name="P:Rhino.Licensing.StringLicenseValidator.License">
      <summary>
            License content
            </summary>
    </member>
    <member name="T:Rhino.Licensing.FloatingLicenseNotAvialableException">
      <summary>
      </summary>
    </member>
    <member name="M:Rhino.Licensing.FloatingLicenseNotAvialableException.#ctor">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.FloatingLicenseNotAvialableException" />.
            </summary>
    </member>
    <member name="M:Rhino.Licensing.FloatingLicenseNotAvialableException.#ctor(System.String)">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.FloatingLicenseNotAvialableException" />.
            </summary>
      <param name="message">error message</param>
    </member>
    <member name="M:Rhino.Licensing.FloatingLicenseNotAvialableException.#ctor(System.String,System.Exception)">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.FloatingLicenseNotAvialableException" />.
            </summary>
      <param name="message">error message</param>
      <param name="inner">inner exception</param>
    </member>
    <member name="M:Rhino.Licensing.FloatingLicenseNotAvialableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.FloatingLicenseNotAvialableException" />.
            </summary>
      <param name="info">serialization information</param>
      <param name="context">streaming context</param>
    </member>
    <member name="T:Rhino.Licensing.ILicensingService">
      <summary>
            Service contract of the licensing server.
            </summary>
    </member>
    <member name="M:Rhino.Licensing.ILicensingService.LeaseLicense(System.String,System.String,System.Guid)">
      <summary>
            Issues a float license for the user.
            </summary>
      <param name="machine">machine name</param>
      <param name="user">user name</param>
      <param name="id">Id of the license holder</param>
      <returns>
      </returns>
    </member>
    <member name="T:Rhino.Licensing.ISubscriptionLicensingService">
      <summary>
            Service contract of subscription server.
            </summary>
    </member>
    <member name="M:Rhino.Licensing.ISubscriptionLicensingService.LeaseLicense(System.String)">
      <summary>
            Issues a leased license
            </summary>
      <param name="previousLicense">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:Rhino.Licensing.LicenseFileNotFoundException">
      <summary>
            Thrown when a valid license file can not be
            found on the client machine.
            </summary>
    </member>
    <member name="M:Rhino.Licensing.LicenseFileNotFoundException.#ctor">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseFileNotFoundException" /></summary>
    </member>
    <member name="M:Rhino.Licensing.LicenseFileNotFoundException.#ctor(System.String)">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseFileNotFoundException" /></summary>
      <param name="message">error message</param>
    </member>
    <member name="M:Rhino.Licensing.LicenseFileNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseFileNotFoundException" /></summary>
      <param name="message">error message</param>
      <param name="inner">inner exception</param>
    </member>
    <member name="M:Rhino.Licensing.LicenseFileNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseFileNotFoundException" /></summary>
      <param name="info">serialization information</param>
      <param name="context">streaming context</param>
    </member>
    <member name="T:Rhino.Licensing.LicenseGenerator">
      <summary>
            LicenseGenerator generates and signs license.
            </summary>
    </member>
    <member name="M:Rhino.Licensing.LicenseGenerator.#ctor(System.String)">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseGenerator" />. 
            </summary>
      <param name="privateKey">private key of the product</param>
    </member>
    <member name="M:Rhino.Licensing.LicenseGenerator.GenerateFloatingLicense(System.String,System.String)">
      <summary>
            Generates a new floating license.
            </summary>
      <param name="name">Name of the license holder</param>
      <param name="publicKey">public key of the license server</param>
      <returns>license content</returns>
    </member>
    <member name="M:Rhino.Licensing.LicenseGenerator.Generate(System.String,System.Guid,System.DateTime,Rhino.Licensing.LicenseType)">
      <summary>
            Generates a new license
            </summary>
      <param name="name">name of the license holder</param>
      <param name="id">Id of the license holder</param>
      <param name="expirationDate">expiry date</param>
      <param name="licenseType">type of the license</param>
      <returns>
      </returns>
    </member>
    <member name="M:Rhino.Licensing.LicenseGenerator.Generate(System.String,System.Guid,System.DateTime,System.Collections.Generic.IDictionary{System.String,System.String},Rhino.Licensing.LicenseType)">
      <summary>
            Generates a new license
            </summary>
      <param name="name">name of the license holder</param>
      <param name="id">Id of the license holder</param>
      <param name="expirationDate">expiry date</param>
      <param name="licenseType">type of the license</param>
      <param name="attributes">extra information stored as key/valye in the license file</param>
      <returns>
      </returns>
    </member>
    <member name="T:Rhino.Licensing.LicenseType">
      <summary>
            License Type
            </summary>
    </member>
    <member name="F:Rhino.Licensing.LicenseType.None">
      <summary>
            No type specified
            </summary>
    </member>
    <member name="F:Rhino.Licensing.LicenseType.Trial">
      <summary>
            For trial use
            </summary>
    </member>
    <member name="F:Rhino.Licensing.LicenseType.Standard">
      <summary>
            Standard license
            </summary>
    </member>
    <member name="F:Rhino.Licensing.LicenseType.Personal">
      <summary>
            For personal use
            </summary>
    </member>
    <member name="F:Rhino.Licensing.LicenseType.Floating">
      <summary>
            Floating license
            </summary>
    </member>
    <member name="F:Rhino.Licensing.LicenseType.Subscription">
      <summary>
            Subscription based license
            </summary>
    </member>
    <member name="T:Rhino.Licensing.LicenseValidator">
      <summary>
            License validator validates a license file
            that can be located on disk.
            </summary>
    </member>
    <member name="M:Rhino.Licensing.LicenseValidator.#ctor(System.String,System.String)">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseValidator" />.
            </summary>
      <param name="publicKey">public key</param>
      <param name="licensePath">path to license file</param>
    </member>
    <member name="M:Rhino.Licensing.LicenseValidator.#ctor(System.String,System.String,System.String,System.Guid)">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseValidator" />.
            </summary>
      <param name="publicKey">public key</param>
      <param name="licensePath">path to license file</param>
      <param name="licenseServerUrl">license server endpoint address</param>
      <param name="clientId">Id of the license holder</param>
    </member>
    <member name="M:Rhino.Licensing.LicenseValidator.AssertValidLicense">
      <summary>
            Validates loaded license
            </summary>
    </member>
    <member name="M:Rhino.Licensing.LicenseValidator.RemoveExistingLicense">
      <summary>
            Removes existing license from the machine.
            </summary>
    </member>
    <member name="P:Rhino.Licensing.LicenseValidator.License">
      <summary>
            Gets or Sets the license content
            </summary>
    </member>
    <member name="T:Rhino.Licensing.LicenseNotFoundException">
      <summary>
            Thrown when suitable license is not found.
            </summary>
    </member>
    <member name="M:Rhino.Licensing.LicenseNotFoundException.#ctor">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseNotFoundException" />.
            </summary>
    </member>
    <member name="M:Rhino.Licensing.LicenseNotFoundException.#ctor(System.String)">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseNotFoundException" />.
            </summary>
      <param name="message">error message</param>
    </member>
    <member name="M:Rhino.Licensing.LicenseNotFoundException.#ctor(System.String,System.Exception)">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseNotFoundException" />.
            </summary>
      <param name="message">error message</param>
      <param name="inner">inner exception</param>
    </member>
    <member name="M:Rhino.Licensing.LicenseNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseNotFoundException" />.
            </summary>
      <param name="info">serialization information</param>
      <param name="context">steaming context</param>
    </member>
    <member name="T:Rhino.Licensing.LicensingService">
      <summary>
            Licensing server implementation.
            Because we use this service behavior, we don't have to worry 
            about multi threading issues. it is not something that we 
            expect to have to deal with huge load, anyway.
            </summary>
    </member>
    <member name="M:Rhino.Licensing.LicensingService.#ctor">
      <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicensingService" />.
            </summary>
    </member>
    <member name="M:Rhino.Licensing.LicensingService.LeaseLicense(System.String,System.String,System.Guid)">
      <summary>
            Leases a new license to the client machine.
            </summary>
      <param name="machine">client machine name</param>
      <param name="user">user name</param>
      <param name="id">Id of the license holder</param>
      <returns>
      </returns>
    </member>
    <member name="P:Rhino.Licensing.LicensingService.SoftwarePublicKey">
      <summary>
            Gets or Sets the public key of the product
            </summary>
    </member>
    <member name="P:Rhino.Licensing.LicensingService.LicenseServerPrivateKey">
      <summary>
            Gets or Sets the private key of the license server
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonReader.State">
      <summary>
            Specifies the state of the reader.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReader" /> class with the specified <see cref="T:System.IO.TextReader" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>true if the next token was read successfully; false if there are no more tokens to read.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Skip">
      <summary>
            Skips the children of the current token.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken)">
      <summary>
            Sets the current token.
            </summary>
      <param name="newToken">The new token.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken,System.Object)">
      <summary>
            Sets the current token and value.
            </summary>
      <param name="newToken">The new token.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetStateBasedOnCurrent">
      <summary>
            Sets the state based on current token type.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Close">
      <summary>
            Changes the <see cref="T:Newtonsoft.Json.JsonReader.State" /> to Closed. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.CurrentState">
      <summary>
            Gets the current reader state.
            </summary>
      <value>The current reader state.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.CloseInput">
      <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader" /> should be closed when the reader is closed.
            </summary>
      <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader" /> when
            the reader is closed; otherwise false. The default is true.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.QuoteChar">
      <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.TokenType">
      <summary>
            Gets the type of the current Json token. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Value">
      <summary>
            Gets the text value of the current Json token.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.ValueType">
      <summary>
            Gets The Common Language Runtime (CLR) type for the current Json token.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Depth">
      <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
      <value>The depth of the current token in the JSON document.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Culture">
      <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Bson.BsonReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="stream">The stream.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="reader">The reader.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream,System.Boolean,System.DateTimeKind)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="stream">The stream.</param>
      <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
      <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader,System.Boolean,System.DateTimeKind)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="reader">The reader.</param>
      <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
      <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>
            A <see cref="T:System.Nullable`1" />.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.Close">
      <summary>
            Changes the <see cref="T:Newtonsoft.Json.JsonReader.State" /> to Closed.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonReader.JsonNet35BinaryCompatibility">
      <summary>
            Gets or sets a value indicating whether binary data reading should compatible with incorrect Json.NET 3.5 written binary.
            </summary>
      <value>
        <c>true</c> if binary data reading will be compatible with incorrect Json.NET 3.5 written binary; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonReader.ReadRootValueAsArray">
      <summary>
            Gets or sets a value indicating whether the root object will be read as a JSON array.
            </summary>
      <value>
        <c>true</c> if the root object will be read as a JSON array; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonReader.DateTimeKindHandling">
      <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.
            </summary>
      <value>The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.#ctor">
      <summary>
            Creates an instance of the <c>JsonWriter</c> class. 
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndObject">
      <summary>
            Writes the end of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndArray">
      <summary>
            Writes the end of an array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndConstructor">
      <summary>
            Writes the end constructor.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd">
      <summary>
            Writes the end of the current Json object or array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader)">
      <summary>
            Writes the current <see cref="T:Newtonsoft.Json.JsonReader" /> token.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read the token from.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the specified end token.
            </summary>
      <param name="token">The end token to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteIndent">
      <summary>
            Writes indent characters.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueDelimiter">
      <summary>
            Writes the JSON value delimiter.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteIndentSpace">
      <summary>
            Writes an indent space.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON without changing the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteRawValue(System.String)">
      <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Guid)">
      <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.TimeSpan)">
      <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int32})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt32})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int64})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt64})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Single})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Double})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Boolean})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int16})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt16})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Char})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Byte})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.SByte})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Decimal})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTime})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTimeOffset})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Guid})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.TimeSpan})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Uri)">
      <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Object)">
      <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteWhitespace(System.String)">
      <summary>
            Writes out the given white space.
            </summary>
      <param name="ws">The string of white space characters.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.CloseOutput">
      <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader" /> should be closed when the writer is closed.
            </summary>
      <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader" /> when
            the writer is closed; otherwise false. The default is true.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Top">
      <summary>
            Gets the top.
            </summary>
      <value>The top.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.WriteState">
      <summary>
            Gets the state of the writer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Formatting">
      <summary>
            Indicates how the output is formatted.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Bson.BsonWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonWriter" /> class.
            </summary>
      <param name="stream">The stream.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.BinaryWriter)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonWriter" /> class.
            </summary>
      <param name="writer">The writer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the end.
            </summary>
      <param name="token">The token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRawValue(System.String)">
      <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Guid)">
      <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.TimeSpan)">
      <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Uri)">
      <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteObjectId(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value that represents a BSON object id.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRegex(System.String,System.String)">
      <summary>
            Writes a BSON regex.
            </summary>
      <param name="pattern">The regex pattern.</param>
      <param name="options">The regex options.</param>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonWriter.DateTimeKindHandling">
      <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime" /> values to BSON.
            When set to <see cref="F:System.DateTimeKind.Unspecified" /> no conversion will occur.
            </summary>
      <value>The <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime" /> values to BSON.</value>
    </member>
    <member name="T:Newtonsoft.Json.Bson.BsonObjectId">
      <summary>
            Represents a BSON Oid (object id).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonObjectId.#ctor(System.Byte[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonObjectId" /> class.
            </summary>
      <param name="value">The Oid value.</param>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonObjectId.Value">
      <summary>
            Gets or sets the value of the Oid.
            </summary>
      <value>The value of the Oid.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverter">
      <summary>
            Converts an object to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.GetSchema">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of the JSON produced by the JsonConverter.
            </summary>
      <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of the JSON produced by the JsonConverter.</returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonConverter.CanRead">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonConverter.CanWrite">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.BinaryConverter">
      <summary>
            Converts a binary value to and from a base 64 string value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BinaryConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DataSetConverter">
      <summary>
            Converts a <see cref="T:System.Data.DataSet" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataSetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataSetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataSetConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
      <param name="valueType">Type of the value.</param>
      <returns>
        <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DataTableConverter">
      <summary>
            Converts a <see cref="T:System.Data.DataTable" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataTableConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataTableConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
      <param name="valueType">Type of the value.</param>
      <returns>
        <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.CustomCreationConverter`1">
      <summary>
            Create a custom object
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.Create(System.Type)">
      <summary>
            Creates an object which will then be populated by the serializer.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanWrite">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DateTimeConverterBase">
      <summary>
            Provides a base class for converting a <see cref="T:System.DateTime" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DateTimeConverterBase.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.EntityKeyMemberConverter">
      <summary>
            Converts an Entity Framework EntityKey to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.ExpandoObjectConverter">
      <summary>
            Converts an ExpandoObject to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.ExpandoObjectConverter.CanWrite">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.KeyValuePairConverter">
      <summary>
            Converts a <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.BsonObjectIdConverter">
      <summary>
            Converts a <see cref="T:Newtonsoft.Json.Bson.BsonObjectId" /> to and from JSON and BSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.RegexConverter">
      <summary>
            Converts a <see cref="T:System.Text.RegularExpressions.Regex" /> to and from JSON and BSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.RegexConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.RegexConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.RegexConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.StringEnumConverter">
      <summary>
            Converts an <see cref="T:System.Enum" /> to and from its name string value.
            </summary>
      <summary>
            Converts an <see cref="T:System.Enum" /> to and from its name string value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.GetEnumNameMap(System.Type)">
      <summary>
            A cached representation of the Enum string representation to respect per Enum field name.
            </summary>
      <param name="t">The type of the Enum.</param>
      <returns>A map of enum field name to either the field name, or the configured enum member name (<see cref="T:System.Runtime.Serialization.EnumMemberAttribute" />).</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.StringEnumConverter.CamelCaseText">
      <summary>
            Gets or sets a value indicating whether the written enum text should be camel case.
            </summary>
      <value>
        <c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.ConstructorHandling">
      <summary>
            Specifies how constructors are used when initializing objects during deserialization by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ConstructorHandling.Default">
      <summary>
            First attempt to use the public default constructor then fall back to single paramatized constructor.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ConstructorHandling.AllowNonPublicDefaultConstructor">
      <summary>
            Allow Json.NET to use a non-public default constructor.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Converters.VersionConverter">
      <summary>
            Converts a <see cref="T:System.Version" /> to and from a string (e.g. "1.2.3.4").
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.VersionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.VersionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing property value of the JSON that is being converted.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.VersionConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.JsonConstructorAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to use the specified constructor when deserializing that object.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.IJEnumerable`1">
      <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
      <typeparam name="T">The type of token</typeparam>
    </member>
    <member name="P:Newtonsoft.Json.Linq.IJEnumerable`1.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> with the specified key.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Newtonsoft.Json.IJsonLineInfo">
      <summary>
            Provides an interface to enable a class to return line and position information.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.IJsonLineInfo.HasLineInfo">
      <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
      <returns>
        <c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.IJsonLineInfo.LineNumber">
      <summary>
            Gets the current line number.
            </summary>
      <value>The current line number or 0 if no line information is available (for example, HasLineInfo returns false).</value>
    </member>
    <member name="P:Newtonsoft.Json.IJsonLineInfo.LinePosition">
      <summary>
            Gets the current line position.
            </summary>
      <value>The current line position or 0 if no line information is available (for example, HasLineInfo returns false).</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JToken">
      <summary>
            Represents an abstract JSON token.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Compares the values of two tokens, including the values of all descendant tokens.
            </summary>
      <param name="t1">The first <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <param name="t2">The second <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <returns>true if the tokens are equal; otherwise false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AddAfterSelf(System.Object)">
      <summary>
            Adds the specified content immediately after this token.
            </summary>
      <param name="content">A content object that contains simple content or a collection of content objects to be added after this token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AddBeforeSelf(System.Object)">
      <summary>
            Adds the specified content immediately before this token.
            </summary>
      <param name="content">A content object that contains simple content or a collection of content objects to be added before this token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Ancestors">
      <summary>
            Returns a collection of the ancestor tokens of this token.
            </summary>
      <returns>A collection of the ancestor tokens of this token.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AfterSelf">
      <summary>
            Returns a collection of the sibling tokens after this token, in document order.
            </summary>
      <returns>A collection of the sibling tokens after this tokens, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.BeforeSelf">
      <summary>
            Returns a collection of the sibling tokens before this token, in document order.
            </summary>
      <returns>A collection of the sibling tokens before this token, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Value``1(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key converted to the specified type.
            </summary>
      <typeparam name="T">The type to convert the token to.</typeparam>
      <param name="key">The token key.</param>
      <returns>The converted token value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Children">
      <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Children``1">
      <summary>
            Returns a collection of the child tokens of this token, in document order, filtered by the specified type.
            </summary>
      <typeparam name="T">The type to filter the child tokens on.</typeparam>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Values``1">
      <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
      <typeparam name="T">The type to convert the values to.</typeparam>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the child values of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Remove">
      <summary>
            Removes this token from its parent.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Replace(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Replaces this token with the specified token.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToString">
      <summary>
            Returns the indented JSON for this token.
            </summary>
      <returns>
            The indented JSON for this token.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToString(Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Returns the JSON for this token using the given formatting and converters.
            </summary>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
      <returns>The JSON for this token using the given formatting and converters.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Boolean">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Boolean" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTimeOffset">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.DateTimeOffset" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Boolean}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int64">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int64" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTime}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTimeOffset}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Decimal}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Double}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int32">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int32" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int16">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int16" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt16">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt16" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int32}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int16}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt16}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTime">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.DateTime" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int64}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Single}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Decimal">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Decimal" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt32}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt64}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Double">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Double" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Single">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Single" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.String">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.String" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt32">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt64">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt64" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte[]">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Byte[]" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Boolean)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTimeOffset)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.DateTimeOffset" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Boolean})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int64)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTime})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTimeOffset})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Decimal})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Double})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int16)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Int16" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt16)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int32)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Int32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int32})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTime)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int64})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Single})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Decimal)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int16})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt16})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt32})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt64})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Double)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Double" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Single)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Single" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.String)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.String" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt32)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt64)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte[])~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Byte[]" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.CreateReader">
      <summary>
            Creates an <see cref="T:Newtonsoft.Json.JsonReader" /> for this token.
            </summary>
      <returns>An <see cref="T:Newtonsoft.Json.JsonReader" /> that can be used to read this token and its descendants.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the value of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from an object using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when reading the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the value of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject``1">
      <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <returns>The new object created from the JSON value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject``1(Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" /> using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when creating the object.</param>
      <returns>The new object created from the JSON value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>
            An <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>
            An <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String)">
      <summary>
            Selects the token that matches the object path.
            </summary>
      <param name="path">
            The object path from the current <see cref="T:Newtonsoft.Json.Linq.JToken" /> to the <see cref="T:Newtonsoft.Json.Linq.JToken" />
            to be returned. This must be a string of property names or array indexes separated
            by periods, such as <code>Tables[0].DefaultView[0].Price</code> in C# or
            <code>Tables(0).DefaultView(0).Price</code> in Visual Basic.
            </param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that matches the object path or a null reference if no matching token is found.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String,System.Boolean)">
      <summary>
            Selects the token that matches the object path.
            </summary>
      <param name="path">
            The object path from the current <see cref="T:Newtonsoft.Json.Linq.JToken" /> to the <see cref="T:Newtonsoft.Json.Linq.JToken" />
            to be returned. This must be a string of property names or array indexes separated
            by periods, such as <code>Tables[0].DefaultView[0].Price</code> in C# or
            <code>Tables(0).DefaultView(0).Price</code> in Visual Basic.
            </param>
      <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no token is found.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that matches the object path.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
      <param name="parameter">The expression tree representation of the runtime value.</param>
      <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.DeepClone">
      <summary>
            Creates a new instance of the <see cref="T:Newtonsoft.Json.Linq.JToken" />. All child tokens are recursively cloned.
            </summary>
      <returns>A new instance of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.EqualityComparer">
      <summary>
            Gets a comparer that can compare two tokens for value equality.
            </summary>
      <value>A <see cref="T:Newtonsoft.Json.Linq.JTokenEqualityComparer" /> that can compare two nodes for value equality.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Parent">
      <summary>
            Gets or sets the parent.
            </summary>
      <value>The parent.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Root">
      <summary>
            Gets the root <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The root <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.HasValues">
      <summary>
            Gets a value indicating whether this token has childen tokens.
            </summary>
      <value>
        <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Next">
      <summary>
            Gets the next sibling token of this node.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the next sibling token.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Previous">
      <summary>
            Gets the previous sibling token of this node.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the previous sibling token.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.First">
      <summary>
            Get the first child token of this token.
            </summary>
      <value>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Last">
      <summary>
            Get the last child token of this token.
            </summary>
      <value>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JValue">
      <summary>
            Represents a value in JSON (string, integer, date, etc).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(Newtonsoft.Json.Linq.JValue)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class from another <see cref="T:Newtonsoft.Json.Linq.JValue" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JValue" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.UInt64)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Uri)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.TimeSpan)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CreateComment(System.String)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> comment with the given value.
            </summary>
      <param name="value">The value.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> comment with the given value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CreateString(System.String)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> string with the given value.
            </summary>
      <param name="value">The value.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> string with the given value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.Equals(Newtonsoft.Json.Linq.JValue)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="format">The format.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.IFormatProvider)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="formatProvider">The format provider.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String,System.IFormatProvider)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="format">The format.</param>
      <param name="formatProvider">The format provider.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
      <param name="parameter">The expression tree representation of the runtime value.</param>
      <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CompareTo(Newtonsoft.Json.Linq.JValue)">
      <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj" />.
            Zero
            This instance is equal to <paramref name="obj" />.
            Greater than zero
            This instance is greater than <paramref name="obj" />.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not the same type as this instance.
            </exception>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JValue.HasValues">
      <summary>
            Gets a value indicating whether this token has childen tokens.
            </summary>
      <value>
        <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JValue.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JValue.Value">
      <summary>
            Gets or sets the underlying token value.
            </summary>
      <value>The underlying token value.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JRaw">
      <summary>
            Represents a raw JSON string.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(Newtonsoft.Json.Linq.JRaw)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JRaw" /> class from another <see cref="T:Newtonsoft.Json.Linq.JRaw" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JRaw" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JRaw" /> class.
            </summary>
      <param name="rawJson">The raw json.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.Create(Newtonsoft.Json.JsonReader)">
      <summary>
            Creates an instance of <see cref="T:Newtonsoft.Json.Linq.JRaw" /> with the content of the reader's current token.
            </summary>
      <param name="reader">The reader.</param>
      <returns>An instance of <see cref="T:Newtonsoft.Json.Linq.JRaw" /> with the content of the reader's current token.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Required">
      <summary>
            Indicating whether a property is required.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.Default">
      <summary>
            The property is not required. The default state.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.AllowNull">
      <summary>
            The property must be defined in JSON but can be a null value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.Always">
      <summary>
            The property must be defined in JSON and cannot be a null value.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.UnderlyingType">
      <summary>
            Gets the underlying type for the contract.
            </summary>
      <value>The underlying type for the contract.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.CreatedType">
      <summary>
            Gets or sets the type created during deserialization.
            </summary>
      <value>The type created during deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.IsReference">
      <summary>
            Gets or sets whether this type contract is serialized as a reference.
            </summary>
      <value>Whether this type contract is serialized as a reference.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.Converter">
      <summary>
            Gets or sets the default <see cref="T:Newtonsoft.Json.JsonConverter" /> for this contract.
            </summary>
      <value>The converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserialized">
      <summary>
            Gets or sets the method called immediately after deserialization of the object.
            </summary>
      <value>The method called immediately after deserialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializing">
      <summary>
            Gets or sets the method called during deserialization of the object.
            </summary>
      <value>The method called during deserialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerialized">
      <summary>
            Gets or sets the method called after serialization of the object graph.
            </summary>
      <value>The method called after serialization of the object graph.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializing">
      <summary>
            Gets or sets the method called before serialization of the object.
            </summary>
      <value>The method called before serialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator">
      <summary>
            Gets or sets the default creator method used to create the object.
            </summary>
      <value>The default creator method used to create the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreatorNonPublic">
      <summary>
            Gets or sets a value indicating whether [default creator non public].
            </summary>
      <value>
        <c>true</c> if the default object creator is non-public; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnError">
      <summary>
            Gets or sets the method called when an error is thrown during the serialization of the object.
            </summary>
      <value>The method called when an error is thrown during the serialization of the object.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonDynamicContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonDynamicContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDynamicContract.Properties">
      <summary>
            Gets the object's properties.
            </summary>
      <value>The object's properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDynamicContract.PropertyNameResolver">
      <summary>
            Gets or sets the property name resolver.
            </summary>
      <value>The property name resolver.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonISerializableContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonISerializableContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonISerializableContract.ISerializableCreator">
      <summary>
            Gets or sets the ISerializable object constructor.
            </summary>
      <value>The ISerializable object constructor.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonLinqContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonLinqContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPrimitiveContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IValueProvider">
      <summary>
            Provides methods to get and set values.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DynamicValueProvider">
      <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using dynamic methods.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.#ctor(System.Reflection.MemberInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DynamicValueProvider" /> class.
            </summary>
      <param name="memberInfo">The member info.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ErrorEventArgs">
      <summary>
            Provides data for the Error event.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ErrorEventArgs.#ctor(System.Object,Newtonsoft.Json.Serialization.ErrorContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ErrorEventArgs" /> class.
            </summary>
      <param name="currentObject">The current object.</param>
      <param name="errorContext">The error context.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.CurrentObject">
      <summary>
            Gets the current object the error event is being raised against.
            </summary>
      <value>The current object the error event is being raised against.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.ErrorContext">
      <summary>
            Gets the error context.
            </summary>
      <value>The error context.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JPropertyDescriptor">
      <summary>
            Represents a view of a <see cref="T:Newtonsoft.Json.Linq.JProperty" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.#ctor(System.String,System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JPropertyDescriptor" /> class.
            </summary>
      <param name="name">The name.</param>
      <param name="propertyType">Type of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.CanResetValue(System.Object)">
      <summary>
            When overridden in a derived class, returns whether resetting an object changes its value.
            </summary>
      <returns>
            true if resetting the component changes its value; otherwise, false.
            </returns>
      <param name="component">The component to test for reset capability. 
                            </param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.GetValue(System.Object)">
      <summary>
            When overridden in a derived class, gets the current value of the property on a component.
            </summary>
      <returns>
            The value of a property for a given component.
            </returns>
      <param name="component">The component with the property for which to retrieve the value. 
                            </param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.ResetValue(System.Object)">
      <summary>
            When overridden in a derived class, resets the value for this property of the component to the default value.
            </summary>
      <param name="component">The component with the property value that is to be reset to the default value. 
                            </param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>
            When overridden in a derived class, sets the value of the component to a different value.
            </summary>
      <param name="component">The component with the property value that is to be set. 
                            </param>
      <param name="value">The new value. 
                            </param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>
            When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.
            </summary>
      <returns>
            true if the property should be persisted; otherwise, false.
            </returns>
      <param name="component">The component with the property to be examined for persistence. 
                            </param>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.ComponentType">
      <summary>
            When overridden in a derived class, gets the type of the component this property is bound to.
            </summary>
      <returns>
            A <see cref="T:System.Type" /> that represents the type of component this property is bound to. When the <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> or <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /> methods are invoked, the object specified might be an instance of this type.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.IsReadOnly">
      <summary>
            When overridden in a derived class, gets a value indicating whether this property is read-only.
            </summary>
      <returns>
            true if the property is read-only; otherwise, false.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.PropertyType">
      <summary>
            When overridden in a derived class, gets the type of the property.
            </summary>
      <returns>
            A <see cref="T:System.Type" /> that represents the type of the property.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.NameHashCode">
      <summary>
            Gets the hash code for the name of the member.
            </summary>
      <value>
      </value>
      <returns>
            The hash code for the name of the member.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IReferenceResolver">
      <summary>
            Used to resolve references when serializing and deserializing JSON by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.ResolveReference(System.Object,System.String)">
      <summary>
            Resolves a reference to its object.
            </summary>
      <param name="context">The serialization context.</param>
      <param name="reference">The reference to resolve.</param>
      <returns>The object that</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.GetReference(System.Object,System.Object)">
      <summary>
            Gets the reference for the sepecified object.
            </summary>
      <param name="context">The serialization context.</param>
      <param name="value">The object to get a reference for.</param>
      <returns>The reference to the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.IsReferenced(System.Object,System.Object)">
      <summary>
            Determines whether the specified object is referenced.
            </summary>
      <param name="context">The serialization context.</param>
      <param name="value">The object to test for a reference.</param>
      <returns>
        <c>true</c> if the specified object is referenced; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.AddReference(System.Object,System.String,System.Object)">
      <summary>
            Adds a reference to the specified object.
            </summary>
      <param name="context">The serialization context.</param>
      <param name="reference">The reference.</param>
      <param name="value">The object to reference.</param>
    </member>
    <member name="T:Newtonsoft.Json.PreserveReferencesHandling">
      <summary>
            Specifies reference handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.None">
      <summary>
            Do not preserve references when serializing types.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Objects">
      <summary>
            Preserve references when serializing into a JSON object structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Arrays">
      <summary>
            Preserve references when serializing into a JSON array structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.All">
      <summary>
            Preserve references when serializing.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonContainerAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonContainerAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonContainerAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.Id">
      <summary>
            Gets or sets the id.
            </summary>
      <value>The id.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.Title">
      <summary>
            Gets or sets the title.
            </summary>
      <value>The title.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.Description">
      <summary>
            Gets or sets the description.
            </summary>
      <value>The description.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.IsReference">
      <summary>
            Gets or sets a value that indicates whether to preserve object reference data.
            </summary>
      <value>
        <c>true</c> to keep object reference; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.JsonArrayAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the collection.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonArrayAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with a flag indicating whether the array can contain null items
            </summary>
      <param name="allowNullItems">A flag indicating whether the array can contain null items.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonArrayAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonArrayAttribute.AllowNullItems">
      <summary>
            Gets or sets a value indicating whether null items are allowed in the collection.
            </summary>
      <value>
        <c>true</c> if null items are allowed in the collection; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.DefaultValueHandling">
      <summary>
            Specifies default value handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.Include">
      <summary>
            Include members where the member value is the same as the member's default value when serializing objects.
            Included members are written to JSON. Has no effect when deserializing.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.Ignore">
      <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            so that is is not written to JSON, and ignores setting members when the JSON value equals the member's default value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.Populate">
      <summary>
            Members with a default value but no JSON will be set to their default value when deserializing.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.IgnoreAndPopulate">
      <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            and sets members to their default value when deserializing.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverterAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to use the specified <see cref="T:Newtonsoft.Json.JsonConverter" /> when serializing the member or class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonConverterAttribute" /> class.
            </summary>
      <param name="converterType">Type of the converter.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonConverterAttribute.ConverterType">
      <summary>
            Gets the type of the converter.
            </summary>
      <value>The type of the converter.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonObjectAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(Newtonsoft.Json.MemberSerialization)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with the specified member serialization.
            </summary>
      <param name="memberSerialization">The member serialization.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonObjectAttribute.MemberSerialization">
      <summary>
            Gets or sets the member serialization.
            </summary>
      <value>The member serialization.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonSerializerSettings">
      <summary>
            Specifies the settings on a <see cref="T:Newtonsoft.Json.JsonSerializer" /> object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializerSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> class.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceLoopHandling">
      <summary>
            Gets or sets how reference loops (e.g. a class referencing itself) is handled.
            </summary>
      <value>Reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.MissingMemberHandling">
      <summary>
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
      <value>Missing member handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ObjectCreationHandling">
      <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.NullValueHandling">
      <summary>
            Gets or sets how null values are handled during serialization and deserialization.
            </summary>
      <value>Null value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DefaultValueHandling">
      <summary>
            Gets or sets how null default are handled during serialization and deserialization.
            </summary>
      <value>The default value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Converters">
      <summary>
            Gets or sets a collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.
            </summary>
      <value>The converters.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.PreserveReferencesHandling">
      <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
      <value>The preserve references handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling">
      <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormat">
      <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
      <value>The type name assembly format.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ConstructorHandling">
      <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
      <value>The constructor handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ContractResolver">
      <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
      <value>The contract resolver.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceResolver">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.
            </summary>
      <value>The reference resolver.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Binder">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder" /> used by the serializer when resolving type names.
            </summary>
      <value>The binder.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Error">
      <summary>
            Gets or sets the error handler called during serialization and deserialization.
            </summary>
      <value>The error handler called during serialization and deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Context">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used by the serializer when invoking serialization callback methods.
            </summary>
      <value>The context.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonValidatingReader">
      <summary>
            Represents a reader that provides <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> validation.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.#ctor(Newtonsoft.Json.JsonReader)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonValidatingReader" /> class that
            validates the content returned from the given <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from while validating.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Value">
      <summary>
            Gets the text value of the current Json token.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Depth">
      <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
      <value>The depth of the current token in the JSON document.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.QuoteChar">
      <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.TokenType">
      <summary>
            Gets the type of the current Json token.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.ValueType">
      <summary>
            Gets the Common Language Runtime (CLR) type for the current Json token.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Schema">
      <summary>
            Gets or sets the schema.
            </summary>
      <value>The schema.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Reader">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.JsonReader" /> used to construct this <see cref="T:Newtonsoft.Json.JsonValidatingReader" />.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.JsonReader" /> specified in the constructor.</value>
    </member>
    <member name="E:Newtonsoft.Json.JsonValidatingReader.ValidationEventHandler">
      <summary>
            Sets an event handler for receiving schema validation errors.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenEqualityComparer">
      <summary>
            Compares tokens to determine whether they are equal.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.Equals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Determines whether the specified objects are equal.
            </summary>
      <param name="x">The first object of type <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <param name="y">The second object of type <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.GetHashCode(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Returns a hash code for the specified object.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
      <returns>A hash code for the specified object.</returns>
      <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.</exception>
    </member>
    <member name="T:Newtonsoft.Json.MemberSerialization">
      <summary>
            Specifies the member serialization options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MemberSerialization.OptOut">
      <summary>
            All members are serialized by default. Members can be excluded using the <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MemberSerialization.OptIn">
      <summary>
            Only members must be marked with the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> are serialized.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.ObjectCreationHandling">
      <summary>
            Specifies how object creation is handled by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ObjectCreationHandling.Auto">
      <summary>
            Reuse existing objects, create new objects when needed.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ObjectCreationHandling.Reuse">
      <summary>
            Only reuse existing objects.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ObjectCreationHandling.Replace">
      <summary>
            Always create new objects.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Converters.IsoDateTimeConverter">
      <summary>
            Converts a <see cref="T:System.DateTime" /> to and from the ISO 8601 date format (e.g. 2008-04-12T12:53Z).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeStyles">
      <summary>
            Gets or sets the date time styles used when converting a date to and from JSON.
            </summary>
      <value>The date time styles used when converting a date to and from JSON.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeFormat">
      <summary>
            Gets or sets the date time format used when converting a date to and from JSON.
            </summary>
      <value>The date time format used when converting a date to and from JSON.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.Culture">
      <summary>
            Gets or sets the culture used when converting a date to and from JSON.
            </summary>
      <value>The culture used when converting a date to and from JSON.</value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter">
      <summary>
            Converts a <see cref="T:System.DateTime" /> to and from a JavaScript date constructor (e.g. new Date(52231943)).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing property value of the JSON that is being converted.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.JsonDateTimeSerializationMode">
      <summary>
            Specifies whether a DateTime object represents a local time, a Coordinated Universal Time (UTC), or is not specified as either local time or UTC.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Converters.JsonDateTimeSerializationMode.Local">
      <summary>
            The time represented is local time.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Converters.JsonDateTimeSerializationMode.Utc">
      <summary>
            The time represented is UTC.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Converters.JsonDateTimeSerializationMode.Unspecified">
      <summary>
            The time represented is not specified as either local time or Coordinated Universal Time (UTC).
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Converters.JsonDateTimeSerializationMode.RoundtripKind">
      <summary>
            Preserves the DateTimeKind field of a date when a DateTime object is converted to a string and the string is then converted back to a DateTime object.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Converters.XmlNodeConverter">
      <summary>
            Converts XML to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="serializer">The calling serializer.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(System.String,System.String@)">
      <summary>
            Checks if the attributeName is a namespace attribute.
            </summary>
      <param name="attributeName">Attribute name to test.</param>
      <param name="prefix">The attribute name prefix if it has one, otherwise an empty string.</param>
      <returns>True if attribute name is for a namespace attribute, otherwise false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
      <param name="valueType">Type of the value.</param>
      <returns>
        <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeRootElementName">
      <summary>
            Gets or sets the name of the root element to insert when deserializing to XML if the JSON structure has produces multiple root elements.
            </summary>
      <value>The name of the deserialize root element.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.WriteArrayAttribute">
      <summary>
            Gets or sets a flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </summary>
      <value>
        <c>true</c> if the array attibute is written to the XML; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.OmitRootObject">
      <summary>
            Gets or sets a value indicating whether to write the root JSON object.
            </summary>
      <value>
        <c>true</c> if the JSON root object is omitted; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonTextReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.#ctor(System.IO.TextReader)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReader" /> class with the specified <see cref="T:System.IO.TextReader" />.
            </summary>
      <param name="reader">The <c>TextReader</c> containing the XML data to read.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.Close">
      <summary>
            Changes the state to closed. 
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.HasLineInfo">
      <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
      <returns>
        <c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextReader.LineNumber">
      <summary>
            Gets the current line number.
            </summary>
      <value>
            The current line number or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextReader.LinePosition">
      <summary>
            Gets the current line position.
            </summary>
      <value>
            The current line position or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
    </member>
    <member name="T:Newtonsoft.Json.JsonPropertyAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to always serialize the member with the specified name.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> class with the specified name.
            </summary>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NullValueHandling">
      <summary>
            Gets or sets the null value handling used when serializing this property.
            </summary>
      <value>The null value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.DefaultValueHandling">
      <summary>
            Gets or sets the default value handling used when serializing this property.
            </summary>
      <value>The default value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ReferenceLoopHandling">
      <summary>
            Gets or sets the reference loop handling used when serializing this property.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ObjectCreationHandling">
      <summary>
            Gets or sets the object creation handling used when deserializing this property.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.TypeNameHandling">
      <summary>
            Gets or sets the type name handling used when serializing this property.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.IsReference">
      <summary>
            Gets or sets whether this property's value is serialized as a reference.
            </summary>
      <value>Whether this property's value is serialized as a reference.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Order">
      <summary>
            Gets or sets the order of serialization and deserialization of a member.
            </summary>
      <value>The numeric order of serialization or deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.PropertyName">
      <summary>
            Gets or sets the name of the property.
            </summary>
      <value>The name of the property.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Required">
      <summary>
            Gets or sets a value indicating whether this property is required.
            </summary>
      <value>
            	A value indicating whether this property is required.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.JsonIgnoreAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> not to serialize the public field or public read/write property value.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonTextWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.#ctor(System.IO.TextWriter)">
      <summary>
            Creates an instance of the <c>JsonWriter</c> class using the specified <see cref="T:System.IO.TextWriter" />. 
            </summary>
      <param name="textWriter">The <c>TextWriter</c> to write to.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the specified end token.
            </summary>
      <param name="token">The end token to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndent">
      <summary>
            Writes indent characters.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueDelimiter">
      <summary>
            Writes the JSON value delimiter.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndentSpace">
      <summary>
            Writes an indent space.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Guid)">
      <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.TimeSpan)">
      <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Uri)">
      <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteWhitespace(System.String)">
      <summary>
            Writes out the given white space.
            </summary>
      <param name="ws">The string of white space characters.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.Indentation">
      <summary>
            Gets or sets how many IndentChars to write for each level in the hierarchy when <see cref="T:Newtonsoft.Json.Formatting" /> is set to <c>Formatting.Indented</c>.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteChar">
      <summary>
            Gets or sets which character to use to quote attribute values.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.IndentChar">
      <summary>
            Gets or sets which character to use for indenting when <see cref="T:Newtonsoft.Json.Formatting" /> is set to <c>Formatting.Indented</c>.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteName">
      <summary>
            Gets or sets a value indicating whether object names will be surrounded with quotes.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonWriterException">
      <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="T:Newtonsoft.Json.JsonReaderException">
      <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="P:Newtonsoft.Json.JsonReaderException.LineNumber">
      <summary>
            Gets the line number indicating where the error occurred.
            </summary>
      <value>The line number indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReaderException.LinePosition">
      <summary>
            Gets the line position indicating where the error occurred.
            </summary>
      <value>The line position indicating where the error occurred.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverterCollection">
      <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonConvert">
      <summary>
            Provides methods for converting between common language runtime types and JSON types.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.True">
      <summary>
            Represents JavaScript's boolean value true as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.False">
      <summary>
            Represents JavaScript's boolean value false as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.Null">
      <summary>
            Represents JavaScript's null as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.Undefined">
      <summary>
            Represents JavaScript's undefined as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.PositiveInfinity">
      <summary>
            Represents JavaScript's positive infinity as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.NegativeInfinity">
      <summary>
            Represents JavaScript's negative infinity as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.NaN">
      <summary>
            Represents JavaScript's NaN as a string. This field is read-only.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime)">
      <summary>
            Converts the <see cref="T:System.DateTime" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset)">
      <summary>
            Converts the <see cref="T:System.DateTimeOffset" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Boolean)">
      <summary>
            Converts the <see cref="T:System.Boolean" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Char)">
      <summary>
            Converts the <see cref="T:System.Char" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Char" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Enum)">
      <summary>
            Converts the <see cref="T:System.Enum" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Enum" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int32)">
      <summary>
            Converts the <see cref="T:System.Int32" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int16)">
      <summary>
            Converts the <see cref="T:System.Int16" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt16)">
      <summary>
            Converts the <see cref="T:System.UInt16" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt32)">
      <summary>
            Converts the <see cref="T:System.UInt32" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int64)">
      <summary>
            Converts the <see cref="T:System.Int64" />  to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt64)">
      <summary>
            Converts the <see cref="T:System.UInt64" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Single)">
      <summary>
            Converts the <see cref="T:System.Single" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Double)">
      <summary>
            Converts the <see cref="T:System.Double" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Byte)">
      <summary>
            Converts the <see cref="T:System.Byte" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.SByte)">
      <summary>
            Converts the <see cref="T:System.SByte" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Decimal)">
      <summary>
            Converts the <see cref="T:System.Decimal" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Guid)">
      <summary>
            Converts the <see cref="T:System.Guid" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Guid" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.TimeSpan)">
      <summary>
            Converts the <see cref="T:System.TimeSpan" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.TimeSpan" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Uri)">
      <summary>
            Converts the <see cref="T:System.Uri" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Uri" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String)">
      <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char)">
      <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <param name="delimter">The string delimiter character.</param>
      <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Object)">
      <summary>
            Converts the <see cref="T:System.Object" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object)">
      <summary>
            Serializes the specified object to a JSON string.
            </summary>
      <param name="value">The object to serialize.</param>
      <returns>A JSON string representation of the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting)">
      <summary>
            Serializes the specified object to a JSON string.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="converters">A collection converters used while serializing.</param>
      <returns>A JSON string representation of the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="converters">A collection converters used while serializing.</param>
      <returns>A JSON string representation of the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String)">
      <summary>
            Deserializes the JSON to a .NET object.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <returns>The deserialized object from the Json string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON to a .NET object.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type)">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The <see cref="T:System.Type" /> of object being deserialized.</param>
      <returns>The deserialized object from the Json string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String)">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The JSON to deserialize.</param>
      <returns>The deserialized object from the Json string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0)">
      <summary>
            Deserializes the JSON to the given anonymous type.
            </summary>
      <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be infered from the anonymous type passed
            as a parameter.
            </typeparam>
      <param name="value">The JSON to deserialize.</param>
      <param name="anonymousTypeObject">The anonymous type object.</param>
      <returns>The deserialized anonymous type from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The JSON to deserialize.</param>
      <param name="converters">Converters to use while deserializing.</param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The object to deserialize.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The type of the object to deserialize.</param>
      <param name="converters">Converters to use while deserializing.</param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The type of the object to deserialize to.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object)">
      <summary>
            Populates the object with values from the JSON string.
            </summary>
      <param name="value">The JSON to populate values from.</param>
      <param name="target">The target object to populate values onto.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Populates the object with values from the JSON string.
            </summary>
      <param name="value">The JSON to populate values from.</param>
      <param name="target">The target object to populate values onto.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode)">
      <summary>
            Serializes the XML node to a JSON string.
            </summary>
      <param name="node">The node to serialize.</param>
      <returns>A JSON string of the XmlNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting)">
      <summary>
            Serializes the XML node to a JSON string.
            </summary>
      <param name="node">The node to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <returns>A JSON string of the XmlNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting,System.Boolean)">
      <summary>
            Serializes the XML node to a JSON string.
            </summary>
      <param name="node">The node to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="omitRootObject">Omits writing the root object.</param>
      <returns>A JSON string of the XmlNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String)">
      <summary>
            Deserializes the XmlNode from a JSON string.
            </summary>
      <param name="value">The JSON string.</param>
      <returns>The deserialized XmlNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String)">
      <summary>
            Deserializes the XmlNode from a JSON string nested in a root elment.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <returns>The deserialized XmlNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String,System.Boolean)">
      <summary>
            Deserializes the XmlNode from a JSON string nested in a root elment.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <param name="writeArrayAttribute">
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
      <returns>The deserialized XmlNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject)">
      <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string.
            </summary>
      <param name="node">The node to convert to JSON.</param>
      <returns>A JSON string of the XNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting)">
      <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string.
            </summary>
      <param name="node">The node to convert to JSON.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <returns>A JSON string of the XNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting,System.Boolean)">
      <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string.
            </summary>
      <param name="node">The node to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="omitRootObject">Omits writing the root object.</param>
      <returns>A JSON string of the XNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String)">
      <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string.
            </summary>
      <param name="value">The JSON string.</param>
      <returns>The deserialized XNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String)">
      <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string nested in a root elment.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <returns>The deserialized XNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String,System.Boolean)">
      <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string nested in a root elment.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <param name="writeArrayAttribute">
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
      <returns>The deserialized XNode</returns>
    </member>
    <member name="T:Newtonsoft.Json.JsonSerializationException">
      <summary>
            The exception thrown when an error occurs during Json serialization or deserialization.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="T:Newtonsoft.Json.JsonSerializer">
      <summary>
            Serializes and deserializes objects into and from the JSON format.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> enables you to control how objects are encoded into JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializer" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Create(Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="settings">The settings to be applied to the <see cref="T:Newtonsoft.Json.JsonSerializer" />.</param>
      <returns>A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Populate(System.IO.TextReader,System.Object)">
      <summary>
            Populates the JSON values onto the target object.
            </summary>
      <param name="reader">The <see cref="T:System.IO.TextReader" /> that contains the JSON structure to reader values from.</param>
      <param name="target">The target object to populate values onto.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Populate(Newtonsoft.Json.JsonReader,System.Object)">
      <summary>
            Populates the JSON values onto the target object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> that contains the JSON structure to reader values from.</param>
      <param name="target">The target object to populate values onto.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> that contains the JSON structure to deserialize.</param>
      <returns>The <see cref="T:System.Object" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(System.IO.TextReader,System.Type)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:System.IO.StringReader" />
            into an instance of the specified type.
            </summary>
      <param name="reader">The <see cref="T:System.IO.TextReader" /> containing the object.</param>
      <param name="objectType">The <see cref="T:System.Type" /> of object being deserialized.</param>
      <returns>The instance of <paramref name="objectType" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize``1(Newtonsoft.Json.JsonReader)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />
            into an instance of the specified type.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the object.</param>
      <typeparam name="T">The type of the object to deserialize.</typeparam>
      <returns>The instance of <typeparamref name="T" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader,System.Type)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />
            into an instance of the specified type.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the object.</param>
      <param name="objectType">The <see cref="T:System.Type" /> of object being deserialized.</param>
      <returns>The instance of <paramref name="objectType" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
      <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter" />. 
            </summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the Json structure.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object)">
      <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:Newtonsoft.Json.JsonWriter" />. 
            </summary>
      <param name="jsonWriter">The <see cref="T:Newtonsoft.Json.JsonWriter" /> used to write the Json structure.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceResolver">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Binder">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder" /> used by the serializer when resolving type names.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling">
      <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameAssemblyFormat">
      <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
      <value>The type name assembly format.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.PreserveReferencesHandling">
      <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceLoopHandling">
      <summary>
            Get or set how reference loops (e.g. a class referencing itself) is handled.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.MissingMemberHandling">
      <summary>
            Get or set how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.NullValueHandling">
      <summary>
            Get or set how null values are handled during serialization and deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DefaultValueHandling">
      <summary>
            Get or set how null default are handled during serialization and deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ObjectCreationHandling">
      <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ConstructorHandling">
      <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
      <value>The constructor handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Converters">
      <summary>
            Gets a collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.
            </summary>
      <value>Collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ContractResolver">
      <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Context">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used by the serializer when invoking serialization callback methods.
            </summary>
      <value>The context.</value>
    </member>
    <member name="E:Newtonsoft.Json.JsonSerializer.Error">
      <summary>
            Occurs when the <see cref="T:Newtonsoft.Json.JsonSerializer" /> errors during serialization and deserialization.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.Extensions">
      <summary>
            Contains the LINQ to JSON extension methods.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of tokens that contains the ancestors of every token in the source collection.
            </summary>
      <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JToken" />.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the ancestors of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of tokens that contains the descendants of every token in the source collection.
            </summary>
      <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JContainer" />.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the descendants of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Properties(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JObject})">
      <summary>
            Returns a collection of child properties of every object in the source collection.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the properties of every object in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
      <summary>
            Returns a collection of child values of every object in the source collection with the given key.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <param name="key">The token key.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every node in the source collection with the given key.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Returns a collection of child values of every object in the source collection.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
      <summary>
            Returns a collection of converted child values of every object in the source collection with the given key.
            </summary>
      <typeparam name="U">The type to convert the values to.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <param name="key">The token key.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every node in the source collection with the given key.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Returns a collection of converted child values of every object in the source collection.
            </summary>
      <typeparam name="U">The type to convert the values to.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Value``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Converts the value.
            </summary>
      <typeparam name="U">The type to convert the value to.</typeparam>
      <param name="value">A <see cref="T:Newtonsoft.Json.Linq.JToken" /> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Converts the value.
            </summary>
      <typeparam name="T">The source collection type.</typeparam>
      <typeparam name="U">The type to convert the value to.</typeparam>
      <param name="value">A <see cref="T:Newtonsoft.Json.Linq.JToken" /> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Children``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of child tokens of every array in the source collection.
            </summary>
      <typeparam name="T">The source collection type.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Children``2(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of converted child tokens of every array in the source collection.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <typeparam name="U">The type to convert the values to.</typeparam>
      <typeparam name="T">The source collection type.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Returns the input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>The input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns the input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.
            </summary>
      <typeparam name="T">The source collection type.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>The input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JContainer">
      <summary>
            Represents a token that can contain other tokens.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.AddingNew" /> event.
            </summary>
      <param name="e">The <see cref="T:System.ComponentModel.AddingNewEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.ListChanged" /> event.
            </summary>
      <param name="e">The <see cref="T:System.ComponentModel.ListChangedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged" /> event.
            </summary>
      <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Children">
      <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Values``1">
      <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
      <typeparam name="T">The type to convert the values to.</typeparam>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the child values of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Descendants">
      <summary>
            Returns a collection of the descendant tokens for this token in document order.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the descendant tokens of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Add(System.Object)">
      <summary>
            Adds the specified content as children of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="content">The content to be added.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.AddFirst(System.Object)">
      <summary>
            Adds the specified content as the first children of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="content">The content to be added.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.CreateWriter">
      <summary>
            Creates an <see cref="T:Newtonsoft.Json.JsonWriter" /> that can be used to add tokens to the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <returns>An <see cref="T:Newtonsoft.Json.JsonWriter" /> that is ready to have content written to it.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.ReplaceAll(System.Object)">
      <summary>
            Replaces the children nodes of this token with the specified content.
            </summary>
      <param name="content">The content.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.RemoveAll">
      <summary>
            Removes the child nodes from this token.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.HasValues">
      <summary>
            Gets a value indicating whether this token has childen tokens.
            </summary>
      <value>
        <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.First">
      <summary>
            Get the first child token of this token.
            </summary>
      <value>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.Last">
      <summary>
            Get the last child token of this token.
            </summary>
      <value>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.Count">
      <summary>
            Gets the count of child JSON tokens.
            </summary>
      <value>The count of child JSON tokens</value>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JContainer.ListChanged">
      <summary>
            Occurs when the list changes or an item in the list changes.
            </summary>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JContainer.AddingNew">
      <summary>
            Occurs before an item is added to the collection.
            </summary>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged">
      <summary>
            Occurs when the items list of the collection has changed, or the collection is reset.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JConstructor">
      <summary>
            Represents a JSON constructor.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(Newtonsoft.Json.Linq.JConstructor)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class from another <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name and content.
            </summary>
      <param name="name">The constructor name.</param>
      <param name="content">The contents of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name and content.
            </summary>
      <param name="name">The constructor name.</param>
      <param name="content">The contents of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name.
            </summary>
      <param name="name">The constructor name.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.Name">
      <summary>
            Gets or sets the name of this constructor.
            </summary>
      <value>The constructor name.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JEnumerable`1">
      <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
      <typeparam name="T">The type of token</typeparam>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JEnumerable`1.Empty">
      <summary>
            An empty collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> struct.
            </summary>
      <param name="enumerable">The enumerable.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JEnumerable`1.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> with the specified key.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JObject">
      <summary>
            Represents a JSON object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(Newtonsoft.Json.Linq.JObject)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class from another <see cref="T:Newtonsoft.Json.Linq.JObject" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JObject" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class with the specified content.
            </summary>
      <param name="content">The contents of the object.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class with the specified content.
            </summary>
      <param name="content">The contents of the object.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Properties">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1" /> of this object's properties.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of this object's properties.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Property(System.String)">
      <summary>
            Gets a <see cref="T:Newtonsoft.Json.Linq.JProperty" /> the specified name.
            </summary>
      <param name="name">The property name.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> with the specified name or null.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.PropertyValues">
      <summary>
            Gets an <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> of this object's property values.
            </summary>
      <returns>An <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> of this object's property values.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used to read the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Add(System.String,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Adds the specified property name.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Remove(System.String)">
      <summary>
            Removes the property with the specified name.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>true if item was successfully removed; otherwise, false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,Newtonsoft.Json.Linq.JToken@)">
      <summary>
            Tries the get value.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="value">The value.</param>
      <returns>true if a value was successfully retrieved; otherwise, false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanged(System.String)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanged" /> event with the provided arguments.
            </summary>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanging(System.String)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanging" /> event with the provided arguments.
            </summary>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
      <param name="parameter">The expression tree representation of the runtime value.</param>
      <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.String)">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            </summary>
      <value>
      </value>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanging">
      <summary>
            Occurs when a property value is changing.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JArray">
      <summary>
            Represents a JSON array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(Newtonsoft.Json.Linq.JArray)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class from another <see cref="T:Newtonsoft.Json.Linq.JArray" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JArray" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class with the specified content.
            </summary>
      <param name="content">The contents of the array.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class with the specified content.
            </summary>
      <param name="content">The contents of the array.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used to read the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.IndexOf(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Insert(System.Int32,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.RemoveAt(System.Int32)">
      <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Add(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Clear">
      <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Contains(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Remove(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> at the specified index.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.#ctor(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenReader" /> class.
            </summary>
      <param name="token">The token to read from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor(Newtonsoft.Json.Linq.JContainer)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenWriter" /> class writing to the given <see cref="T:Newtonsoft.Json.Linq.JContainer" />.
            </summary>
      <param name="container">The container being written to.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenWriter" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the end.
            </summary>
      <param name="token">The token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.TimeSpan)">
      <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Guid)">
      <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Uri)">
      <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JTokenWriter.Token">
      <summary>
            Gets the token being writen.
            </summary>
      <value>The token being writen.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JProperty">
      <summary>
            Represents a JSON property.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(Newtonsoft.Json.Linq.JProperty)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class from another <see cref="T:Newtonsoft.Json.Linq.JProperty" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class.
            </summary>
      <param name="name">The property name.</param>
      <param name="content">The property content.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class.
            </summary>
      <param name="name">The property name.</param>
      <param name="content">The property content.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JProperty" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JProperty" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.Name">
      <summary>
            Gets the property name.
            </summary>
      <value>The property name.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.Value">
      <summary>
            Gets or sets the property value.
            </summary>
      <value>The property value.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenType">
      <summary>
            Specifies the type of token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.None">
      <summary>
            No token type has been set.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Object">
      <summary>
            A JSON object.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Array">
      <summary>
            A JSON array.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Constructor">
      <summary>
            A JSON constructor.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Property">
      <summary>
            A JSON object property.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Comment">
      <summary>
            A comment.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Integer">
      <summary>
            An integer value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Float">
      <summary>
            A float value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.String">
      <summary>
            A string value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Boolean">
      <summary>
            A boolean value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Null">
      <summary>
            A null value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Undefined">
      <summary>
            An undefined value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Date">
      <summary>
            A date value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Raw">
      <summary>
            A raw JSON value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Bytes">
      <summary>
            A collection of bytes value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Guid">
      <summary>
            A Guid value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Uri">
      <summary>
            A Uri value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.TimeSpan">
      <summary>
            A TimeSpan value.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Schema.Extensions">
      <summary>
            Contains the JSON schema extension methods.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
      <summary>
            Determines whether the <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,System.Collections.Generic.IList{System.String}@)">
      <summary>
            Determines whether the <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
      <param name="errorMessages">When this method returns, contains any error messages generated while validating. </param>
      <returns>
        <c>true</c> if the specified <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
      <summary>
            Validates the specified <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,Newtonsoft.Json.Schema.ValidationEventHandler)">
      <summary>
            Validates the specified <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
      <param name="validationEventHandler">The validation event handler.</param>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaException">
      <summary>
            Returns detailed information about the schema exception.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LineNumber">
      <summary>
            Gets the line number indicating where the error occurred.
            </summary>
      <value>The line number indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LinePosition">
      <summary>
            Gets the line position indicating where the error occurred.
            </summary>
      <value>The line position indicating where the error occurred.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaResolver">
      <summary>
            Resolves <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from an id.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(System.String)">
      <summary>
            Gets a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> for the specified id.
            </summary>
      <param name="id">The id.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> for the specified id.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaResolver.LoadedSchemas">
      <summary>
            Gets or sets the loaded schemas.
            </summary>
      <value>The loaded schemas.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling">
      <summary>
            Specifies undefined schema Id handling options for the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaGenerator" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.None">
      <summary>
            Do not infer a schema Id.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseTypeName">
      <summary>
            Use the .NET type name as the schema Id.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseAssemblyQualifiedName">
      <summary>
            Use the assembly qualified .NET type name as the schema Id.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Schema.ValidationEventArgs">
      <summary>
            Returns detailed information related to the <see cref="T:Newtonsoft.Json.Schema.ValidationEventHandler" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Exception">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> associated with the validation event.
            </summary>
      <value>The JsonSchemaException associated with the validation event.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Message">
      <summary>
            Gets the text description corresponding to the validation event.
            </summary>
      <value>The text description.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.ValidationEventHandler">
      <summary>
            Represents the callback method that will handle JSON schema validation events and the <see cref="T:Newtonsoft.Json.Schema.ValidationEventArgs" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IContractResolver">
      <summary>
            Used by <see cref="T:Newtonsoft.Json.JsonSerializer" /> to resolves a <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for a given <see cref="T:System.Type" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IContractResolver.ResolveContract(System.Type)">
      <summary>
            Resolves the contract for a given type.
            </summary>
      <param name="type">The type to resolve a contract for.</param>
      <returns>The contract for a given type.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DefaultContractResolver">
      <summary>
            Used by <see cref="T:Newtonsoft.Json.JsonSerializer" /> to resolves a <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for a given <see cref="T:System.Type" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> class.
            </summary>
      <param name="shareCache">
            If set to <c>true</c> the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> will use a cached shared with other resolvers of the same type.
            Sharing the cache will significantly performance because expensive reflection will only happen once but could cause unexpected
            behavior if different instances of the resolver are suppose to produce different results. When set to false it is highly
            recommended to reuse <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> instances with the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)">
      <summary>
            Resolves the contract for a given type.
            </summary>
      <param name="type">The type to resolve a contract for.</param>
      <returns>The contract for a given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)">
      <summary>
            Gets the serializable members for the type.
            </summary>
      <param name="objectType">The type to get serializable members for.</param>
      <returns>The serializable members for the type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo,Newtonsoft.Json.Serialization.JsonPropertyCollection)">
      <summary>
            Creates the constructor parameters.
            </summary>
      <param name="constructor">The constructor to create properties for.</param>
      <param name="memberProperties">The type's member properties.</param>
      <returns>Properties for the given <see cref="T:System.Reflection.ConstructorInfo" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty,System.Reflection.ParameterInfo)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.ParameterInfo" />.
            </summary>
      <param name="matchingMemberProperty">The matching member property.</param>
      <param name="parameterInfo">The constructor parameter.</param>
      <returns>A created <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.ParameterInfo" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)">
      <summary>
            Resolves the default <see cref="T:Newtonsoft.Json.JsonConverter" /> for the contract.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateISerializableContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDynamicContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)">
      <summary>
            Determines which contract type is created for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
      <summary>
            Creates properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract" />.
            </summary>
      <param name="type">The type to create properties for.</param>
            /// <param name="memberSerialization">The member serialization mode for the type.</param><returns>Properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract" />.</returns></member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
      <summary>
            Creates the <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> used by the serializer to get and set values from a member.
            </summary>
      <param name="member">The member.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> used by the serializer to get and set values from a member.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.MemberInfo" />.
            </summary>
      <param name="memberSerialization">The member's parent <see cref="T:Newtonsoft.Json.MemberSerialization" />.</param>
      <param name="member">The member to create a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for.</param>
      <returns>A created <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.MemberInfo" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)">
      <summary>
            Resolves the name of the property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>Name of the property.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DynamicCodeGeneration">
      <summary>
            Gets a value indicating whether members are being get and set using dynamic code generation.
            This value is determined by the runtime permissions available.
            </summary>
      <value>
        <c>true</c> if using dynamic code generation; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultMembersSearchFlags">
      <summary>
            Gets or sets the default members search flags.
            </summary>
      <value>The default members search flags.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.SerializeCompilerGeneratedMembers">
      <summary>
            Gets or sets a value indicating whether compiler generated members should be serialized.
            </summary>
      <value>
        <c>true</c> if serialized compiler generated members; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver">
      <summary>
            Resolves member mappings for a type, camel casing property names.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.ResolvePropertyName(System.String)">
      <summary>
            Resolves the name of the property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>The property name camel cased.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DefaultSerializationBinder">
      <summary>
            The default serialization binder used when resolving and loading classes from type names.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(System.String,System.String)">
      <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
      <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object.</param>
      <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object.</param>
      <returns>
            The type of the object the formatter creates a new instance of.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToName(System.Type,System.String@,System.String@)">
      <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
      <param name="serializedType">The type of the object the formatter creates a new instance of.</param>
      <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object. </param>
      <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object. </param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ErrorContext">
      <summary>
            Provides information surrounding an error.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Error">
      <summary>
            Gets or sets the error.
            </summary>
      <value>The error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.OriginalObject">
      <summary>
            Gets the original object that caused the error.
            </summary>
      <value>The original object that caused the error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Member">
      <summary>
            Gets the member that caused the error.
            </summary>
      <value>The member that caused the error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Handled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.ErrorContext" /> is handled.
            </summary>
      <value>
        <c>true</c> if handled; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonArrayContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonArrayContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonDictionaryContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonDictionaryContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.PropertyNameResolver">
      <summary>
            Gets or sets the property name resolver.
            </summary>
      <value>The property name resolver.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonProperty">
      <summary>
            Maps a JSON property to a .NET member or constructor parameter.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonProperty.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyName">
      <summary>
            Gets or sets the name of the property.
            </summary>
      <value>The name of the property.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DeclaringType">
      <summary>
            Gets or sets the type that declared this property.
            </summary>
      <value>The type that declared this property.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Order">
      <summary>
            Gets or sets the order of serialization and deserialization of a member.
            </summary>
      <value>The numeric order of serialization or deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.UnderlyingName">
      <summary>
            Gets or sets the name of the underlying member or parameter.
            </summary>
      <value>The name of the underlying member or parameter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ValueProvider">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> that will get and set the <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> during serialization.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> that will get and set the <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> during serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyType">
      <summary>
            Gets or sets the type of the property.
            </summary>
      <value>The type of the property.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Converter">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.JsonConverter" /> for the property.
            If set this converter takes presidence over the contract converter for the property type.
            </summary>
      <value>The converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.MemberConverter">
      <summary>
            Gets the member converter.
            </summary>
      <value>The member converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Ignored">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is ignored.
            </summary>
      <value>
        <c>true</c> if ignored; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Readable">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is readable.
            </summary>
      <value>
        <c>true</c> if readable; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Writable">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is writable.
            </summary>
      <value>
        <c>true</c> if writable; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValue">
      <summary>
            Gets the default value.
            </summary>
      <value>The default value.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Required">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is required.
            </summary>
      <value>A value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is required.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.IsReference">
      <summary>
            Gets a value indicating whether this property preserves object references.
            </summary>
      <value>
        <c>true</c> if this instance is reference; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.NullValueHandling">
      <summary>
            Gets the property null value handling.
            </summary>
      <value>The null value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValueHandling">
      <summary>
            Gets the property default value handling.
            </summary>
      <value>The default value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ReferenceLoopHandling">
      <summary>
            Gets the property reference loop handling.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ObjectCreationHandling">
      <summary>
            Gets the property object creation handling.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.TypeNameHandling">
      <summary>
            Gets or sets the type name handling.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ShouldSerialize">
      <summary>
            Gets or sets a predicate used to determine whether the property should be serialize.
            </summary>
      <value>A predicate used to determine whether the property should be serialize.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.GetIsSpecified">
      <summary>
            Gets or sets a predicate used to determine whether the property should be serialized.
            </summary>
      <value>A predicate used to determine whether the property should be serialized.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.SetIsSpecified">
      <summary>
            Gets or sets an action used to set whether the property has been deserialized.
            </summary>
      <value>An action used to set whether the property has been deserialized.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonPropertyCollection">
      <summary>
            A collection of <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> objects.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonPropertyCollection" /> class.
            </summary>
      <param name="type">The type.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetKeyForItem(Newtonsoft.Json.Serialization.JsonProperty)">
      <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
      <param name="item">The element from which to extract the key.</param>
      <returns>The key for the specified element.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.AddProperty(Newtonsoft.Json.Serialization.JsonProperty)">
      <summary>
            Adds a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> object.
            </summary>
      <param name="property">The property to add to the collection.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetClosestMatchProperty(System.String)">
      <summary>
            Gets the closest matching <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> object.
            First attempts to get an exact case match of propertyName and then
            a case insensitive match.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>A matching property if found.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetProperty(System.String,System.StringComparison)">
      <summary>
            Gets a property by property name.
            </summary>
      <param name="propertyName">The name of the property to get.</param>
      <param name="comparisonType">Type property name string comparison.</param>
      <returns>A matching property if found.</returns>
    </member>
    <member name="T:Newtonsoft.Json.MissingMemberHandling">
      <summary>
            Specifies missing member handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MissingMemberHandling.Ignore">
      <summary>
            Ignore a missing member and do not attempt to deserialize it.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MissingMemberHandling.Error">
      <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException" /> when a missing member is encountered during deserialization.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.NullValueHandling">
      <summary>
            Specifies null value handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.NullValueHandling.Include">
      <summary>
            Include null values when serializing and deserializing objects.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.NullValueHandling.Ignore">
      <summary>
            Ignore null values when serializing and deserializing objects.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.ReferenceLoopHandling">
      <summary>
            Specifies reference loop handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Error">
      <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException" /> when a loop is encountered.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Ignore">
      <summary>
            Ignore loop references and do not serialize.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Serialize">
      <summary>
            Serialize loop references.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchema">
      <summary>
            An in-memory representation of a JSON Schema.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader)">
      <summary>
            Reads a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the JSON Schema to read.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> object representing the JSON Schema.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Reads a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the JSON Schema to read.</param>
      <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> to use when resolving schema references.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> object representing the JSON Schema.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from a string that contains schema JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Parses the specified json.
            </summary>
      <param name="json">The json.</param>
      <param name="resolver">The resolver.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter)">
      <summary>
            Writes this schema to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Writes this schema to a <see cref="T:Newtonsoft.Json.JsonWriter" /> using the specified <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="resolver">The resolver used.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Id">
      <summary>
            Gets or sets the id.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Title">
      <summary>
            Gets or sets the title.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Required">
      <summary>
            Gets or sets whether the object is required.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.ReadOnly">
      <summary>
            Gets or sets whether the object is read only.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Hidden">
      <summary>
            Gets or sets whether the object is visible to users.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Transient">
      <summary>
            Gets or sets whether the object is transient.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Description">
      <summary>
            Gets or sets the description of the object.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Type">
      <summary>
            Gets or sets the types of values allowed by the object.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Pattern">
      <summary>
            Gets or sets the pattern.
            </summary>
      <value>The pattern.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumLength">
      <summary>
            Gets or sets the minimum length.
            </summary>
      <value>The minimum length.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumLength">
      <summary>
            Gets or sets the maximum length.
            </summary>
      <value>The maximum length.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.DivisibleBy">
      <summary>
            Gets or sets a number that the value should be divisble by.
            </summary>
      <value>A number that the value should be divisble by.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Minimum">
      <summary>
            Gets or sets the minimum.
            </summary>
      <value>The minimum.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Maximum">
      <summary>
            Gets or sets the maximum.
            </summary>
      <value>The maximum.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMinimum">
      <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "minimum" attribute.
            </summary>
      <value>A flag indicating whether the value can not equal the number defined by the "minimum" attribute.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMaximum">
      <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "maximum" attribute.
            </summary>
      <value>A flag indicating whether the value can not equal the number defined by the "maximum" attribute.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumItems">
      <summary>
            Gets or sets the minimum number of items.
            </summary>
      <value>The minimum number of items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumItems">
      <summary>
            Gets or sets the maximum number of items.
            </summary>
      <value>The maximum number of items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Items">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of items.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Properties">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of properties.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AdditionalProperties">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional properties.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.PatternProperties">
      <summary>
            Gets or sets the pattern properties.
            </summary>
      <value>The pattern properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalProperties">
      <summary>
            Gets or sets a value indicating whether additional properties are allowed.
            </summary>
      <value>
        <c>true</c> if additional properties are allowed; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Requires">
      <summary>
            Gets or sets the required property if this property is present.
            </summary>
      <value>The required property if this property is present.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Identity">
      <summary>
            Gets or sets the identity.
            </summary>
      <value>The identity.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Enum">
      <summary>
            Gets or sets the a collection of valid enum values allowed.
            </summary>
      <value>A collection of valid enum values allowed.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Options">
      <summary>
            Gets or sets a collection of options.
            </summary>
      <value>A collection of options.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Disallow">
      <summary>
            Gets or sets disallowed types.
            </summary>
      <value>The disallow types.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Default">
      <summary>
            Gets or sets the default value.
            </summary>
      <value>The default value.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Extends">
      <summary>
            Gets or sets the extend <see cref="T:Newtonsoft.Json.Schema.JsonSchema" />.
            </summary>
      <value>The extended <see cref="T:Newtonsoft.Json.Schema.JsonSchema" />.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Format">
      <summary>
            Gets or sets the format.
            </summary>
      <value>The format.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaGenerator">
      <summary>
            Generates a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from a specified <see cref="T:System.Type" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> used to resolve schema references.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,System.Boolean)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> will be nullable.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver,System.Boolean)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> used to resolve schema references.</param>
      <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> will be nullable.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.UndefinedSchemaIdHandling">
      <summary>
            Gets or sets how undefined schemas are handled by the serializer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.ContractResolver">
      <summary>
            Gets or sets the contract resolver.
            </summary>
      <value>The contract resolver.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaType">
      <summary>
            The value types allowed by the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.None">
      <summary>
            No type specified.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.String">
      <summary>
            String type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Float">
      <summary>
            Float type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Integer">
      <summary>
            Integer type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Boolean">
      <summary>
            Boolean type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Object">
      <summary>
            Object type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Array">
      <summary>
            Array type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Null">
      <summary>
            Null type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Any">
      <summary>
            Any type.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonObjectContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonObjectContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.MemberSerialization">
      <summary>
            Gets or sets the object member serialization.
            </summary>
      <value>The member object serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.Properties">
      <summary>
            Gets the object's properties.
            </summary>
      <value>The object's properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ConstructorParameters">
      <summary>
            Gets the constructor parameters required for any non-default constructor
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideConstructor">
      <summary>
            Gets or sets the override constructor used to create the object.
            This is set when a constructor is marked up using the
            JsonConstructor attribute.
            </summary>
      <value>The override constructor.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ParametrizedConstructor">
      <summary>
            Gets or sets the parametrized constructor used to create the object.
            </summary>
      <value>The parametrized constructor.</value>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.SerializeDynamic(Newtonsoft.Json.JsonWriter,System.Dynamic.IDynamicMetaObjectProvider,Newtonsoft.Json.Serialization.JsonDynamicContract)">
      <summary>
            Serializes the dynamic.
            </summary>
      <param name="writer">The writer.</param>
      <param name="value">The value.</param>
      <param name="contract">The contract.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonStringContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonStringContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ReflectionValueProvider">
      <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using reflection.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.#ctor(System.Reflection.MemberInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ReflectionValueProvider" /> class.
            </summary>
      <param name="memberInfo">The member info.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.OnErrorAttribute">
      <summary>
            When applied to a method, specifies that the method is called when an error occurs serializing an object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodWithResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback,Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
      <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic that returns a result
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodReturnLast(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
      <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodNoResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
      <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.GetRestrictions">
      <summary>
            Returns a Restrictions object which includes our current restrictions merged
            with a restriction limiting our type
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ObjectConstructor`1">
      <summary>
            Represents a method that constructs an object.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.TypeNameHandling">
      <summary>
            Specifies type name handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.None">
      <summary>
            Do not include the .NET type name when serializing types.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.Objects">
      <summary>
            Include the .NET type name when serializing into a JSON object structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.Arrays">
      <summary>
            Include the .NET type name when serializing into a JSON array structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.Auto">
      <summary>
            Include the .NET type name when the type of the object being serialized is not the same as its declared type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.All">
      <summary>
            Always include the .NET type name when serializing.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.Convert(System.Object,System.Globalization.CultureInfo,System.Type)">
      <summary>
            Converts the value to the specified type.
            </summary>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <param name="targetType">The type to convert the value to.</param>
      <returns>The converted type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.TryConvert(System.Object,System.Globalization.CultureInfo,System.Type,System.Object@)">
      <summary>
            Converts the value to the specified type.
            </summary>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <param name="targetType">The type to convert the value to.</param>
      <param name="convertedValue">The converted value if the conversion was successful or the default value of <c>T</c> if it failed.</param>
      <returns>
        <c>true</c> if <c>initialValue</c> was converted successfully; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(System.Object,System.Globalization.CultureInfo,System.Type)">
      <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <param name="targetType">The type to convert or cast the value to.</param>
      <returns>
            The converted type. If conversion was unsuccessful, the initial value
            is returned if assignable to the target type.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1">
      <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1(System.Type)">
      <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
      <param name="enumType">The enum type to get names and values for.</param>
      <returns>
      </returns>
    </member>
    <member name="T:Newtonsoft.Json.JsonToken">
      <summary>
            Specifies the type of Json token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.None">
      <summary>
            This is returned by the <see cref="T:Newtonsoft.Json.JsonReader" /> if a <see cref="M:Newtonsoft.Json.JsonReader.Read" /> method has not been called. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.StartObject">
      <summary>
            An object start token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.StartArray">
      <summary>
            An array start token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.StartConstructor">
      <summary>
            A constructor start token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.PropertyName">
      <summary>
            An object property name.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Comment">
      <summary>
            A comment.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Raw">
      <summary>
            Raw JSON.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Integer">
      <summary>
            An integer.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Float">
      <summary>
            A float.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.String">
      <summary>
            A string.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Boolean">
      <summary>
            A boolean.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Null">
      <summary>
            A null token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Undefined">
      <summary>
            An undefined token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.EndObject">
      <summary>
            An object end token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.EndArray">
      <summary>
            An array end token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.EndConstructor">
      <summary>
            A constructor end token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Date">
      <summary>
            A Date.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Bytes">
      <summary>
            Byte data.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.WriteState">
      <summary>
            Specifies the state of the <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Error">
      <summary>
            An exception has been thrown, which has left the <see cref="T:Newtonsoft.Json.JsonWriter" /> in an invalid state.
            You may call the <see cref="M:Newtonsoft.Json.JsonWriter.Close" /> method to put the <see cref="T:Newtonsoft.Json.JsonWriter" /> in the <c>Closed</c> state.
            Any other <see cref="T:Newtonsoft.Json.JsonWriter" /> method calls results in an <see cref="T:System.InvalidOperationException" /> being thrown. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Closed">
      <summary>
            The <see cref="M:Newtonsoft.Json.JsonWriter.Close" /> method has been called. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Object">
      <summary>
            An object is being written. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Array">
      <summary>
            A array is being written.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Constructor">
      <summary>
            A constructor is being written.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Property">
      <summary>
            A property is being written.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Start">
      <summary>
            A write method has not been called.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Formatting">
      <summary>
            Specifies formatting options for the <see cref="T:Newtonsoft.Json.JsonTextWriter" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Formatting.None">
      <summary>
            No special formatting is applied. This is the default.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Formatting.Indented">
      <summary>
            Causes child objects to be indented according to the <see cref="P:Newtonsoft.Json.JsonTextWriter.Indentation" /> and <see cref="P:Newtonsoft.Json.JsonTextWriter.IndentChar" /> settings.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Utilities.StringBuffer">
      <summary>
            Builds a string. Unlike StringBuilder this class lets you reuse it's internal buffer.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
      <summary>
            Determines whether the collection is null or empty.
            </summary>
      <param name="collection">The collection.</param>
      <returns>
        <c>true</c> if the collection is null or empty; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Adds the elements of the specified collection to the specified generic IList.
            </summary>
      <param name="initial">The list to add to.</param>
      <param name="collection">The collection of elements to add.</param>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Returns the index of the first occurrence in a sequence by using a specified IEqualityComparer.
            </summary>
      <typeparam name="TSource">The type of the elements of source.</typeparam>
      <param name="list">A sequence in which to locate a value.</param>
      <param name="value">The object to locate in the sequence</param>
      <param name="comparer">An equality comparer to compare values.</param>
      <returns>The zero-based index of the first occurrence of value within the entire sequence, if found; otherwise, –1.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)">
      <summary>
            Gets the type of the typed collection's items.
            </summary>
      <param name="type">The type.</param>
      <returns>The type of the typed collection's items.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
      <summary>
            Gets the member's underlying type.
            </summary>
      <param name="member">The member.</param>
      <returns>The underlying type of the member.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
      <summary>
            Determines whether the member is an indexed property.
            </summary>
      <param name="member">The member.</param>
      <returns>
        <c>true</c> if the member is an indexed property; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
      <summary>
            Determines whether the property is an indexed property.
            </summary>
      <param name="property">The property.</param>
      <returns>
        <c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
      <summary>
            Gets the member's value on the object.
            </summary>
      <param name="member">The member.</param>
      <param name="target">The target object.</param>
      <returns>The member's value on the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
      <summary>
            Sets the member's value on the target object.
            </summary>
      <param name="member">The member.</param>
      <param name="target">The target.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo,System.Boolean)">
      <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
      <param name="member">The MemberInfo to determine whether can be read.</param>
            /// <param name="nonPublic">if set to <c>true</c> then allow the member to be gotten non-publicly.</param><returns><c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns></member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo,System.Boolean,System.Boolean)">
      <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
      <param name="member">The MemberInfo to determine whether can be set.</param>
      <param name="nonPublic">if set to <c>true</c> then allow the member to be set non-publicly.</param>
      <param name="canSetReadOnly">if set to <c>true</c> then allow the member to be set if read-only.</param>
      <returns>
        <c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.StringUtils.IsWhiteSpace(System.String)">
      <summary>
            Determines whether the string is all white space. Empty string will return false.
            </summary>
      <param name="s">The string to test whether it is all white space.</param>
      <returns>
        <c>true</c> if the string is all white space; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.StringUtils.NullEmptyString(System.String)">
      <summary>
            Nulls an empty string.
            </summary>
      <param name="s">The string.</param>
      <returns>Null if the string was null, otherwise the string unchanged.</returns>
    </member>
  </members>
</doc>