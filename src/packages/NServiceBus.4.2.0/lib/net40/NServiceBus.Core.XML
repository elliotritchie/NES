<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NServiceBus.Core</name>
    </assembly>
    <members>
        <member name="T:NServiceBus.AllAssemblies">
            <summary>
            Class for specifying which assemblies not to load.
            </summary>
        </member>
        <member name="T:NServiceBus.IExcludesBuilder">
            <summary>
            Supporting the fluent interface in <seealso cref="T:NServiceBus.AllAssemblies"/>
            </summary>
        </member>
        <member name="M:NServiceBus.IExcludesBuilder.And(System.String)">
            <summary>
            Indicate that the given assembly expression should also be excluded.
            You can call this method multiple times.
            </summary>
        </member>
        <member name="T:NServiceBus.IIncludesBuilder">
            <summary>
            Supporting the fluent interface in <seealso cref="T:NServiceBus.AllAssemblies"/>
            </summary>
        </member>
        <member name="M:NServiceBus.IIncludesBuilder.And(System.String)">
            <summary>
            Indicate that assemblies matching the given expression should also be included.
            You can call this method multiple times.
            </summary>
        </member>
        <member name="M:NServiceBus.IIncludesBuilder.Except(System.String)">
            <summary>
            Indicate that assemblies matching the given expression should be excluded.
            Use the 'And' method to indicate other assemblies to be skipped.
            </summary>
        </member>
        <member name="M:NServiceBus.AllAssemblies.Except(System.String)">
            <summary>
            Indicate that assemblies matching the given expression are not to be used.
            Use the 'And' method to indicate other assemblies to be skipped.
            </summary>
        </member>
        <member name="M:NServiceBus.AllAssemblies.Matching(System.String)">
            <summary>
            Indicate that assemblies matching the given expression are to be used.
            Use the 'And' method to indicate other assemblies to be included.
            </summary>
        </member>
        <member name="M:NServiceBus.AllAssemblies.GetEnumerator">
            <summary>
            Returns an enumerator for looping over the assemblies to be loaded.
            </summary>
        </member>
        <member name="M:NServiceBus.AllAssemblies.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Return a non-generic enumerator.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.Feature">
            <summary>
            Used to control the various features supported by the framework.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Feature.Initialize">
            <summary>
            Called when the feature should perform its initialization. This call will only happen if the feature is enabled.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Feature.ShouldBeEnabled">
            <summary>
            Returns true if the feature should be enable. This method wont be called if the feature is explicitly disabled
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Feature.Enable``1">
            <summary>
            Enables the give feature
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Feature.Enable(System.Type)">
            <summary>
            Enables the give feature
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Feature.EnableByDefault``1">
            <summary>
            Enables the give feature unless explicitly disabled
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Feature.EnableByDefault(System.Type)">
            <summary>
            Enables the give feature unless explicitly disabled
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Feature.Disable``1">
            <summary>
            Turns the given feature off
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Feature.Disable(System.Type)">
            <summary>
            Turns the given feature off
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Feature.DisableByDefault(System.Type)">
            <summary>
            Disabled the give feature unless explicitly enabled
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Feature.IsEnabled``1">
            <summary>
            Returns true if the given feature is enabled
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Feature.IsEnabled(System.Type)">
            <summary>
            Returns true if the given feature is enabled
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Feature.ByCategory(NServiceBus.Features.FeatureCategory)">
            <summary>
            Gets all features for the given category
            </summary>
        </member>
        <member name="P:NServiceBus.Features.Feature.IsEnabledByDefault">
            <summary>
            Return <c>true</c> if this is a default <see cref="T:NServiceBus.Features.Feature"/> that needs to be turned on automatically.
            </summary>
        </member>
        <member name="P:NServiceBus.Features.Feature.Name">
            <summary>
            Feature name.
            </summary>
        </member>
        <member name="P:NServiceBus.Features.Feature.Enabled">
            <summary>
            True if this specific feature is enabled
            </summary>
        </member>
        <member name="P:NServiceBus.Features.Feature.Category">
            <summary>
            Returns the category for this feature if any
            </summary>
        </member>
        <member name="T:NServiceBus.Audit.MessageAuditer">
            <summary>
            This class is used to forward messages to the configured audit queue, reverting the body to 
            its original state if needed etc before forwarding the message to the audit queue. It uses
            <see cref="T:NServiceBus.Transports.ISendMessages"/> which will be injected by the bus.
            </summary>
        </member>
        <member name="M:NServiceBus.Audit.MessageAuditer.ForwardMessageToAuditQueue(NServiceBus.TransportMessage)">
            <summary>
            If the auditing feature is turned on, forward the given transport to the configured audit queue.
            </summary>
        </member>
        <member name="P:NServiceBus.Audit.MessageAuditer.MessageSender">
            <summary>
            This will be used to forward messages to the specified audit queue.
            </summary>
        </member>
        <member name="P:NServiceBus.Audit.MessageAuditer.TimeToBeReceivedOnForwardedMessages">
            <summary>
            The TTR to set on forwarded messages. 
            </summary>
        </member>
        <member name="P:NServiceBus.Audit.MessageAuditer.AuditQueue">
            <summary>
            <see cref="T:NServiceBus.Address"/> where the messages needs to be forwarded when the auditing feature is turned on
            </summary>
        </member>
        <member name="T:NServiceBus.Settings.ISetDefaultSettings">
            <summary>
            Implement this interface to register default settings.
            </summary>
        </member>
        <member name="M:NServiceBus.AutomaticSubscriptions.Config.AutoSubscribeSettings.DoNotAutoSubscribeSagas">
            <summary>
            Turns off auto subscriptions for sagas. Sagas where not auto subscribed by default before v4
            </summary>
        </member>
        <member name="M:NServiceBus.AutomaticSubscriptions.Config.AutoSubscribeSettings.DoNotRequireExplicitRouting">
            <summary>
            Allows to endpoint to subscribe to messages owned by the local endpoint
            </summary>
        </member>
        <member name="M:NServiceBus.AutomaticSubscriptions.Config.AutoSubscribeSettings.AutoSubscribePlainMessages">
            <summary>
            Turns on auto-subscriptions for messages not marked as commands. This was the default before v4
            </summary>
        </member>
        <member name="M:NServiceBus.AutomaticSubscriptions.Config.AutoSubscribeSettings.CustomAutoSubscriptionStrategy``1">
            <summary>
            Registers a custom auto-subscription strategy
            </summary>
        </member>
        <member name="T:NServiceBus.Configure">
            <summary>
            Central configuration entry point.
            </summary>
        </member>
        <member name="M:NServiceBus.Configure.WithHasBeenCalled">
            <summary>
            True if any of the <see cref="M:NServiceBus.Configure.With"/> has been called.
            </summary>
        </member>
        <member name="M:NServiceBus.Configure.BuilderIsConfigured">
            <summary>
            True if a builder has been defined.
            </summary>
        </member>
        <member name="M:NServiceBus.Configure.CustomConfigurationSource(NServiceBus.Config.ConfigurationSource.IConfigurationSource)">
            <summary>
            Sets the current configuration source.
            </summary>
        </member>
        <member name="M:NServiceBus.Configure.#ctor">
            <summary>
            Protected constructor to enable creation only via the With method.
            </summary>
        </member>
        <member name="M:NServiceBus.Configure.ScaleOut(System.Action{NServiceBus.Settings.ScaleOutSettings})">
            <summary>
            Allows the user to control how the current endpoint behaves when scaled out.
            </summary>
        </member>
        <member name="M:NServiceBus.Configure.With">
            <summary>
            Creates a new configuration object scanning assemblies in the regular runtime directory.
            </summary>
        </member>
        <member name="M:NServiceBus.Configure.WithWeb">
            <summary>
            Configures NServiceBus to scan for assemblies in the relevant web directory instead of regular runtime directory.
            </summary>
        </member>
        <member name="M:NServiceBus.Configure.With(System.String)">
            <summary>
            Configure to scan for assemblies in the given directory rather than the regular runtime directory.
            </summary>
        </member>
        <member name="M:NServiceBus.Configure.With(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Configure to use the types found in the given assemblies.
            </summary>
        </member>
        <member name="M:NServiceBus.Configure.With(System.Reflection.Assembly[])">
            <summary>
            Configure to scan the given assemblies only.
            </summary>
        </member>
        <member name="M:NServiceBus.Configure.With(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Configure to scan the given types.
            </summary>
        </member>
        <member name="M:NServiceBus.Configure.RunCustomAction(System.Action)">
            <summary>
            Run a custom action at configuration time - useful for performing additional configuration not exposed by the fluent interface.
            </summary>
        </member>
        <member name="M:NServiceBus.Configure.CreateBus">
            <summary>
            Provides an instance to a startable bus.
            </summary>
        </member>
        <member name="M:NServiceBus.Configure.Initialize">
            <summary>
            Finalizes the configuration by invoking all initialisers.
            </summary>
        </member>
        <member name="M:NServiceBus.Configure.ForAllTypes``1(System.Action{System.Type})">
            <summary>
            Applies the given action to all the scanned types that can be assigned to <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Configure.GetConfigSection``1">
            <summary>
            Returns the requested config section using the current configuration source.
            </summary>
        </member>
        <member name="M:NServiceBus.Configure.GetAssembliesInDirectory(System.String,System.String[])">
            <summary>
            Load and return all assemblies in the given directory except the given ones to exclude.
            </summary>
            <param name="path">Path to scan</param>
            <param name="assembliesToSkip">The exclude must either be the full assembly name or a prefix-pattern.</param>
        </member>
        <member name="M:NServiceBus.Configure.Component``1(NServiceBus.DependencyLifecycle)">
            <summary>
            Configures the given type with the given <see cref="T:NServiceBus.DependencyLifecycle"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Configure.Component(System.Type,NServiceBus.DependencyLifecycle)">
            <summary>
            Configures the given type with the given lifecycle <see cref="T:NServiceBus.DependencyLifecycle"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Configure.Component``1(System.Func{``0},NServiceBus.DependencyLifecycle)">
            <summary>
            Configures the given type with the given <see cref="T:NServiceBus.DependencyLifecycle"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Configure.Component``1(System.Func{NServiceBus.ObjectBuilder.IBuilder,``0},NServiceBus.DependencyLifecycle)">
            <summary>
            Configures the given type with the given <see cref="T:NServiceBus.DependencyLifecycle"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Configure.HasComponent``1">
            <summary>
            Returns true if a component of type <typeparamref name="T"/> exists in the container.
            </summary>
        </member>
        <member name="M:NServiceBus.Configure.HasComponent(System.Type)">
            <summary>
            Returns true if a component of type <paramref name="componentType"/> exists in the container.
            </summary>
        </member>
        <member name="F:NServiceBus.Configure.GetEndpointNameAction">
            <summary>
            The function used to get the name of this endpoint.
            </summary>
        </member>
        <member name="F:NServiceBus.Configure.DefineEndpointVersionRetriever">
            <summary>
            The function used to get the version of this endpoint.
            </summary>
        </member>
        <member name="F:NServiceBus.Configure.LoadAssembly">
            <summary>
            The function used to get the name of this endpoint.
            </summary>
        </member>
        <member name="P:NServiceBus.Configure.Instance">
            <summary>
            Provides static access to the configuration object.
            </summary>
        </member>
        <member name="E:NServiceBus.Configure.ConfigurationComplete">
            <summary>
            Event raised when configuration is complete.
            </summary>
        </member>
        <member name="P:NServiceBus.Configure.Builder">
            <summary>
            Gets/sets the builder.
            </summary>
            <remarks>
            Setting the builder should only be done by NServiceBus framework code.
            </remarks>
        </member>
        <member name="P:NServiceBus.Configure.ConfigurationSource">
            <summary>
            Gets/sets the configuration source to be used.
            </summary>
        </member>
        <member name="P:NServiceBus.Configure.Configurer">
            <summary>
            Gets/sets the object used to configure components.
            This object should eventually reference the same container as the Builder.
            </summary>
        </member>
        <member name="P:NServiceBus.Configure.SendOnlyMode">
            <summary>
            True if this endpoint is operating in send only mode.
            </summary>
        </member>
        <member name="P:NServiceBus.Configure.TypesToScan">
            <summary>
            Returns types in assemblies found in the current directory.
            </summary>
        </member>
        <member name="P:NServiceBus.Configure.EndpointName">
            <summary>
            The name of this endpoint.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.AuditConfig">
            <summary>
            Config section for the auditing feature
            </summary>
        </member>
        <member name="P:NServiceBus.Config.AuditConfig.QueueName">
            <summary>
            Gets/sets the address to which messages received will be forwarded.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.AuditConfig.OverrideTimeToBeReceived">
            <summary>
            Gets/sets the time to be received set on forwarded messages
            </summary>
        </member>
        <member name="T:NServiceBus.IWantToRunBeforeConfigurationIsFinalized">
            <summary>
            Indicates that this class contains logic that needs to run just before
            configuration is finalized
            </summary>
        </member>
        <member name="M:NServiceBus.IWantToRunBeforeConfigurationIsFinalized.Run">
            <summary>
            Invoked before configuration is finalized and locked
            </summary>
        </member>
        <member name="T:NServiceBus.IWantCustomInitialization">
            <summary>
            If you want to specify your own container or serializer,
            implement this interface on the class which implements <see cref="T:NServiceBus.IConfigureThisEndpoint"/>.
            
            Implementors will be invoked before the endpoint starts up.
            Dependency injection is not provided for these types.
            </summary>
        </member>
        <member name="M:NServiceBus.IWantCustomInitialization.Init">
            <summary>
            Perform initialization logic.
            </summary>
        </member>
        <member name="T:NServiceBus.IWantTheEndpointConfig">
            <summary>
            Implementors will be provided with a reference to IConfigureThisEndpoint.
            Implementors must inherit either <see cref="T:NServiceBus.Hosting.Profiles.IHandleProfile"/> or <see cref="T:NServiceBus.IWantCustomInitialization"/>.
            </summary>
        </member>
        <member name="P:NServiceBus.IWantTheEndpointConfig.Config">
            <summary>
            This property will be set by the infrastructure.
            </summary>
        </member>
        <member name="T:NServiceBus.Hosting.Helpers.SkippedFile">
            <summary>
            Contains information about a file that was skipped during scanning along with a text describing
            the reason why the file was skipped
            </summary>
        </member>
        <member name="P:NServiceBus.Hosting.Helpers.SkippedFile.FilePath">
            <summary>
            The full path to the file that was skipped
            </summary>
        </member>
        <member name="P:NServiceBus.Hosting.Helpers.SkippedFile.SkipReason">
            <summary>
            Description of the reason why this file was skipped
            </summary>
        </member>
        <member name="T:NServiceBus.Installation.GatewayHttpListenerInstaller">
            <summary>
            Allows the identity to host http listeners for the <see cref="T:NServiceBus.Features.Gateway"/>
            </summary>
        </member>
        <member name="T:NServiceBus.Installation.INeedToInstallSomething`1">
            <summary>
            Interface invoked by the infrastructure when going to install an endpoint for a specific environment.
            </summary>
            <typeparam name="T">The environment type.</typeparam>
        </member>
        <member name="T:NServiceBus.Installation.INeedToInstallSomething">
            <summary>
            Interface invoked by the infrastructure when going to install an endpoint.
            Implementors are invoked after <see cref="T:NServiceBus.Installation.INeedToInstallInfrastructure"/>.
            Implementors should not implement this type directly but rather the generic version of it.
            </summary>
        </member>
        <member name="M:NServiceBus.Installation.INeedToInstallSomething.Install(System.String)">
            <summary>
            Performs the installation providing permission for the given user.
            </summary>
            <param name="identity">The user for whom permissions will be given.</param>
        </member>
        <member name="T:NServiceBus.Persistence.Raven.RavenUserInstaller">
            <summary>
            Add the identity to the Raven users group 
            </summary>
        </member>
        <member name="T:NServiceBus.Installation.PerformanceMonitorUsersInstaller">
            <summary>
            Add the identity to the 'Performance Monitor Users' local group 
            </summary>
        </member>
        <member name="T:NServiceBus.Gateway.GatewayExtensions">
            <summary>
                extensions internal to the gateway
            </summary>
        </member>
        <member name="M:NServiceBus.Gateway.GatewayExtensions.IsLegacyGatewayMessage(NServiceBus.TransportMessage)">
            <summary>
                legacy mode support
            </summary>
            <returns>
                true when message received from gateway other than v4
                or v4 site is configured to forward messages using legacy mode,
                false otherwise
            </returns>
        </member>
        <member name="T:NServiceBus.Gateway.Persistence.IPersistMessages">
            <summary>
                Provides the basic functionality to persist Gateway messages.
            </summary>
        </member>
        <member name="M:NServiceBus.Gateway.Persistence.IPersistMessages.InsertMessage(System.String,System.DateTime,System.IO.Stream,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                When implemented in a class, stores a gateway message.
            </summary>
            <param name="clientId">Message identifier.</param>
            <param name="timeReceived">Message time received.</param>
            <param name="message">The Message.</param>
            <param name="headers">Ant associated message headers.</param>
            <returns><c>true</c> if success, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:NServiceBus.Gateway.Persistence.IPersistMessages.AckMessage(System.String,System.Byte[]@,System.Collections.Generic.IDictionary{System.String,System.String}@)">
            <summary>
                When implemented in a class, updates the message with a status of acknowledged.
            </summary>
            <param name="clientId">Message identifier.</param>
            <param name="message">The Message.</param>
            <param name="headers">Ant associated message headers.</param>
            <returns><c>true</c> if success, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:NServiceBus.Gateway.Persistence.IPersistMessages.UpdateHeader(System.String,System.String,System.String)">
            <summary>
                When implemented in a class, updates the message headers.
            </summary>
            <param name="clientId">Message identifier.</param>
            <param name="headerKey">Header key to update.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="T:NServiceBus.Pipeline.BehaviorContext">
            <summary>
                yeah, we should probably see if we can come up with better names :)
            </summary>
        </member>
        <member name="T:NServiceBus.Pipeline.Behaviors.MessageHandlingLoggingBehavior">
            <summary>
            Arguably not the most interesting behavior, but let's just handle logging like this too
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigureBinarySerializer">
            <summary>
            Contains extension methods to NServiceBus.Configure.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureBinarySerializer.BinarySerializer(NServiceBus.Configure)">
            <summary>
            Use binary serialization.
            Note that this does not support interface-based messages.
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigureCriticalErrorAction">
            <summary>
                Allow override critical error action
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureCriticalErrorAction.DefineCriticalErrorAction(NServiceBus.Configure,System.Action{System.String,System.Exception})">
            <summary>
                Sets the function to be used when critical error occurs.
            </summary>
            <param name="config">The configuration object.</param>
            <param name="onCriticalError">Assigns the action to perform on critical error.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:NServiceBus.ConfigureCriticalErrorAction.RaiseCriticalError(NServiceBus.Configure,System.String,System.Exception)">
            <summary>
                Execute the configured Critical error action.
            </summary>
            <param name="config">The configuration object.</param>
            <param name="errorMessage">The error message.</param>
            <param name="exception">The critical exception thrown.</param>
        </member>
        <member name="M:NServiceBus.ConfigureCriticalErrorAction.DefineCriticalErrorAction(NServiceBus.Configure,System.Action)">
            <summary>
            Sets the function to be used when critical error occurs
            </summary>
            <param name="config">The configuration object.</param>
            <param name="onCriticalError">Assigns the action to perform on critical error.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:NServiceBus.ConfigureCriticalErrorAction.OnCriticalError(NServiceBus.Configure)">
            <summary>
            Execute the configured Critical error action
            </summary>
            <param name="config">The configuration object.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="T:NServiceBus.ConfigureDefaultBuilder">
            <summary>
            Configuration extension for the default builder
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureDefaultBuilder.DefaultBuilder(NServiceBus.Configure)">
            <summary>
            Uses the default container merged into NServiceBus.Core.dll.
            In this version, the container is the Spring Framework.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureDistributor.WorkerRunsOnThisEndpoint(NServiceBus.Configure)">
            <summary>
            Return whether this endpoint contains a worker
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureDistributor.RunDistributor(NServiceBus.Configure,System.Boolean)">
            <summary>
            Configure the distributor to run on this endpoint
            </summary>
            <param name="withWorker">True if this endpoint should enlist as a worker</param>
        </member>
        <member name="M:NServiceBus.ConfigureDistributor.RunDistributorWithNoWorkerOnItsEndpoint(NServiceBus.Configure)">
            <summary>
            Starting the Distributor without a worker running on its endpoint
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureDistributor.EnlistWithDistributor(NServiceBus.Configure)">
            <summary>
            Enlist Worker with Master node defined in the config.
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigureFaultsForwarder">
            <summary>
            Contains extension methods to NServiceBus.Configure
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureFaultsForwarder.MessageForwardingInCaseOfFault(NServiceBus.Configure)">
            <summary>
            Forward messages that have repeatedly failed to another endpoint.
            </summary>
        </member>
        <member name="P:NServiceBus.ConfigureFaultsForwarder.ErrorQueue">
            <summary>
            The queue to which to forward errors.
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigureFileShareDataBus">
            <summary>
            Contains extension methods to NServiceBus.Configure for the file share data bus
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureFileShareDataBus.FileShareDataBus(NServiceBus.Configure,System.String)">
            <summary>
            Use the file-based databus implementation with the default binary serializer.
            </summary>
            <param name="config">The configuration.</param>
            <param name="basePath">The location to which to write serialized properties for the databus.</param>
            <returns>The configuration.</returns>
        </member>
        <member name="M:NServiceBus.ConfigureGateway.DisableGateway(NServiceBus.Configure)">
            <summary>
            The Gateway is turned on by default for the Master role. Call DisableGateway method to turn the Gateway off.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureGateway.RunGateway(NServiceBus.Configure)">
            <summary>
            Configuring to run the Gateway. By default Gateway will use RavenPersistence (see GatewayDefaults class).
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureGateway.UseInMemoryGatewayPersister(NServiceBus.Configure)">
            <summary>
            Use the in memory messages persistence by the gateway.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureGateway.UseInMemoryGatewayDeduplication(NServiceBus.Configure)">
            <summary>
            Use in-memory message deduplication for the gateway.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureGateway.UseRavenGatewayPersister(NServiceBus.Configure)">
            <summary>
            Use RavenDB messages persistence by the gateway.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureGateway.UseRavenGatewayDeduplication(NServiceBus.Configure)">
            <summary>
            Use RavenDB for message deduplication by the gateway.
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigureImpersonation">
            <summary>
            Contains extension methods for the purpose of configuring impersonation.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureImpersonation.#cctor">
            <summary>
            Impersonate by default, otherwise this configuration would not be backward compatible
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureImpersonation.ImpersonateSender(NServiceBus.Unicast.Config.ConfigUnicastBus,System.Boolean)">
            <summary>
            Instructs the bus to run the processing of messages being handled
            under the permissions of the sender of the message.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureImpersonation.RunHandlersUnderIncomingPrincipal(NServiceBus.Unicast.Config.ConfigUnicastBus,System.Boolean)">
            <summary>
            Instructs the bus to run the processing of messages being handled under the incoming user principal, by default this is a <see cref="T:System.Security.Principal.GenericPrincipal"/> created from the <see cref="F:NServiceBus.Headers.WindowsIdentityName"/>.
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigureInMemoryFaultManagement">
            <summary>
            Contains extension methods to NServiceBus.Configure
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureInMemoryFaultManagement.InMemoryFaultManagement(NServiceBus.Configure)">
            <summary>
            Use in-memory fault management.
            </summary>
        </member>
        <member name="T:NServiceBus.DataBus.InMemory.InMemoryDataBus">
            <summary>
            In memory implementation of <see cref="T:NServiceBus.DataBus.IDataBus"/>.
            </summary>
        </member>
        <member name="T:NServiceBus.DataBus.IDataBus">
            <summary>
            The main interface for interactions with the databus.
            </summary>
        </member>
        <member name="M:NServiceBus.DataBus.IDataBus.Get(System.String)">
            <summary>
            Gets a data item from the bus.
            </summary>
            <param name="key">The key to look for.</param>
            <returns>The data <see cref="T:System.IO.Stream"/>.</returns>
        </member>
        <member name="M:NServiceBus.DataBus.IDataBus.Put(System.IO.Stream,System.TimeSpan)">
            <summary>
            Adds a data item to the bus and returns the assigned key.
            </summary>
            <param name="stream">A create containing the data to be sent on the databus.</param>
            <param name="timeToBeReceived">The time to be received specified on the message type. TimeSpan.MaxValue is the default.</param>
        </member>
        <member name="M:NServiceBus.DataBus.IDataBus.Start">
            <summary>
            Called when the bus starts up to allow the data bus to active background tasks.
            </summary>
        </member>
        <member name="M:NServiceBus.DataBus.InMemory.InMemoryDataBus.Get(System.String)">
            <summary>
            Gets a data item from the bus.
            </summary>
            <param name="key">The key to look for.</param>
            <returns>The data <see cref="T:System.IO.Stream"/>.</returns>
        </member>
        <member name="M:NServiceBus.DataBus.InMemory.InMemoryDataBus.Put(System.IO.Stream,System.TimeSpan)">
            <summary>
            Adds a data item to the bus and returns the assigned key.
            </summary>
            <param name="stream">A create containing the data to be sent on the databus.</param>
            <param name="timeToBeReceived">The time to be received specified on the message type. TimeSpan.MaxValue is the default.</param>
        </member>
        <member name="M:NServiceBus.DataBus.InMemory.InMemoryDataBus.Start">
            <summary>
            Called when the bus starts up to allow the data bus to active background tasks.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.FeatureSettings">
            <summary>
            Settings for the various features
            </summary>
        </member>
        <member name="M:NServiceBus.Features.FeatureSettings.Enable``1">
            <summary>
            Enables the given feature
            </summary>
        </member>
        <member name="M:NServiceBus.Features.FeatureSettings.Disable``1">
            <summary>
            Disables the given feature
            </summary>
        </member>
        <member name="T:NServiceBus.Config.IFinalizeConfiguration">
            <summary>
            Interface used to finalize configuration. This is the final point where the container can be altered.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.IFinalizeConfiguration.FinalizeConfiguration">
            <summary>
            Invoked by the framework when the configuration is to be finalized
            </summary>
        </member>
        <member name="M:NServiceBus.Features.FeatureInitializer.Run">
            <summary>
            Go trough all conditional features and figure out if the should be enabled or not
            </summary>
        </member>
        <member name="T:NServiceBus.IWantToRunBeforeConfiguration">
            <summary>
            Indicates that this class contains logic that need to be executed before other configuration
            </summary>
        </member>
        <member name="M:NServiceBus.IWantToRunBeforeConfiguration.Init">
            <summary>
            Invoked before configuration starts
            </summary>
        </member>
        <member name="M:NServiceBus.BinarySerializerConfigurationExtensions.Binary(NServiceBus.Settings.SerializationSettings)">
            <summary>
            Enables the binary message serializer
            </summary>
        </member>
        <member name="M:NServiceBus.JsonSerializerConfigurationExtensions.Json(NServiceBus.Settings.SerializationSettings)">
            <summary>
            Enables the json message serializer
            </summary>
        </member>
        <member name="M:NServiceBus.JsonSerializerConfigurationExtensions.Bson(NServiceBus.Settings.SerializationSettings)">
            <summary>
            Enables the bson message serializer
            </summary>
        </member>
        <member name="T:NServiceBus.Features.Categories.Serializers">
            <summary>
            Category for all serializers
            </summary>
        </member>
        <member name="M:NServiceBus.Features.FeatureCategory.GetFeaturesToInitialize">
            <summary>
            Returns the list of features in the category that should be used
            </summary>
        </member>
        <member name="P:NServiceBus.Features.FeatureCategory.Name">
            <summary>
            Feature name.
            </summary>
        </member>
        <member name="T:NServiceBus.Serializers.XML.Config.XmlSerializationSettings">
            <summary>
            Settings for the xml message serializer
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NServiceBus.Serializers.XML.Config.XmlSerializationSettings.DontWrapRawXml" -->
        <member name="M:NServiceBus.Serializers.XML.Config.XmlSerializationSettings.Namespace(System.String)">
            <summary>
            Configures the serializer to use a custom namespace. (http://tempuri.net) is the default
            </summary>
        </member>
        <member name="M:NServiceBus.Serializers.XML.Config.XmlSerializationSettings.SanitizeInput">
            <summary>
            Tells the serializer to sanitize the input data from illegal characters
            </summary>
        </member>
        <member name="M:NServiceBus.XmlSerializerConfigurationExtensions.Xml(NServiceBus.Settings.SerializationSettings,System.Action{NServiceBus.Serializers.XML.Config.XmlSerializationSettings})">
            <summary>
            Enables the xml message serializer with the given settings
            </summary>
        </member>
        <member name="T:NServiceBus.Settings.SerializationSettings">
            <summary>
            Settings related to message serialization
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.SerializationSettings.WrapSingleMessages">
            <summary>
            Tells the framework to always wrap out going messages as if there was multiple messages being sent
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.SerializationSettings.DontWrapSingleMessages">
            <summary>
            Tells the framework to not wrap out going messages as if there was multiple messages being sent
            </summary>
        </member>
        <member name="T:NServiceBus.MessageMutator.IMutateOutgoingTransportMessages">
            <summary>
            Mutates transport messages before they are sent.
            Implementors are invoked after the logical messages have been serialized.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageMutator.IMutateOutgoingTransportMessages.MutateOutgoing(System.Object[],NServiceBus.TransportMessage)">
            <summary>
            Modifies various properties of the transport message.
            </summary>
        </member>
        <member name="T:NServiceBus.Settings.ScaleOutSettings">
            <summary>
            Placeholder for the various settings related to how a endpoint is scaled out
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.ScaleOutSettings.UseSingleBrokerQueue">
            <summary>
            Instructs the broker based transports to use a single queue for the endpoint regardless of which machine its running on. 
            This is suitable for backend processing endpoints and is the default for the As_aServer role.
            Clients that needs to make use of callbacks needs to make sure that this setting is off since they need to have a unique 
            input queue per machine in order to not miss any of the callbacks.
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.ScaleOutSettings.UseUniqueBrokerQueuePerMachine">
            <summary>
            Instructs the broker based transports to use a separate queue per endpoint when running on multiple machines. 
            This allows clients to make use of callbacks. This setting is the default.
            </summary>
        </member>
        <member name="T:NServiceBus.Transports.IConfigureTransport`1">
            <summary>
            The generic counterpart to IConfigureTransports
            </summary>
        </member>
        <member name="T:NServiceBus.Transports.IConfigureTransport">
            <summary>
            Configures the given transport using the default settings
            </summary>
        </member>
        <member name="T:NServiceBus.Gateway.DefaultInputAddress">
            <summary>
                Sets the default input address for the gateway
            </summary>
        </member>
        <member name="T:NServiceBus.Hosting.Profiles.IHandleAnyProfile">
            <summary>
            Abstraction for code that will be called that will take dependent action based upon
            the Profile(s) that are active. Useful for implementing special functionality if
            a specific profile is activated, and implementing default functionality otherwise.
            </summary>
        </member>
        <member name="T:NServiceBus.Hosting.Profiles.IHandleProfile`1">
            <summary>
            Generic abstraction for code which will be called when the given profile is active.
            </summary>
        </member>
        <member name="T:NServiceBus.Hosting.Profiles.IHandleProfile">
            <summary>
            Abstraction for code which will be called when the given profile is active.
            Implementors should implement IHandleProfile{T} rather than IHandleProfile.
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Profiles.IHandleProfile.ProfileActivated">
            <summary>
            Called when a given profile is activated.
            </summary>
        </member>
        <member name="T:NServiceBus.IWantTheListOfActiveProfiles">
            <summary>
            Implementors will receive the list of active Profiles from the <see cref="T:NServiceBus.Hosting.Profiles.ProfileManager"/>. 
            Implementors must implement <see cref="T:NServiceBus.Hosting.Profiles.IHandleProfile"/>.
            </summary>
        </member>
        <member name="P:NServiceBus.IWantTheListOfActiveProfiles.ActiveProfiles">
            <summary>
            ActiveProfiles list will be set by the infrastructure.
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigureInMemorySagaPersister">
            <summary>
            Contains extension methods to NServiceBus.Configure for the in memory saga persister.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureInMemorySagaPersister.InMemorySagaPersister(NServiceBus.Configure)">
            <summary>
            Use the in memory saga persister implementation.
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigureInMemorySubscriptionStorage">
            <summary>
            Contains extension methods to NServiceBus.Configure.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureInMemorySubscriptionStorage.InMemorySubscriptionStorage(NServiceBus.Configure)">
            <summary>
            Stores subscription data in memory.
            This storage are for development scenarios only
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigureLicenseExtensions">
            <summary>
            Contains extension methods to configure license.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureLicenseExtensions.License(NServiceBus.Configure,System.String)">
            <summary>
            Allows user to specify the license string.
            </summary>
            <param name="config">The current <see cref="T:NServiceBus.Configure"/>.</param>
            <param name="licenseText">The license text.</param>
            <returns>The current <see cref="T:NServiceBus.Configure"/>.</returns>
        </member>
        <member name="M:NServiceBus.ConfigureLicenseExtensions.LicensePath(NServiceBus.Configure,System.String)">
            <summary>
            Allows user to specify the path for the license file.
            </summary>
            <param name="config">The current <see cref="T:NServiceBus.Configure"/>.</param>
            <param name="licenseFile">A relative or absolute path to the license file.</param>
            <returns>The current <see cref="T:NServiceBus.Configure"/>.</returns>
        </member>
        <member name="T:NServiceBus.Settings.TransportSettings">
            <summary>
            Placeholder for the various extensions. Transports will add extension methods to this class.
            </summary>
        </member>
        <member name="T:NServiceBus.Features.TimeoutManager">
            <summary>
            This feature provides message deferral based on a external timeout manager.
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigureMsmqMessageQueue">
            <summary>
            Configuration class for MSMQ transport.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureMsmqMessageQueue.MsmqTransport(NServiceBus.Configure)">
            <summary>
            Use MSMQ for your queuing infrastructure.
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigureMsmqSubscriptionStorage">
            <summary>
            Contains extension methods to NServiceBus.Configure.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureMsmqSubscriptionStorage.MsmqSubscriptionStorage(NServiceBus.Configure)">
            <summary>
            Stores subscription data using MSMQ.
            If multiple machines need to share the same list of subscribers,
            you should not choose this option - prefer the DbSubscriptionStorage
            in that case.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureMsmqSubscriptionStorage.MsmqSubscriptionStorage(NServiceBus.Configure,System.String)">
            <summary>
            Stores subscription data using MSMQ.
            If multiple machines need to share the same list of subscribers,
            you should not choose this option - prefer the DbSubscriptionStorage
            in that case.
            </summary>
        </member>
        <member name="P:NServiceBus.ConfigureMsmqSubscriptionStorage.Queue">
            <summary>
            Queue used to store subscriptions.
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigureQueueCreation">
            <summary>
            Contains extension methods to NServiceBus.Configure.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureQueueCreation.DoNotCreateQueues(NServiceBus.Configure)">
            <summary>
            If queues configured do not exist, will cause them not to be created on startup.
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigurePurging">
            <summary>
            Configures purging
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigurePurging.PurgeOnStartup(NServiceBus.Configure,System.Boolean)">
            <summary>
            Requests that the incoming queue be purged of all messages when the bus is started.
            All messages in this queue will be deleted if this is true.
            Setting this to true may make sense for certain smart-client applications, 
            but rarely for server applications.
            </summary>
        </member>
        <member name="P:NServiceBus.ConfigurePurging.PurgeRequested">
            <summary>
            True if the users wants the input queue to be purged when we starts up
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigureRavenPersistence">
            <summary>
            Extension methods to configure RavenDB persister.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureRavenPersistence.RavenPersistence(NServiceBus.Configure)">
            <summary>
            Configures RavenDB as the default persistence.
            </summary>
            <remarks>
            Reads configuration settings from <a href="http://msdn.microsoft.com/en-us/library/ms228154.aspx">&lt;appSettings&gt; config section</a> and <a href="http://msdn.microsoft.com/en-us/library/bf7sd233">&lt;connectionStrings&gt; config section</a>.
            </remarks>
            <example>
            An example that shows the configuration:
            <code lang="XML" escaped="true">
             <connectionStrings>
               <!-- Default connection string name -->
               <add name="NServiceBus/Persistence" connectionString="Url=http://localhost:8080" />
             </connectionStrings>
            </code>
            </example>
            <param name="config">The configuration object.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:NServiceBus.ConfigureRavenPersistence.RavenPersistence(NServiceBus.Configure,System.String)">
            <summary>
            Configures RavenDB as the default persistence.
            </summary>
            <param name="config">The configuration object.</param>
            <param name="connectionStringName">The connection string name to use to retrieve the connection string from.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:NServiceBus.ConfigureRavenPersistence.RavenPersistence(NServiceBus.Configure,System.String,System.String)">
            <summary>
            Configures RavenDB as the default persistence.
            </summary>
            <param name="config">The configuration object.</param>
            <param name="connectionStringName">The connection string name to use to retrieve the connection string from.</param>
            <param name="database">The database name to use.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:NServiceBus.ConfigureRavenPersistence.RavenPersistence(NServiceBus.Configure,System.Func{System.String})">
            <summary>
            Configures RavenDB as the default persistence.
            </summary>
            <param name="config">The configuration object.</param>
            <param name="getConnectionString">Specifies a callback to call to retrieve the connection string to use.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:NServiceBus.ConfigureRavenPersistence.RavenPersistence(NServiceBus.Configure,System.Func{System.String},System.String)">
            <summary>
            Configures RavenDB as the default persistence.
            </summary>
            <param name="config">The configuration object.</param>
            <param name="getConnectionString">Specifies a callback to call to retrieve the connection string to use.</param>
            <param name="database">The database name to use.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:NServiceBus.ConfigureRavenPersistence.RavenPersistenceWithStore(NServiceBus.Configure,Raven.Client.IDocumentStore)">
            <summary>
            Configures RavenDB as the default persistence.
            </summary>
            <remarks>This method does not use any of the NServiceBus conventions either specified or out of the box.</remarks>
            <param name="config">The configuration object.</param>
            <param name="documentStore">An <see cref="T:Raven.Client.IDocumentStore"/>.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:NServiceBus.ConfigureRavenPersistence.CustomiseRavenPersistence(NServiceBus.Configure,System.Action{Raven.Client.IDocumentStore})">
            <summary>
            The <paramref name="callback"/> is called for further customising the <see cref="T:Raven.Client.IDocumentStore"/>.
            </summary>
            <param name="config">The configuration object.</param>
            <param name="callback">This callback allows to further customise/override default settings.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:NServiceBus.ConfigureRavenPersistence.MessageToDatabaseMappingConvention(NServiceBus.Configure,System.Func{NServiceBus.IMessageContext,System.String})">
            <summary>
            Specifies the mapping to use for when resolving the database name to use for each message.
            </summary>
            <param name="config">The configuration object.</param>
            <param name="convention">The method referenced by a Func delegate for finding the database name for the specified message.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="T:NServiceBus.ConfigureRijndaelEncryptionService">
            <summary>
            Contains extension methods to NServiceBus.Configure.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureRijndaelEncryptionService.RijndaelEncryptionService(NServiceBus.Configure)">
            <summary>
            Use 256 bit AES encryption based on the Rijndael cipher. 
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigureSagas">
            <summary>
            Contains extension methods to NServiceBus.Configure.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureSagas.Sagas(NServiceBus.Configure)">
            <summary>
            Configure this endpoint to support sagas.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureTimeoutManager.UseInMemoryTimeoutPersister(NServiceBus.Configure)">
            <summary>
            Use the in memory timeout persister implementation.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureTimeoutManager.UseRavenTimeoutPersister(NServiceBus.Configure)">
            <summary>
            Use the Raven timeout persister implementation.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureTimeoutManager.DisableTimeoutManager(NServiceBus.Configure)">
            <summary>
            As Timeout manager is turned on by default for server roles, use DisableTimeoutManager method to turn off Timeout manager
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureTimeoutManager.RunTimeoutManagerWithInMemoryPersistence(NServiceBus.Configure)">
            <summary>
            Sets the default persistence to InMemory.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureTimeoutManager.DefaultToInMemoryTimeoutPersistence(NServiceBus.Configure)">
            <summary>
            Sets the default persistence to InMemory.
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigureUnicastBus">
            <summary>
            Contains extension methods to NServiceBus.Configure.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureUnicastBus.UnicastBus(NServiceBus.Configure)">
            <summary>
            Use unicast messaging (your best option on nServiceBus right now).
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureUnicastBus.GetTimeoutManagerAddress(NServiceBus.Configure)">
            <summary>
            Return Timeout Manager Address. Uses "TimeoutManagerAddress" parameter form config file if defined, if not, uses "EndpointName.Timeouts".
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigureXmlSerializer">
            <summary>
            Contains extension methods to NServiceBus.Configure.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.AddressInitializer">
            <summary>
            Initializes the local address
            </summary>
        </member>
        <member name="M:NServiceBus.Config.AddressInitializer.Init">
            <summary>
            Initialize the local address
            </summary>
        </member>
        <member name="T:NServiceBus.Config.Advanced.ConfigureSettingLocalAddressNameAction">
            <summary>
            Allow overriding local address name.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.Advanced.ConfigureSettingLocalAddressNameAction.DefineLocalAddressNameFunc(NServiceBus.Configure,System.Func{System.String})">
            <summary>
            Set a function that overrides the default naming of NServiceBus local addresses.
            See: <a href="http://particular.net/articles/how-to-specify-your-input-queue-name">Here</a> for more details.
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigureSettingLocalAddressNameAction">
            <summary>
            Allow overriding local address name.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureSettingLocalAddressNameAction.DefineLocalAddressNameFunc(NServiceBus.Configure,System.Func{System.String})">
            <summary>
            Set a function that overrides the default naming of NServiceBus local addresses.
            See: <a href="http://particular.net/articles/how-to-specify-your-input-queue-name">Here</a> for more details.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureSettingLocalAddressNameAction.GetLocalAddressName">
            <summary>
            Execute function that returns the NServiceBus local addresses name. If not override by the user, NServiceBus defaults will be used.
            See: <a href="http://particular.net/articles/how-to-specify-your-input-queue-name">Here</a> for more details.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.ConfigurationSource.DefaultConfigurationSource">
            <summary>
            A configuration source implementation on top of ConfigurationManager.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.ConfigurationSource.IConfigurationSource">
            <summary>
            Abstraction of a source of configuration data.
            Implement this interface if you want to change the source of all configuration data.
            If you want to change the source of only a specific set of configuration data,
            implement <see cref="T:NServiceBus.Config.ConfigurationSource.IProvideConfiguration`1"/> instead.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.ConfigurationSource.IConfigurationSource.GetConfiguration``1">
            <summary>
            Returns configuration data based on the given type.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.ConfigurationSource.IProvideConfiguration`1">
            <summary>
            Abstraction of a configuration source for a given piece of configuration data. 
            </summary>
        </member>
        <member name="M:NServiceBus.Config.ConfigurationSource.IProvideConfiguration`1.GetConfiguration">
            <summary>
            Returns configuration data for the given type.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.Conventions.EndpointHelper">
            <summary>
            The default name for a endpoint
            </summary>
        </member>
        <member name="M:NServiceBus.Config.Conventions.EndpointHelper.GetDefaultEndpointName">
            <summary>
            Gets the name of this endpoint
            </summary>
            <returns>The name of the endpoint.</returns>
        </member>
        <member name="M:NServiceBus.Config.Conventions.EndpointHelper.GetEndpointVersion">
            <summary>
            Gets the version of the endpoint.
            </summary>
            <returns>The <see cref="T:System.Version"/> the endpoint.</returns>
        </member>
        <member name="P:NServiceBus.Config.Conventions.EndpointHelper.StackTraceToExamine">
            <summary>
            If set this will be used to figure out what to name the endpoint and select the version.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.Conventions.SystemMessageConventions">
            <summary>
            Define system message convention
            </summary>
        </member>
        <member name="M:NServiceBus.Config.Conventions.SystemMessageConventions.AddSystemMessagesAs(NServiceBus.Configure,System.Func{System.Type,System.Boolean})">
            <summary>
            Add system messages convention
            </summary>
        </member>
        <member name="T:NServiceBus.SystemMessageConventions">
            <summary>
            Define system message convention
            </summary>
        </member>
        <member name="M:NServiceBus.SystemMessageConventions.AddSystemMessagesAs(NServiceBus.Configure,System.Func{System.Type,System.Boolean})">
            <summary>
            Add system messages convention
            </summary>
        </member>
        <member name="T:NServiceBus.ConfigureExtensions">
            <summary>
                Configure Extensions.
            </summary>
        </member>
        <member name="M:NServiceBus.ConfigureExtensions.SendOnly(NServiceBus.Configure)">
            <summary>
                Configures this endpoint as a send only endpoint.
            </summary>
            <remarks>
                Use this in endpoints whose only purpose is sending messages, websites are often a good example of send only endpoints.
            </remarks>
        </member>
        <member name="T:NServiceBus.Config.GatewayConfig">
            <summary>
            Config section for the gateway
            </summary>
        </member>
        <member name="P:NServiceBus.Config.GatewayConfig.TransactionTimeout">
            <summary>
            Property for getting/setting the period of time when the outgoing gateway transaction times out.
            Only relevant when <see cref="!:IsTransactional"/> is set to true.
            Defaults to the TransactionTimeout of the main transport.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.GatewayConfig.Sites">
            <summary>
            Collection of sites
            </summary>
        </member>
        <member name="P:NServiceBus.Config.GatewayConfig.Channels">
            <summary>
            Collection of channels
            </summary>
        </member>
        <member name="M:NServiceBus.Config.ChannelCollection.CreateNewElement">
            <summary>
            Creates a new empty property
            </summary>
        </member>
        <member name="M:NServiceBus.Config.ChannelCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Returns the key for the given element
            </summary>
        </member>
        <member name="M:NServiceBus.Config.ChannelCollection.Add(NServiceBus.Config.ChannelConfig)">
            <summary>
            Calls BaseAdd.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.ChannelCollection.BaseAdd(System.Configuration.ConfigurationElement)">
            <summary>
            Calls BaseAdd with true as the additional parameter.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.ChannelConfig.Default">
            <summary>
            True if this channel is the default channel
            </summary>
        </member>
        <member name="P:NServiceBus.Config.ChannelConfig.Address">
            <summary>
            The Address that the channel is listening on
            </summary>
        </member>
        <member name="P:NServiceBus.Config.ChannelConfig.NumberOfWorkerThreads">
            <summary>
            The number of worker threads that will be used for this channel
            </summary>
        </member>
        <member name="P:NServiceBus.Config.ChannelConfig.ChannelType">
            <summary>
            The ChannelType
            </summary>
        </member>
        <member name="T:NServiceBus.Config.SiteCollection">
            <summary>
            Collection of sites
            </summary>
        </member>
        <member name="M:NServiceBus.Config.SiteCollection.CreateNewElement">
            <summary>
            Creates a new empty property
            </summary>
        </member>
        <member name="M:NServiceBus.Config.SiteCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Returns the key for the given element
            </summary>
        </member>
        <member name="M:NServiceBus.Config.SiteCollection.Add(NServiceBus.Config.SiteConfig)">
            <summary>
            Calls BaseAdd.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.SiteCollection.BaseAdd(System.Configuration.ConfigurationElement)">
            <summary>
            Calls BaseAdd with true as the additional parameter.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.SiteConfig">
            <summary>
            A site property
            </summary>
        </member>
        <member name="P:NServiceBus.Config.SiteConfig.Key">
            <summary>
            The key
            </summary>
        </member>
        <member name="P:NServiceBus.Config.SiteConfig.Address">
            <summary>
            The Address of this site
            </summary>
        </member>
        <member name="P:NServiceBus.Config.SiteConfig.ChannelType">
            <summary>
            The ChannelType of this site
            </summary>
        </member>
        <member name="P:NServiceBus.Config.SiteConfig.LegacyMode">
            <summary>
            The forwarding mode for this site
            </summary>
        </member>
        <member name="T:NServiceBus.Config.INeedInitialization">
            <summary>
            Implementers will be called after NServiceBus.Configure.With completes and a container
            has been set. 
            </summary>
        </member>
        <member name="M:NServiceBus.Config.INeedInitialization.Init">
            <summary>
            Implementers will include custom initialization code here.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.IWantToRunWhenConfigurationIsComplete">
            <summary>
            Implementors are invoked when configuration is complete.
            Implementors are resolved from the container so have access to full DI.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.IWantToRunWhenConfigurationIsComplete.Run">
            <summary>
            Method invoked to run custom code.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.Logging">
            <summary>
            Logging ConfigurationSection
            </summary>
        </member>
        <member name="P:NServiceBus.Config.Logging.Threshold">
            <summary>
            The minimal logging level above which all calls to the log will be written
            </summary>
        </member>
        <member name="T:NServiceBus.Config.MasterNodeConfig">
            <summary>
            Configuration section for holding the node which is the master.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MasterNodeConfig.Node">
            <summary>
            The node .
            </summary>
        </member>
        <member name="T:NServiceBus.Config.MessageEndpointMapping">
            <summary>
            A configuration element representing which message types map to which endpoint.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMapping.Configure(System.Action{System.Type,NServiceBus.Address})">
            <summary>
            Uses the configuration properties to configure the endpoint mapping
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMapping.Messages">
            <summary>
            A string defining the message assembly, or single message type.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMapping.Endpoint">
            <summary>
            The endpoint named according to "queue@machine".
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMapping.AssemblyName">
            <summary>
            The message assembly for the endpoint mapping.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMapping.TypeFullName">
            <summary>
            The fully qualified name of the message type. Define this if you want to map a single message type to the endpoint.
            </summary>
            <remarks>Type will take preference above namespace</remarks>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMapping.Namespace">
            <summary>
            The message type. Define this if you want to map all the types in the namespace to the endpoint.
            </summary>
            <remarks>Sub-namespaces will not be mapped.</remarks>
        </member>
        <member name="T:NServiceBus.Config.MessageEndpointMappingCollection">
            <summary>
            A configuration element collection of MessageEndpointMappings.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.CreateNewElement">
            <summary>
            Creates a new MessageEndpointMapping.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.CreateNewElement(System.String)">
            <summary>
            Creates a new MessageEndpointMapping, setting its Message property to the given name.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Returns the Messages property of the given MessageEndpointMapping element.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.IndexOf(NServiceBus.Config.MessageEndpointMapping)">
            <summary>
            Calls BaseIndexOf on the given mapping.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.Add(NServiceBus.Config.MessageEndpointMapping)">
            <summary>
            Calls BaseAdd.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.BaseAdd(System.Configuration.ConfigurationElement)">
            <summary>
            Calls BaseAdd with true as the additional parameter.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.Remove(NServiceBus.Config.MessageEndpointMapping)">
            <summary>
            If the mapping exists, calls BaseRemove on it.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.RemoveAt(System.Int32)">
            <summary>
            Calls BaseRemoveAt.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.Remove(System.String)">
            <summary>
            Calls BaseRemove.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.MessageEndpointMappingCollection.Clear">
            <summary>
            Calls BaseClear.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.CollectionType">
            <summary>
            Returns AddRemoveClearMap.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.AddElementName">
            <summary>
            Calls the base AddElementName.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.ClearElementName">
            <summary>
            Calls the base ClearElementName.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.RemoveElementName">
            <summary>
            Returns the base RemoveElementName.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.Count">
            <summary>
            Returns the base Count.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.Item(System.Int32)">
            <summary>
            Gets/sets the MessageEndpointMapping at the given index.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageEndpointMappingCollection.Item(System.String)">
            <summary>
            Gets the MessageEndpointMapping for the given name.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.MessageForwardingInCaseOfFaultConfig">
            <summary>
            Message Forwarding In Case Of Fault Config
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MessageForwardingInCaseOfFaultConfig.ErrorQueue">
            <summary>
            The queue to which errors will be forwarded.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.MsmqMessageQueueConfig">
            <summary>
            Contains the properties representing the MsmqMessageQueue configuration section.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MsmqMessageQueueConfig.UseDeadLetterQueue">
            <summary>
             If true, then message-delivery failure should result in a copy of the message being sent to a dead-letter queue
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MsmqMessageQueueConfig.UseJournalQueue">
            <summary>
             If true, require that a copy of a message be kept in the originating computer's machine journal after the message has been successfully transmitted (from the originating computer to the next server)
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Sagas.FindAndConfigureSagasIn(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Scans for types relevant to the saga infrastructure.
            These include implementers of <see cref="T:NServiceBus.Saga.ISaga"/> and <see cref="T:NServiceBus.Saga.IFindSagas`1"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Sagas.CreateAdditionalFindersAsNecessary">
            <summary>
            Creates an <see cref="T:NServiceBus.Sagas.Finders.NullSagaFinder`1"/> for each saga type that doesn't have a finder configured.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Sagas.ShouldMessageStartSaga(System.Type,System.Type)">
            <summary>
            True if the given message are configure to start the saga
            </summary>
            <param name="sagaType"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceBus.Features.Sagas.GetSagaTypeToStartIfMessageNotFoundByFinder(System.Object,NServiceBus.Saga.IFinder)">
            <summary>
            Gets the saga type to instantiate and invoke if an existing saga couldn't be found by
            the given finder using the given message.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Sagas.GetSagaTypeForSagaEntityType(System.Type)">
            <summary>
            Returns the saga type configured for the given entity type.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Sagas.GetSagaEntityTypeForSagaType(System.Type)">
            <summary>
            Returns the entity type configured for the given saga type.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Sagas.GetFindByMethodForFinder(NServiceBus.Saga.IFinder,System.Object)">
            <summary>
            Gets a reference to the generic "FindBy" method of the given finder
            for the given message type using a hashtable lookup rather than reflection.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Sagas.GetFindersFor(System.Object)">
            <summary>
            Returns a list of finder object capable of using the given message.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Sagas.GetFindersForMessageAndEntity(System.Type,System.Type)">
            <summary>
            Returns a list of finder object capable of using the given message.
            </summary>
            <param name="messageType"></param>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:NServiceBus.Features.Sagas.GetSagaDataTypes">
            <summary>
            Returns the list of saga types configured.
            </summary>
        </member>
        <member name="M:NServiceBus.Features.Sagas.Clear">
            <summary>
            Until we get rid of those statics
            </summary>
        </member>
        <member name="T:NServiceBus.Satellites.IAdvancedSatellite">
            <summary>
            Interface for satellites that needs more control over how the receiver is being setup
            </summary>
        </member>
        <member name="T:NServiceBus.Satellites.ISatellite">
            <summary>
            Implement this interface to create a Satellite.
            </summary>
        </member>
        <member name="M:NServiceBus.Satellites.ISatellite.Handle(NServiceBus.TransportMessage)">
            <summary>
            This method is called when a message is available to be processed.
            </summary>
            <param name="message">The <see cref="T:NServiceBus.TransportMessage"/> received.</param>
            <returns>If <code>false</code> then <see cref="T:NServiceBus.Satellites.SatelliteLauncher"/> will call <see cref="M:NServiceBus.Unicast.Transport.ITransport.AbortHandlingCurrentMessage"/></returns>
        </member>
        <member name="M:NServiceBus.Satellites.ISatellite.Start">
            <summary>
            Starts the <see cref="T:NServiceBus.Satellites.ISatellite"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Satellites.ISatellite.Stop">
            <summary>
            Stops the <see cref="T:NServiceBus.Satellites.ISatellite"/>.
            </summary>
        </member>
        <member name="P:NServiceBus.Satellites.ISatellite.InputAddress">
            <summary>
            The <see cref="T:NServiceBus.Address"/> for this <see cref="T:NServiceBus.Satellites.ISatellite"/> to use when receiving messages.
            </summary>
        </member>
        <member name="P:NServiceBus.Satellites.ISatellite.Disabled">
            <summary>
            Set to <code>true</code> to disable this <see cref="T:NServiceBus.Satellites.ISatellite"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Satellites.IAdvancedSatellite.GetReceiverCustomization">
            <summary>
            Gets the customizations to apply to the receiver
            </summary>
        </member>
        <member name="T:NServiceBus.Settings.SettingsHolder">
            <summary>
            Setting container.
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.Get``1(System.String)">
            <summary>
            Gets the setting value.
            </summary>
            <typeparam name="T">The value of the setting.</typeparam>
            <param name="key">The key of the setting to get.</param>
            <returns>The setting value.</returns>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.Get(System.String)">
            <summary>
            Gets the setting value.
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.Set(System.String,System.Object)">
            <summary>
            Sets the setting value.
            </summary>
            <param name="key">The key to use to store the setting.</param>
            <param name="value">The setting value.</param>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.Set``1(System.Object)">
            <summary>
            Sets the value
            </summary>
            <param name="key">The key to use to store the setting.</param>
            <param name="value">The setting value.</param>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.SetProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            Sets the value of the given property
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.SetPropertyDefault``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            Sets the default value of the given property
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.SetDefault``1(System.Object)">
            <summary>
            Sets the default setting value.
            </summary>
            <param name="key">The key to use to store the setting.</param>
            <param name="value">The setting value.</param>
        </member>
        <member name="M:NServiceBus.Settings.SettingsHolder.PreventChanges">
            <summary>
            Locks the settings to prevent further modifications
            </summary>
        </member>
        <member name="T:NServiceBus.Config.InfrastructureServices">
            <summary>
            Class used to control the various infrastructure services required by NServiceBus
            </summary>
        </member>
        <member name="M:NServiceBus.Config.InfrastructureServices.Enable``1">
            <summary>
            Enables the given infrastructure service by registering it in the container
            </summary>
        </member>
        <member name="M:NServiceBus.Config.InfrastructureServices.SetDefaultFor``1(System.Action)">
            <summary>
            Set the default for the infrastructure service to the action passed in.
            If the service is enabled and no explicit override is found this action will be used to configure the service.
            </summary>
        </member>
        <member name="M:NServiceBus.Config.InfrastructureServices.SetDefaultFor``1(System.Type,NServiceBus.DependencyLifecycle)">
            <summary>
            Sets the default provider for the service to the give type. If the service is enabled the type will be registered
            in the container with the specified lifecycle
            </summary>
        </member>
        <member name="M:NServiceBus.Config.InfrastructureServices.RegisterServiceFor``1(System.Action)">
            <summary>
             Register a explicit service provider
            </summary>
        </member>
        <member name="M:NServiceBus.Config.InfrastructureServices.RegisterServiceFor``1(System.Type,NServiceBus.DependencyLifecycle)">
            <summary>
            Register a explicit service provider
            </summary>
        </member>
        <member name="M:NServiceBus.Config.InfrastructureServices.IsAvailable``1">
            <summary>
            Returns true if the requested service is available and can be enabled on demand
            </summary>
        </member>
        <member name="T:NServiceBus.Config.DisplayInfrastructureServicesStatus">
            <summary>
            Displays the current status for the infrastructure services
            </summary>
        </member>
        <member name="T:NServiceBus.Transports.ICreateQueues">
            <summary>
            Abstraction of the capability to create queues
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.ICreateQueues.CreateQueueIfNecessary(NServiceBus.Address,System.String)">
            <summary>
            Create a messages queue where its name is the address parameter, for the given account.
            </summary>
        </member>
        <member name="T:NServiceBus.Transports.IDeferMessages">
            <summary>
            Called when the bus wants to defer a message
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.IDeferMessages.Defer(NServiceBus.TransportMessage,System.DateTime,NServiceBus.Address)">
            <summary>
            Defers the given message that will be processed at the given time
            </summary>
            <param name="address">The endpoint of the endpoint who should get the message</param>
        </member>
        <member name="M:NServiceBus.Transports.IDeferMessages.ClearDeferredMessages(System.String,System.String)">
            <summary>
            Clears all timeouts for the given header
            </summary>
        </member>
        <member name="T:NServiceBus.Transports.IDequeueMessages">
            <summary>
            Interface to implement when developing custom dequeuing strategies.
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.IDequeueMessages.Init(NServiceBus.Address,NServiceBus.Unicast.Transport.TransactionSettings,System.Func{NServiceBus.TransportMessage,System.Boolean},System.Action{NServiceBus.TransportMessage,System.Exception})">
            <summary>
            Initializes the <see cref="T:NServiceBus.Transports.IDequeueMessages"/>.
            </summary>
            <param name="address">The address to listen on.</param>
            <param name="transactionSettings">The <see cref="T:NServiceBus.Unicast.Transport.TransactionSettings"/> to be used by <see cref="T:NServiceBus.Transports.IDequeueMessages"/>.</param>
            <param name="tryProcessMessage">Called when a message has been dequeued and is ready for processing.</param>
            <param name="endProcessMessage">Needs to be called by <see cref="T:NServiceBus.Transports.IDequeueMessages"/> after the message has been processed regardless if the outcome was successful or not.</param>
        </member>
        <member name="M:NServiceBus.Transports.IDequeueMessages.Start(System.Int32)">
            <summary>
            Starts the dequeuing of message using the specified <paramref name="maximumConcurrencyLevel"/>.
            </summary>
            <param name="maximumConcurrencyLevel">Indicates the maximum concurrency level this <see cref="T:NServiceBus.Transports.IDequeueMessages"/> is able to support.</param>
        </member>
        <member name="M:NServiceBus.Transports.IDequeueMessages.Stop">
            <summary>
            Stops the dequeuing of messages.
            </summary>
        </member>
        <member name="T:NServiceBus.Transports.IPublishMessages">
            <summary>
            Requests a message to be published
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.IPublishMessages.Publish(NServiceBus.TransportMessage,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Publishes the given messages to all known subscribers
            </summary>
        </member>
        <member name="T:NServiceBus.Transports.ISendMessages">
            <summary>
            Abstraction of the capability to send messages.
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.ISendMessages.Send(NServiceBus.TransportMessage,NServiceBus.Address)">
            <summary>
            Sends the given <paramref name="message"/> to the <paramref name="address"/>.
            </summary>
            <param name="message"><see cref="T:NServiceBus.TransportMessage"/> to send.</param>
            <param name="address">Destination <see cref="T:NServiceBus.Address"/>.</param>
        </member>
        <member name="T:NServiceBus.Transports.TransportDefinition">
            <summary>
            Defines a transport that can be used by NServiceBus
            </summary>
        </member>
        <member name="P:NServiceBus.Transports.TransportDefinition.HasNativePubSubSupport">
            <summary>
            Indicates that the transport is capable of supporting the publish and subscribe pattern natively
            </summary>
        </member>
        <member name="P:NServiceBus.Transports.TransportDefinition.HasSupportForCentralizedPubSub">
            <summary>
            Indicates that the transport has a central store for subscriptions
            </summary>
        </member>
        <member name="T:NServiceBus.Msmq">
            <summary>
            Transport definition for MSMQ
            </summary>
        </member>
        <member name="T:NServiceBus.Transports.Msmq.Config.MsmqSettings">
            <summary>
            Runtime settings for the Msmq transport
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.Msmq.Config.MsmqSettings.#ctor">
            <summary>
            Constructs the settings class with defaults
            </summary>
        </member>
        <member name="P:NServiceBus.Transports.Msmq.Config.MsmqSettings.UseDeadLetterQueue">
            <summary>
            Determines if the dead letter queue should be used
            </summary>
        </member>
        <member name="P:NServiceBus.Transports.Msmq.Config.MsmqSettings.UseJournalQueue">
            <summary>
            Determines if journaling should be activated
            </summary>
        </member>
        <member name="P:NServiceBus.Transports.Msmq.Config.MsmqSettings.UseConnectionCache">
            <summary>
            Gets or sets a value that indicates whether a cache of connections will be maintained by the application.
            </summary> 
        </member>
        <member name="P:NServiceBus.Transports.Msmq.Config.MsmqSettings.UseTransactionalQueues">
            <summary>
            Determines if the system uses transactional queues
            </summary>
        </member>
        <member name="T:NServiceBus.Transports.Msmq.HeaderInfo">
            <summary>
            Represents the structure of header information passed in a TransportMessage.
            </summary>
        </member>
        <member name="P:NServiceBus.Transports.Msmq.HeaderInfo.Key">
            <summary>
            The key used to lookup the value in the header collection.
            </summary>
        </member>
        <member name="P:NServiceBus.Transports.Msmq.HeaderInfo.Value">
            <summary>
            The value stored under the key in the header collection.
            </summary>
        </member>
        <member name="T:NServiceBus.Transports.Msmq.MsmqDequeueStrategy">
            <summary>
                Default implementation of <see cref="T:NServiceBus.Transports.IDequeueMessages"/> for MSMQ.
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.Msmq.MsmqDequeueStrategy.Init(NServiceBus.Address,NServiceBus.Unicast.Transport.TransactionSettings,System.Func{NServiceBus.TransportMessage,System.Boolean},System.Action{NServiceBus.TransportMessage,System.Exception})">
            <summary>
                Initializes the <see cref="T:NServiceBus.Transports.IDequeueMessages"/>.
            </summary>
            <param name="address">The address to listen on.</param>
            <param name="settings">The <see cref="T:NServiceBus.Unicast.Transport.TransactionSettings"/> to be used by <see cref="T:NServiceBus.Transports.IDequeueMessages"/>.</param>
            <param name="tryProcessMessage">Called when a message has been dequeued and is ready for processing.</param>
            <param name="endProcessMessage">
                Needs to be called by <see cref="T:NServiceBus.Transports.IDequeueMessages"/> after the message has been
                processed regardless if the outcome was successful or not.
            </param>
        </member>
        <member name="M:NServiceBus.Transports.Msmq.MsmqDequeueStrategy.Start(System.Int32)">
            <summary>
                Starts the dequeuing of message using the specified <paramref name="maximumConcurrencyLevel" />.
            </summary>
            <param name="maximumConcurrencyLevel">The maximum concurrency level supported.</param>
        </member>
        <member name="M:NServiceBus.Transports.Msmq.MsmqDequeueStrategy.Stop">
            <summary>
                Stops the dequeuing of messages.
            </summary>
        </member>
        <member name="P:NServiceBus.Transports.Msmq.MsmqDequeueStrategy.PurgeOnStartup">
            <summary>
                Purges the queue on startup.
            </summary>
        </member>
        <member name="P:NServiceBus.Transports.Msmq.MsmqDequeueStrategy.UnitOfWork">
            <summary>
                Msmq unit of work to be used in non DTC mode <see cref="T:NServiceBus.Transports.Msmq.MsmqUnitOfWork"/>.
            </summary>
        </member>
        <member name="T:NServiceBus.Transports.Msmq.MsmqMessageSender">
            <summary>
                Msmq implementation of <see cref="T:NServiceBus.Transports.ISendMessages"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.Msmq.MsmqMessageSender.Send(NServiceBus.TransportMessage,NServiceBus.Address)">
            <summary>
                Sends the given <paramref name="message"/> to the <paramref name="address"/>.
            </summary>
            <param name="message">
                <see cref="T:NServiceBus.TransportMessage"/> to send.
            </param>
            <param name="address">
                Destination <see cref="T:NServiceBus.Address"/>.
            </param>
        </member>
        <member name="P:NServiceBus.Transports.Msmq.MsmqMessageSender.Settings">
            <summary>
                The current runtime settings for the transport
            </summary>
        </member>
        <member name="P:NServiceBus.Transports.Msmq.MsmqMessageSender.UnitOfWork">
            <summary>
            Msmq unit of work to be used in non DTC mode <see cref="T:NServiceBus.Transports.Msmq.MsmqUnitOfWork"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.Msmq.MsmqQueueCreator.CreateQueueIfNecessary(NServiceBus.Address,System.String)">
            <summary>
             Utility method for creating a queue if it does not exist.
            </summary>
            <param name="address">Queue path to create</param>
            <param name="account">The account to be given permissions to the queue</param>
        </member>
        <member name="M:NServiceBus.Transports.Msmq.MsmqQueueCreator.CreateQueue(System.String,System.String,System.Boolean)">
            <summary>
             Create named message queue
            </summary>
            <param name="queueName">Queue path</param>
            <param name="account">The account to be given permissions to the queue</param>
             <param name="transactional">If volatileQueues is true then create a non-transactional message queue</param>
        </member>
        <member name="M:NServiceBus.Transports.Msmq.MsmqQueueCreator.SetPermissionsForQueue(System.String,System.String)">
            <summary>
            Sets default permissions for queue.
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.Msmq.MsmqQueueCreator.GetFullPathWithoutPrefix(NServiceBus.Address)">
            <summary>
            Returns the full path without Format or direct os
            from an address.
            </summary>
        </member>
        <member name="P:NServiceBus.Transports.Msmq.MsmqQueueCreator.Settings">
            <summary>
            The current runtime settings
            </summary>
        </member>
        <member name="T:NServiceBus.Transports.Msmq.MsmqUtilities">
            <summary>
             MSMQ-related utility functions
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.Msmq.MsmqUtilities.GetFullPath(NServiceBus.Address)">
            <summary>
            Turns a '@' separated value into a full path.
            Format is 'queue@machine', or 'queue@ipaddress'
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.Msmq.MsmqUtilities.GetReturnAddress(System.String,System.String)">
            <summary>
            Gets the name of the return address from the provided value.
            If the target includes a machine name, uses the local machine name in the returned value
            otherwise uses the local IP address in the returned value.
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.Msmq.MsmqUtilities.GetReturnAddress(NServiceBus.Address,NServiceBus.Address)">
            <summary>
            Gets the name of the return address from the provided value.
            If the target includes a machine name, uses the local machine name in the returned value
            otherwise uses the local IP address in the returned value.
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.Msmq.MsmqUtilities.GetIndependentAddressForQueue(System.Messaging.MessageQueue)">
            <summary>
            Gets an independent address for the queue in the form:
            queue@machine.
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.Msmq.MsmqUtilities.Convert(System.Messaging.Message)">
            <summary>
            Converts an MSMQ message to a TransportMessage.
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.Msmq.MsmqUtilities.Convert(NServiceBus.TransportMessage)">
            <summary>
            Converts a TransportMessage to an Msmq message.
            Doesn't set the ResponseQueue of the result.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.MsmqSubscriptionStorageConfig">
            <summary>
            Contains the properties representing the MsmqSubscriptionStorage configuration section.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MsmqSubscriptionStorageConfig.Queue">
            <summary>
            The queue where subscription data will be stored.
            Use the "queue@machine" convention.
            </summary>
        </member>
        <member name="T:NServiceBus.Config.MsmqTransportConfig">
            <summary>
            Contains the properties representing the MsmqTransport configuration section.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MsmqTransportConfig.InputQueue">
            <summary>
            The queue to receive messages from in the format
            "queue@machine".
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MsmqTransportConfig.ErrorQueue">
            <summary>
            The queue to which to forward messages that could not be processed
            in the format "queue@machine".
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MsmqTransportConfig.NumberOfWorkerThreads">
            <summary>
            The number of worker threads that can process messages in parallel.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.MsmqTransportConfig.MaxRetries">
            <summary>
            The maximum number of times to retry processing a message
            when it fails before moving it to the error queue.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.RijndaelEncryptionServiceConfig.Key">
            <summary>
            The encryption key.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.TransportConfig.MaximumConcurrencyLevel">
            <summary>
            Specifies the maximum concurrency level this <see cref="T:NServiceBus.Unicast.Transport.ITransport"/> is able to support.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.TransportConfig.MaxRetries">
            <summary>
            The maximum number of times to retry processing a message
            when it fails before moving it to the error queue.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.TransportConfig.MaximumMessageThroughputPerSecond">
            <summary>
            The max throughput for the transport. This allows the user to throttle their endpoint if needed
            </summary>
        </member>
        <member name="T:NServiceBus.Config.UnicastBusConfig">
            <summary>
            A configuration section for UnicastBus specific settings.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.UnicastBusConfig.DistributorControlAddress">
            <summary>
            Gets/sets the address for sending control messages to the distributor.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.UnicastBusConfig.DistributorDataAddress">
            <summary>
            Gets/sets the distributor's data address - used as the return address of messages sent by this endpoint.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.UnicastBusConfig.ForwardReceivedMessagesTo">
            <summary>
            Gets/sets the address to which messages received will be forwarded.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.UnicastBusConfig.TimeToBeReceivedOnForwardedMessages">
            <summary>
            Gets/sets the time to be received set on forwarded messages
            </summary>
        </member>
        <member name="P:NServiceBus.Config.UnicastBusConfig.TimeoutManagerAddress">
            <summary>
            Gets/sets the address that the timeout manager will use to send and receive messages.
            </summary>
        </member>
        <member name="P:NServiceBus.Config.UnicastBusConfig.MessageEndpointMappings">
            <summary>
            Contains the mappings from message types (or groups of them) to endpoints.
            </summary>
        </member>
        <member name="T:NServiceBus.DataBus.IDataBusSerializer">
            <summary>
            Interface used for serializing and deserializing of databus properties.
            </summary>
        </member>
        <member name="M:NServiceBus.DataBus.IDataBusSerializer.Serialize(System.Object,System.IO.Stream)">
            <summary>
            Serializes the property into the given stream.
            </summary>
            <param name="databusProperty">The property to serialize.</param>
            <param name="stream">The stream to which to write the property.</param>>
        </member>
        <member name="M:NServiceBus.DataBus.IDataBusSerializer.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes a property from the given stream.
            </summary>
            <param name="stream">The stream from which to read the property.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="T:NServiceBus.DataBus.FileShare.FileShareDataBus">
            <summary>
            File share implementation of <see cref="T:NServiceBus.DataBus.IDataBus"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.DataBus.FileShare.FileShareDataBus.#ctor(System.String)">
            <summary>
            Create a <see cref="T:NServiceBus.DataBus.FileShare.FileShareDataBus"/> with the specified <paramref name="basePath"/>.
            </summary>
            <param name="basePath">The path to save files on.</param>
        </member>
        <member name="M:NServiceBus.DataBus.FileShare.FileShareDataBus.Get(System.String)">
            <summary>
            Gets a data item from the bus.
            </summary>
            <param name="key">The key to look for.</param>
            <returns>The data <see cref="T:System.IO.Stream"/>.</returns>
        </member>
        <member name="M:NServiceBus.DataBus.FileShare.FileShareDataBus.Put(System.IO.Stream,System.TimeSpan)">
            <summary>
            Adds a data item to the bus and returns the assigned key.
            </summary>
            <param name="stream">A create containing the data to be sent on the databus.</param>
            <param name="timeToBeReceived">The time to be received specified on the message type. TimeSpan.MaxValue is the default.</param>
        </member>
        <member name="M:NServiceBus.DataBus.FileShare.FileShareDataBus.Start">
            <summary>
            Called when the bus starts up to allow the data bus to active background tasks.
            </summary>
        </member>
        <member name="P:NServiceBus.DataBus.FileShare.FileShareDataBus.MaxMessageTimeToLive">
            <summary>
            Gets/Sets the maximum message TTL.
            </summary>
        </member>
        <member name="T:NServiceBus.DateTimeExtensions">
            <summary>
            Common date time extensions
            </summary>
        </member>
        <member name="M:NServiceBus.DateTimeExtensions.ToWireFormattedString(System.DateTime)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> to a <see cref="T:System.String"/> suitable for transport over the wire
            </summary>
        </member>
        <member name="M:NServiceBus.DateTimeExtensions.ToUtcDateTime(System.String)">
            <summary>
            Converts a wire formatted <see cref="T:System.String"/> from <see cref="M:NServiceBus.DateTimeExtensions.ToWireFormattedString(System.DateTime)"/> to a UTC <see cref="T:System.DateTime"/>
            </summary>
        </member>
        <member name="T:NServiceBus.DependencyLifecycle">
            <summary>
            Represent the various lifecycles available for components configured in the container.
            </summary>
        </member>
        <member name="F:NServiceBus.DependencyLifecycle.SingleInstance">
            <summary>
            The same instance will be returned each time
            </summary>
        </member>
        <member name="F:NServiceBus.DependencyLifecycle.InstancePerUnitOfWork">
            <summary>
            The instance will be singleton for the duration of the unit of work. In practice this means 
            the processing of a single transport message
            </summary>
        </member>
        <member name="F:NServiceBus.DependencyLifecycle.InstancePerCall">
            <summary>
            A new instance will be returned fro each call
            </summary>
        </member>
        <member name="T:NServiceBus.Distributor.DistributorReadyMessageProcessor">
            <summary>
                Part of the Distributor infrastructure.
            </summary>
        </member>
        <member name="M:NServiceBus.Distributor.DistributorReadyMessageProcessor.Handle(NServiceBus.TransportMessage)">
            <summary>
                This method is called when a message is available to be processed.
            </summary>
            <param name="message">
                The <see cref="T:NServiceBus.TransportMessage"/> received.
            </param>
        </member>
        <member name="M:NServiceBus.Distributor.DistributorReadyMessageProcessor.Start">
            <summary>
                Starts the <see cref="T:NServiceBus.Satellites.ISatellite"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Distributor.DistributorReadyMessageProcessor.Stop">
            <summary>
                Stops the <see cref="T:NServiceBus.Satellites.ISatellite"/>.
            </summary>
        </member>
        <member name="P:NServiceBus.Distributor.DistributorReadyMessageProcessor.WorkerAvailabilityManager">
            <summary>
                Sets the <see cref="T:NServiceBus.Distributor.IWorkerAvailabilityManager"/> implementation that will be
                used to determine whether or not a worker is available.
            </summary>
        </member>
        <member name="P:NServiceBus.Distributor.DistributorReadyMessageProcessor.InputAddress">
            <summary>
                The <see cref="T:NServiceBus.Address"/> for this <see cref="T:NServiceBus.Satellites.ISatellite"/> to use when receiving messages.
            </summary>
        </member>
        <member name="P:NServiceBus.Distributor.DistributorReadyMessageProcessor.Disabled">
            <summary>
                Set to <code>true</code> to disable this <see cref="T:NServiceBus.Satellites.ISatellite"/>.
            </summary>
        </member>
        <member name="T:NServiceBus.Distributor.LicenseConfig">
            <summary>
            Limit number of workers in accordance with Licensing policy
            </summary>
        </member>
        <member name="T:NServiceBus.Transports.Msmq.WorkerAvailabilityManager.DistributorStorageQueueCreator">
            <summary>
             Signal to create the queue to store worker availability information.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Queuing.IWantQueueCreated">
            <summary>
            Implementers signal their wish to create a queue, regardless of technology (e.g. MSMQ or SQL Server).
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Queuing.IWantQueueCreated.Address">
            <summary>
            Address of queue the implementer requires.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Queuing.IWantQueueCreated.IsDisabled">
            <summary>
            True if no need to create queue
            </summary>
        </member>
        <member name="P:NServiceBus.Transports.Msmq.WorkerAvailabilityManager.DistributorStorageQueueCreator.MsmqWorkerAvailabilityManager">
            <summary>
            Holds storage queue address.
            </summary>
        </member>
        <member name="P:NServiceBus.Transports.Msmq.WorkerAvailabilityManager.DistributorStorageQueueCreator.Address">
            <summary>
            Address of Distributor storage queue.
            </summary>
        </member>
        <member name="P:NServiceBus.Transports.Msmq.WorkerAvailabilityManager.DistributorStorageQueueCreator.IsDisabled">
            <summary>
            Disabling the creation of the distributor storage queue
            </summary>
        </member>
        <member name="T:NServiceBus.Transports.Msmq.WorkerAvailabilityManager.MsmqWorkerAvailabilityManager">
            <summary>
            An implementation of <see cref="T:NServiceBus.Distributor.IWorkerAvailabilityManager"/> for MSMQ to be used
            with the <see cref="T:NServiceBus.Distributor.DistributorSatellite"/> class.
            </summary>
        </member>
        <member name="T:NServiceBus.Distributor.IWorkerAvailabilityManager">
            <summary>
            Defines a manager class that determines the availability
            of a worker for the <see cref="T:NServiceBus.Distributor.DistributorSatellite"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Distributor.IWorkerAvailabilityManager.Start">
            <summary>
             Start the worker availability manager
            </summary>
        </member>
        <member name="M:NServiceBus.Distributor.IWorkerAvailabilityManager.Stop">
            <summary>
             Stops the worker availability manager
            </summary>
        </member>
        <member name="M:NServiceBus.Distributor.IWorkerAvailabilityManager.WorkerAvailable(NServiceBus.Address,System.Int32)">
            <summary>
            Signal that a worker is available to receive a dispatched message.
            </summary>
            <param name="address">
            The address of the worker that will accept the dispatched message.
            </param>
            <param name="capacity">The number of messages that this worker is ready to process</param>
        </member>
        <member name="M:NServiceBus.Distributor.IWorkerAvailabilityManager.PopAvailableWorker">
            <summary>
            Pops the next available worker from the available worker list
            and returns its address.
            </summary>
            <returns>The address of the next available worker.</returns>
        </member>
        <member name="M:NServiceBus.Distributor.IWorkerAvailabilityManager.ClearAvailabilityForWorker(NServiceBus.Address)">
            <summary>
            Removes all entries from the worker availability list
            with the specified address.
            </summary>
            <param name="address">
            The address of the worker to remove from the availability list.
            </param>
        </member>
        <member name="M:NServiceBus.Transports.Msmq.WorkerAvailabilityManager.MsmqWorkerAvailabilityManager.ClearAvailabilityForWorker(NServiceBus.Address)">
            <summary>
            Removes all entries from the worker availability queue
            with the specified address.
            </summary>
            <param name="address">
            The address of the worker to remove from the availability list.
            </param>
        </member>
        <member name="M:NServiceBus.Transports.Msmq.WorkerAvailabilityManager.MsmqWorkerAvailabilityManager.PopAvailableWorker">
            <summary>
            Pops the next available worker from the available worker queue
            and returns its address.
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.Msmq.WorkerAvailabilityManager.MsmqWorkerAvailabilityManager.Start">
            <summary>
            Initializes the object.
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.Msmq.WorkerAvailabilityManager.MsmqWorkerAvailabilityManager.WorkerAvailable(NServiceBus.Address,System.Int32)">
            <summary>
            Signal that a worker is available to receive a dispatched message.
            </summary>
            <param name="address">
            The address of the worker that will accept the dispatched message.
            </param>
            <param name="capacity">The number of messages that this worker is ready to process</param>
        </member>
        <member name="P:NServiceBus.Transports.Msmq.WorkerAvailabilityManager.MsmqWorkerAvailabilityManager.UnitOfWork">
            <summary>
            Msmq unit of work to be used in non DTC mode <see cref="T:NServiceBus.Transports.Msmq.MsmqUnitOfWork"/>.
            </summary>
        </member>
        <member name="P:NServiceBus.Transports.Msmq.WorkerAvailabilityManager.MsmqWorkerAvailabilityManager.StorageQueueAddress">
            <summary>
            Sets the path to the queue that will be used for storing
            worker availability.
            </summary>
            <remarks>The queue provided must be transactional.</remarks>
        </member>
        <member name="T:NServiceBus.Distributor.QueueCreators.WorkerQueueCreator">
            <summary>
            Signal to create the queue for a worker
            </summary>
        </member>
        <member name="P:NServiceBus.Distributor.QueueCreators.WorkerQueueCreator.Address">
            <summary>
            Address of worker queue
            </summary>
        </member>
        <member name="P:NServiceBus.Distributor.QueueCreators.WorkerQueueCreator.IsDisabled">
            <summary>
            Disabling the creation of the worker queue
            </summary>
        </member>
        <member name="M:NServiceBus.Encryption.Config.ConfigureEncryption.DisableCompatibilityWithNSB2(NServiceBus.Configure)">
            <summary>
            Causes the endpoint to no longer send extra data to make encryption compatible with NSB 2.X
            </summary>
        </member>
        <member name="T:NServiceBus.Encryption.EncryptionMessageMutator">
            <summary>
            Invokes the encryption service to encrypt/decrypt messages
            </summary>
        </member>
        <member name="T:NServiceBus.Encryption.IEncryptionService">
            <summary>
            Abstraction for encryption capabilities.
            </summary>
        </member>
        <member name="M:NServiceBus.Encryption.IEncryptionService.Encrypt(System.String)">
            <summary>
            Encrypts the given value returning an EncryptedValue.
            </summary>
        </member>
        <member name="M:NServiceBus.Encryption.IEncryptionService.Decrypt(NServiceBus.EncryptedValue)">
            <summary>
            Decrypts the given EncryptedValue object returning the source string.
            </summary>
        </member>
        <member name="T:NServiceBus.Encryption.Rijndael.EncryptionService">
            <summary>
            Implementation of the encryption capability using Rijndael. allowable under the Apache 2.0 license.
            </summary>
        </member>
        <member name="P:NServiceBus.Encryption.Rijndael.EncryptionService.Key">
            <summary>
            Symmetric key used for encryption.
            </summary>
        </member>
        <member name="T:NServiceBus.EndpointConventions">
            <summary>
            Static extension methods to Configure.
            </summary>
        </member>
        <member name="M:NServiceBus.EndpointConventions.DefineEndpointName(NServiceBus.Configure,System.Func{System.String})">
            <summary>
            Sets the function that specified the name of this endpoint
            </summary>
        </member>
        <member name="M:NServiceBus.EndpointConventions.DefineEndpointName(NServiceBus.Configure,System.String)">
            <summary>
            Sets the function that specified the name of this endpoint
            </summary>
        </member>
        <member name="T:NServiceBus.Faults.FaultsHeaderKeys">
            <summary>
            Class holding keys to message headers for faults.
            </summary>
        </member>
        <member name="F:NServiceBus.Faults.FaultsHeaderKeys.FailedQ">
            <summary>
            Header key for setting/getting the queue at which the message processing failed.
            </summary>
        </member>
        <member name="T:NServiceBus.Faults.Forwarder.Config.FaultsQueueCreator">
            <summary>
            Signals to create faults queue
            </summary>
        </member>
        <member name="P:NServiceBus.Faults.Forwarder.Config.FaultsQueueCreator.Address">
            <summary>
            Signals to create the faults queue
            </summary>
        </member>
        <member name="P:NServiceBus.Faults.Forwarder.Config.FaultsQueueCreator.IsDisabled">
            <summary>
            Disabling the creation of faults queue
            </summary>
        </member>
        <member name="T:NServiceBus.Faults.Forwarder.FaultManager">
            <summary>
            Implementation of IManageMessageFailures by forwarding messages
            using ISendMessages.
            </summary>
        </member>
        <member name="T:NServiceBus.Faults.IManageMessageFailures">
            <summary>
            Interface for defining how message failures will be handled.
            </summary>
        </member>
        <member name="M:NServiceBus.Faults.IManageMessageFailures.SerializationFailedForMessage(NServiceBus.TransportMessage,System.Exception)">
            <summary>
            Invoked when the deserialization of a message failed.
            </summary>
        </member>
        <member name="M:NServiceBus.Faults.IManageMessageFailures.ProcessingAlwaysFailsForMessage(NServiceBus.TransportMessage,System.Exception)">
            <summary>
            Invoked when a message has failed its processing the maximum number of time configured.
            </summary>
        </member>
        <member name="M:NServiceBus.Faults.IManageMessageFailures.Init(NServiceBus.Address)">
            <summary>
            Initializes the fault manager
            </summary>
            <param name="address">The address of the message source</param>
        </member>
        <member name="P:NServiceBus.Faults.Forwarder.FaultManager.ErrorQueue">
            <summary>
            Endpoint to which message failures are forwarded
            </summary>
        </member>
        <member name="P:NServiceBus.Faults.Forwarder.FaultManager.RetriesErrorQueue">
            <summary>
            The address of the Second Level Retries input queue when SLR is enabled
            </summary>
        </member>
        <member name="M:NServiceBus.Faults.Forwarder.MessageHelpers.GetLabelWithoutFailedQueue(System.Messaging.Message)">
            <summary>
            For compatibility with V2.6:
            Gets the label of the message stripping out the failed queue.
            </summary>
        </member>
        <member name="M:NServiceBus.Faults.Forwarder.MessageHelpers.GetFailedQueueFromLabel(System.Messaging.Message)">
            <summary>
            For compatibility with V2.6:
            Returns the queue whose process failed processing the given message
            by accessing the label of the message.
            </summary>
        </member>
        <member name="T:NServiceBus.Faults.InMemory.FaultManager">
            <summary>
            Logging implementation of IManageMessageFailures.
            </summary>
        </member>
        <member name="M:NServiceBus.Faults.InMemory.FaultManager.Init(NServiceBus.Address)">
            <summary>
            Initializes the fault manager
            </summary>
            <param name="address">The address of the message source</param>
        </member>
        <member name="T:NServiceBus.MessageMutator.IMutateTransportMessages">
            <summary>
            Use this interface to change transport messages before any other code sees them. 
            </summary>
        </member>
        <member name="T:NServiceBus.MessageMutator.IMutateIncomingTransportMessages">
            <summary>
            Mutates transport messages when they are received.
            Implementors are invoked before the logical messages have been deserialized.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageMutator.IMutateIncomingTransportMessages.MutateIncoming(NServiceBus.TransportMessage)">
            <summary>
            Modifies various properties of the transport message.
            </summary>
        </member>
        <member name="T:NServiceBus.Hosting.Configuration.ConfigManager">
            <summary>
            Configures the host upon startup
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Configuration.ConfigManager.#ctor(System.Collections.Generic.List{System.Reflection.Assembly},NServiceBus.IConfigureThisEndpoint)">
            <summary>
            Constructs the manager with the given user configuration and the list of assemblies that should be scanned
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Configuration.ConfigManager.ConfigureCustomInitAndStartup">
            <summary>
            Configures the user classes that need custom config and those that are marked to run at startup
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Configuration.ConfigManager.Startup">
            <summary>
            Executes the user classes that are marked as "run at startup"
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Configuration.ConfigManager.Shutdown">
            <summary>
            Shuts down the user classes started earlier
            </summary>
        </member>
        <member name="T:NServiceBus.EndpointNameAttribute">
            <summary>
            Used to specify the name of the current endpoint.
            Will be used as the name of the input queue as well.
            </summary>
        </member>
        <member name="M:NServiceBus.EndpointNameAttribute.#ctor(System.String)">
            <summary>
            Used to specify the name of the current endpoint.
            Will be used as the name of the input queue as well.
            </summary>
        </member>
        <member name="P:NServiceBus.EndpointNameAttribute.Name">
            <summary>
            The name of the endpoint.
            </summary>
        </member>
        <member name="T:NServiceBus.EndpointSLAAttribute">
            <summary>
            Defines the SLA for this endpoint. Needs to be set on the endpoint configuration class
            </summary>
        </member>
        <member name="M:NServiceBus.EndpointSLAAttribute.#ctor(System.String)">
            <summary>
            Used to define the SLA for this endpoint
            </summary>
            <param name="sla">A <see cref="T:System.String"/> representing a <see cref="T:System.TimeSpan"/></param>
        </member>
        <member name="P:NServiceBus.EndpointSLAAttribute.SLA">
            <summary>
            The SLA of the endpoint.
            </summary>
        </member>
        <member name="T:NServiceBus.IConfigureLogging">
            <summary>
            Called in order to configure logging.
            
            If you want logging configured regardless of profiles, do not use this interface,
            instead implement <see cref="T:NServiceBus.IWantCustomLogging"/> on the class which implements <see cref="T:NServiceBus.IConfigureThisEndpoint"/>.
            
            Implementors should work against the generic version of this interface.
            </summary>
        </member>
        <member name="M:NServiceBus.IConfigureLogging.Configure(NServiceBus.IConfigureThisEndpoint)">
            <summary>
            Performs all logging configuration.
            </summary>
        </member>
        <member name="T:NServiceBus.IConfigureLoggingForProfile`1">
            <summary>
            Called in order to configure logging for the given profile type.
            If an implementation isn't found for a given profile, then the search continues
            recursively up that profile's inheritance hierarchy.
            </summary>
        </member>
        <member name="T:NServiceBus.IConfigureThisEndpoint">
            <summary>
            Indicate that the implementing class will specify configuration.
            </summary>
        </member>
        <member name="T:NServiceBus.IWantCustomLogging">
            <summary>
            If you want to specify your own logging,
            implement this interface on the class which implements <see cref="T:NServiceBus.IConfigureThisEndpoint"/>. 
            </summary>
        </member>
        <member name="M:NServiceBus.IWantCustomLogging.Init">
            <summary>
            Initialize logging.
            </summary>
        </member>
        <member name="T:NServiceBus.IWantToRunAtStartup">
            <summary>
            Implementers will be invoked when the endpoint starts up.
            Dependency injection is provided for these types.
            </summary>
        </member>
        <member name="M:NServiceBus.IWantToRunAtStartup.Run">
            <summary>
            Method called at startup.
            </summary>
        </member>
        <member name="M:NServiceBus.IWantToRunAtStartup.Stop">
            <summary>
            Method called on shutdown.
            </summary>
        </member>
        <member name="T:NServiceBus.Hosting.GenericHost">
            <summary>
                A generic host that can be used to provide hosting services in different environments
            </summary>
        </member>
        <member name="T:NServiceBus.Hosting.IHost">
            <summary>
            Identifies a host
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.IHost.Start">
            <summary>
            Does startup work.
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.IHost.Stop">
            <summary>
            Does shutdown work.
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.IHost.Install``1(System.String)">
            <summary>
            Performs necessary installation
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.GenericHost.#ctor(NServiceBus.IConfigureThisEndpoint,System.String[],System.Collections.Generic.List{System.Type},System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Accepts the type which will specify the users custom configuration.
                This type should implement <see cref="T:NServiceBus.IConfigureThisEndpoint"/>.
            </summary>
            <param name="scannableAssembliesFullName">Assemblies full name that were scanned.</param>
        </member>
        <member name="M:NServiceBus.Hosting.GenericHost.Start">
            <summary>
                Creates and starts the bus as per the configuration
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.GenericHost.Stop">
            <summary>
                Finalize
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.GenericHost.Install``1(System.String)">
            <summary>
                When installing as windows service (/install), run infrastructure installers
            </summary>
        </member>
        <member name="T:NServiceBus.Hosting.Helpers.AssemblyScanner">
            <summary>
              Helpers for assembly scanning operations
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Helpers.AssemblyScanner.GetScannableAssemblies">
            <summary>
                Traverses the specified base directory including all sub-directories, generating a list of assemblies that can be
                scanned for handlers, a list of skipped files, and a list of errors that occurred while scanning.
                Scanned files may be skipped when they're either not a .NET assembly, or if a reflection-only load of the .NET
                assembly reveals that it does not reference NServiceBus.
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Helpers.AssemblyScanner.IsIncluded(System.String)">
            <summary>
             Determines whether the specified assembly name or file name can be included, given the set up include/exclude
             patterns and default include/exclude patterns
            </summary>
        </member>
        <member name="T:NServiceBus.Hosting.Helpers.AssemblyScannerResults">
            <summary>
            Holds GetScannableAssemblies results.
            Contains list of errors and list of scan-able assemblies.
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Helpers.AssemblyScannerResults.#ctor">
            <summary>
            Constructor to initialize AssemblyScannerResults
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Helpers.AssemblyScannerResults.FormattedErrors">
            <summary>
            Format errors.
            </summary>
        </member>
        <member name="P:NServiceBus.Hosting.Helpers.AssemblyScannerResults.Errors">
            <summary>
            List of errors that occurred while attempting to load an assembly
            </summary>
        </member>
        <member name="P:NServiceBus.Hosting.Helpers.AssemblyScannerResults.Assemblies">
            <summary>
            List of successfully found and loaded assemblies
            </summary>
        </member>
        <member name="P:NServiceBus.Hosting.Helpers.AssemblyScannerResults.SkippedFiles">
            <summary>
            List of files that were skipped while scanning because they were a) explicitly excluded
            by the user, b) not a .NET DLL, or c) not referencing NSB and thus not capable of implementing
            <see cref="T:NServiceBus.IHandleMessages`1"/>
            </summary>
        </member>
        <member name="T:NServiceBus.IProfile">
            <summary>
            Marker interface to indicate a run-time profile.
            Implementors must be concrete class - interfaces are not supported.
            </summary>
        </member>
        <member name="T:NServiceBus.Hosting.Profiles.ProfileActivator">
            <summary>
            Activates the profiles to be used
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Profiles.ProfileActivator.Run">
            <summary>
            Activate profile handlers
            </summary>
        </member>
        <member name="P:NServiceBus.Hosting.Profiles.ProfileActivator.ProfileManager">
            <summary>
            The profile manager
            </summary>
        </member>
        <member name="T:NServiceBus.Hosting.Profiles.ProfileManager">
            <summary>
            Scans and loads profile handlers from the given assemblies
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Profiles.ProfileManager.#ctor(System.Collections.Generic.List{System.Reflection.Assembly},NServiceBus.IConfigureThisEndpoint,System.String[],System.Collections.Generic.List{System.Type})">
            <summary>
            Initializes the manager with the assemblies to scan and the endpoint configuration to use
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Profiles.ProfileManager.GetLoggingConfigurer">
            <summary>
            Returns an object to configure logging based on the specification and profiles passed in.
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Profiles.ProfileManager.ActivateProfileHandlers">
            <summary>
            Activates the profile handlers that handle the previously identified active profiles. 
            </summary>
        </member>
        <member name="T:NServiceBus.Hosting.Roles.IConfigureRole">
            <summary>
            Interface that enables configuration based on specified role
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Roles.IConfigureRole.ConfigureRole(NServiceBus.IConfigureThisEndpoint)">
            <summary>
            Applies the role configuration
            </summary>
        </member>
        <member name="T:NServiceBus.Hosting.Roles.IConfigureRole`1">
            <summary>
            Generic helper interface for IConfigureRole
            </summary>
        </member>
        <member name="T:NServiceBus.Hosting.Roles.IRole">
            <summary>
            Marker interface for roles
            </summary>
        </member>
        <member name="T:NServiceBus.Hosting.Roles.RoleManager">
            <summary>
            Handles the different roles that are registered
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Roles.RoleManager.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Creates the manager with the list of assemblies to scan for roles
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Roles.RoleManager.ConfigureBusForEndpoint(NServiceBus.IConfigureThisEndpoint)">
            <summary>
            Checks if the specifier contains a given role and uses it to configure the UnicastBus appropriately.
            </summary>
        </member>
        <member name="T:NServiceBus.Hosting.Wcf.WcfManager">
            <summary>
            Enable users to expose messages as WCF services
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Wcf.WcfManager.Startup">
            <summary>
            Starts a <see cref="T:System.ServiceModel.ServiceHost"/> for each found service. Defaults to <see cref="T:System.ServiceModel.BasicHttpBinding"/> if
            no user specified binding is found
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Wcf.WcfManager.Shutdown">
            <summary>
            Shuts down the service hosts
            </summary>
        </member>
        <member name="T:NServiceBus.Hosting.Wcf.WcfServiceHost">
            <summary>
            A specialized service host that adds a default endpoint if non is specified in config
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Wcf.WcfServiceHost.#ctor(System.Type)">
            <summary>
            Constructs the host with the given service type
            </summary>
        </member>
        <member name="M:NServiceBus.Hosting.Wcf.WcfServiceHost.AddDefaultEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String)">
            <summary>
            Adds the given endpoint unless its already configured in app.config
            </summary>
        </member>
        <member name="T:NServiceBus.Impersonation.ExtractIncomingPrincipal">
            <summary>
            Allows different authentication techniques to be plugged in.
            </summary>
        </member>
        <member name="M:NServiceBus.Impersonation.ExtractIncomingPrincipal.GetPrincipal(NServiceBus.TransportMessage)">
            <summary>
            Gets the principal of the client to be used when handling the message
            </summary>
        </member>
        <member name="T:NServiceBus.Impersonation.Windows.ConfigureWindowsImpersonation">
            <summary>
            Configures windows impersonation
            </summary>
        </member>
        <member name="T:NServiceBus.Impersonation.Windows.WindowsIdentityEnricher">
            <summary>
            Stamps outgoing messages with the current windows identity
            </summary>
        </member>
        <member name="T:NServiceBus.Impersonation.Windows.WindowsImpersonator">
            <summary>
            Impersonates the client if needed
            </summary>
        </member>
        <member name="T:NServiceBus.Install">
            <summary>
            Contains extension methods to the Configure class.
            </summary>
        </member>
        <member name="M:NServiceBus.Install.ForInstallationOn``1(NServiceBus.Configure)">
            <summary>
            Indicates which environment is going to be installed, specifying that resources 
            to be created will be provided permissions for the currently logged on user.
            </summary>
            <typeparam name="T">The environment type.</typeparam>
            <param name="config">Extension method object.</param>
            <returns>An Installer object whose Install method should be invoked.</returns>
        </member>
        <member name="M:NServiceBus.Install.ForInstallationOn``1(NServiceBus.Configure,System.String)">
            <summary>
            Indicates which environment is going to be installed, specifying that resources 
            to be created will be provided permissions for the user represented by the userToken
            (where not the currently logged on user) or the currently logged on user.
            </summary>
            <typeparam name="T">The environment type.</typeparam>
            <param name="config">Extension method object.</param>
            <param name="username">The username.</param>
            <returns>An Installer object whose Install method should be invoked.</returns>
        </member>
        <member name="T:NServiceBus.Installer`1">
            <summary>
            Resolves objects who implement INeedToInstall and invokes them for the given environment.
            Assumes that implementors have already been registered in the container.
            </summary>
            <typeparam name="T">The environment for which the installers should be invoked.</typeparam>
        </member>
        <member name="M:NServiceBus.Installer`1.#ctor(System.Security.Principal.IIdentity)">
            <summary>
            Initializes a new instance of the Installer
            </summary>
            <param name="identity">Identity of the user to be used to setup installer.</param>
        </member>
        <member name="M:NServiceBus.Installer`1.Install">
            <summary>
            Invokes installers for the given environment
            </summary>
        </member>
        <member name="M:NServiceBus.Installer`1.InstallOtherInstallers">
            <summary>
            Invokes only 'Something' - other than infrastructure,  installers for the given environment.
            </summary>
        </member>
        <member name="P:NServiceBus.Installer`1.RunOtherInstallers">
            <summary>
            Gets or sets RunOtherInstallers 
            </summary>
        </member>
        <member name="T:NServiceBus.Installation.Environments.Windows">
            <summary>
            Windows installation environment
            </summary>
        </member>
        <member name="T:NServiceBus.Installation.IEnvironment">
            <summary>
            Interface for Environment
            </summary>
        </member>
        <member name="T:NServiceBus.Installation.INeedToInstallInfrastructure">
            <summary>
            Interface invoked by the infrastructure when going to install an endpoint.
            Implementors should not implement this type directly but rather the generic version of it.
            </summary>
        </member>
        <member name="T:NServiceBus.Installation.INeedToInstallInfrastructure`1">
            <summary>
            Interface invoked by the infrastructure when going to install an endpoint for a specific environment.
            Implementors invoked before <see cref="T:NServiceBus.Installation.INeedToInstallSomething"/>.
            </summary>
        </member>
        <member name="T:NServiceBus.IWcfService`2">
            <summary>
            Service interface for a generic WCF adapter to a messaging endpoint.
            </summary>
        </member>
        <member name="M:NServiceBus.IWcfService`2.BeginProcess(`0,System.AsyncCallback,System.Object)">
            <summary>
            Sends the message to the messaging endpoint.
            </summary>
        </member>
        <member name="M:NServiceBus.IWcfService`2.EndProcess(System.IAsyncResult)">
            <summary>
            Returns the result received from the messaging endpoint.
            </summary>
        </member>
        <member name="T:NServiceBus.Licensing.License">
            <summary>
            NServiceBus License information
            </summary>
        </member>
        <member name="M:NServiceBus.Licensing.LicenseManager.Parse(System.String)">
            <summary>
            Initializes the licensing system with the given license
            </summary>
        </member>
        <member name="M:NServiceBus.Licensing.LicenseManager.PromptUserForLicenseIfTrialHasExpired">
            <summary>
            Prompts the users if their trial license has expired
            </summary>
        </member>
        <member name="M:NServiceBus.Licensing.LicenseManager.ConfigureNServiceBusLicense">
            <summary>
                Set NServiceBus license information.
            </summary>
        </member>
        <member name="P:NServiceBus.Licensing.LicenseManager.CurrentLicense">
            <summary>
                Get current NServiceBus licensing information
            </summary>
        </member>
        <member name="T:NServiceBus.Licensing.LicenseType">
            <summary>
            License types.
            </summary>
        </member>
        <member name="T:NServiceBus.Licensing.StringLicenseValidator">
            <summary>
            Validates content of a license file
            </summary>
        </member>
        <member name="T:Rhino.Licensing.AbstractLicenseValidator">
            <summary>
            Base license validator.
            </summary>
        </member>
        <member name="F:Rhino.Licensing.AbstractLicenseValidator.Log">
            <summary>
            License validator logger
            </summary>
        </member>
        <member name="M:Rhino.Licensing.AbstractLicenseValidator.#ctor(System.String)">
            <summary>
            Creates a license validator with specified public key.
            </summary>
            <param name="publicKey">public key</param>
        </member>
        <member name="M:Rhino.Licensing.AbstractLicenseValidator.AssertValidLicense">
            <summary>
            Validates loaded license
            </summary>
        </member>
        <member name="M:Rhino.Licensing.AbstractLicenseValidator.TryLoadingLicenseValuesFromValidatedXml">
            <summary>
            Loads license data from validated license file.
            </summary>
        </member>
        <member name="E:Rhino.Licensing.AbstractLicenseValidator.LicenseInvalidated">
            <summary>
            Fired when license data is invalidated
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.ExpirationDate">
            <summary>
            Gets the expiration date of the license
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.LicenseType">
            <summary>
            Gets the Type of the license
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.UserId">
            <summary>
            Gets the Id of the license holder
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.Name">
            <summary>
            Gets the name of the license holder
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.LicenseAttributes">
            <summary>
            Gets extra license information
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.License">
            <summary>
            Gets or Sets the license content
            </summary>
        </member>
        <member name="P:Rhino.Licensing.AbstractLicenseValidator.LeaseTimeout">
            <summary>
            Lease timeout
            </summary>
        </member>
        <member name="M:NServiceBus.Licensing.StringLicenseValidator.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <seealso cref="T:NServiceBus.Licensing.StringLicenseValidator"/>
            </summary>
            <param name="publicKey">public key</param>
            <param name="license">license content</param>
        </member>
        <member name="P:NServiceBus.Licensing.StringLicenseValidator.License">
            <summary>
            License content
            </summary>
        </member>
        <member name="T:NServiceBus.Logging.Loggers.ConsoleLogger">
            <summary>
            
            </summary>
        </member>
        <member name="P:NServiceBus.Logging.Loggers.ConsoleLogger.IsDebugEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:NServiceBus.Logging.Loggers.ConsoleLogger.IsInfoEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="T:NServiceBus.Logging.Loggers.ConsoleLoggerFactory">
            <summary>
            
            </summary>
        </member>
        <member name="T:NServiceBus.Logging.Loggers.Log4NetAdapter.Log4NetConfigurator">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceBus.Logging.Loggers.Log4NetAdapter.Log4NetConfigurator.Configure">
            <summary>
            Configure NServiceBus to use Log4Net without setting a specific appender.
            </summary>
        </member>
        <member name="T:NServiceBus.Logging.Loggers.Log4NetAdapter.Log4NetLogger">
            <summary>
            
            </summary>
        </member>
        <member name="T:NServiceBus.Logging.Loggers.Log4NetAdapter.Log4NetLoggerFactory">
            <summary>
            
            </summary>
        </member>
        <member name="T:NServiceBus.Logging.Loggers.NLogAdapter.NLogConfigurator">
            <summary>
            
            </summary>
        </member>
        <member name="M:NServiceBus.Logging.Loggers.NLogAdapter.NLogConfigurator.Configure">
            <summary>
            Configure NServiceBus to use Log4Net without setting a specific appender.
            </summary>
        </member>
        <member name="T:NServiceBus.Logging.Loggers.NLogAdapter.NLogLogger">
            <summary>
            
            </summary>
        </member>
        <member name="T:NServiceBus.Logging.Loggers.NLogAdapter.NLogLoggerFactory">
            <summary>
            
            </summary>
        </member>
        <member name="T:NServiceBus.Logging.Loggers.NLogAdapter.NLogTargetFactory">
            <summary>
            Factory to create NLog targets
            </summary>
        </member>
        <member name="T:NServiceBus.Logging.Loggers.NullLogger">
            <summary>
            
            </summary>
        </member>
        <member name="T:NServiceBus.Logging.Loggers.NullLoggerFactory">
            <summary>
            
            </summary>
        </member>
        <member name="T:NServiceBus.MessageConventions">
            <summary>
            Static extension methods to Configure.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageConventions.DefiningMessagesAs(NServiceBus.Configure,System.Func{System.Type,System.Boolean})">
            <summary>
            Sets the function to be used to evaluate whether a type is a message.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageConventions.DefiningCommandsAs(NServiceBus.Configure,System.Func{System.Type,System.Boolean})">
            <summary>
            Sets the function to be used to evaluate whether a type is a commands.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageConventions.DefiningEventsAs(NServiceBus.Configure,System.Func{System.Type,System.Boolean})">
            <summary>
            Sets the function to be used to evaluate whether a type is a event.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageConventions.DefiningEncryptedPropertiesAs(NServiceBus.Configure,System.Func{System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
            Sets the function to be used to evaluate whether a property should be encrypted or not.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageConventions.DefiningDataBusPropertiesAs(NServiceBus.Configure,System.Func{System.Reflection.PropertyInfo,System.Boolean})">
            <summary>
            Sets the function to be used to evaluate whether a property should be sent via the DataBus or not.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageConventions.DefiningTimeToBeReceivedAs(NServiceBus.Configure,System.Func{System.Type,System.TimeSpan})">
            <summary>
            Sets the function to be used to evaluate whether a message has a time to be received.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageConventions.DefiningExpressMessagesAs(NServiceBus.Configure,System.Func{System.Type,System.Boolean})">
            <summary>
            Sets the function to be used to evaluate whether a type is an express message or not.
            </summary>
        </member>
        <member name="T:NServiceBus.MessageHeaders.MessageHeaderManager">
            <summary>
            Message Header Manager
            </summary>
        </member>
        <member name="M:NServiceBus.MessageHeaders.MessageHeaderManager.GetHeader(System.Object,System.String)">
            <summary>
            Gets the Header for the Message
            </summary>
            <param name="message">message for which Headers to be find</param>
            <param name="key">Key</param>
        </member>
        <member name="M:NServiceBus.MessageHeaders.MessageHeaderManager.SetHeader(System.Object,System.String,System.String)">
            <summary>
            Sets the Header for the Message
            </summary>
        </member>
        <member name="M:NServiceBus.MessageHeaders.MessageHeaderManager.GetStaticOutgoingHeaders">
            <summary>
            Gets Static Outgoing Headers
            </summary>
        </member>
        <member name="P:NServiceBus.MessageHeaders.MessageHeaderManager.Bus">
            <summary>
            Bus
            </summary>
        </member>
        <member name="T:NServiceBus.MessageInterfaces.IMessageMapper">
            <summary>
            Enables looking up interfaced mapped to generated concrete types.
            and vice versa.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.IMessageMapper.Initialize(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes the mapper with the given types to be scanned.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.IMessageMapper.GetMappedTypeFor(System.Type)">
            <summary>
            If the given type is an interface, returns the generated concrete type.
            If the given type is concrete, returns the interface it was generated from.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.IMessageMapper.GetMappedTypeFor(System.String)">
            <summary>
            Looks up the type mapped for the given name.
            </summary>
        </member>
        <member name="T:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper">
            <summary>
            Uses reflection to map between interfaces and their generated concrete implementations.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.Initialize(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Scans the given types generating concrete classes for interfaces.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.InitType(System.Type,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Generates a concrete implementation of the given type if it is an interface.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.GetNewTypeName(System.Type)">
            <summary>
            Generates a new full name for a type to be generated for the given type.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.CreateTypeFrom(System.Type,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Generates the concrete implementation of the given type.
            Only properties on the given type are generated in the concrete implementation.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.AddCustomAttributeToProperty(System.Object,System.Reflection.Emit.PropertyBuilder)">
            <summary>
            Given a custom attribute and property builder, adds an instance of custom attribute
            to the property builder
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.GetAllProperties(System.Type)">
            <summary>
            Returns all properties on the given type, going up the inheritance hierarchy.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.GetMappedTypeFor(System.Type)">
            <summary>
            If the given type is concrete, returns the interface it was generated to support.
            If the given type is an interface, returns the concrete class generated to implement it.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.GetMappedTypeFor(System.String)">
            <summary>
            Returns the type mapped to the given name.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.CreateInstance``1(System.Action{``0})">
            <summary>
            Calls the generic CreateInstance and performs the given action on the result.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.CreateInstance``1">
            <summary>
            Calls the <see cref="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.CreateInstance(System.Type)"/> and returns its result cast to <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.MessageInterfaces.MessageMapper.Reflection.MessageMapper.CreateInstance(System.Type)">
            <summary>
            If the given type is an interface, finds its generated concrete implementation, instantiates it, and returns the result.
            </summary>
        </member>
        <member name="M:NServiceBus.MonitoringConfig.SetEndpointSLA(NServiceBus.Configure,System.TimeSpan)">
            <summary>
            Sets the SLA for this endpoint
            </summary>
        </member>
        <member name="M:NServiceBus.MonitoringConfig.EndpointSLA(NServiceBus.Configure)">
            <summary>
            Gets the current SLA for this endpoint
            </summary>
        </member>
        <member name="M:NServiceBus.MonitoringConfig.EnablePerformanceCounters(NServiceBus.Configure)">
            <summary>
            Enables the NServiceBus specific performance counters
            </summary>
        </member>
        <member name="M:NServiceBus.MonitoringConfig.PerformanceCountersEnabled(NServiceBus.Configure)">
            <summary>
            True id performance counters are enabled
            </summary>
        </member>
        <member name="T:NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder">
            <summary>
             Autofac implementation of <see cref="T:NServiceBus.ObjectBuilder.Common.IContainer"/>.
            </summary>
        </member>
        <member name="T:NServiceBus.ObjectBuilder.Common.IContainer">
            <summary>
            Abstraction of a container.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.Build(System.Type)">
            <summary>
            Returns an instantiation of the given type.
            </summary>
            <param name="typeToBuild">The <see cref="T:System.Type"/> to build.</param>
            <returns>The component instance.</returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.BuildChildContainer">
            <summary>
            Returns a child instance of the container to facilitate deterministic disposal
            of all resources built by the child container.
            </summary>
            <returns>Returns a new child container.</returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.BuildAll(System.Type)">
            <summary>
            Returns a list of objects instantiated because their type is compatible
            with the given type.
            </summary>
            <param name="typeToBuild">Type to be build.</param>
            <returns>Enumeration of all types that implement <paramref name="typeToBuild"/>.</returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.Configure(System.Type,NServiceBus.DependencyLifecycle)">
            <summary>
            Configures the call model of the given component type.
            </summary>
            <param name="component">Type to be configured</param>
            <param name="dependencyLifecycle">The desired lifecycle for this type</param>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.Configure``1(System.Func{``0},NServiceBus.DependencyLifecycle)">
            <summary>
            Configures the call model of the given component type using a <see cref="T:System.Func`1"/>.
            </summary>
            <typeparam name="T">Type to be configured.</typeparam>
            <param name="component"><see cref="T:System.Func`1"/> to use to configure.</param>
            <param name="dependencyLifecycle">The desired lifecycle for this type.</param>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.ConfigureProperty(System.Type,System.String,System.Object)">
            <summary>
            Sets the value to be configured for the given property of the 
            given component type.
            </summary>
            <param name="component">The interface type.</param>
            <param name="property">The property name to be injected.</param>
            <param name="value">The value to assign to the <param name="property"></param>.</param>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.RegisterSingleton(System.Type,System.Object)">
            <summary>
            Registers the given instance as the singleton that will be returned for the given type.
            </summary>
            <param name="lookupType">The interface type.</param>
            <param name="instance">The implementation instance.</param>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.HasComponent(System.Type)">
            <summary>
            Indicates if a component of the given type has been configured.
            </summary>
            <param name="componentType">Component type to check.</param>
            <returns><c>true</c> if the <paramref name="componentType"/> is registered in the container or <c>false</c> otherwise.</returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Common.IContainer.Release(System.Object)">
            <summary>
            Releases a component instance.
            </summary>
            <param name="instance">The component instance to release.</param>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.#ctor(Autofac.ILifetimeScope)">
            <summary>
             Instantiates the class utilizing the given container.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.#ctor">
            <summary>
             Instantiates the class with an empty Autofac container.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.BuildChildContainer">
            <summary>
            Returns a child instance of the container to facilitate deterministic disposal
            of all resources built by the child container.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.Build(System.Type)">
            <summary>
             Build an instance of a given type using Autofac.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.BuildAll(System.Type)">
            <summary>
             Build all instances of a given type using Autofac.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.ConfigureProperty(System.Type,System.String,System.Object)">
            <summary>
             Configure the value of a named component property.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.RegisterSingleton(System.Type,System.Object)">
            <summary>
             Register a singleton instance of a dependency within Autofac.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Autofac.AutofacObjectBuilder.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
             Set a property value on an instance using reflection
            </summary>
        </member>
        <member name="T:NServiceBus.ObjectBuilder.Common.CommonObjectBuilder">
            <summary>
            Implementation of IBuilder, serving as a facade that container specific implementations
            of IContainer should run behind.
            </summary>
        </member>
        <member name="T:NServiceBus.ObjectBuilder.IBuilder">
            <summary>
            Used to instantiate types, so that all configured dependencies
            and property values are set.
            An abstraction on top of dependency injection frameworks.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IBuilder.Build(System.Type)">
            <summary>
            Returns an instantiation of the given type.
            </summary>
            <param name="typeToBuild">The <see cref="T:System.Type"/> to build.</param>
            <returns>The component instance.</returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IBuilder.CreateChildBuilder">
            <summary>
            Returns a child instance of the container to facilitate deterministic disposal
            of all resources built by the child container.
            </summary>
            <returns>Returns a new child container.</returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IBuilder.Build``1">
            <summary>
            Creates an instance of the given type, injecting it with all defined dependencies.
            </summary>
            <typeparam name="T">Type to be resolved.</typeparam>
            <returns>Instance of <typeparamref name="T"/></returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IBuilder.BuildAll``1">
            <summary>
            For each type that is compatible with T, an instance is created with all dependencies injected, and yielded to the caller.
            </summary>
            <typeparam name="T">Type to be resolved.</typeparam>
            <returns>Instances of <typeparamref name="T"/></returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IBuilder.BuildAll(System.Type)">
            <summary>
            For each type that is compatible with the given type, an instance is created with all dependencies injected.
            </summary>
            <param name="typeToBuild">The <see cref="T:System.Type"/> to build.</param>
            <returns>The component instances.</returns>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IBuilder.Release(System.Object)">
            <summary>
            Releases a component instance.
            </summary>
            <param name="instance">The component instance to release.</param>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IBuilder.BuildAndDispatch(System.Type,System.Action{System.Object})">
            <summary>
            Builds an instance of the defined type injecting it with all defined dependencies
            and invokes the given action on the instance.
            </summary>
            <param name="typeToBuild">The <see cref="T:System.Type"/> to build.</param>
            <param name="action">The callback to call.</param>
        </member>
        <member name="T:NServiceBus.ObjectBuilder.IConfigureComponents">
            <summary>
            Used to configure components in the container.
            Should primarily be used at startup/initialization time.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureComponent(System.Type,NServiceBus.DependencyLifecycle)">
            <summary>
            Configures the given type. Can be used to configure all kinds of properties.
            </summary>
            <param name="dependencyLifecycle">Defines lifecycle semantics for the given type.</param>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureComponent``1(NServiceBus.DependencyLifecycle)">
            <summary>
            Configures the given type, allowing to fluently configure properties.
            </summary>
            <param name="dependencyLifecycle">Defines lifecycle semantics for the given type.</param>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureComponent``1(System.Func{``0},NServiceBus.DependencyLifecycle)">
            <summary>
            Configures the given type, allowing to fluently configure properties.
            </summary>
            <typeparam name="T">Type to configure</typeparam>
            <param name="componentFactory">Factory method that returns the given type</param>
            <param name="dependencyLifecycle">Defines lifecycle semantics for the given type.</param>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureComponent``1(System.Func{NServiceBus.ObjectBuilder.IBuilder,``0},NServiceBus.DependencyLifecycle)">
            <summary>
            Configures the given type, allowing to fluently configure properties.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureComponent(System.Type,NServiceBus.ObjectBuilder.ComponentCallModelEnum)">
            <summary>
            Configures the given type. Can be used to configure all kinds of properties. This method is deprecated use the signature
            that contains the <see cref="T:NServiceBus.DependencyLifecycle"/> enum instead
            </summary>
            <param name="callModel">Defines whether the type should have singleton or single call semantics.</param>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureComponent``1(NServiceBus.ObjectBuilder.ComponentCallModelEnum)">
            <summary>
            Configures the given type, allowing to fluently configure properties. This method is deprecated use the signature
            that contains the <see cref="T:NServiceBus.DependencyLifecycle"/> enum instead
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Object)">
            <summary>
            Configures the given property of the given type to be injected with the given value.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.ConfigureProperty``1(System.String,System.Object)">
            <summary>
            Configures the given property of the given type to be injected with the given value.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.RegisterSingleton(System.Type,System.Object)">
            <summary>
            Registers the given instance as the singleton that will be returned
            for the given type.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.RegisterSingleton``1(System.Object)">
            <summary>
            Registers the given instance as the singleton that will be returned
            for the given type.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.HasComponent``1">
            <summary>
            Indicates if a component of the given type has been configured.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IConfigureComponents.HasComponent(System.Type)">
            <summary>
            Indicates if a component of the given type has been configured.
            </summary>
        </member>
        <member name="P:NServiceBus.ObjectBuilder.Common.CommonObjectBuilder.Container">
            <summary>
            The container that will be used to create objects and configure components.
            </summary>
        </member>
        <member name="P:NServiceBus.ObjectBuilder.Common.CommonObjectBuilder.Synchronized">
            <summary>
            Used for multi-threaded rich clients to build and dispatch
            in a synchronization domain.
            </summary>
        </member>
        <member name="T:NServiceBus.ObjectBuilder.IComponentConfig">
            <summary>
            Used to configure the values to be set for the various
            properties on a component.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IComponentConfig.ConfigureProperty(System.String,System.Object)">
            <summary>
            Configures the value of the named property of the component.
            </summary>
        </member>
        <member name="T:NServiceBus.ObjectBuilder.IComponentConfig`1">
            <summary>
            Strongly typed version of IComponentConfig
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.IComponentConfig`1.ConfigureProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Object)">
            <summary>
            Configures the value of the property like so:
            ConfigureProperty(o => o.Property, value);
            </summary>
        </member>
        <member name="T:NServiceBus.ObjectBuilder.Common.Config.ConfigureCommon">
            <summary>
            Utility configuration class for implementers of IContainer.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Common.Config.ConfigureCommon.With(NServiceBus.Configure,NServiceBus.ObjectBuilder.Common.IContainer)">
            <summary>
            Sets the Builder property of the given Configure object to an instance of CommonObjectBuilder.
            Then, the given builder object is inserted in the relevant place of the builder chain.
            Finally, the given actions are performed on the instance of CommonObjectBuilder.
            </summary>
        </member>
        <member name="T:NServiceBus.ObjectBuilder.Common.Config.ConfigureContainer">
            <summary>
             Extension methods to specify a custom container type and/or instance
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Common.Config.ConfigureContainer.UsingContainer``1(NServiceBus.Configure)">
            <summary>
             Provide a custom IContainer type for use by NServiceBus
            </summary>
            <param name="configure">Configuration instance</param>
            <typeparam name="T">IContainer type</typeparam>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Common.Config.ConfigureContainer.UsingContainer``1(NServiceBus.Configure,``0)">
            <summary>
             Provide a custom IContainer instance for use by NServiceBus
            </summary>
            <param name="configure">Configuration instance</param>
            <param name="container">IContainer instance</param>
            <typeparam name="T">IContainer type</typeparam>
        </member>
        <member name="T:NServiceBus.ObjectBuilder.Common.SynchronizedInvoker">
            <summary>
            Invokes methods and actions within a synchronization domain.
            </summary>
        </member>
        <member name="M:NServiceBus.ObjectBuilder.Common.SynchronizedInvoker.BuildAndDispatch(System.Type,System.Action{System.Object})">
            <summary>
            Uses the container to create the given type and then calls the given
            action on the object created.
            </summary>
        </member>
        <member name="P:NServiceBus.ObjectBuilder.Common.SynchronizedInvoker.Container">
            <summary>
            The container used to instantiate components.
            </summary>
        </member>
        <member name="T:NServiceBus.ObjectBuilder.ComponentCallModelEnum">
            <summary>
            Represent the various call models for a component.
            </summary>
        </member>
        <member name="F:NServiceBus.ObjectBuilder.ComponentCallModelEnum.None">
            <summary>
            Accept the default call model of the underlying technology. This roughly maps to the
            InstancePerUnitOfWork lifecycle in our new lifecycle definitions
            </summary>
        </member>
        <member name="F:NServiceBus.ObjectBuilder.ComponentCallModelEnum.Singleton">
            <summary>
            Only one instance of the component will ever be called. This maps to the
            SingleInstance lifecycle in our new lifecycle definitions
            </summary>
        </member>
        <member name="F:NServiceBus.ObjectBuilder.ComponentCallModelEnum.Singlecall">
            <summary>
            Each call on the component will be performed on a new instance.  This maps to the
            InstancePerCall lifecycle in our new lifecycle definitions
            </summary>
        </member>
        <member name="T:NServiceBus.Persistence.Raven.RavenConventions">
            <summary>
            NServiceBus default RavenDB conventions.
            </summary>
        </member>
        <member name="M:NServiceBus.Persistence.Raven.RavenConventions.FindTypeTagName(System.Type)">
            <summary>
            NServiceBus default RavenDB FindTypeTagName convention
            </summary>
            <param name="t">The type to apply convention.</param>
            <returns>The name of the find type tag.</returns>
        </member>
        <member name="T:NServiceBus.UnitOfWork.IManageUnitsOfWork">
            <summary>
            Interface used by NServiceBus to manage units of work as a part of the
            message processing pipeline.
            </summary>
        </member>
        <member name="M:NServiceBus.UnitOfWork.IManageUnitsOfWork.Begin">
            <summary>
            Called before all message handlers and modules
            </summary>
        </member>
        <member name="M:NServiceBus.UnitOfWork.IManageUnitsOfWork.End(System.Exception)">
            <summary>
            Called after all message handlers and modules, if an error has occurred the exception will be passed
            </summary>
        </member>
        <member name="T:NServiceBus.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NServiceBus.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NServiceBus.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NServiceBus.Properties.Resources.complete">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:NServiceBus.Properties.Resources.error">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:NServiceBus.Properties.Resources.form_icon">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:NServiceBus.Properties.Resources.logo">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:NServiceBus.Properties.Resources.String">
            <summary>
              Looks up a localized string similar to Import-Module .\tools\psake\psake.psm1.
            </summary>
        </member>
        <member name="P:NServiceBus.Properties.Resources.String1">
            <summary>
              Looks up a localized string similar to Invoke-psake .\default.ps1 -taskList @(&quot;ReleaseNServiceBus&quot;) -properties @{ProductVersion=&quot;3.3&quot;;PatchVersion=&quot;7&quot;;PreRelease=&quot;-beta&quot;;buildConfiguration=&quot;Release&quot;;}.
            </summary>
        </member>
        <member name="T:Rhino.Licensing.ILicensingService">
            <summary>
            Service contract of the licensing server.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.ILicensingService.LeaseLicense(System.String,System.String,System.Guid)">
            <summary>
            Issues a float license for the user.
            </summary>
            <param name="machine">machine name</param>
            <param name="user">user name</param>
            <param name="id">Id of the license holder</param>
        </member>
        <member name="T:Rhino.Licensing.InvalidationType">
            <summary>
            InvalidationType
            </summary>
        </member>
        <member name="F:Rhino.Licensing.InvalidationType.CannotGetNewLicense">
            <summary>
            Can not create a new license
            </summary>
        </member>
        <member name="F:Rhino.Licensing.InvalidationType.TimeExpired">
            <summary>
            License is expired
            </summary>
        </member>
        <member name="T:Rhino.Licensing.ISubscriptionLicensingService">
            <summary>
            Service contract of subscription server.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.ISubscriptionLicensingService.LeaseLicense(System.String)">
            <summary>
            Issues a leased license
            </summary>
        </member>
        <member name="T:Rhino.Licensing.LicenseExpiredException">
            <summary>
             Thrown when license is found but is past it's expiration date
            </summary>
        </member>
        <member name="T:Rhino.Licensing.RhinoLicensingException">
            <summary>
            Base class for all licensing exceptions.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.RhinoLicensingException.#ctor">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.RhinoLicensingException.#ctor(System.String)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:Rhino.Licensing.RhinoLicensingException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
            <param name="message">error message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:Rhino.Licensing.RhinoLicensingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
            <param name="info">serialization information</param>
            <param name="context">streaming context</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseExpiredException.#ctor">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicenseExpiredException.#ctor(System.String)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseExpiredException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
            <param name="message">error message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseExpiredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.RhinoLicensingException"/>.
            </summary>
            <param name="info">serialization information</param>
            <param name="context">streaming context</param>
        </member>
        <member name="T:Rhino.Licensing.LicenseFileNotFoundException">
            <summary>
            Thrown when a valid license file can not be
            found on the client machine.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicenseFileNotFoundException.#ctor">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseFileNotFoundException"/>
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicenseFileNotFoundException.#ctor(System.String)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseFileNotFoundException"/>
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseFileNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseFileNotFoundException"/>
            </summary>
            <param name="message">error message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseFileNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseFileNotFoundException"/>
            </summary>
            <param name="info">serialization information</param>
            <param name="context">streaming context</param>
        </member>
        <member name="T:Rhino.Licensing.LicenseNotFoundException">
            <summary>
            Thrown when suitable license is not found.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicenseNotFoundException.#ctor">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseNotFoundException"/>.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicenseNotFoundException.#ctor(System.String)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseNotFoundException"/>.
            </summary>
            <param name="message">error message</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseNotFoundException"/>.
            </summary>
            <param name="message">error message</param>
            <param name="inner">inner exception</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseNotFoundException"/>.
            </summary>
            <param name="info">serialization information</param>
            <param name="context">steaming context</param>
        </member>
        <member name="T:Rhino.Licensing.LicenseType">
            <summary>
            License Type
            </summary>
        </member>
        <member name="F:Rhino.Licensing.LicenseType.None">
            <summary>
            No type specified
            </summary>
        </member>
        <member name="F:Rhino.Licensing.LicenseType.Trial">
            <summary>
            For trial use
            </summary>
        </member>
        <member name="F:Rhino.Licensing.LicenseType.Standard">
            <summary>
            Standard license
            </summary>
        </member>
        <member name="F:Rhino.Licensing.LicenseType.Personal">
            <summary>
            For personal use
            </summary>
        </member>
        <member name="T:Rhino.Licensing.LicenseValidator">
            <summary>
            License validator validates a license file
            that can be located on disk.
            </summary>
        </member>
        <member name="M:Rhino.Licensing.LicenseValidator.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.LicenseValidator"/>.
            </summary>
            <param name="publicKey">public key</param>
            <param name="licensePath">path to license file</param>
        </member>
        <member name="M:Rhino.Licensing.LicenseValidator.AssertValidLicense">
            <summary>
            Validates loaded license
            </summary>
        </member>
        <member name="P:Rhino.Licensing.LicenseValidator.License">
            <summary>
            Gets or Sets the license content
            </summary>
        </member>
        <member name="T:Rhino.Licensing.StringLicenseValidator">
            <summary>
            Validates content of a license file
            </summary>
        </member>
        <member name="M:Rhino.Licensing.StringLicenseValidator.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <seealso cref="T:Rhino.Licensing.StringLicenseValidator"/>
            </summary>
            <param name="publicKey">public key</param>
            <param name="license">license content</param>
        </member>
        <member name="P:Rhino.Licensing.StringLicenseValidator.License">
            <summary>
            License content
            </summary>
        </member>
        <member name="T:NServiceBus.Persistence.InMemory.SagaPersister.InMemorySagaPersister">
            <summary>
            In memory implementation of ISagaPersister for quick development.
            </summary>
        </member>
        <member name="T:NServiceBus.Sagas.AutoCorrelateSagaOnReplyMutator">
            <summary>
            Promotes the saga id and type headers on replies(bus.Reply|bus.Return) so that the saga can be 
            correlated without the user having to add mappings for it. This replaces the ISagaMessage feature
            </summary>
        </member>
        <member name="M:NServiceBus.Sagas.AutoCorrelateSagaOnReplyMutator.MutateIncoming(NServiceBus.TransportMessage)">
            <summary>
            Stores the original saga id and type of the incoming message
            </summary>
        </member>
        <member name="M:NServiceBus.Sagas.AutoCorrelateSagaOnReplyMutator.MutateOutgoing(System.Object[],NServiceBus.TransportMessage)">
            <summary>
            Promotes the id and type of the originating saga if it is a reply
            </summary>
        </member>
        <member name="T:NServiceBus.Sagas.ConfigureHowToFindSagaWithMessageDispatcher">
            <summary>
            Class used to bridge the dependency between <see cref="T:NServiceBus.Saga.Saga`1"/> and <see cref="T:NServiceBus.Configure"/>.
            </summary>
        </member>
        <member name="T:NServiceBus.Sagas.ConfigureTimeoutAsSystemMessages">
            <summary>
            Defining <see cref="T:NServiceBus.Saga.IHandleTimeouts`1"/> as valid system messages
            </summary>
        </member>
        <member name="M:NServiceBus.Sagas.ConfigureTimeoutAsSystemMessages.Init">
            <summary>
            Defining <see cref="T:NServiceBus.Saga.IHandleTimeouts`1"/> as valid system messages
            </summary>
        </member>
        <member name="T:NServiceBus.Sagas.Finders.HeaderSagaIdFinder`1">
            <summary>
            Finds sagas based on the sagaid header
            </summary>
        </member>
        <member name="M:NServiceBus.Sagas.Finders.HeaderSagaIdFinder`1.FindBy(System.Object)">
            <summary>
            Returns the saga 
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.Finders.HeaderSagaIdFinder`1.SagaPersister">
            <summary>
            Injected persister
            </summary>
        </member>
        <member name="T:NServiceBus.Sagas.Finders.NullSagaFinder`1">
            <summary>
            Catch-all finder to return null - so that we can later check
            for whether a new saga should be created.
            </summary>
        </member>
        <member name="M:NServiceBus.Sagas.Finders.NullSagaFinder`1.FindBy(System.Object)">
            <summary>
            Returns null.
            </summary>
        </member>
        <member name="T:NServiceBus.Sagas.Finders.PropertySagaFinder`2">
            <summary>
            Finds the given type of saga by looking it up based on the given property.
            </summary>
        </member>
        <member name="M:NServiceBus.Sagas.Finders.PropertySagaFinder`2.FindBy(`1)">
            <summary>
            Uses the saga persister to find the saga.
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.Finders.PropertySagaFinder`2.SagaPersister">
            <summary>
            Injected persister
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.Finders.PropertySagaFinder`2.SagaProperty">
            <summary>
            Property of the saga that will be used for lookup.
            </summary>
        </member>
        <member name="P:NServiceBus.Sagas.Finders.PropertySagaFinder`2.MessageProperty">
            <summary>
            Property of the message whose value will be used for the lookup.
            </summary>
        </member>
        <member name="T:NServiceBus.Sagas.OriginatingSagaHeaderMutator">
            <summary>
            Adds the originating saga headers to outgoing messages
            </summary>
        </member>
        <member name="M:NServiceBus.Sagas.OriginatingSagaHeaderMutator.MutateOutgoing(System.Object[],NServiceBus.TransportMessage)">
            <summary>
            Set the header if we run in the context of a saga
            </summary>
        </member>
        <member name="T:NServiceBus.Sagas.ReplyingToNullOriginatorDispatcher">
            <summary>
            Class used to bridge the dependency between Saga{T} in NServiceBus.dll and
            which doesn't have access to Common.Logging and the level of logging
            known in the Configure class found in this project in NServiceBus.Core.dll.
            </summary>
        </member>
        <member name="T:NServiceBus.Sagas.SagaContext">
            <summary>
            Context class that holds the current saga being processed
            </summary>
        </member>
        <member name="F:NServiceBus.Sagas.SagaContext.Current">
            <summary>
            The saga
            </summary>
        </member>
        <member name="T:NServiceBus.Satellites.SatellitesQueuesCreator">
            <summary>
            Responsible to create a queue, using the registered ICreateQueues for each satellite
            </summary>
        </member>
        <member name="M:NServiceBus.Satellites.SatellitesQueuesCreator.Install(System.String)">
            <summary>
            Performs the installation providing permission for the given user.
            </summary>
            <param name="identity">The user for whom permissions will be given.</param>
        </member>
        <member name="T:NServiceBus.Serializers.Binary.BinaryMessageSerializer">
            <summary>
            Binary implementation of the message serializer.
            </summary>
        </member>
        <member name="M:NServiceBus.Serializers.Binary.BinaryMessageSerializer.Serialize(System.Object[],System.IO.Stream)">
            <summary>
            Serializes the given set of messages into the given stream.
            </summary>
            <param name="messages">Messages to serialize.</param>
            <param name="stream">Stream for <paramref name="messages"/> to be serialized into.</param>
        </member>
        <member name="M:NServiceBus.Serializers.Binary.BinaryMessageSerializer.Deserialize(System.IO.Stream,System.Collections.Generic.IList{System.Type})">
            <summary>
            Deserializes from the given stream a set of messages.
            </summary>
            <param name="stream">Stream that contains messages.</param>
            <param name="messageTypes">The list of message types to deserialize. If null the types must be inferred from the serialized data.</param>
            <returns>Deserialized messages.</returns>
        </member>
        <member name="P:NServiceBus.Serializers.Binary.BinaryMessageSerializer.ContentType">
            <summary>
            Gets the content type into which this serializer serializes the content to 
            </summary>
        </member>
        <member name="T:NServiceBus.Serializers.Binary.SimpleMessageMapper">
            <summary>
            Simple implementation of message mapper for binary serialization.
            </summary>
        </member>
        <member name="T:NServiceBus.Serializers.Json.BsonMessageSerializer">
            <summary>
            BSON message serializer.
            </summary>
        </member>
        <member name="T:NServiceBus.Serializers.Json.JsonMessageSerializerBase">
            <summary>
            JSON and BSON base class for <see cref="T:NServiceBus.Serialization.IMessageSerializer"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Serializers.Json.JsonMessageSerializerBase.Serialize(System.Object[],System.IO.Stream)">
            <summary>
            Serializes the given set of messages into the given stream.
            </summary>
            <param name="messages">Messages to serialize.</param>
            <param name="stream">Stream for <paramref name="messages"/> to be serialized into.</param>
        </member>
        <member name="M:NServiceBus.Serializers.Json.JsonMessageSerializerBase.Deserialize(System.IO.Stream,System.Collections.Generic.IList{System.Type})">
            <summary>
            Deserializes from the given stream a set of messages.
            </summary>
            <param name="stream">Stream that contains messages.</param>
            <param name="messageTypes">The list of message types to deserialize. If null the types must be inferred from the serialized data.</param>
            <returns>Deserialized messages.</returns>
        </member>
        <member name="P:NServiceBus.Serializers.Json.JsonMessageSerializerBase.SkipArrayWrappingForSingleMessages">
            <summary>
            Removes the wrapping array if serializing a single message 
            </summary>
        </member>
        <member name="P:NServiceBus.Serializers.Json.JsonMessageSerializerBase.ContentType">
            <summary>
            Gets the content type into which this serializer serializes the content to 
            </summary>
        </member>
        <member name="M:NServiceBus.Serializers.Json.BsonMessageSerializer.#ctor(NServiceBus.MessageInterfaces.IMessageMapper)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:NServiceBus.Serializers.Json.JsonMessageSerializer">
            <summary>
            JSON message serializer.
            </summary>
        </member>
        <member name="M:NServiceBus.Serializers.Json.JsonMessageSerializer.#ctor(NServiceBus.MessageInterfaces.IMessageMapper)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:NServiceBus.Serializers.XML.Config.MessageTypesInitializer">
            <summary>
            Initializes the mapper and the serializer with the found message types
            </summary>
        </member>
        <member name="T:NServiceBus.Serializers.XML.XmlMessageSerializer">
            <summary>
            Implementation of the message serializer over XML supporting interface-based messages.
            </summary>
        </member>
        <member name="M:NServiceBus.Serializers.XML.XmlMessageSerializer.InitType(System.Type)">
            <summary>
            Scans the given type storing maps to fields and properties to save on reflection at runtime.
            </summary>
        </member>
        <member name="M:NServiceBus.Serializers.XML.XmlMessageSerializer.GetAllPropertiesForType(System.Type,System.Boolean)">
            <summary>
            Gets a PropertyInfo for each property of the given type.
            </summary>
        </member>
        <member name="M:NServiceBus.Serializers.XML.XmlMessageSerializer.Deserialize(System.IO.Stream,System.Collections.Generic.IList{System.Type})">
            <summary>
            Deserializes from the given stream a set of messages.
            </summary>
            <param name="stream">Stream that contains messages.</param>
            <param name="messageTypesToDeserialize">The list of message types to deserialize. If null the types must be inferred from the serialized data.</param>
            <returns>Deserialized messages.</returns>
        </member>
        <member name="M:NServiceBus.Serializers.XML.XmlMessageSerializer.Serialize(System.Object[],System.IO.Stream)">
            <summary>
            Serializes the given messages to the given stream.
            </summary>
        </member>
        <member name="F:NServiceBus.Serializers.XML.XmlMessageSerializer.namespacesToPrefix">
            <summary>
            Used for serialization
            </summary>
        </member>
        <member name="F:NServiceBus.Serializers.XML.XmlMessageSerializer.prefixesToNamespaces">
            <summary>
            Used for deserialization
            </summary>
        </member>
        <member name="M:NServiceBus.Serializers.XML.XmlMessageSerializer.#ctor(NServiceBus.MessageInterfaces.IMessageMapper)">
            <summary>
            Initializes an instance of a <see cref="T:NServiceBus.Serializers.XML.XmlMessageSerializer"/>.
            </summary>
            <param name="mapper">Message Mapper</param>
        </member>
        <member name="M:NServiceBus.Serializers.XML.XmlMessageSerializer.Initialize(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initialized the serializer with the given message types
            </summary>
        </member>
        <member name="P:NServiceBus.Serializers.XML.XmlMessageSerializer.Namespace">
            <summary>
            The namespace to place in outgoing XML.
            </summary>
        </member>
        <member name="P:NServiceBus.Serializers.XML.XmlMessageSerializer.SanitizeInput">
            <summary>
            If true, then the serializer will use a sanitizing stream to skip invalid characters from the stream before parsing
            </summary>
        </member>
        <member name="P:NServiceBus.Serializers.XML.XmlMessageSerializer.SkipWrappingElementForSingleMessages">
            <summary>
            Removes the wrapping "<Messages/>" element if serializing a single message 
            </summary>
        </member>
        <member name="P:NServiceBus.Serializers.XML.XmlMessageSerializer.SkipWrappingRawXml">
            <summary>
            Removes the wrapping of properties containing XDocument or XElement with property name as root element
            </summary>
        </member>
        <member name="T:NServiceBus.Serializers.XML.XmlSanitizingStream">
            <summary>
            A StreamReader that excludes XML-illegal characters while reading.
            </summary>
        </member>
        <member name="F:NServiceBus.Serializers.XML.XmlSanitizingStream.EOF">
            <summary>
            The character that denotes the end of a file has been reached.
            </summary>
        </member>
        <member name="M:NServiceBus.Serializers.XML.XmlSanitizingStream.#ctor(System.IO.Stream)">
            <summary>Create an instance of XmlSanitizingStream.</summary>
            <param name="streamToSanitize">
            The stream to sanitize of illegal XML characters.
            </param>
        </member>
        <member name="M:NServiceBus.Serializers.XML.XmlSanitizingStream.IsLegalXmlChar(System.String,System.Int32)">
            <summary>
            Get whether an integer represents a legal XML 1.0 or 1.1 character. See
            the specification at w3.org for these characters.
            </summary>
            <param name="xmlVersion">
            The version number as a string. Use "1.0" for XML 1.0 character
            validation, and use "1.1" for XML 1.1 character validation.
            </param>
            <returns><c>true</c> if is a legal xml character.</returns>
        </member>
        <member name="M:NServiceBus.Serializers.XML.XmlSanitizingStream.IsLegalXmlChar(System.Int32)">
            <summary>
            Get whether an integer represents a legal XML 1.0 character. See the  
            specification at w3.org for these characters.
            </summary>
        </member>
        <member name="M:NServiceBus.ServiceAsyncResult.#ctor(System.Object)">
            <summary>
            Creates a new object storing the given state.
            </summary>
        </member>
        <member name="M:NServiceBus.ServiceAsyncResult.Complete(NServiceBus.CompletionResult)">
            <summary>
            Stores the given completion result from the server, 
            releases any blocked threads
            </summary>
        </member>
        <member name="P:NServiceBus.ServiceAsyncResult.AsyncState">
            <summary>
            Returns the original state passed into the Begin method.
            </summary>
        </member>
        <member name="P:NServiceBus.ServiceAsyncResult.AsyncWaitHandle">
            <summary>
            Returns a handle suitable for blocking threads.
            </summary>
        </member>
        <member name="P:NServiceBus.ServiceAsyncResult.CompletedSynchronously">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="P:NServiceBus.ServiceAsyncResult.Result">
            <summary>
            Contains the completion result from the server.
            </summary>
        </member>
        <member name="P:NServiceBus.ServiceAsyncResult.IsCompleted">
            <summary>
            Returns if the operation has completed.
            </summary>
        </member>
        <member name="T:NServiceBus.SetLoggingLibrary">
            <summary>
            Class containing extension method to allow users to use Log4Net for logging
            </summary>
        </member>
        <member name="M:NServiceBus.SetLoggingLibrary.Log4Net(NServiceBus.Configure)">
            <summary>
            Use Log4Net for logging with the Console Appender at the level of All.
            </summary>
        </member>
        <member name="M:NServiceBus.SetLoggingLibrary.Log4Net``1(NServiceBus.Configure,System.Action{``0})">
            <summary>
            Use Log4Net for logging with your own appender type, initializing it as necessary.
            Will call 'ActivateOptions()' on the appender for you.
            If you don't specify a threshold, will default to Level.Debug.
            If you don't specify layout, uses this as a default: %d [%t] %-5p %c [%x] &lt;%X{auth}&gt; - %m%n
            </summary>
        </member>
        <member name="M:NServiceBus.SetLoggingLibrary.Log4Net(NServiceBus.Configure,System.Object)">
            <summary>
            Use Log4Net for logging passing in a pre-configured appender.
            Will call 'ActivateOptions()' on the appender for you.
            If you don't specify a threshold, will default to Level.Debug.
            If you don't specify layout, uses this as a default: %d [%t] %-5p %c [%x] &lt;%X{auth}&gt; - %m%n
            </summary>
        </member>
        <member name="M:NServiceBus.SetLoggingLibrary.Log4Net">
            <summary>
            Configure NServiceBus to use Log4Net without setting a specific appender.
            </summary>
        </member>
        <member name="M:NServiceBus.SetLoggingLibrary.Log4Net(System.Action)">
            <summary>
            Configure NServiceBus to use Log4Net and specify your own configuration.
            Use 'log4net.Config.XmlConfigurator.Configure' as the parameter to get the configuration from the app.config.
            </summary>
        </member>
        <member name="T:NServiceBus.Settings.Endpoint">
            <summary>
                Configuration class for Endpoint settings.
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.Endpoint.AsVolatile">
            <summary>
                Tells the endpoint to not enforce durability (using InMemory storages, non durable messages, ...).
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.Endpoint.AsSendOnly">
            <summary>
                Configures this endpoint as a send only endpoint.
            </summary>
            <remarks>
                Use this in endpoints whose only purpose is sending messages, websites are often a good example of send only endpoints.
            </remarks>
        </member>
        <member name="M:NServiceBus.Settings.Endpoint.Advanced(System.Action{NServiceBus.Settings.Endpoint.EndpointAdvancedSettings})">
            <summary>
                <see cref="T:NServiceBus.Settings.Endpoint"/> advance settings.
            </summary>
            <param name="action">A lambda to set the advance settings.</param>
        </member>
        <member name="T:NServiceBus.Settings.Endpoint.EndpointAdvancedSettings">
            <summary>
                <see cref="T:NServiceBus.Settings.Endpoint"/> advance settings.
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.Endpoint.EndpointAdvancedSettings.EnableDurableMessages">
            <summary>
            Configures endpoint with messages guaranteed to be delivered in the event of a computer failure or network problem.
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.Endpoint.EndpointAdvancedSettings.DisableDurableMessages">
            <summary>
            Configures endpoint with messages that are not guaranteed to be delivered in the event of a computer failure or network problem.
            </summary>
        </member>
        <member name="T:NServiceBus.Settings.TransactionSettings">
            <summary>
                Configuration class for Transaction settings.
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.TransactionSettings.Enable">
            <summary>
                Configures this endpoint to use transactions.
            </summary>
            <remarks>
                A transactional endpoint means that we don't remove a message from the queue until it has been successfully processed.
            </remarks>
        </member>
        <member name="M:NServiceBus.Settings.TransactionSettings.Disable">
            <summary>
                Configures this endpoint to not use transactions.
            </summary>
            <remarks>
                Turning transactions off means that the endpoint won't do retries and messages are lost on exceptions.
            </remarks>
        </member>
        <member name="M:NServiceBus.Settings.TransactionSettings.Advanced(System.Action{NServiceBus.Settings.TransactionSettings.TransactionAdvancedSettings})">
            <summary>
                <see cref="T:NServiceBus.Settings.TransactionSettings"/> advance settings.
            </summary>
            <param name="action">A lambda to set the advance settings.</param>
        </member>
        <member name="T:NServiceBus.Settings.TransactionSettings.TransactionAdvancedSettings">
            <summary>
                <see cref="T:NServiceBus.Settings.TransactionSettings"/> advance settings.
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.TransactionSettings.TransactionAdvancedSettings.#ctor">
            <summary>
                Default constructor.
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.TransactionSettings.TransactionAdvancedSettings.IsolationLevel(System.Transactions.IsolationLevel)">
            <summary>
               Sets the isolation level of the transaction.
            </summary>
            <param name="isolationLevel">A <see cref="T:System.Transactions.IsolationLevel" /> enumeration that specifies the isolation level of the transaction.</param>
        </member>
        <member name="M:NServiceBus.Settings.TransactionSettings.TransactionAdvancedSettings.DisableDistributedTransactions">
            <summary>
            Configures the <see cref="T:NServiceBus.Unicast.Transport.ITransport"/> not to enlist in Distributed Transactions.
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.TransactionSettings.TransactionAdvancedSettings.EnableDistributedTransactions">
            <summary>
            Configures the <see cref="T:NServiceBus.Unicast.Transport.ITransport"/> to enlist in Distributed Transactions.
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.TransactionSettings.TransactionAdvancedSettings.DoNotWrapHandlersExecutionInATransactionScope">
            <summary>
            Configures this endpoint so that <see cref="T:NServiceBus.IHandleMessages`1">handlers</see> are not wrapped in a <see cref="T:System.Transactions.TransactionScope"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.TransactionSettings.TransactionAdvancedSettings.WrapHandlersExecutionInATransactionScope">
            <summary>
            Configures this endpoint so that <see cref="T:NServiceBus.IHandleMessages`1">handlers</see> not wrapped in a <see cref="T:System.Transactions.TransactionScope"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Settings.TransactionSettings.TransactionAdvancedSettings.DefaultTimeout(System.TimeSpan)">
            <summary>
            Sets the default timeout period for the transaction.
            </summary>
            <param name="defaultTimeout">A <see cref="T:System.TimeSpan" /> value that specifies the default timeout period for the transaction.</param>
        </member>
        <member name="T:NServiceBus.SyncConfig">
            <summary>
            Class for holding extension methods to NServiceBus.Configure
            </summary>
        </member>
        <member name="M:NServiceBus.SyncConfig.MarkConfigured">
            <summary>
            Notify that configuration of ConfigureCommon occurred.
            </summary>
        </member>
        <member name="M:NServiceBus.SyncConfig.Synchronization(NServiceBus.Configure)">
            <summary>
            Use this for multi-threaded rich clients. Specifies that message processing
            will occur within a synchronization domain (make sure that you only have one).
            </summary>
        </member>
        <member name="P:NServiceBus.SyncConfig.Synchronize">
            <summary>
            Indicates whether the synchronization has been requested.
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.Schedulers.MTATaskScheduler">
            <summary>Provides a scheduler that uses MTA threads.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.MTATaskScheduler.tasks">
            <summary>Stores the queued tasks to be executed by our pool of STA threads.</summary>
        </member>
        <member name="F:System.Threading.Tasks.Schedulers.MTATaskScheduler._threads">
            <summary>The MTA threads used by the scheduler.</summary>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.MTATaskScheduler.#ctor(System.Int32,System.String)">
            <summary>Initializes a new instance of the MTATaskScheduler class with the specified concurrency level.</summary>
            <param name="numberOfThreads">The number of threads that should be created and used by this scheduler.</param>
            <param name="nameFormat">The template name form to use to name threads.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.MTATaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a Task to be executed by this scheduler.</summary>
            <param name="task">The task to be executed.</param>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.MTATaskScheduler.GetScheduledTasks">
            <summary>Provides a list of the scheduled tasks for the debugger to consume.</summary>
            <returns>An enumerable of all tasks currently scheduled.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.MTATaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Determines whether a Task may be inlined.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued">Whether the task was previously queued.</param>
            <returns>true if the task was successfully inlined; otherwise, false.</returns>
        </member>
        <member name="M:System.Threading.Tasks.Schedulers.MTATaskScheduler.Dispose">
            <summary>
            Cleans up the scheduler by indicating that no more tasks will be queued.
            This method blocks until all threads successfully shutdown.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.Schedulers.MTATaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level supported by this scheduler.</summary>
        </member>
        <member name="T:NServiceBus.Timeout.Core.DefaultTimeoutManager">
            <summary>
            Default implementation for <see cref="T:NServiceBus.Timeout.Core.IManageTimeouts"/>
            </summary>
        </member>
        <member name="T:NServiceBus.Timeout.Core.IManageTimeouts">
            <summary>
            Manages NSB timeouts.
            </summary>
            <remarks>Implementors must be thread-safe.</remarks>
        </member>
        <member name="M:NServiceBus.Timeout.Core.IManageTimeouts.PushTimeout(NServiceBus.Timeout.Core.TimeoutData)">
            <summary>
            Adds a new timeout to be monitored.
            </summary>
            <param name="timeout"><see cref="T:NServiceBus.Timeout.Core.TimeoutData"/> to be added.</param>
        </member>
        <member name="M:NServiceBus.Timeout.Core.IManageTimeouts.RemoveTimeout(System.String)">
            <summary>
            Removes a timeout from being monitored.
            </summary>
            <param name="timeoutId">The timeout id to be removed.</param>
        </member>
        <member name="M:NServiceBus.Timeout.Core.IManageTimeouts.RemoveTimeoutBy(System.Guid)">
            <summary>
            Clears the timeout for the given <paramref name="sagaId"/>.
            </summary>
            <param name="sagaId">The sagaId to be removed</param>
        </member>
        <member name="E:NServiceBus.Timeout.Core.IManageTimeouts.TimeoutPushed">
            <summary>
            Fires when a timeout is added.
            </summary>
        </member>
        <member name="M:NServiceBus.Timeout.Core.DefaultTimeoutManager.PushTimeout(NServiceBus.Timeout.Core.TimeoutData)">
            <summary>
            Adds a new timeout to be monitored.
            </summary>
            <param name="timeout"><see cref="T:NServiceBus.Timeout.Core.TimeoutData"/> to be added.</param>
        </member>
        <member name="M:NServiceBus.Timeout.Core.DefaultTimeoutManager.RemoveTimeout(System.String)">
            <summary>
            Removes a timeout from being monitored.
            </summary>
            <param name="timeoutId">The timeout id to be removed.</param>
        </member>
        <member name="M:NServiceBus.Timeout.Core.DefaultTimeoutManager.RemoveTimeoutBy(System.Guid)">
            <summary>
            Clears the timeout for the given <paramref name="sagaId"/>.
            </summary>
            <param name="sagaId">The sagaId to be removed</param>
        </member>
        <member name="P:NServiceBus.Timeout.Core.DefaultTimeoutManager.TimeoutsPersister">
            <summary>
            The timeout persister.
            </summary>
        </member>
        <member name="P:NServiceBus.Timeout.Core.DefaultTimeoutManager.MessageSender">
            <summary>
            Messages sender.
            </summary>
        </member>
        <member name="E:NServiceBus.Timeout.Core.DefaultTimeoutManager.TimeoutPushed">
            <summary>
            Fires when a timeout is added.
            </summary>
        </member>
        <member name="T:NServiceBus.Timeout.Core.IPersistTimeouts">
            <summary>
            Timeout persister contract.
            </summary>
        </member>
        <member name="M:NServiceBus.Timeout.Core.IPersistTimeouts.GetNextChunk(System.DateTime,System.DateTime@)">
            <summary>
            Retrieves the next range of timeouts that are due.
            </summary>
            <param name="startSlice">The time where to start retrieving the next slice, the slice should exclude this date.</param>
            <param name="nextTimeToRunQuery">Returns the next time we should query again.</param>
            <returns>Returns the next range of timeouts that are due.</returns>
        </member>
        <member name="M:NServiceBus.Timeout.Core.IPersistTimeouts.Add(NServiceBus.Timeout.Core.TimeoutData)">
            <summary>
            Adds a new timeout.
            </summary>
            <param name="timeout">Timeout data.</param>
        </member>
        <member name="M:NServiceBus.Timeout.Core.IPersistTimeouts.TryRemove(System.String,NServiceBus.Timeout.Core.TimeoutData@)">
            <summary>
            Removes the timeout if it hasn't been previously removed.
            </summary>
            <param name="timeoutId">The timeout id to remove.</param>
            <param name="timeoutData">The timeout data of the removed timeout.</param>
            <returns><c>true</c> it the timeout was successfully removed.</returns>
        </member>
        <member name="M:NServiceBus.Timeout.Core.IPersistTimeouts.RemoveTimeoutBy(System.Guid)">
            <summary>
            Removes the time by saga id.
            </summary>
            <param name="sagaId">The saga id of the timeouts to remove.</param>
        </member>
        <member name="T:NServiceBus.Timeout.Core.TimeoutData">
            <summary>
            Holds timeout information.
            </summary>
        </member>
        <member name="F:NServiceBus.Timeout.Core.TimeoutData.OriginalReplyToAddress">
            <summary>
            Original ReplyTo address header.
            </summary>
        </member>
        <member name="M:NServiceBus.Timeout.Core.TimeoutData.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:NServiceBus.Timeout.Core.TimeoutData.ToTransportMessage">
            <summary>
            Transforms the timeout to a <see cref="T:NServiceBus.TransportMessage"/>.
            </summary>
            <returns>Returns a <see cref="T:NServiceBus.TransportMessage"/>.</returns>
        </member>
        <member name="P:NServiceBus.Timeout.Core.TimeoutData.Id">
            <summary>
            Id of this timeout
            </summary>
        </member>
        <member name="P:NServiceBus.Timeout.Core.TimeoutData.Destination">
            <summary>
            The address of the client who requested the timeout.
            </summary>
        </member>
        <member name="P:NServiceBus.Timeout.Core.TimeoutData.SagaId">
            <summary>
            The saga ID.
            </summary>
        </member>
        <member name="P:NServiceBus.Timeout.Core.TimeoutData.State">
            <summary>
            Additional state.
            </summary>
        </member>
        <member name="P:NServiceBus.Timeout.Core.TimeoutData.Time">
            <summary>
            The time at which the timeout expires.
            </summary>
        </member>
        <member name="P:NServiceBus.Timeout.Core.TimeoutData.CorrelationId">
            <summary>
            We store the correlation id in order to preserve it across timeouts
            </summary>
        </member>
        <member name="P:NServiceBus.Timeout.Core.TimeoutData.OwningTimeoutManager">
            <summary>
            The timeout manager that owns this particular timeout
            </summary>
        </member>
        <member name="P:NServiceBus.Timeout.Core.TimeoutData.Headers">
            <summary>
            Store the headers to preserve them across timeouts
            </summary>
        </member>
        <member name="T:NServiceBus.TransactionalConfigManager">
            <summary>
            Contains extension methods to NServiceBus.Configure
            </summary>
        </member>
        <member name="M:NServiceBus.TransactionalConfigManager.IsTransactional(NServiceBus.Configure,System.Boolean)">
            <summary>
            Sets the transactionality of the endpoint.
            If true, the endpoint will not lose messages when exceptions occur.
            If false, the endpoint may lose messages when exceptions occur.
            </summary>
        </member>
        <member name="M:NServiceBus.TransactionalConfigManager.DontUseTransactions(NServiceBus.Configure)">
            <summary>
            Sets the transactionality of the endpoint such that 
            the endpoint will not lose messages when exceptions occur.
            
            Is equivalent to IsTransactional(true);
            </summary>
        </member>
        <member name="M:NServiceBus.TransactionalConfigManager.IsolationLevel(NServiceBus.Configure,System.Transactions.IsolationLevel)">
            <summary>
            Sets the isolation level that database transactions on this endpoint will run at.
            This value is only relevant when IsTransactional has been set to true.
            
            Higher levels like RepeatableRead and Serializable promise a higher level
            of consistency, but at the cost of lower parallelism and throughput.
            
            If you wish to run sagas on this endpoint, RepeatableRead is the suggested value.
            </summary>
        </member>
        <member name="M:NServiceBus.TransactionalConfigManager.TransactionTimeout(NServiceBus.Configure,System.TimeSpan)">
            <summary>
            Sets the time span where a transaction will timeout.
            
            Most endpoints should leave it at the default.
            </summary>
        </member>
        <member name="T:NServiceBus.TransportMessage">
            <summary>
                An envelope used by NServiceBus to package messages for transmission.
            </summary>
            <remarks>
                All messages sent and received by NServiceBus are wrapped in this class.
                More than one message can be bundled in the envelope to be transmitted or
                received by the bus.
            </remarks>
        </member>
        <member name="M:NServiceBus.TransportMessage.#ctor">
            <summary>
                Initializes the transport message with a CombGuid as identifier
            </summary>
        </member>
        <member name="M:NServiceBus.TransportMessage.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
                Creates a new TransportMessage with the given id and headers
            </summary>
        </member>
        <member name="M:NServiceBus.TransportMessage.ChangeMessageId(System.String)">
            <summary>
                Use this method to change the stable ID of the given message.
            </summary>
        </member>
        <member name="M:NServiceBus.TransportMessage.UpdateBody(System.Byte[])">
            <summary>
                Use this method to update the body if this message
            </summary>
        </member>
        <member name="M:NServiceBus.TransportMessage.RevertToOriginalBodyIfNeeded">
            <summary>
                Makes sure that the body is reset to the exact state as it was when the message was created
            </summary>
        </member>
        <member name="P:NServiceBus.TransportMessage.Id">
            <summary>
                Gets/sets the identifier of this message bundle.
            </summary>
        </member>
        <member name="P:NServiceBus.TransportMessage.IdForCorrelation">
            <summary>
                Gets/sets the identifier that is copied to <see cref="P:NServiceBus.TransportMessage.CorrelationId"/>.
            </summary>
        </member>
        <member name="P:NServiceBus.TransportMessage.CorrelationId">
            <summary>
                Gets/sets the unique identifier of another message bundle
                this message bundle is associated with.
            </summary>
        </member>
        <member name="P:NServiceBus.TransportMessage.ReplyToAddress">
            <summary>
                Gets/sets the reply-to address of the message bundle - replaces 'ReturnAddress'.
            </summary>
        </member>
        <member name="P:NServiceBus.TransportMessage.Recoverable">
            <summary>
                Gets/sets whether or not the message is supposed to
                be guaranteed deliverable.
            </summary>
        </member>
        <member name="P:NServiceBus.TransportMessage.MessageIntent">
            <summary>
                Indicates to the infrastructure the message intent (publish, or regular send).
            </summary>
        </member>
        <member name="P:NServiceBus.TransportMessage.TimeToBeReceived">
            <summary>
                Gets/sets the maximum time limit in which the message bundle
                must be received.
            </summary>
        </member>
        <member name="P:NServiceBus.TransportMessage.Headers">
            <summary>
                Gets/sets other applicative out-of-band information.
            </summary>
        </member>
        <member name="P:NServiceBus.TransportMessage.Body">
            <summary>
                Gets/sets a byte array to the body content of the message
            </summary>
        </member>
        <member name="F:NServiceBus.Forms.TrialExpired.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NServiceBus.Forms.TrialExpired.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:NServiceBus.Forms.TrialExpired.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.BackwardCompatibility.MutateMessageContentTypeOfIncomingTransportMessages.MutateIncoming(NServiceBus.TransportMessage)">
            <summary>
            Ensure that the content type which is introduced in V4.0.0 and later versions is present in the header.
            </summary>
            <param name="transportMessage">Transport Message to mutate.</param>
        </member>
        <member name="T:NServiceBus.Unicast.BuilderExtensions">
            <summary>
            Extension methods for IBuilder
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.BuilderExtensions.ForEach``1(NServiceBus.ObjectBuilder.IBuilder,System.Action{``0})">
            <summary>
            Applies the action on the instances of T
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.BusAsyncResult">
            <summary>
            Implementation of IAsyncResult returned when registering a callback.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.BusAsyncResult.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Creates a new object storing the given callback and state.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.BusAsyncResult.Complete(System.Int32,System.Object[])">
            <summary>
            Stores the given error code and messages, 
            releases any blocked threads,
            and invokes the previously given callback.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.BusAsyncResult.AsyncState">
            <summary>
            Returns a completion result containing the error code, messages, and state.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.BusAsyncResult.AsyncWaitHandle">
            <summary>
            Returns a handle suitable for blocking threads.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.BusAsyncResult.CompletedSynchronously">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.BusAsyncResult.IsCompleted">
            <summary>
            Returns if the operation has completed.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Callback">
            <summary>
            Implementation of the ICallback interface for the unicast bus.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Callback.#ctor(System.String)">
            <summary>
            Creates a new instance of the callback object storing the given message id.
            </summary>
        </member>
        <member name="E:NServiceBus.Unicast.Callback.Registered">
            <summary>
            Event raised when the Register method is called.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Callback.MessageId">
            <summary>
            Returns the message id this object was constructed with.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.BusAsyncResultEventArgs">
            <summary>
            Argument passed in the Registered event of the Callback object.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.BusAsyncResultEventArgs.Result">
            <summary>
            Gets/sets the IAsyncResult.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.BusAsyncResultEventArgs.MessageId">
            <summary>
            Gets/sets the message id.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Config.ConfigUnicastBus">
            <summary>
            Inherits NServiceBus.Configure providing UnicastBus specific configuration on top of it.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.Configure(NServiceBus.Configure)">
            <summary>
            Wrap the given configure object storing its builder and configurer.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.LoadMessageHandlers">
            <summary>
            
            Loads all message handler assemblies in the runtime directory.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.LoadMessageHandlers``1">
            <summary>
            Loads all message handler assemblies in the runtime directory
            and specifies that handlers in the given assembly should run
            before all others.
            
            Use First{T} to indicate the type to load from.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.LoadMessageHandlers``1(NServiceBus.First{``0})">
            <summary>
            Loads all message handler assemblies in the runtime directory
            and specifies that the handlers in the given 'order' are to 
            run before all others and in the order specified.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.ConfigureMessageHandlersIn(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Scans the given types for types that are message handlers
            then uses the Configurer to configure them into the container as single call components,
            finally passing them to the bus as its MessageHandlerTypes.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.PropogateReturnAddressOnSend(System.Boolean)">
            <summary>
            Set this if you want this endpoint to serve as something of a proxy;
            recipients of messages sent by this endpoint will see the address
            of endpoints that sent the incoming messages.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.PropagateReturnAddressOnSend(System.Boolean)">
            <summary>
            Set this if you want this endpoint to serve as something of a proxy;
            recipients of messages sent by this endpoint will see the address
            of endpoints that sent the incoming messages.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.ForwardReceivedMessagesTo(System.String)">
            <summary>
            Forwards all received messages to a given endpoint (queue@machine).
            This is useful as an auditing/debugging mechanism.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.DoNotAutoSubscribe">
            <summary>
            Instructs the bus not to automatically subscribe to messages that
            it has handlers for (given those messages belong to a different endpoint).
            
            This is needed only if you require fine-grained control over the subscribe/unsubscribe process.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.DoNotAutoSubscribeSagas">
            <summary>
            Instructs the bus not to automatically subscribe sagas to messages that
            it has handlers for (given those messages belong to a different endpoint).
            
            This is needed only if you require fine-grained control over the subscribe/unsubscribe process.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.AllowSubscribeToSelf">
            <summary>
            Allow the bus to subscribe to itself
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.AutoSubscribePlainMessages">
            <summary>
            Tells the bus to auto subscribe plain messages in addition to events
            Commands will NOT be auto subscribed
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.SkipDeserialization">
            <summary>
            Causes the bus to not deserialize incoming messages. This means that no handlers are called and 
            you need to be subscribed to the ITransport.TransportMessageReceived event to handle the messages
            your self.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.DefaultDispatcherFactory``1">
            <summary>
            Allow the bus to subscribe to itself
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.IsMessageHandler(System.Type)">
            <summary>
            Returns true if the given type is a message handler.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Config.ConfigUnicastBus.GetMessageTypeFromMessageHandler(System.Type)">
            <summary>
            Returns the message type handled by the given message handler type.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.DefaultDispatcherFactory">
            <summary>
            The default dispatch factory
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.IMessageDispatcherFactory">
            <summary>
            Returns the action to dispatch the given message to the handler
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.IMessageDispatcherFactory.GetDispatcher(System.Type,NServiceBus.ObjectBuilder.IBuilder,System.Object)">
            <summary>
            Returns the action that will dispatch this message
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.IMessageDispatcherFactory.CanDispatch(System.Type)">
            <summary>
            Returns true if the factory is able to dispatch this type
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Config.DefaultTransportForHost">
            <summary>
            Default to MSMQ transport if no other transport has been configured. This can be removed when we introduce the modules concept
            </summary>
        </member>
        <member name="T:NServiceBus.Distributor.DistributorSatellite">
            <summary>
                Provides functionality for distributing messages from a bus
                to multiple workers when using a unicast transport.
            </summary>
        </member>
        <member name="M:NServiceBus.Distributor.DistributorSatellite.Start">
            <summary>
                Starts the Distributor.
            </summary>
        </member>
        <member name="M:NServiceBus.Distributor.DistributorSatellite.Stop">
            <summary>
                Stops the Distributor.
            </summary>
        </member>
        <member name="M:NServiceBus.Distributor.DistributorSatellite.Handle(NServiceBus.TransportMessage)">
            <summary>
            This method is called when a message is available to be processed.
            </summary>
            <param name="message">The <see cref="T:NServiceBus.TransportMessage"/> received.</param>
        </member>
        <member name="P:NServiceBus.Distributor.DistributorSatellite.MessageSender">
            <summary>
                Object used to send messages.
            </summary>
        </member>
        <member name="P:NServiceBus.Distributor.DistributorSatellite.WorkerManager">
            <summary>
                Sets the <see cref="T:NServiceBus.Distributor.IWorkerAvailabilityManager"/> implementation that will be
                used to determine whether or not a worker is available.
            </summary>
        </member>
        <member name="P:NServiceBus.Distributor.DistributorSatellite.InputAddress">
            <summary>
            The <see cref="F:NServiceBus.Distributor.DistributorSatellite.Address"/> for this <see cref="T:NServiceBus.Satellites.ISatellite"/> to use when receiving messages.
            </summary>
        </member>
        <member name="P:NServiceBus.Distributor.DistributorSatellite.Disabled">
            <summary>
            Set to <code>true</code> to disable this <see cref="T:NServiceBus.Satellites.ISatellite"/>.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.HandlerInvocationCache">
            <summary>
            Helper that optimize the invocation of the handle methods
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.HandlerInvocationCache.InvokeHandle(System.Object,System.Object)">
            <summary>
            Invokes the handle method of the given handler passing the message
            </summary>
            <param name="handler">The handler instance.</param>
            <param name="message">The message instance.</param>
        </member>
        <member name="M:NServiceBus.Unicast.HandlerInvocationCache.InvokeTimeout(System.Object,System.Object)">
            <summary>
            Invokes the timeout method of the given handler passing the message
            </summary>
            <param name="handler">The handler instance.</param>
            <param name="state">The message instance.</param>
        </member>
        <member name="M:NServiceBus.Unicast.HandlerInvocationCache.CacheMethodForHandler(System.Type,System.Type)">
            <summary>
            Registers the method in the cache
            </summary>
            <param name="handler">The object type.</param>
            <param name="messageType">the message type.</param>
        </member>
        <member name="M:NServiceBus.Unicast.HandlerInvocationCache.Clear">
            <summary>
            Clears the cache
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.MessagesEventArgs">
            <summary>
            Data containing multiple messages for raising in events.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.MessagesEventArgs.#ctor(System.Object[])">
            <summary>
            Instantiate an event arg referencing multiple messages.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.MessagesEventArgs.Messages">
            <summary>
            The messages that were sent.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Queuing.Installers.ForwardReceivedMessagesToQueueCreator">
            <summary>
            Signals to create forward received messages queue.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Queuing.Installers.ForwardReceivedMessagesToQueueCreator.Address">
            <summary>
            Address of queue the implementer requires.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Queuing.Installers.ForwardReceivedMessagesToQueueCreator.IsDisabled">
            <summary>
            True if no need to create queue
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.EnableMessageDrivenPublisherIfStorageIsFound">
            <summary>
            This class handles backwards compatibility. If there is a ISubscription storage registered by the user we should use
            the message drive´n subscription manager
            </summary>
        </member>
        <member name="T:NServiceBus.Features.StorageDrivenPublisher">
            <summary>
            Adds support for pub/sub using a external subscription storage. This brings pub/sub to transport that lacks native support.
            </summary>
        </member>
        <member name="T:NServiceBus.AutomaticSubscriptions.DefaultAutoSubscriptionStrategy">
            <summary>
            The default strategy for auto subscriptions.
            </summary>
        </member>
        <member name="T:NServiceBus.AutomaticSubscriptions.IAutoSubscriptionStrategy">
            <summary>
            Abstracts the strategy for selecting which events to auto-subscribe to during startup
            </summary>
        </member>
        <member name="M:NServiceBus.AutomaticSubscriptions.IAutoSubscriptionStrategy.GetEventsToSubscribe">
            <summary>
            Returns the list of events to auto-subscribe
            </summary>
        </member>
        <member name="P:NServiceBus.AutomaticSubscriptions.DefaultAutoSubscriptionStrategy.HandlerRegistry">
            <summary>
            The known handlers
            </summary>
        </member>
        <member name="P:NServiceBus.AutomaticSubscriptions.DefaultAutoSubscriptionStrategy.MessageRouter">
            <summary>
            The message routing
            </summary>
        </member>
        <member name="P:NServiceBus.AutomaticSubscriptions.DefaultAutoSubscriptionStrategy.DoNotRequireExplicitRouting">
            <summary>
            If set to true the endpoint will subscribe to it self even if no endpoint mappings exists
            </summary>
        </member>
        <member name="P:NServiceBus.AutomaticSubscriptions.DefaultAutoSubscriptionStrategy.DoNotAutoSubscribeSagas">
            <summary>
            if true messages that are handled by sagas wont be auto subscribed
            </summary>
        </member>
        <member name="P:NServiceBus.AutomaticSubscriptions.DefaultAutoSubscriptionStrategy.SubscribePlainMessages">
            <summary>
            If true all messages that are not commands will be auto subscribed
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.IUnicastBus">
            <summary>
            Extension of the IBus interface for working with a distributor.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.IUnicastBus.ClearTimeoutsFor(System.Guid)">
            <summary>
            Clears any existing timeouts for the given saga
            </summary>
        </member>
        <member name="E:NServiceBus.Unicast.IUnicastBus.NoSubscribersForMessage">
            <summary>
            Event raised by the Publish method when no subscribers are
            registered for the message being published.
            </summary>
        </member>
        <member name="E:NServiceBus.Unicast.IUnicastBus.ClientSubscribed">
            <summary>
            Event raised when a client has been subscribed to a message type.
            </summary>
        </member>
        <member name="E:NServiceBus.Unicast.IUnicastBus.MessagesSent">
            <summary>
            Event raised when the bus sends multiple messages across the wire.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.IWantToRunWhenTheBusStarts">
            <summary>
            Implement this interface if you want to be called when the bus starts up
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.IWantToRunWhenTheBusStarts.Run">
            <summary>
            Method called on start up
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.MessageContext">
            <summary>
            Implementation of IMessageContext
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.MessageContext.#ctor(NServiceBus.TransportMessage)">
            <summary>
            Initializes message context from the transport message.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.MessageEventArgs">
            <summary>
            Data containing a message for raising in events.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.MessageEventArgs.#ctor(System.Object)">
            <summary>
            Instantiates a new object containing the given message.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.MessageEventArgs.Message">
            <summary>
            The message.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.MessagingBestPractices">
            <summary>
            Enforce messaging rules
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.MessagingBestPractices.AssertIsValidForSend(System.Type,NServiceBus.MessageIntentEnum)">
            <summary>
            Enforce messaging rules. Make sure, the message can be used within the <see cref="M:NServiceBus.IBus.Send(System.Object[])"/>.
            </summary>
            <param name="messageType">Event, Command or message</param>
        </member>
        <member name="M:NServiceBus.Unicast.MessagingBestPractices.AssertIsValidForReply(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Enforce messaging rules. Make sure, the message can be used by <see cref="M:NServiceBus.IBus.Reply(System.Object[])"/>.
            </summary>
            <param name="messages">Collection of messages to enforce messaging rules on.</param>
        </member>
        <member name="M:NServiceBus.Unicast.MessagingBestPractices.AssertIsValidForReply(System.Type)">
            <summary>
            Enforce messaging rules. Make sure, the message can be used by <see cref="M:NServiceBus.IBus.Reply(System.Object[])"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.MessagingBestPractices.AssertIsValidForPubSub(System.Type)">
            <summary>
            Enforce messaging rules. Make sure, the message can be used by pubsub bus methods (<see cref="M:NServiceBus.IBus.Subscribe(System.Type)"/>, <see cref="M:NServiceBus.IBus.Unsubscribe(System.Type)"/> and <see cref="M:NServiceBus.IBus.Publish``1(``0[])"/>)..
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Monitoring.CriticalTimeCalculator">
            <summary>
                Performance counter for the critical time
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Monitoring.CriticalTimeCalculator.Update(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
                Updates the counter based on the passed times
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Monitoring.CriticalTimeCalculator.Initialize(System.Diagnostics.PerformanceCounter)">
            <summary>
                Verified that the counter exists
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Monitoring.EstimatedTimeToSLABreachCalculator.Initialize(System.TimeSpan,System.Diagnostics.PerformanceCounter)">
            <summary>
                Verified that the counter exists
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Monitoring.EstimatedTimeToSLABreachCalculator.Update(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
                Updates the counter based on the passed times
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Monitoring.PerformanceCounterInitializer">
            <summary>
            Initializes the performance counters if they are enabled
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Monitoring.ProcessingStatistics">
            <summary>
            Stores the start and end times for statistic purposes
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Monitoring.ProcessingStatistics.Bus">
            <summary>
            Needs the bus to set the headers
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Monitoring.ProcessingStatistics.CriticalTimeCounter">
            <summary>
            Performance counter for critical time. 
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Monitoring.ProcessingStatistics.EstimatedTimeToSLABreachCalculator">
            <summary>
            Counter that displays the estimated time left to a SLA breach
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Monitoring.CausationMutator">
            <summary>
            Mutator to set the related to header
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Monitoring.CausationMutator.MutateOutgoing(System.Object[],NServiceBus.TransportMessage)">
            <summary>
            Keeps track of related messages to make auditing possible
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Monitoring.CausationMutator.Init">
            <summary>
            Initializes 
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Monitoring.CausationMutator.Bus">
            <summary>
            The bus is needed to get access to the current message id
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Monitoring.SentTimeMutator">
            <summary>
            Set the TimeSent header
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Monitoring.SentTimeMutator.MutateOutgoing(System.Object[],NServiceBus.TransportMessage)">
            <summary>
            Stamps the message with the current time in UTC
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Monitoring.VersionMutator.MutateOutgoing(System.Object[],NServiceBus.TransportMessage)">
            <summary>
            Keeps track of related messages to make auditing possible
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Monitoring.VersionMutator.Init">
            <summary>
            Initializer
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Publishing.StorageDrivenPublisher">
            <summary>
            Published messages based on whats registered in the given subscription storage
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Publishing.StorageDrivenPublisher.Publish(NServiceBus.TransportMessage,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Publishes the given message to all subscribers
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Publishing.StorageDrivenPublisher.SubscriptionStorage">
            <summary>
            Subscription storage containing information about events and their subscribers
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Publishing.StorageDrivenPublisher.MessageSender">
            <summary>
            The message sender to use when sending the events to the different publishers
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Queuing.Installers.EndpointInputQueueCreator.Address">
            <summary>
            Endpoint input name
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Queuing.Installers.EndpointInputQueueCreator.IsDisabled">
            <summary>
            True if no need to create queue
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Queuing.Installers.AuditQueueCreator">
            <summary>
            Signals to create forward received messages queue.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Queuing.Installers.AuditQueueCreator.Address">
            <summary>
            Address of queue the implementer requires.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Queuing.Installers.AuditQueueCreator.IsDisabled">
            <summary>
            True if no need to create queue
            </summary>
        </member>
        <member name="T:NServiceBus.Transports.Msmq.Config.CheckMachineNameForComplianceWithDtcLimitation">
            <summary>
            Make sure NETBios name is shorter than 15 characters. 
            See <a href="http://particular.net/articles/dtcping-warning-the-cid-values-for-both-test-machines-are-the-same">DTCPing warning</a>
            </summary>
        </member>
        <member name="M:NServiceBus.Transports.Msmq.Config.CheckMachineNameForComplianceWithDtcLimitation.Run">
            <summary>
            Method invoked to run custom code.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Queuing.QueuesCreator">
            <summary>
            Iterating over all implementers of IWantQueueCreated and creating queue for each.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Queuing.QueuesCreator.Install(System.String)">
            <summary>
            Performs the installation providing permission for the given user.
            </summary>
            <param name="identity">The user for under which the queue will be created.</param>
        </member>
        <member name="M:NServiceBus.Unicast.Queuing.QueuesCreator.Init">
            <summary>
            Register all IWantQueueCreated implementers.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Routing.IRouteMessages">
            <summary>
            Keeps track of where a given message should be routed to
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Routing.IRouteMessages.GetDestinationFor(System.Type)">
            <summary>
            Gets the owner/destination for the given message
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Routing.StaticMessageRouter">
            <summary>
            The default message router
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Routing.StaticMessageRouter.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes the router with all known messages
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.IMessageHandlerRegistry">
            <summary>
            The registry that keeps track of all known message handlers
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.IMessageHandlerRegistry.GetHandlerTypes(System.Type)">
            <summary>
            Gets the list of <see cref="T:NServiceBus.IMessageHandler`1"/> <see cref="T:System.Type"/>s for the given <paramref name="messageType"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.IMessageHandlerRegistry.GetMessageTypes">
            <summary>
            Lists all message type for which we have handlers
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.MessageHandlerRegistry">
            <summary>
                Maintains the message handlers for this endpoint
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.MessageHandlerRegistry.GetHandlerTypes(System.Type)">
            <summary>
                Gets the list of <see cref="T:NServiceBus.IMessageHandler`1"/> <see cref="T:System.Type"/>s for the given
                <paramref name="messageType"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.MessageHandlerRegistry.GetMessageTypes">
            <summary>
                Lists all message type for which we have handlers
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.MessageHandlerRegistry.RegisterHandler(System.Type)">
            <summary>
                Registers the given message handler type
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.MessageHandlerRegistry.GetMessageTypesIfIsMessageHandler(System.Type)">
            <summary>
                If the type is a message handler, returns all the message types that it handles
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Subscriptions.SubscriptionEventArgs">
            <summary>
            Contains which client subscribed to which message
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Subscriptions.SubscriptionEventArgs.SubscriberReturnAddress">
            <summary>
            The address of the subscriber.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Subscriptions.SubscriptionEventArgs.MessageType">
            <summary>
            The type of message the client subscribed to.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.SubcriberSideFiltering.SubscriptionPredicatesEvaluator">
            <summary>
            Manages subscriptions and predicates for messages published by other endpoints
            and subscribed to by the local bus.
            </summary>
            <remarks>
            Thread safe.
            </remarks>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.SubcriberSideFiltering.SubscriptionPredicatesEvaluator.GetConditionsForMessage(System.Object)">
            <summary>
            Gets the list of conditions associated with a message.
            </summary>
            <param name="message">The message to get conditions for.</param>
            <returns>A list of conditions that are associated with type of message provided.</returns>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.SubcriberSideFiltering.SubscriptionPredicatesEvaluator.AddConditionForSubscriptionToMessageType(System.Type,System.Predicate{System.Object})">
            <summary>
            Adds a condition to a message type.
            </summary>
            <param name="messageType">The message type to add a condition to.</param>
            <param name="condition">The condition to add.</param>
            <remarks>
            All conditions added to a message type must be met if the messages of that type 
            are to be published to a subscriber.</remarks>
        </member>
        <member name="T:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.MessageDrivenSubscriptionManager">
            <summary>
            Implements message driven subscriptions for transports that doesn't have native support for it (MSMQ , SqlServer, Azure Queues etc)
            </summary>
        </member>
        <member name="T:NServiceBus.Persistence.InMemory.SubscriptionStorage.InMemorySubscriptionStorage">
            <summary>
            In memory implementation of the subscription storage
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.ISubscriptionStorage">
            <summary>
            Defines storage for subscriptions
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.ISubscriptionStorage.Subscribe(NServiceBus.Address,System.Collections.Generic.IEnumerable{NServiceBus.Unicast.Subscriptions.MessageType})">
            <summary>
            Subscribes the given client address to messages of the given types.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.ISubscriptionStorage.Unsubscribe(NServiceBus.Address,System.Collections.Generic.IEnumerable{NServiceBus.Unicast.Subscriptions.MessageType})">
            <summary>
            Unsubscribes the given client address from messages of the given types.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.ISubscriptionStorage.GetSubscriberAddressesForMessage(System.Collections.Generic.IEnumerable{NServiceBus.Unicast.Subscriptions.MessageType})">
            <summary>
            Returns a list of addresses of subscribers that previously requested to be notified
            of messages of the given message types.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageDrivenSubscriptions.ISubscriptionStorage.Init">
            <summary>
            Notifies the subscription storage that now is the time to perform
            any initialization work
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Subscriptions.MessageType">
            <summary>
            Representation of a message type that clients can be subscribed to
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.#ctor(System.Type)">
            <summary>
            Initializes the message type from the given type
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.#ctor(System.String)">
            <summary>
            Initializes the message type from the given string. 
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.#ctor(System.String,System.String)">
            <summary>
            Initializes the message type from the given string. 
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.#ctor(System.String,System.Version)">
            <summary>
            Initializes the message type from the given string. 
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.ToString">
            <summary>
            Overridden to append Version along with Type Name
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.Equals(NServiceBus.Unicast.Subscriptions.MessageType)">
            <summary>
            Equality, only major version is used
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.Equals(System.Object)">
            <summary>
            Equality, only Type is same
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.GetHashCode">
            <summary>
            Gets Hash Code
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.op_Equality(NServiceBus.Unicast.Subscriptions.MessageType,NServiceBus.Unicast.Subscriptions.MessageType)">
            <summary>
            Equality
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Subscriptions.MessageType.op_Inequality(NServiceBus.Unicast.Subscriptions.MessageType,NServiceBus.Unicast.Subscriptions.MessageType)">
            <summary>
            Equality
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Subscriptions.MessageType.TypeName">
            <summary>
            TypeName of the message
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Subscriptions.MessageType.Version">
            <summary>
            Version of the message
            </summary>
        </member>
        <member name="T:NServiceBus.Persistence.Msmq.SubscriptionStorage.Config.SubscriptionsQueueCreator">
            <summary>
            Signals to create MSMQ subscription queue
            </summary>
        </member>
        <member name="P:NServiceBus.Persistence.Msmq.SubscriptionStorage.Config.SubscriptionsQueueCreator.Address">
            <summary>
            MSMQ Subscription storage
            </summary>
        </member>
        <member name="P:NServiceBus.Persistence.Msmq.SubscriptionStorage.Config.SubscriptionsQueueCreator.IsDisabled">
            <summary>
            Disabling the creation of the MSMQ Subscription queue
            </summary>
        </member>
        <member name="T:NServiceBus.Persistence.Msmq.SubscriptionStorage.Entry">
            <summary>
            Describes an entry in the list of subscriptions.
            </summary>
        </member>
        <member name="P:NServiceBus.Persistence.Msmq.SubscriptionStorage.Entry.MessageType">
            <summary>
            Gets the message type for the subscription entry.
            </summary>
        </member>
        <member name="P:NServiceBus.Persistence.Msmq.SubscriptionStorage.Entry.Subscriber">
            <summary>
            Gets the subscription request message.
            </summary>
        </member>
        <member name="T:NServiceBus.Persistence.Msmq.SubscriptionStorage.MsmqSubscriptionStorage">
            <summary>
            Provides functionality for managing message subscriptions
            using MSMQ.
            </summary>
        </member>
        <member name="M:NServiceBus.Persistence.Msmq.SubscriptionStorage.MsmqSubscriptionStorage.ConfigurationIsWrong">
            <summary>
            Checks if configuration is wrong - endpoint isn't transactional and
            object isn't configured to handle own transactions.
            </summary>
        </member>
        <member name="M:NServiceBus.Persistence.Msmq.SubscriptionStorage.MsmqSubscriptionStorage.Add(NServiceBus.Address,NServiceBus.Unicast.Subscriptions.MessageType)">
            <summary>
            Adds a message to the subscription store.
            </summary>
        </member>
        <member name="M:NServiceBus.Persistence.Msmq.SubscriptionStorage.MsmqSubscriptionStorage.Remove(NServiceBus.Address,NServiceBus.Unicast.Subscriptions.MessageType)">
            <summary>
            Removes a message from the subscription store.
            </summary>
        </member>
        <member name="M:NServiceBus.Persistence.Msmq.SubscriptionStorage.MsmqSubscriptionStorage.GetTransactionType">
            <summary>
            Returns the transaction type (automatic or single) that should be used
            based on the configuration of enlisting into external transactions.
            </summary>
        </member>
        <member name="M:NServiceBus.Persistence.Msmq.SubscriptionStorage.MsmqSubscriptionStorage.AddToLookup(NServiceBus.Address,NServiceBus.Unicast.Subscriptions.MessageType,System.String)">
            <summary>
            Adds a message to the lookup to find message from
            subscriber, to message type, to message id
            </summary>
        </member>
        <member name="F:NServiceBus.Persistence.Msmq.SubscriptionStorage.MsmqSubscriptionStorage.lookup">
            <summary>
            lookup from subscriber, to message type, to message id
            </summary>
        </member>
        <member name="P:NServiceBus.Persistence.Msmq.SubscriptionStorage.MsmqSubscriptionStorage.DontUseExternalTransaction">
            <summary>
            Gets/sets whether or not to use a transaction started outside the 
            subscription store.
            </summary>
        </member>
        <member name="P:NServiceBus.Persistence.Msmq.SubscriptionStorage.MsmqSubscriptionStorage.Queue">
            <summary>
            Sets the address of the queue where subscription messages will be stored.
            For a local queue, just use its name - msmq specific info isn't needed.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Transport.ControlMessage">
            <summary>
            Helper for creating control messages
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.ControlMessage.Create(NServiceBus.Address)">
            <summary>
            Creates Transport Message
            </summary>
            <returns>Transport Message</returns>
        </member>
        <member name="T:NServiceBus.Unicast.Transport.TransportMessageExtensions">
            <summary>
            Extensions to make the usage if control messages easier
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.TransportMessageExtensions.IsControlMessage(NServiceBus.TransportMessage)">
            <summary>
            True if the transport message is a control message
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Transport.FailedMessageProcessingEventArgs">
            <summary>
            Defines the event data for the failed message processing event
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.FailedMessageProcessingEventArgs.#ctor(NServiceBus.TransportMessage,System.Exception)">
            <summary>
            Initialized the event arg with the actual exception
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.FailedMessageProcessingEventArgs.Reason">
            <summary>
            The exception that caused the processing to fail
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.FailedMessageProcessingEventArgs.Message">
            <summary>
            Gets the message received.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Transport.ITransport">
            <summary>
            Defines the basic functionality of a transport to be used by NServiceBus.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.ITransport.Start(System.String)">
            <summary>
            Starts the transport.
            </summary>
            <param name="inputqueue">
            The address of a local queue that should be used as input channel for this transport
            </param>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.ITransport.Start(NServiceBus.Address)">
            <summary>
            Starts the transport listening for messages on the given local address.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.ITransport.ChangeNumberOfWorkerThreads(System.Int32)">
            <summary>
            Changes the number of worker threads running in the transport.
            This may stop active worker threads; those threads will finish
            processing their current message and then exit.
            </summary>
            <param name="targetNumberOfWorkerThreads">
            The requested number of active worker threads after
            the necessary threads have been stopped or started.
            </param>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.ITransport.ChangeMaximumConcurrencyLevel(System.Int32)">
            <summary>
            Updates the maximum concurrency level this <see cref="T:NServiceBus.Unicast.Transport.ITransport"/> is able to support.
            </summary>
            <param name="maximumConcurrencyLevel">The new maximum concurrency level for this <see cref="T:NServiceBus.Unicast.Transport.ITransport"/>.</param>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.ITransport.ChangeMaximumMessageThroughputPerSecond(System.Int32)">
            <summary>
            Updates the max throughput per second.
            </summary>
            <param name="maximumMessageThroughputPerSecond">The new max throughput.</param>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.ITransport.AbortHandlingCurrentMessage">
            <summary>
            Causes the current message being handled to return to the queue.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.ITransport.Stop">
            <summary>
            Stops the transport.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.ITransport.NumberOfWorkerThreads">
            <summary>
            Gets the number of worker threads currently running in the transport.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.ITransport.MaximumConcurrencyLevel">
            <summary>
            Gets the maximum concurrency level this <see cref="T:NServiceBus.Unicast.Transport.ITransport"/> is able to support.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.ITransport.MaxThroughputPerSecond">
            <summary>
            Throttling receiving messages rate. You can't set the value than the value specified at your license.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.ITransport.MaximumMessageThroughputPerSecond">
            <summary>
            Gets the receiving messages rate.
            </summary>
        </member>
        <member name="E:NServiceBus.Unicast.Transport.ITransport.TransportMessageReceived">
            <summary>
            Raised when a message is received.
            </summary>
        </member>
        <member name="E:NServiceBus.Unicast.Transport.ITransport.StartedMessageProcessing">
            <summary>
            Raised when a message is available but before <see cref="E:NServiceBus.Unicast.Transport.ITransport.TransportMessageReceived"/> is raised.
            </summary>
        </member>
        <member name="E:NServiceBus.Unicast.Transport.ITransport.FinishedMessageProcessing">
            <summary>
            Raised after message processing was completed, even in case of an exception in message processing.
            </summary>
        </member>
        <member name="E:NServiceBus.Unicast.Transport.ITransport.FailedMessageProcessing">
            <summary>
            Raised if an exception was encountered at any point in the processing - including
            when the transaction commits.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Transport.StartedMessageProcessingEventArgs">
            <summary>
            Defines the arguments passed to the event handler of the
            <see cref="E:NServiceBus.Unicast.Transport.ITransport.StartedMessageProcessing"/> event.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.StartedMessageProcessingEventArgs.#ctor(NServiceBus.TransportMessage)">
            <summary>
            Initializes a new TransportMessageReceivedEventArgs.
            </summary>
            <param name="m">The message that was received.</param>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.StartedMessageProcessingEventArgs.Message">
            <summary>
            Gets the message received.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Transport.FinishedMessageProcessingEventArgs">
            <summary>
            Defines the arguments passed to the event handler of the
            <see cref="E:NServiceBus.Unicast.Transport.ITransport.FinishedMessageProcessing"/> event.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.FinishedMessageProcessingEventArgs.#ctor(NServiceBus.TransportMessage)">
            <summary>
            Initializes a new FinishedMessageProcessingEventArgs.
            </summary>
            <param name="m">The message that was received.</param>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.FinishedMessageProcessingEventArgs.Message">
            <summary>
            Gets the message received.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.Transactional.Config.AdvancedTransactionalConfig.SupressDTC(NServiceBus.Configure)">
            <summary>
            Suppress the use of DTC. Can be combined with IsTransactional to turn off
            the DTC but still use the retries
            </summary>
        </member>
        <member name="T:NServiceBus.TransportReceiverConfig">
            <summary>
            Extension methods to configure transport.
            </summary>
        </member>
        <member name="M:NServiceBus.TransportReceiverConfig.UseTransport``1(NServiceBus.Configure,System.String)">
            <summary>
            Configures NServiceBus to use the given transport.
            </summary>
            <typeparam name="T">Type of <see cref="T:NServiceBus.Transports.TransportDefinition"/> to be configured.</typeparam>
            <param name="config">The configuration object.</param>
            <param name="connectionStringName">The connection string name to use to retrieve the connection string from.</param> 
            <returns>The configuration object.</returns>
        </member>
        <member name="M:NServiceBus.TransportReceiverConfig.UseTransport``1(NServiceBus.Configure,System.Func{System.String})">
            <summary>
            Configures NServiceBus to use the given transport.
            </summary>
            <typeparam name="T">Type of <see cref="T:NServiceBus.Transports.TransportDefinition"/> to be configured.</typeparam>
            <param name="config">The configuration object.</param>
            <param name="definesConnectionString">Specifies a callback to call to retrieve the connection string to use</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:NServiceBus.TransportReceiverConfig.UseTransport(NServiceBus.Configure,System.Type,System.String)">
            <summary>
            Configures NServiceBus to use the given transport.
            </summary>
            <param name="config">The configuration object.</param>
            <param name="transportDefinitionType">Type of <see cref="T:NServiceBus.Transports.TransportDefinition"/> to be configured.</param>
            <param name="connectionStringName">The connection string name to use to retrieve the connection string from.</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="M:NServiceBus.TransportReceiverConfig.UseTransport(NServiceBus.Configure,System.Type,System.Func{System.String})">
            <summary>
            Configures NServiceBus to use the given transport.
            </summary>
            <param name="config">The configuration object.</param>
            <param name="transportDefinitionType">Type of <see cref="T:NServiceBus.Transports.TransportDefinition"/> to be configured.</param>
            <param name="definesConnectionString">Specifies a callback to call to retrieve the connection string to use</param>
            <returns>The configuration object.</returns>
        </member>
        <member name="T:NServiceBus.Unicast.Transport.ThroughputLimiter">
            <summary>
            Support for throughput limitation of the transport
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Transport.TransportReceiver">
            <summary>
            The default implementation of <see cref="T:NServiceBus.Unicast.Transport.ITransport"/>
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.TransportReceiver.ChangeMaximumConcurrencyLevel(System.Int32)">
            <summary>
            Updates the maximum concurrency level this <see cref="T:NServiceBus.Unicast.Transport.ITransport"/> is able to support.
            </summary>
            <param name="maximumConcurrencyLevel">The new maximum concurrency level for this <see cref="T:NServiceBus.Unicast.Transport.ITransport"/>.</param>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.TransportReceiver.ChangeNumberOfWorkerThreads(System.Int32)">
            <summary>
            Changes the number of worker threads to the given target,
            stopping or starting worker threads as needed.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.TransportReceiver.AbortHandlingCurrentMessage">
            <summary>
            Causes the processing of the current message to be aborted.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.TransportReceiver.Stop">
            <summary>
            Stops the transport.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.TransportReceiver.Receiver">
            <summary>
            The receiver responsible for notifying the transport when new messages are available
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.TransportReceiver.FailureManager">
            <summary>
            Manages failed message processing.
            </summary>
        </member>
        <member name="E:NServiceBus.Unicast.Transport.TransportReceiver.StartedMessageProcessing">
            <summary>
            Event which indicates that message processing has started.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.TransportReceiver.TransactionSettings">
            <summary>
            The current settings for transactions
            </summary>
        </member>
        <member name="E:NServiceBus.Unicast.Transport.TransportReceiver.FinishedMessageProcessing">
            <summary>
            Event which indicates that message processing has completed.
            </summary>
        </member>
        <member name="E:NServiceBus.Unicast.Transport.TransportReceiver.FailedMessageProcessing">
            <summary>
            Event which indicates that message processing failed for some reason.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.TransportReceiver.NumberOfWorkerThreads">
            <summary>
            Gets/sets the number of concurrent threads that should be
            created for processing the queue.
            
            Get returns the actual number of running worker threads, which may
            be different than the originally configured value.
            
            When used as a setter, this value will be used by the <see cref="M:NServiceBus.Unicast.Transport.TransportReceiver.Start(NServiceBus.Address)"/>
            method only and will have no effect if called afterwards.
            
            To change the number of worker threads at runtime, call <see cref="M:NServiceBus.Unicast.Transport.TransportReceiver.ChangeNumberOfWorkerThreads(System.Int32)"/>.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.TransportReceiver.MaximumConcurrencyLevel">
            <summary>
            Gets the maximum concurrency level this <see cref="T:NServiceBus.Unicast.Transport.ITransport"/> is able to support.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.TransportReceiver.MaximumMessageThroughputPerSecond">
            <summary>
            Gets the receiving messages rate.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.TransportReceiver.MaxThroughputPerSecond">
            <summary>
            Throttling receiving messages rate. You can't set the value other than the value specified at your license.
            </summary>
        </member>
        <member name="E:NServiceBus.Unicast.Transport.TransportReceiver.TransportMessageReceived">
            <summary>
            Event raised when a message has been received in the input queue.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.TransactionSettings.IsTransactional">
            <summary>
            Sets whether or not the transport is transactional.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.TransactionSettings.TransactionTimeout">
            <summary>
            Property for getting/setting the period of time when the transaction times out.
            Only relevant when <see cref="P:NServiceBus.Unicast.Transport.TransactionSettings.IsTransactional"/> is set to true.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.TransactionSettings.IsolationLevel">
            <summary>
            Property for getting/setting the isolation level of the transaction scope.
            Only relevant when <see cref="P:NServiceBus.Unicast.Transport.TransactionSettings.IsTransactional"/> is set to true.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.TransactionSettings.MaxRetries">
            <summary>
            Sets the maximum number of times a message will be retried
            when an exception is thrown as a result of handling the message.
            This value is only relevant when <see cref="P:NServiceBus.Unicast.Transport.TransactionSettings.IsTransactional"/> is true.
            </summary>
            <remarks>
            Default value is 5.
            </remarks>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.TransactionSettings.DontUseDistributedTransactions">
            <summary>
            If true the transport won't enlist in distributed transactions
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.TransactionSettings.DoNotWrapHandlersExecutionInATransactionScope">
            <summary>
            Controls if the message handlers should be wrapped in a <see cref="T:System.Transactions.TransactionScope"/>
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Transport.TransportMessageAvailableEventArgs">
            <summary>
                Provides data for the MessageDequeued event.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.TransportMessageAvailableEventArgs.#ctor(NServiceBus.TransportMessage)">
            <summary>
                Default constructor for <see cref="T:NServiceBus.Unicast.Transport.TransportMessageAvailableEventArgs"/>.
            </summary>
            <param name="m">
                The received <see cref="T:NServiceBus.TransportMessage"/>.
            </param>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.TransportMessageAvailableEventArgs.Message">
            <summary>
                The received <see cref="T:NServiceBus.TransportMessage"/>.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.Transport.TransportMessageHandlingFailedException">
            <summary>
            Exception used to transport exceptions encountered in message handlers.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.TransportMessageHandlingFailedException.#ctor(System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="originalException">The exception that got thrown from the message handler.</param>
        </member>
        <member name="T:NServiceBus.Unicast.Transport.TransportMessageReceivedEventArgs">
            <summary>
            Defines the arguments passed to the event handler of the
            <see cref="E:NServiceBus.Unicast.Transport.ITransport.TransportMessageReceived"/> event.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.Transport.TransportMessageReceivedEventArgs.#ctor(NServiceBus.TransportMessage)">
            <summary>
            Initializes a new TransportMessageReceivedEventArgs.
            </summary>
            <param name="m">The message that was received.</param>
        </member>
        <member name="P:NServiceBus.Unicast.Transport.TransportMessageReceivedEventArgs.Message">
            <summary>
            Gets the message received.
            </summary>
        </member>
        <member name="T:NServiceBus.Unicast.UnicastBus">
            <summary>
            A unicast implementation of <see cref="T:NServiceBus.IBus"/> for NServiceBus.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.ClearTimeoutsFor(System.Guid)">
            <summary>
            Clear Timeouts For the saga
            </summary>
            <param name="sagaId">Id of the Saga for clearing the timeouts</param>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.CreateInstance``1">
            <summary>
            Creates an instance of the specified type.
            Used primarily for instantiating interface-based messages.
            </summary>
            <typeparam name="T">The type to instantiate.</typeparam>
            <returns>An instance of the specified type.</returns>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.CreateInstance``1(System.Action{``0})">
            <summary>
            Creates an instance of the specified type.
            Used primarily for instantiating interface-based messages.
            </summary>
            <typeparam name="T">The type to instantiate.</typeparam>
            <param name="action">An action to perform on the result</param>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.CreateInstance(System.Type)">
            <summary>
            Creates an instance of the specified type.
            Used primarily for instantiating interface-based messages.
            </summary>
            <param name="messageType">The type to instantiate.</param>
            <returns>An instance of the specified type.</returns>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Publish``1(System.Action{``0})">
            <summary>
            Creates an instance of the requested message type (T), 
            performing the given action on the created message,
            and then publishing it.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Publish``1(``0)">
            <summary>
            Publishes the message to all subscribers of the message type.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Publish``1">
            <summary>
            Publishes the message to all subscribers of the message type.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Publish``1(``0[])">
            <summary>
            Publishes the messages to all subscribers of the first message's type.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Subscribe``1">
            <summary>
            Subscribes to the given type - T.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Subscribe(System.Type)">
            <summary>
            Subscribes to receive published messages of the specified type.
            </summary>
            <param name="messageType">The type of message to subscribe to.</param>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Subscribe``1(System.Predicate{``0})">
            <summary>
            Subscribes to the given type T, registering a condition that all received
            messages of that type should comply with, otherwise discarding them.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Subscribe(System.Type,System.Predicate{System.Object})">
            <summary>
            Subscribes to receive published messages of the specified type if
            they meet the provided condition.
            </summary>
            <param name="messageType">The type of message to subscribe to.</param>
            <param name="condition">The condition under which to receive the message.</param>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Unsubscribe``1">
            <summary>
            Unsubscribes from the given type of message - T.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.Unsubscribe(System.Type)">
            <summary>
            Unsubscribes from receiving published messages of the specified type.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.TransportMessageReceived(System.Object,NServiceBus.Unicast.Transport.TransportMessageReceivedEventArgs)">
            <summary>
            Handles the <see cref="E:NServiceBus.Unicast.Transport.ITransport.TransportMessageReceived"/> event from the <see cref="T:NServiceBus.Unicast.Transport.ITransport"/> used
            for the bus.
            </summary>
            <param name="sender">The sender of the event.</param>
            <param name="e">The arguments for the event.</param>
            <remarks>
            When the transport passes up the <see cref="T:NServiceBus.TransportMessage"/> its received,
            the bus checks for initialization, 
            sets the message as that which is currently being handled for the current thread
            and, depending on <see cref="P:NServiceBus.Unicast.UnicastBus.DisableMessageHandling"/>, attempts to handle the message.
            </remarks>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.MapTransportMessageFor(System.Collections.Generic.IList{System.Object},NServiceBus.TransportMessage)">
            <summary>
            Wraps the provided messages in an NServiceBus envelope, does not include destination.
            Invokes message mutators.
            </summary>
            <param name="rawMessages">The messages to wrap.</param>
            <param name="result">The envelope in which the messages are placed.</param>
            <returns>The envelope containing the messages.</returns>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.GetAddressForMessages(System.Object[])">
            <summary>
            Uses the first message in the array to pass to <see cref="M:NServiceBus.Unicast.UnicastBus.GetAddressForMessageType(System.Type)"/>.
            </summary>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.GetAddressForMessageType(System.Type)">
            <summary>
            Gets the destination address For a message type.
            </summary>
            <param name="messageType">The message type to get the destination for.</param>
            <returns>The address of the destination associated with the message type.</returns>
        </member>
        <member name="M:NServiceBus.Unicast.UnicastBus.AssertBusIsStarted">
            <summary>
            Throws an exception if the bus hasn't begun the startup process.
            </summary>
        </member>
        <member name="F:NServiceBus.Unicast.UnicastBus.modules">
            <summary>
            Thread-static list of message modules, needs to be initialized for every transport message
            </summary>
        </member>
        <member name="F:NServiceBus.Unicast.UnicastBus.messageIdToAsyncResultLookup">
            <summary>
            Map of message identifiers to Async Results - useful for cleanup in case of timeouts.
            </summary>
        </member>
        <member name="F:NServiceBus.Unicast.UnicastBus._messageBeingHandled">
            <remarks>
            ThreadStatic
            </remarks>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.DisableMessageHandling">
            <summary>
            Should be used by programmer, not administrator.
            Disables the handling of incoming messages.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.Transport">
            <summary>
            Should be used by programmer, not administrator.
            Sets an <see cref="T:NServiceBus.Unicast.Transport.ITransport"/> implementation to use as the
            listening endpoint for the bus.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.MessageSender">
            <summary>
            Message queue used to send messages.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.MasterNodeAddress">
            <summary>
            Information regarding the current master node
            </summary>
        </member>
        <member name="E:NServiceBus.Unicast.UnicastBus.MessageReceived">
            <summary>
            Event raised when a message is received.
            </summary>
        </member>
        <member name="E:NServiceBus.Unicast.UnicastBus.MessagesSent">
            <summary>
            Event raised when messages are sent.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.MessageSerializer">
            <summary>
            Should be used by the programmer, not the administrator.
            Gets and sets an <see cref="T:NServiceBus.Serialization.IMessageSerializer"/> implementation to
            be used for subscription storage for the bus.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.MessageMetadataRegistry">
            <summary>
            The registry of all known messages for this endpoint
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.MessageDeferrer">
            <summary>
            A way to request the transport to defer the processing of a message
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.Builder">
            <summary>
            Should be used by programmer, not administrator.
            Sets <see cref="T:NServiceBus.ObjectBuilder.IBuilder"/> implementation that will be used to 
            dynamically instantiate and execute message handlers.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.MessageMapper">
            <summary>
            Gets/sets the message mapper.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.PropagateReturnAddressOnSend">
            <summary>
            Should be used by programmer, not administrator.
            Sets whether or not the return address of a received message 
            should be propagated when the message is forwarded. This field is
            used primarily for the Distributor.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.MessageRouter">
            <summary>
            The router for this <see cref="T:NServiceBus.Unicast.UnicastBus"/>
            </summary>
        </member>
        <member name="E:NServiceBus.Unicast.UnicastBus.NoSubscribersForMessage">
            <summary>
            Event raised when no subscribers found for the published message.
            </summary>
        </member>
        <member name="E:NServiceBus.Unicast.UnicastBus.NServiceBus#Unicast#IUnicastBus#ClientSubscribed">
            <summary>
            Event raised when client subscribed to a message type.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.SubscriptionPredicatesEvaluator">
            <summary>
            Handles the filtering of messages on the subscriber side
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.SubscriptionManager">
            <summary>
            The registered subscription manager for this bus instance
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.MessagePublisher">
            <summary>
            Publishes the given messages
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.DoNotStartTransport">
            <summary>
            Allow disabling the unicast bus.
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.InputAddress">
            <summary>
            The address this bus will use as it's main input
            </summary>
        </member>
        <member name="P:NServiceBus.Unicast.UnicastBus.MessageDispatcherMappings">
            <summary>
            The list of message dispatcher factories to use
            </summary>
        </member>
        <member name="T:NServiceBus.CircuitBreakers.CircuitBreaker">
            <summary>
            A circuit breaker implementation.
            </summary>
        </member>
        <member name="M:NServiceBus.CircuitBreakers.CircuitBreaker.#ctor(System.Int32,System.TimeSpan)">
            <summary>
            Create a <see cref="T:NServiceBus.CircuitBreakers.CircuitBreaker"/>.
            </summary>
            <param name="threshold">Number of triggers before it fires.</param>
            <param name="resetEvery">The <see cref="T:System.TimeSpan"/> to wait before resetting the <see cref="T:NServiceBus.CircuitBreakers.CircuitBreaker"/>.</param>
        </member>
        <member name="M:NServiceBus.CircuitBreakers.CircuitBreaker.Execute(System.Action)">
            <summary>
            Method to execute.
            </summary>
            <param name="trigger">The callback to execute.</param>
        </member>
        <member name="T:NServiceBus.Utils.BackOff">
            <summary>
            A utility class that does a sleep on very call up to a limit based on a condition.
            </summary>
        </member>
        <member name="M:NServiceBus.Utils.BackOff.#ctor(System.Int32)">
            <summary>
            Initializes a new instance.
            </summary>
            <param name="maximum">The maximum number of milliseconds for which the thread is blocked.</param>
        </member>
        <member name="M:NServiceBus.Utils.BackOff.Wait(System.Func{System.Boolean})">
            <summary>
            It executes the Thread sleep if condition is <c>true</c>, otherwise it resets.
            </summary>
            <param name="condition">If the condition is <c>true</c> then the wait is performed.</param>
        </member>
        <member name="T:NServiceBus.Utils.FileVersionRetriever">
            <summary>
            Helper class to retrieve File version.
            </summary>
        </member>
        <member name="M:NServiceBus.Utils.FileVersionRetriever.GetFileVersion(System.Type)">
            <summary>
            Retrieves a semver compliant version from a <see cref="T:System.Type"/>.
            </summary>
            <param name="type"><see cref="T:System.Type"/> to retrieve version from.</param>
            <returns>SemVer compliant version.</returns>
        </member>
        <member name="T:NServiceBus.Utils.Reflection.LateBoundMethod">
            <summary>
            Late Bound Method
            </summary>
            <param name="target">Target object</param>
            <param name="arguments">Arguments</param>
        </member>
        <member name="T:NServiceBus.Utils.Reflection.LateBoundProperty">
            <summary>
            Late Bound Property
            </summary>
            <param name="target">Target Object</param>
        </member>
        <member name="T:NServiceBus.Utils.Reflection.LateBoundField">
            <summary>
            Late Bound Field
            </summary>
            <param name="target">Target Objects </param>
        </member>
        <member name="T:NServiceBus.Utils.Reflection.LateBoundFieldSet">
            <summary>
            Late Bound Field Set
            </summary>
            <param name="target">Target Object</param>
        </member>
        <member name="T:NServiceBus.Utils.Reflection.LateBoundPropertySet">
            <summary>
            Late Bound Property Set
            </summary>
            <param name="target">Target Object</param>
        </member>
        <member name="T:NServiceBus.Utils.Reflection.DelegateFactory">
            <summary>
            Delegate Factory
            </summary>
        </member>
        <member name="M:NServiceBus.Utils.Reflection.DelegateFactory.Create(System.Reflection.MethodInfo)">
            <summary>
            Create Late Bound methods
            </summary>
            <param name="method">MethodInfo</param>
            <returns>LateBoundMethod</returns>
        </member>
        <member name="M:NServiceBus.Utils.Reflection.DelegateFactory.Create(System.Reflection.PropertyInfo)">
            <summary>
            Creates LateBoundProperty
            </summary>
        </member>
        <member name="M:NServiceBus.Utils.Reflection.DelegateFactory.CreateSet(System.Reflection.FieldInfo)">
            <summary>
            Create filed set 
            </summary>
        </member>
        <member name="M:NServiceBus.Utils.Reflection.DelegateFactory.CreateSet(System.Reflection.PropertyInfo)">
            <summary>
            Creates Property Set 
            </summary>
            <param name="property">PropertyInfo</param>
            <returns>LateBoundPropertySet</returns>
        </member>
        <member name="T:NServiceBus.Utils.Reflection.ExtensionMethods">
            <summary>
            Contains extension methods
            </summary>
        </member>
        <member name="M:NServiceBus.Utils.Reflection.ExtensionMethods.IsGenericallyEquivalent(System.Type,System.Type,System.Type)">
            <summary>
            Useful for finding if a type is (for example) IMessageHandler{T} where T : IMessage.
            </summary>
        </member>
        <member name="M:NServiceBus.Utils.Reflection.ExtensionMethods.GetGenericallyContainedType(System.Type,System.Type,System.Type)">
            <summary>
            Returns the enclosed generic type given that the type is GenericallyEquivalent.
            </summary>
        </member>
        <member name="M:NServiceBus.Utils.Reflection.ExtensionMethods.IsSimpleType(System.Type)">
            <summary>
            Returns true if the type can be serialized as is.
            </summary>
        </member>
        <member name="M:NServiceBus.Utils.Reflection.ExtensionMethods.SerializationFriendlyName(System.Type)">
            <summary>
            Takes the name of the given type and makes it friendly for serialization
            by removing problematic characters.
            </summary>
        </member>
        <member name="T:NServiceBus.Utils.Reflection.Reflect`1">
            <summary>
            Provides strong-typed reflection of the <typeparamref name="TTarget"/> 
            type.
            </summary>
            <typeparam name="TTarget">Type to reflect.</typeparam>
        </member>
        <member name="M:NServiceBus.Utils.Reflection.Reflect`1.GetProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets the property represented by the lambda expression.
            </summary>
            <exception cref="T:System.ArgumentNullException">The <paramref name="property"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="property"/> is not a lambda expression or it does not represent a property access.</exception>
        </member>
        <member name="M:NServiceBus.Utils.Reflection.Reflect`1.GetProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)">
            <summary>
            Gets the property represented by the lambda expression.        
            </summary>
            <param name="checkForSingleDot">If checkForSingleDot is true, then the property expression is checked to see that only a single dot is present.</param>
        </member>
        <member name="M:NServiceBus.Utils.Reflection.Reflect`1.GetMemberInfo(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Returns a MemberInfo for an expression containing a call to a property.
            </summary>
            <param name="checkForSingleDot">Checks that the member expression doesn't have more than one dot like a.Prop.Val</param>
        </member>
        <member name="T:NServiceBus.Utils.RegistryReader`1">
            <summary>
            Wrapper to read registry keys.
            </summary>
            <typeparam name="T">The type of the key to retrieve</typeparam>
        </member>
        <member name="M:NServiceBus.Utils.RegistryReader`1.Read(System.String,`0)">
            <summary>
            Attempts to read the key from the registry.
            </summary>
            <param name="name">The name of the value to retrieve. This string is not case-sensitive.</param>
            <param name="defaultValue">The value to return if <paramref name="name"/> does not exist. </param>
            <returns>
            The value associated with <paramref name="name"/>, with any embedded environment variables left unexpanded, or <paramref name="defaultValue"/> if <paramref name="name"/> is not found.
            </returns>
        </member>
        <member name="T:NServiceBus.WcfService`2">
            <summary>
            Generic WCF service for exposing a messaging endpoint.
            </summary>
        </member>
    </members>
</doc>
