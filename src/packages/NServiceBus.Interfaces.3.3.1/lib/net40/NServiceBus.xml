<?xml version="1.0"?>
<doc>
  <assembly>
    <name>NServiceBus</name>
  </assembly>
  <members>
    <member name="T:NServiceBus.Address">
      <summary>
             Abstraction for an address on the NServiceBus network.
            </summary>
    </member>
    <member name="M:NServiceBus.Address.InitializeLocalAddress(System.String)">
      <summary>
            Sets the address of this endpoint.
            Will throw an exception if overwriting a previous value (but value will still be set).
            </summary>
      <param name="queue">
      </param>
    </member>
    <member name="M:NServiceBus.Address.OverrideDefaultMachine(System.String)">
      <summary>
            Sets the address mode, can only be done as long as the local address is not been initialized.By default the default machine equals Environment.MachineName
            </summary>
      <param name="machineName">
      </param>
      <exception cref="T:System.InvalidOperationException">
      </exception>
    </member>
    <member name="M:NServiceBus.Address.InitializeAddressMode(NServiceBus.AddressMode)">
      <summary>
            Sets the name of the machine to be used when none is specified in the address.
            </summary>
      <param name="mode">
      </param>
      <exception cref="T:System.InvalidOperationException">
      </exception>
    </member>
    <member name="M:NServiceBus.Address.Parse(System.String)">
      <summary>
            Parses a string and returns an Address.
            </summary>
      <param name="destination">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Address.#ctor(System.String,System.String)">
      <summary>
             Instantiate a new Address for a known queue on a given machine.
            </summary>
      <param name="queueName">
      </param>
      <param name="machineName">
      </param>
    </member>
    <member name="M:NServiceBus.Address.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Deserializes an Address.
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:NServiceBus.Address.SubScope(System.String)">
      <summary>
            Creates a new Address whose Queue is derived from the Queue of the existing Address
            together with the provided qualifier. For example: queue.qualifier@machine
            </summary>
      <param name="qualifier">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Address.GetHashCode">
      <summary>
            Provides a hash code of the Address.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Address.ToString">
      <summary>
            Returns a string representation of the address.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Address.PreventChanges">
      <summary>
            Prevents changes to all addresses.
            </summary>
    </member>
    <member name="M:NServiceBus.Address.op_Equality(NServiceBus.Address,NServiceBus.Address)">
      <summary>
            Overloading for the == for the class Address
            </summary>
      <param name="left">Left hand side of == operator</param>
      <param name="right">Right hand side of == operator</param>
      <returns>true if the LHS is equal to RHS</returns>
    </member>
    <member name="M:NServiceBus.Address.op_Inequality(NServiceBus.Address,NServiceBus.Address)">
      <summary>
            Overloading for the != for the class Address
            </summary>
      <param name="left">Left hand side of != operator</param>
      <param name="right">Right hand side of != operator</param>
      <returns>true if the LHS is not equal to RHS</returns>
    </member>
    <member name="M:NServiceBus.Address.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:NServiceBus.Address.Equals(NServiceBus.Address)">
      <summary>
            Check this is equal to other Address
            </summary>
      <param name="other">refrence addressed to be checked with this</param>
      <returns>true if this is equal to other</returns>
    </member>
    <member name="P:NServiceBus.Address.Local">
      <summary>
            Get the address of this endpoint.
            </summary>
    </member>
    <member name="P:NServiceBus.Address.Self">
      <summary>
            Get the address of this endpoint.
            </summary>
    </member>
    <member name="P:NServiceBus.Address.Undefined">
      <summary>
            Get the address of this endpoint.
            </summary>
    </member>
    <member name="P:NServiceBus.Address.Queue">
      <summary>
            The (lowercase) name of the queue not including the name of the machine or location depending on the address mode.
            </summary>
    </member>
    <member name="P:NServiceBus.Address.Machine">
      <summary>
            The (lowercase) name of the machine or the (normal) name of the location depending on the address mode.
            </summary>
    </member>
    <member name="T:NServiceBus.AddressMode">
      <summary>
            Determines how the azure location behaves
            </summary>
    </member>
    <member name="F:NServiceBus.AddressMode.Local">
      <summary>
            Addressing behavior is confirm to local queueing policies, eg. MSMQ
            </summary>
    </member>
    <member name="F:NServiceBus.AddressMode.Remote">
      <summary>
            Addressing behavior is confirm to remote queueing policies, eg. Azure
            </summary>
    </member>
    <member name="T:NServiceBus.CompletionResult">
      <summary>
            The object found in <see cref="T:System.IAsyncResult" />.AsyncState returned by the <see cref="T:System.AsyncCallback" /> 
            passed to the Send method of the bus.
            </summary>
    </member>
    <member name="P:NServiceBus.CompletionResult.ErrorCode">
      <summary>
            If <see cref="M:NServiceBus.IBus.Return``1(``0)" /> was called, this contains the value passed to it.
            </summary>
    </member>
    <member name="P:NServiceBus.CompletionResult.Messages">
      <summary>
            If <see cref="M:NServiceBus.IBus.Reply(System.Object[])" /> was called, this contains the messages passed to it.
            </summary>
    </member>
    <member name="P:NServiceBus.CompletionResult.State">
      <summary>
            An object that can contain state information for the method.
            </summary>
    </member>
    <member name="T:NServiceBus.MessageHandlerExtensionMethods">
      <summary>
            Extension method on message handler.
            </summary>
    </member>
    <member name="M:NServiceBus.MessageHandlerExtensionMethods.Bus``1(NServiceBus.IMessageHandler{``0})">
      <summary>
            Extension method on MessageHandler. Users can avoid declaring an IBus to be injected, and use the bus implicitly.
            </summary>
      <example> The following is an example on how a message handler might look like using the Bus() extension method:
            <code escaped="false">
            public class RequestDataMessageHandler : IHandleMessages&lt;RequestDataMessage&gt;
            {
               public void Handle(RequestDataMessage message)
               {
                  var response = this.Bus().CreateInstance&lt;DataResponseMessage&gt;(m =&gt;
                 {
                       m.DataId = message.DataId;
                       m.String = message.String;
                   });
                   this.Bus().Reply(response);
               }
            }
            </code></example>
      <typeparam name="T">The message type to handle</typeparam>
      <param name="handler">The <see cref="T:NServiceBus.IMessageHandler`1" /> implementing class</param>
      <returns>IBus interface</returns>
    </member>
    <member name="T:NServiceBus.ExtensionMethods">
      <summary>
            Class containing extension methods for base class libraries for using interface-based messages.
            </summary>
    </member>
    <member name="F:NServiceBus.ExtensionMethods.SetHeaderAction">
      <summary>
            The action used to set the header in the <see cref="M:NServiceBus.ExtensionMethods.SetHeader(System.Object,System.String,System.String)" /> method.
            </summary>
    </member>
    <member name="F:NServiceBus.ExtensionMethods.GetHeaderAction">
      <summary>
            The action used to get the header value in the <see cref="M:NServiceBus.ExtensionMethods.GetHeader(System.Object,System.String)" /> method.
            </summary>
    </member>
    <member name="M:NServiceBus.ExtensionMethods.Add``1(System.Collections.Generic.IList{``0},System.Action{``0})">
      <summary>
            Instantiates an instance of T and adds it to the list.
            </summary>
      <typeparam name="T">The type to instantiate.</typeparam>
      <param name="list">The list to which to add the new element</param>
      <param name="initializer">An action for setting properties of the created instance.</param>
    </member>
    <member name="M:NServiceBus.ExtensionMethods.GetHeader(System.Object,System.String)">
      <summary>
            Get the header with the given key. Cannot be used to change its value.
            </summary>
      <param name="msg">
      </param>
      <param name="key">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ExtensionMethods.GetHttpFromHeader(System.Object)">
      <summary>
            If the source of this message was an Http endpoint, returns its address
            otherwise returns null.
            </summary>
      <param name="msg">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ExtensionMethods.GetHttpToHeader(System.Object)">
      <summary>
            If the target destination of this message is an Http endpoint,
            return the address of that target, otherwise null.
            </summary>
      <param name="msg">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ExtensionMethods.GetDestinationSitesHeader(System.Object)">
      <summary>
            Returns the list of destination sites for this message
            </summary>
      <param name="msg">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ExtensionMethods.GetOriginatingSiteHeader(System.Object)">
      <summary>
            Returns the sitekey for the site for which this message originated, null if this message wasn't sent via the gateway
            </summary>
      <param name="msg">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.ExtensionMethods.SetHeader(System.Object,System.String,System.String)">
      <summary>
            Sets the value of the header for the given key.
            </summary>
      <param name="msg">
      </param>
      <param name="key">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:NServiceBus.ExtensionMethods.SetDestinationSitesHeader(System.Object,System.String)">
      <summary>
            Sets the list of sites to where this message should be routed
            This method is reserved for the NServiceBus Gateway.
            </summary>
      <param name="msg">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:NServiceBus.ExtensionMethods.SetOriginatingSiteHeader(System.Object,System.String)">
      <summary>
            Sets the originating site header
            This method is reserved for the NServiceBus Gateway.
            </summary>
      <param name="msg">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:NServiceBus.ExtensionMethods.SetHttpFromHeader(System.Object,System.String)">
      <summary>
            Sets the Http address from which this message was received.
            This method is reserved for the NServiceBus Gateway.
            </summary>
      <param name="msg">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:NServiceBus.ExtensionMethods.SetHttpToHeader(System.Object,System.String)">
      <summary>
            Sets the Http address to which this message should be sent.
            Requires the use of the NServiceBus Gateway.
            </summary>
      <param name="msg">
      </param>
      <param name="value">
      </param>
    </member>
    <member name="M:NServiceBus.ExtensionMethods.CopyHeaderFromRequest(System.Object,System.String)">
      <summary>
            Gets the value of the header with the given key and sets it for this message.
            </summary>
      <param name="msg">
      </param>
      <param name="key">
      </param>
    </member>
    <member name="P:NServiceBus.ExtensionMethods.MessageCreator">
      <summary>
            The object used by the extention methods to instantiate types.
            </summary>
    </member>
    <member name="P:NServiceBus.ExtensionMethods.Bus">
      <summary>
            The object used by the extension methods for accessing headers.
            </summary>
    </member>
    <member name="P:NServiceBus.ExtensionMethods.CurrentMessageBeingHandled">
      <summary>
            The object used to see whether headers requested are for the handled message.
            </summary>
    </member>
    <member name="P:NServiceBus.ExtensionMethods.GetStaticOutgoingHeadersAction">
      <summary>
            The action used to get all the headers for a message.
            </summary>
    </member>
    <member name="T:NServiceBus.Headers">
      <summary>
            Static class containing headers used by NServiceBus.
            </summary>
    </member>
    <member name="F:NServiceBus.Headers.HttpFrom">
      <summary>
            Header for retrieving from which Http endpoint the message arrived.
            </summary>
    </member>
    <member name="F:NServiceBus.Headers.HttpTo">
      <summary>
            Header for specifying to which Http endpoint the message should be delivered.
            </summary>
    </member>
    <member name="F:NServiceBus.Headers.RouteTo">
      <summary>
            Header for specifying to which queue behind the http gateway should the message be delivered.
            This header is considered an applicative header.
            </summary>
    </member>
    <member name="F:NServiceBus.Headers.DestinationSites">
      <summary>
            Header for specifying to which sites the gateway should send the message. For multiple
            sites a comma separated list can be used
            This header is considered an applicative header.
            </summary>
    </member>
    <member name="F:NServiceBus.Headers.OriginatingSite">
      <summary>
            Header for specifying the key for the site where this message originated. 
            This header is considered an applicative header.
            </summary>
    </member>
    <member name="F:NServiceBus.Headers.Expire">
      <summary>
            Header for time when a message expires in the timeout manager
            This header is considered an applicative header.
            </summary>
    </member>
    <member name="F:NServiceBus.Headers.RouteExpiredTimeoutTo">
      <summary>
            Header for redirecting the expired timeout to a endpoint other than the one setting the Timeout
            This header is considered an applicative header.
            </summary>
    </member>
    <member name="F:NServiceBus.Headers.SagaId">
      <summary>
            Header containing the id of the saga instance the sent the message
            This header is considered an applicative header.
            </summary>
    </member>
    <member name="F:NServiceBus.Headers.ClearTimeouts">
      <summary>
            Header telling the timeout manager to clear previous timeouts
            This header is considered an applicative header.
            </summary>
    </member>
    <member name="F:NServiceBus.Headers.HeaderName">
      <summary>
            Prefix included on the wire when sending applicative headers.
            </summary>
    </member>
    <member name="F:NServiceBus.Headers.WindowsIdentityName">
      <summary>
            Header containing the windows identity name
            </summary>
    </member>
    <member name="F:NServiceBus.Headers.NServiceBusVersion">
      <summary>
            Header telling the NServiceBus Version (beginning NServiceBus V3.0.1).
            </summary>
    </member>
    <member name="F:NServiceBus.Headers.ReturnMessageErrorCodeHeader">
      <summary>
            Used in a header when doing a callback (bus.return)
            </summary>
    </member>
    <member name="F:NServiceBus.Headers.ControlMessageHeader">
      <summary>
            Header that tells if this transport message is a control message
            </summary>
    </member>
    <member name="F:NServiceBus.Headers.SagaType">
      <summary>
            Type of the saga that this message is targeted for
            </summary>
    </member>
    <member name="F:NServiceBus.Headers.SagaEntityType">
      <summary>
            Type of the saga that sent this message
            </summary>
    </member>
    <member name="F:NServiceBus.Headers.OriginatingSagaId">
      <summary>
            Id of the saga that sent this message
            </summary>
    </member>
    <member name="F:NServiceBus.Headers.OriginatingSagaType">
      <summary>
            Type of the saga that sent this message
            </summary>
    </member>
    <member name="F:NServiceBus.Headers.Retries">
      <summary>
            The number of retries that has been performed for this message
            </summary>
    </member>
    <member name="T:NServiceBus.IAuthorizeSubscriptions">
      <summary>
            Implementer will be called by the infrastructure in order to authorize
            subscribe and unsubscribe requests from other endpoints.
            
            Infrastructure automatically registers one implementing type in the container as a singleton.
            </summary>
    </member>
    <member name="M:NServiceBus.IAuthorizeSubscriptions.AuthorizeSubscribe(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>
            Return true if the client endpoint is to be allowed to subscribe to the given message type.
            Implementors can access the impersonated user via <see cref="M:System.Security.Principal.WindowsIdentity.GetCurrent" /></summary>
      <param name="messageType">
      </param>
      <param name="clientEndpoint">
      </param>
      <param name="headers">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.IAuthorizeSubscriptions.AuthorizeUnsubscribe(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>
            Return true if the client endpoint is to be allowed to unsubscribe to the given message type.
            </summary>
      <param name="messageType">
      </param>
      <param name="clientEndpoint">
      </param>
      <param name="headers">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.IMessageCreator">
      <summary>
            The abstraction for creating interface-based messages.
            </summary>
    </member>
    <member name="M:NServiceBus.IMessageCreator.CreateInstance``1">
      <summary>
            Creates an instance of the message type T.
            </summary>
      <typeparam name="T">The type of message interface to instantiate.</typeparam>
      <returns>A message object that implements the interface T.</returns>
    </member>
    <member name="M:NServiceBus.IMessageCreator.CreateInstance``1(System.Action{``0})">
      <summary>
            Creates an instance of the message type T and fills it with data.
            </summary>
      <typeparam name="T">The type of message interface to instantiate.</typeparam>
      <param name="action">An action to set various properties of the instantiated object.</param>
      <returns>A message object that implements the interface T.</returns>
    </member>
    <member name="M:NServiceBus.IMessageCreator.CreateInstance(System.Type)">
      <summary>
            Creates an instance of the given message type.
            </summary>
      <param name="messageType">The type of message to instantiate.</param>
      <returns>A message object that implements the given interface.</returns>
    </member>
    <member name="T:NServiceBus.IBus">
      <summary>
            Defines a bus to be used with NServiceBus.
            </summary>
    </member>
    <member name="M:NServiceBus.IBus.Publish``1(``0[])">
      <summary>
            Publishes the list of messages to subscribers.
            If publishing multiple messages, they should all be of the same type
            since subscribers are identified by the first message in the list.
            </summary>
      <param name="messages">A list of messages. The first message's type
            is used for looking up subscribers.</param>
    </member>
    <member name="M:NServiceBus.IBus.Publish``1(System.Action{``0})">
      <summary>
            Instantiates a message of type T and publishes it.
            </summary>
      <typeparam name="T">The type of message, usually an interface</typeparam>
      <param name="messageConstructor">An action which initializes properties of the message</param>
    </member>
    <member name="M:NServiceBus.IBus.Subscribe(System.Type)">
      <summary>
            Subcribes to recieve published messages of the specified type.
            This method is only necessary if you turned off auto-subscribe.
            </summary>
      <param name="messageType">The type of message to subscribe to.</param>
    </member>
    <member name="M:NServiceBus.IBus.Subscribe``1">
      <summary>
            Subscribes to recieve published messages of type T.
            This method is only necessary if you turned off auto-subscribe.
            </summary>
      <typeparam name="T">The type of message to subscribe to.</typeparam>
    </member>
    <member name="M:NServiceBus.IBus.Subscribe(System.Type,System.Predicate{System.Object})">
      <summary>
            Subscribes to receive published messages of the specified type.
            When messages arrive, the condition is evaluated to see if they
            should be handled.
            </summary>
      <param name="messageType">The type of message to subscribe to.</param>
      <param name="condition">The condition with which to evaluate messages.</param>
    </member>
    <member name="M:NServiceBus.IBus.Subscribe``1(System.Predicate{``0})">
      <summary>
            Subscribes to receive published messages of the specified type.
            When messages arrive, the condition is evaluated to see if they
            should be handled.
            </summary>
      <typeparam name="T">The type of message to subscribe to.</typeparam>
      <param name="condition">The condition with which to evaluate messages.</param>
    </member>
    <member name="M:NServiceBus.IBus.Unsubscribe(System.Type)">
      <summary>
            Unsubscribes from receiving published messages of the specified type.
            </summary>
      <param name="messageType">The type of message to subscribe to.</param>
    </member>
    <member name="M:NServiceBus.IBus.Unsubscribe``1">
      <summary>
            Unsubscribes from receiving published messages of the specified type.
            </summary>
      <typeparam name="T">The type of message to unsubscribe from.</typeparam>
    </member>
    <member name="M:NServiceBus.IBus.SendLocal(System.Object[])">
      <summary>
            Sends the list of messages back to the current bus.
            </summary>
      <param name="messages">The messages to send.</param>
    </member>
    <member name="M:NServiceBus.IBus.SendLocal``1(System.Action{``0})">
      <summary>
            Instantiates a message of type T and sends it back to the current bus.
            </summary>
      <typeparam name="T">The type of message, usually an interface.</typeparam>
      <param name="messageConstructor">An action which initializes properties of the message</param>
    </member>
    <member name="M:NServiceBus.IBus.Send(System.Object[])">
      <summary>
            Sends the list of provided messages.
            </summary>
      <param name="messages">The list of messages to send.</param>
      <remarks>
            All the messages will be sent to the destination configured for the
            first message in the list.
            </remarks>
    </member>
    <member name="M:NServiceBus.IBus.Send``1(System.Action{``0})">
      <summary>
            Instantiates a message of type T and sends it.
            </summary>
      <typeparam name="T">The type of message, usually an interface</typeparam>
      <param name="messageConstructor">An action which initializes properties of the message</param>
      <remarks>
            The message will be sent to the destination configured for T
            </remarks>
    </member>
    <member name="M:NServiceBus.IBus.Send(System.String,System.Object[])">
      <summary>
            Sends the list of provided messages.
            </summary>
      <param name="destination">
            The address of the destination to which the messages will be sent.
            </param>
      <param name="messages">The list of messages to send.</param>
    </member>
    <member name="M:NServiceBus.IBus.Send(NServiceBus.Address,System.Object[])">
      <summary>
            Sends the list of provided messages.
            </summary>
      <param name="address">
            The address to which the messages will be sent.
            </param>
      <param name="messages">The list of messages to send.</param>
    </member>
    <member name="M:NServiceBus.IBus.Send``1(System.String,System.Action{``0})">
      <summary>
            Instantiates a message of type T and sends it to the given destination.
            </summary>
      <typeparam name="T">The type of message, usually an interface</typeparam>
      <param name="destination">The destination to which the message will be sent.</param>
      <param name="messageConstructor">An action which initializes properties of the message</param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.IBus.Send``1(NServiceBus.Address,System.Action{``0})">
      <summary>
            Instantiates a message of type T and sends it to the given address.
            </summary>
      <typeparam name="T">The type of message, usually an interface</typeparam>
      <param name="address">The address to which the message will be sent.</param>
      <param name="messageConstructor">An action which initializes properties of the message</param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.IBus.Send(System.String,System.String,System.Object[])">
      <summary>
            Sends the messages to the destination as well as identifying this
            as a response to a message containing the Id found in correlationId.
            </summary>
      <param name="destination">
      </param>
      <param name="correlationId">
      </param>
      <param name="messages">
      </param>
    </member>
    <member name="M:NServiceBus.IBus.Send(NServiceBus.Address,System.String,System.Object[])">
      <summary>
            Sends the messages to the given address as well as identifying this
            as a response to a message containing the Id found in correlationId.
            </summary>
      <param name="address">
      </param>
      <param name="correlationId">
      </param>
      <param name="messages">
      </param>
    </member>
    <member name="M:NServiceBus.IBus.Send``1(System.String,System.String,System.Action{``0})">
      <summary>
            Instantiates a message of the type T using the given messageConstructor,
            and sends it to the destination identifying it as a response to a message
            containing the Id found in correlationId.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="destination">
      </param>
      <param name="correlationId">
      </param>
      <param name="messageConstructor">
      </param>
    </member>
    <member name="M:NServiceBus.IBus.Send``1(NServiceBus.Address,System.String,System.Action{``0})">
      <summary>
            Instantiates a message of the type T using the given messageConstructor,
            and sends it to the given address identifying it as a response to a message
            containing the Id found in correlationId.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="address">
      </param>
      <param name="correlationId">
      </param>
      <param name="messageConstructor">
      </param>
    </member>
    <member name="M:NServiceBus.IBus.SendToSites(System.Collections.Generic.IEnumerable{System.String},System.Object[])">
      <summary>
            Sends the messages to all sites with matching site keys registered with the gateway.
            The gateway is assumed to be located at the master node. 
            </summary>
      <param name="siteKeys">
      </param>
      <param name="messages">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.IBus.Defer(System.TimeSpan,System.Object[])">
      <summary>
            Defers the processing of the messages for the given delay. This feature is using the timeout manager so make sure that you enable timeouts
            </summary>
      <param name="delay">
      </param>
      <param name="messages">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.IBus.Defer(System.DateTime,System.Object[])">
      <summary>
            Defers the processing of the messages until the specified time. This feature is using the timeout manager so make sure that you enable timeouts
            </summary>
      <param name="processAt">
      </param>
      <param name="messages">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.IBus.Reply(System.Object[])">
      <summary>
            Sends all messages to the endpoint which sent the message currently being handled on this thread.
            </summary>
      <param name="messages">The messages to send.</param>
    </member>
    <member name="M:NServiceBus.IBus.Reply``1(System.Action{``0})">
      <summary>
            Instantiates a message of type T and performs a regular <see cref="M:NServiceBus.IBus.Reply(System.Object[])" />.
            </summary>
      <typeparam name="T">The type of message, usually an interface</typeparam>
      <param name="messageConstructor">An action which initializes properties of the message</param>
    </member>
    <member name="M:NServiceBus.IBus.Return``1(``0)">
      <summary>
            Returns a completion message with the specified error code to the sender
            of the message being handled. The type T can only be an enum or an integer.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="errorEnum">
      </param>
    </member>
    <member name="M:NServiceBus.IBus.HandleCurrentMessageLater">
      <summary>
            Moves the message being handled to the back of the list of available 
            messages so it can be handled later.
            </summary>
    </member>
    <member name="M:NServiceBus.IBus.ForwardCurrentMessageTo(System.String)">
      <summary>
            Forwards the current message being handled to the destination maintaining
            all of its transport-level properties and headers.
            </summary>
      <param name="destination">
      </param>
    </member>
    <member name="M:NServiceBus.IBus.DoNotContinueDispatchingCurrentMessageToHandlers">
      <summary>
            Tells the bus to stop dispatching the current message to additional
            handlers.
            </summary>
    </member>
    <member name="P:NServiceBus.IBus.OutgoingHeaders">
      <summary>
            Gets the list of key/value pairs that will be in the header of
            messages being sent by the same thread.
            
            This value will be cleared when a thread receives a message.
            </summary>
    </member>
    <member name="P:NServiceBus.IBus.CurrentMessageContext">
      <summary>
            Gets the message context containing the Id, return address, and headers
            of the message currently being handled on this thread.
            </summary>
    </member>
    <member name="T:NServiceBus.ICallback">
      <summary>
            Objects of this interface are returned from calling IBus.Send.
            The interface allows the caller to register for a callback when a response
            is received to their original call to IBus.Send.
            </summary>
    </member>
    <member name="M:NServiceBus.ICallback.Register(System.AsyncCallback,System.Object)">
      <summary>
            Registers a callback to be invoked when a response arrives to the message sent.
            </summary>
      <param name="callback">The callback to invoke.</param>
      <param name="state">State that will be passed to the callback method.</param>
      <returns>An IAsyncResult useful for integration with ASP.NET async tasks.</returns>
    </member>
    <member name="M:NServiceBus.ICallback.Register``1(System.Action{``0})">
      <summary>
            Registers a callback to be invoked when a response arrives to the message sent.
            The return code is cast to the given enumerated type - T.
            </summary>
      <typeparam name="T">An enumeration type or an integer.</typeparam>
      <param name="callback">
      </param>
    </member>
    <member name="M:NServiceBus.ICallback.Register``1(System.Action{``0},System.Object)">
      <summary>
            Registers a callback to be invoked when a response arrives to the message sent.
            The return code is cast to the given enumerated type - T.
            Pass either a System.Web.UI.Page or a System.Web.Mvc.AsyncController as the synchronizer.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="callback">
      </param>
      <param name="synchronizer">
      </param>
    </member>
    <member name="T:NServiceBus.IMessage">
      <summary>
            Marker interface to indicate that a class is a message suitable
            for transmission and handling by an NServiceBus.
            </summary>
    </member>
    <member name="T:NServiceBus.ICommand">
      <summary>
            Marker interface to indicate that a class is a command message
            </summary>
    </member>
    <member name="T:NServiceBus.IEvent">
      <summary>
            Marker interface to indicate that a class is a event message
            </summary>
    </member>
    <member name="T:NServiceBus.RecoverableAttribute">
      <summary>
            Attribute to indicate that a message is recoverable - this is now the default.
            </summary>
      <remarks>
            This attribute should be applied to classes that implement <see cref="T:NServiceBus.IMessage" />
            to indicate that they should be treated as a recoverable message.  A recoverable 
            message is stored locally at every step along the route so that in the event of
            a failure of a machine along the route a copy of the message will be recovered and
            delivery will continue when the machine is brought back online.</remarks>
    </member>
    <member name="T:NServiceBus.ExpressAttribute">
      <summary>
            Attribute to indicate that the message should not be written to disk.
            This will make the message vulnerable to server crashes or restarts.
            </summary>
    </member>
    <member name="T:NServiceBus.TimeToBeReceivedAttribute">
      <summary>
            Attribute to indicate that a message has a period of time 
            in which to be received.
            </summary>
    </member>
    <member name="M:NServiceBus.TimeToBeReceivedAttribute.#ctor">
      <summary>
            Sets the time to be received to be unlimited.
            </summary>
    </member>
    <member name="M:NServiceBus.TimeToBeReceivedAttribute.#ctor(System.String)">
      <summary>
            Sets the time to be received.
            </summary>
      <param name="timeSpan">A timespan that can be interpreted by <see cref="M:System.TimeSpan.Parse(System.String)" />.</param>
    </member>
    <member name="P:NServiceBus.TimeToBeReceivedAttribute.TimeToBeReceived">
      <summary>
            Gets the maximum time in which a message must be received.
            </summary>
      <remarks>
            If the interval specified by the TimeToBeReceived property expires before the message 
            is received by the destination of the message the message will automatically be cancelled.
            </remarks>
    </member>
    <member name="T:NServiceBus.IMessageContext">
      <summary>
            Contains out-of-band information on the logical message.
            </summary>
    </member>
    <member name="P:NServiceBus.IMessageContext.Id">
      <summary>
            Returns the Id of the message.
            </summary>
    </member>
    <member name="P:NServiceBus.IMessageContext.ReturnAddress">
      <summary>
            Returns the address of the endpoint that sent this message.
            </summary>
    </member>
    <member name="P:NServiceBus.IMessageContext.ReplyToAddress">
      <summary>
            The address of the endpoint that sent the current message being handled.
            </summary>
    </member>
    <member name="P:NServiceBus.IMessageContext.TimeSent">
      <summary>
            Returns the time at which the message was sent.
            </summary>
    </member>
    <member name="P:NServiceBus.IMessageContext.Headers">
      <summary>
            Gets the list of key/value pairs found in the header of the message.
            </summary>
    </member>
    <member name="T:NServiceBus.IMessageHandler`1">
      <summary>
            Defines a message handler.
            </summary>
      <typeparam name="T">The type of message to be handled.</typeparam>
    </member>
    <member name="M:NServiceBus.IMessageHandler`1.Handle(`0)">
      <summary>
            Handles a message.
            </summary>
      <param name="message">The message to handle.</param>
      <remarks>
            This method will be called when a message arrives on the bus and should contain
            the custom logic to execute when the message is received.</remarks>
    </member>
    <member name="T:NServiceBus.IHandleMessages`1">
      <summary>
            Implement this class to be called when messages of the given type arrive at your endpoint.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="T:NServiceBus.IMessageModule">
      <summary>
            Implementers will be called before and after all message handlers.
            </summary>
    </member>
    <member name="M:NServiceBus.IMessageModule.HandleBeginMessage">
      <summary>
            This method is called before any message handlers are called.
            </summary>
    </member>
    <member name="M:NServiceBus.IMessageModule.HandleEndMessage">
      <summary>
            This method is called after all message handlers have been called.
            </summary>
    </member>
    <member name="M:NServiceBus.IMessageModule.HandleError">
      <summary>
            This method is called if there was an error in processing the message,
            and may be called after <see cref="M:NServiceBus.IMessageModule.HandleEndMessage" />.
            </summary>
    </member>
    <member name="T:NServiceBus.Serialization.IMessageSerializer">
      <summary>
            Interface used for serializing and deserializing messages.
            </summary>
    </member>
    <member name="M:NServiceBus.Serialization.IMessageSerializer.Serialize(System.Object[],System.IO.Stream)">
      <summary>
            Serializes the given set of messages into the given stream.
            </summary>
      <param name="messages">
      </param>
      <param name="stream">
      </param>
    </member>
    <member name="M:NServiceBus.Serialization.IMessageSerializer.Deserialize(System.IO.Stream)">
      <summary>
            Deserializes from the given stream a set of messages.
            </summary>
      <param name="stream">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.ISpecifyMessageHandlerOrdering">
      <summary>
            Specify the order in which message handlers will be invoked.
            </summary>
    </member>
    <member name="M:NServiceBus.ISpecifyMessageHandlerOrdering.SpecifyOrder(NServiceBus.Order)">
      <summary>
            In this method, use the order object to specify the order 
            in which message handlers will be activated.
            </summary>
      <param name="order">
      </param>
    </member>
    <member name="T:NServiceBus.Order">
      <summary>
            Used to specify the order in which message handlers will be activated.
            </summary>
    </member>
    <member name="M:NServiceBus.Order.SpecifyFirst``1">
      <summary>
            Specifies that the given type will be activated before all others.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:NServiceBus.Order.Specify``1">
      <summary>
            Obselete - use SpecifyFirst instead.
            </summary>
      <typeparam name="TFirst">
      </typeparam>
    </member>
    <member name="M:NServiceBus.Order.Specify``1(NServiceBus.First{``0})">
      <summary>
            Specifies an ordering of multiple types using the syntax:
            First{H1}.Then{H2}().AndThen{H3}()... etc
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="ordering">
      </param>
    </member>
    <member name="P:NServiceBus.Order.Types">
      <summary>
             Gets the types whose order has been specified.
            </summary>
    </member>
    <member name="T:NServiceBus.First`1">
      <summary>
            Used to indicate the order in which handler types are to run.
            
            Not thread safe.
            </summary>
      <typeparam name="T">The type which will run first.</typeparam>
    </member>
    <member name="M:NServiceBus.First`1.Then``1">
      <summary>
            Specifies the type which will run next.
            </summary>
      <typeparam name="K">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.First`1.AndThen``1">
      <summary>
            Specifies the type which will run next
            </summary>
      <typeparam name="K">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="P:NServiceBus.First`1.Types">
      <summary>
            Returns the ordered list of types specified.
            </summary>
    </member>
    <member name="T:NServiceBus.IStartableBus">
      <summary>
            The interface used for starting and stopping an IBus.
            </summary>
    </member>
    <member name="M:NServiceBus.IStartableBus.Start(System.Action)">
      <summary>
            Performs the given startup action, starts the bus, and returns a reference to it.
            </summary>
      <param name="startupAction">Action to be performed before the bus is started.</param>
      <returns>A reference to the bus.</returns>
    </member>
    <member name="M:NServiceBus.IStartableBus.Start">
      <summary>
            Starts the bus and returns a reference to it.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="E:NServiceBus.IStartableBus.Started">
      <summary>
            Event raised when the bus is started.
            </summary>
    </member>
    <member name="T:NServiceBus.MessageConventionExtensions">
      <summary>
            Extension methods for message related conventions
            </summary>
    </member>
    <member name="F:NServiceBus.MessageConventionExtensions.IsMessageTypeAction">
      <summary>
            The function used to determine whether a type is a message type.
            </summary>
    </member>
    <member name="F:NServiceBus.MessageConventionExtensions.IsCommandTypeAction">
      <summary>
            The function used to determine whether a type is a command type.
            </summary>
    </member>
    <member name="F:NServiceBus.MessageConventionExtensions.IsEventTypeAction">
      <summary>
            The function used to determine whether a type is a event type.
            </summary>
    </member>
    <member name="F:NServiceBus.MessageConventionExtensions.IsEncryptedPropertyAction">
      <summary>
            The function used to determine whether a property should be encrypted
            </summary>
    </member>
    <member name="F:NServiceBus.MessageConventionExtensions.IsDataBusPropertyAction">
      <summary>
            The function used to determine whether a property should be treated as a databus property.
            </summary>
    </member>
    <member name="F:NServiceBus.MessageConventionExtensions.TimeToBeReceivedAction">
      <summary>
            The function to evaluate wheather the message has a time to be received or not (<value>TimeSpan.MaxValue</value>).
            </summary>
    </member>
    <member name="F:NServiceBus.MessageConventionExtensions.IsExpressMessageAction">
      <summary>
            The function used to determine if a type is an express message (the message should not be written to disk).
            </summary>
    </member>
    <member name="F:NServiceBus.MessageConventionExtensions.IsSystemMessageActions">
      <summary>
            Contains list of System messages' conventions
            </summary>
    </member>
    <member name="M:NServiceBus.MessageConventionExtensions.IsMessage(System.Object)">
      <summary>
            Returns true if the given object is a message.
            </summary>
      <param name="o">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.MessageConventionExtensions.IsMessageType(System.Type)">
      <summary>
            Returns true if the given type is a message type.
            </summary>
      <param name="t">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.MessageConventionExtensions.AddSystemMessagesConventions(System.Func{System.Type,System.Boolean})">
      <summary>
            Add system message convention
            </summary>
      <param name="definesMessageType">Function to define system message convention</param>
    </member>
    <member name="M:NServiceBus.MessageConventionExtensions.IsCommand(System.Object)">
      <summary>
            Returns true if the given object is a command.
            </summary>
      <param name="o">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.MessageConventionExtensions.IsCommandType(System.Type)">
      <summary>
            Returns true if the given type is a command type.
            </summary>
      <param name="t">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.MessageConventionExtensions.IsExpressMessage(System.Object)">
      <summary>
            Returns true if the given message should not be written to disk when sent.
            </summary>
      <param name="o">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.MessageConventionExtensions.IsExpressMessageType(System.Type)">
      <summary>
            Returns true if the given type should not be written to disk when sent.
            </summary>
      <param name="t">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.MessageConventionExtensions.IsEncryptedProperty(System.Reflection.PropertyInfo)">
      <summary>
            Returns true if the given property should be encrypted
            </summary>
      <param name="property">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.MessageConventionExtensions.IsDataBusProperty(System.Reflection.PropertyInfo)">
      <summary>
            Returns true if the given property should be send via the DataBus
            </summary>
      <param name="property">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.MessageConventionExtensions.IsEvent(System.Object)">
      <summary>
            Returns true if the given object is a event.
            </summary>
      <param name="o">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.MessageConventionExtensions.IsEventType(System.Type)">
      <summary>
            Returns true if the given type is a event type.
            </summary>
      <param name="t">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:NServiceBus.WireEncryptedString">
      <summary>
            A string whose value will be encrypted when sent over the wire.
            </summary>
    </member>
    <member name="M:NServiceBus.WireEncryptedString.#ctor">
      <summary>
            Default contstructor
            </summary>
    </member>
    <member name="M:NServiceBus.WireEncryptedString.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Deseralizing contructor
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="M:NServiceBus.WireEncryptedString.op_Implicit(NServiceBus.WireEncryptedString)~System.String">
      <summary>
            Gets the string value from the WireEncryptedString.
            </summary>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.WireEncryptedString.op_Implicit(System.String)~NServiceBus.WireEncryptedString">
      <summary>
            Creates a new WireEncryptedString from the given string.
            </summary>
      <param name="s">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.WireEncryptedString.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Method for making default XML serialization work properly for this type.
            </summary>
      <param name="info">
      </param>
      <param name="context">
      </param>
    </member>
    <member name="P:NServiceBus.WireEncryptedString.Value">
      <summary>
            The unencrypted string.
            </summary>
    </member>
    <member name="P:NServiceBus.WireEncryptedString.EncryptedValue">
      <summary>
            The encrypted value of this string
            </summary>
    </member>
    <member name="P:NServiceBus.WireEncryptedString.EncryptedBase64Value">
      <summary>
            Only keept for backwards compatibility reasons
            </summary>
    </member>
    <member name="P:NServiceBus.WireEncryptedString.Base64Iv">
      <summary>
            Only keept for backwards compatibility reasons
            </summary>
    </member>
    <member name="T:NServiceBus.EncryptedValue">
      <summary>
            Class used to represent an encrypted value with an initialization vector.
            </summary>
    </member>
    <member name="P:NServiceBus.EncryptedValue.EncryptedBase64Value">
      <summary>
            The encrypted value represented as a Base64 string.
            </summary>
    </member>
    <member name="P:NServiceBus.EncryptedValue.Base64Iv">
      <summary>
            The initialization vector represented as a Base64 string.
            </summary>
    </member>
    <member name="T:NServiceBus.Saga.HasCompleted">
      <summary>
            Interface used to query a saga to see if it has completed.
            </summary>
    </member>
    <member name="P:NServiceBus.Saga.HasCompleted.Completed">
      <summary>
            Indicates if the saga has completed.
            </summary>
    </member>
    <member name="T:NServiceBus.Saga.IConfigurable">
      <summary>
            Implementers of ISaga should implement this interface as well if they want
            initialization time configuration.
            </summary>
    </member>
    <member name="M:NServiceBus.Saga.IConfigurable.Configure">
      <summary>
            Called by the infrastructure to give a chance for initialization time configuration of the saga.
            </summary>
    </member>
    <member name="T:NServiceBus.Saga.IConfigureHowToFindSagaWithMessage">
      <summary>
            Implementation provided by the infrastructure - don't implement this
            or register implementations of it in the container unless you intend
            to substantially change the way sagas work in nServiceBus.
            </summary>
    </member>
    <member name="M:NServiceBus.Saga.IConfigureHowToFindSagaWithMessage.ConfigureMapping``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Linq.Expressions.Expression{System.Func{``1,System.Object}})">
      <summary>
            Specify that when the infrastructure is handling a message 
            of the given type, which message property should be matched to 
            which saga entity property in the persistent saga store.
            </summary>
      <typeparam name="TMessage">
      </typeparam>
      <typeparam name="TSagaEntity">
      </typeparam>
      <param name="sagaEntityProperty">
      </param>
      <param name="messageProperty">
      </param>
    </member>
    <member name="T:NServiceBus.Saga.IHandleReplyingToNullOriginator">
      <summary>
            Double-dispatch class.
            </summary>
    </member>
    <member name="M:NServiceBus.Saga.IHandleReplyingToNullOriginator.TriedToReplyToNullOriginator">
      <summary>
            Called when the user has tries to reply to a message with out a originator
            </summary>
    </member>
    <member name="T:NServiceBus.Saga.IFinder">
      <summary>
            Marker interface for <see cref="T:NServiceBus.Saga.IFindSagas`1.Using`1" /></summary>
    </member>
    <member name="T:NServiceBus.Saga.IFindSagas`1">
      <summary>
            Interface indicating that implementers can find sagas of the given type.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="T:NServiceBus.Saga.IFindSagas`1.Using`1">
      <summary>
            Narrower interface indicating that implementers can find sagas
            of type T using messages of type M.
            </summary>
      <typeparam name="M">
      </typeparam>
    </member>
    <member name="T:NServiceBus.Saga.IHandleSagaNotFound">
      <summary>
            Implementors will be invoked when a message arrives that should have been processed
            by a saga, but no existing saga was found. This does not include the scenario when
            a saga will be created for the given message type.
            </summary>
    </member>
    <member name="M:NServiceBus.Saga.IHandleSagaNotFound.Handle(System.Object)">
      <summary>
            Implementors will implement this method, likely using an injected IBus
            to send responses to the client who sent the message.
            </summary>
    </member>
    <member name="T:NServiceBus.Saga.IHandleTimeouts`1">
      <summary>
            Tells the infrastructure that the user wants to handle a timeout of T
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:NServiceBus.Saga.IHandleTimeouts`1.Timeout(`0)">
      <summary>
            Called when the timout has expired
            </summary>
      <param name="state">
      </param>
    </member>
    <member name="T:NServiceBus.Saga.ITimeoutable">
      <summary>
            Interface used by the saga infrastructure for notifying sagas about a timeout.
            </summary>
    </member>
    <member name="M:NServiceBus.Saga.ITimeoutable.Timeout(System.Object)">
      <summary>
            Indicates to the saga that a timeout has occurred, 
            passing in the state object previously received from the saga.
            </summary>
      <param name="state">
      </param>
    </member>
    <member name="T:NServiceBus.Saga.ISaga">
      <summary>
            Implement this interface if you want to write a saga with minimal infrastructure support.
            It is recommended you inherit the abstract class <see cref="T:NServiceBus.Saga.Saga`1" /> to get the most functionality.
            </summary>
    </member>
    <member name="P:NServiceBus.Saga.ISaga.Entity">
      <summary>
            The saga's data.
            </summary>
    </member>
    <member name="P:NServiceBus.Saga.ISaga.Bus">
      <summary>
            Used for retrieving the endpoint which caused the saga to be initiated.
            </summary>
    </member>
    <member name="T:NServiceBus.Saga.ISaga`1">
      <summary>
            A more strongly typed version of ISaga meant to be implemented by application developers
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="P:NServiceBus.Saga.ISaga`1.Data">
      <summary>
            The saga's data.
            </summary>
    </member>
    <member name="T:NServiceBus.Saga.ISagaEntity">
      <summary>
            Defines the basic data used by long-running processes.
            </summary>
    </member>
    <member name="P:NServiceBus.Saga.ISagaEntity.Id">
      <summary>
            Gets/sets the Id of the process. Do NOT generate this value in your code.
            The value of the Id will be generated automatically to provide the
            best performance for saving in a database.
            </summary>
      <remarks>
            The reason Guid is used for process Id is that messages containing this Id need
            to be sent by the process even before it is persisted.
            </remarks>
    </member>
    <member name="P:NServiceBus.Saga.ISagaEntity.Originator">
      <summary>
            Contains the return address of the endpoint that caused the process to run.
            </summary>
    </member>
    <member name="P:NServiceBus.Saga.ISagaEntity.OriginalMessageId">
      <summary>
            Contains the Id of the message which caused the saga to start.
            This is needed so that when we reply to the Originator, any
            registered callbacks will be fired correctly.
            </summary>
    </member>
    <member name="T:NServiceBus.Saga.IContainSagaData">
      <summary>
            The saga data that will be persisted.
            </summary>
    </member>
    <member name="T:NServiceBus.Saga.ISagaMessage">
      <summary>
            An interface used to mark messages as requiring the attention of the
            saga infrastructure.
            </summary>
    </member>
    <member name="P:NServiceBus.Saga.ISagaMessage.SagaId">
      <summary>
            Gets/sets the Id of the saga the message is related to.
            </summary>
    </member>
    <member name="T:NServiceBus.Saga.ISagaPersister">
      <summary>
            Defines the basic functionality of a persister for storing 
            and retrieving a saga.
            </summary>
    </member>
    <member name="M:NServiceBus.Saga.ISagaPersister.Save(NServiceBus.Saga.ISagaEntity)">
      <summary>
            Saves the saga entity to the persistence store.
            </summary>
      <param name="saga">The saga entity to save.</param>
    </member>
    <member name="M:NServiceBus.Saga.ISagaPersister.Update(NServiceBus.Saga.ISagaEntity)">
      <summary>
            Updates an existing saga entity in the persistence store.
            </summary>
      <param name="saga">The saga entity to updated.</param>
    </member>
    <member name="M:NServiceBus.Saga.ISagaPersister.Get``1(System.Guid)">
      <summary>
            Gets a saga entity from the persistence store by its Id.
            </summary>
      <param name="sagaId">The Id of the saga entity to get.</param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Saga.ISagaPersister.Get``1(System.String,System.Object)">
      <summary>
            Looks up a saga entity by a given property.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="property">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:NServiceBus.Saga.ISagaPersister.Complete(NServiceBus.Saga.ISagaEntity)">
      <summary>
            Sets a saga as completed and removes it from the active saga list
            in the persistence store.
            </summary>
      <param name="saga">The saga to complete.</param>
    </member>
    <member name="T:NServiceBus.Saga.IPersistSagas">
      <summary>
            Interface responsible for persisting sagas.
            </summary>
    </member>
    <member name="T:NServiceBus.Saga.ISagaStartedBy`1">
      <summary>
            Use this interface to signify that when a message of the given type is
            received, if a saga cannot be found by an <see cref="T:NServiceBus.Saga.IFindSagas`1" />
            the saga will be created.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="T:NServiceBus.Saga.IAmStartedByMessages`1">
      <summary>
            Use this interface to signify that when a message of the given type is
            received, if a saga cannot be found by an <see cref="T:NServiceBus.Saga.IFindSagas`1" />
            the saga will be created.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="T:NServiceBus.Saga.ITimeoutState">
      <summary>
            Marker interface for timeout state messages
            </summary>
    </member>
    <member name="T:NServiceBus.Saga.Saga`1">
      <summary>
            This class is used to define sagas containing data and handling a message.
            To handle more message types, implement <see cref="T:NServiceBus.IMessageHandler`1" />
            for the relevant types.
            To signify that the receipt of a message should start this saga,
            implement <see cref="T:NServiceBus.Saga.ISagaStartedBy`1" /> for the relevant message type.
            </summary>
      <typeparam name="T">A type that implements <see cref="T:NServiceBus.Saga.ISagaEntity" />.</typeparam>
    </member>
    <member name="M:NServiceBus.Saga.Saga`1.ConfigureHowToFindSaga">
      <summary>
            Override this method in order to configure how this saga's data should be found.
            Call ConfigureMapping&lt;TMessage&gt; for each property of each message you want
            to use for lookup.
            </summary>
    </member>
    <member name="M:NServiceBus.Saga.Saga`1.ConfigureMapping``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
            When the infrastructure is handling a message of the given type
            this specifies which message property should be matched to 
            which saga entity property in the persistent saga store.
            </summary>
      <typeparam name="TMessage">
      </typeparam>
      <param name="sagaEntityProperty">
      </param>
      <param name="messageProperty">
      </param>
    </member>
    <member name="M:NServiceBus.Saga.Saga`1.RequestUtcTimeout``1(System.DateTime)">
      <summary>
            Request for a timeout to occur at the given time
            </summary>
      <param name="at">
      </param>
    </member>
    <member name="M:NServiceBus.Saga.Saga`1.RequestUtcTimeout``1(System.DateTime,System.Action{``0})">
      <summary>
            Request for a timeout to occur at the given time
            </summary>
      <param name="at">
      </param>
      <param name="action">
      </param>
    </member>
    <member name="M:NServiceBus.Saga.Saga`1.RequestUtcTimeout``1(System.DateTime,``0)">
      <summary>
            Request for a timeout to occur at the given time
            </summary>
      <param name="at">
      </param>
      <param name="timeoutMessage">
      </param>
    </member>
    <member name="M:NServiceBus.Saga.Saga`1.RequestUtcTimeout``1(System.TimeSpan)">
      <summary>
            Request for a timeout to occur within the give timespan
            </summary>
      <param name="within">
      </param>
    </member>
    <member name="M:NServiceBus.Saga.Saga`1.RequestUtcTimeout``1(System.TimeSpan,System.Action{``0})">
      <summary>
            Request for a timeout to occur within the give timespan
            </summary>
      <param name="within">
      </param>
      <param name="action">
      </param>
    </member>
    <member name="M:NServiceBus.Saga.Saga`1.RequestUtcTimeout``1(System.TimeSpan,``0)">
      <summary>
            Request for a timeout to occur within the give timespan
            </summary>
      <param name="within">
      </param>
      <param name="timeoutMessage">
      </param>
    </member>
    <member name="M:NServiceBus.Saga.Saga`1.ReplyToOriginator(System.Object[])">
      <summary>
            Sends the given messages using the bus to the endpoint that caused this saga to start.
            </summary>
      <param name="messages">
      </param>
    </member>
    <member name="M:NServiceBus.Saga.Saga`1.ReplyToOriginator``1(System.Action{``0})">
      <summary>
            Instantiates a message of the given type, setting its properties using the given action,
            and sends it using the bus to the endpoint that caused this saga to start.
            </summary>
      <typeparam name="TMessage">
      </typeparam>
      <param name="messageConstructor">
      </param>
    </member>
    <member name="M:NServiceBus.Saga.Saga`1.MarkAsComplete">
      <summary>
            Marks the saga as complete.
            This may result in the sagas state being deleted by the persister.
            </summary>
    </member>
    <member name="M:NServiceBus.Saga.Saga`1.Timeout(System.Object)">
      <summary>
            Notifies that the timeout it previously requested occurred.
            </summary>
      <param name="state">The object passed as the "withState" parameter to RequestTimeout.</param>
    </member>
    <member name="M:NServiceBus.Saga.Saga`1.Handle(NServiceBus.Saga.TimeoutMessage)">
      <summary>
            Message handler for Timeout Message 
            </summary>
      <param name="message">Timeout Message</param>
    </member>
    <member name="P:NServiceBus.Saga.Saga`1.Data">
      <summary>
            The saga's strongly typed data.
            </summary>
    </member>
    <member name="P:NServiceBus.Saga.Saga`1.Entity">
      <summary>
            A more generic projection on <see cref="P:NServiceBus.Saga.Saga`1.Data" />.
            </summary>
    </member>
    <member name="P:NServiceBus.Saga.Saga`1.HandleReplyingToNullOriginator">
      <summary>
            Called by saga to notify the infrastructure when attempting to reply to message where the originator is null
            </summary>
    </member>
    <member name="P:NServiceBus.Saga.Saga`1.Bus">
      <summary>
            Bus object used for retrieving the sender endpoint which caused this saga to start.
            Necessary for <see cref="M:NServiceBus.Saga.Saga`1.ReplyToOriginator(System.Object[])" />.
            </summary>
    </member>
    <member name="P:NServiceBus.Saga.Saga`1.SagaMessageFindingConfiguration">
      <summary>
            Object used to configure mapping between saga properties and message properties
            for the purposes of finding sagas when a message arrives.
            
            Do NOT use at runtime (handling messages) - it will be null.
            </summary>
    </member>
    <member name="P:NServiceBus.Saga.Saga`1.Completed">
      <summary>
            Indicates that the saga is complete.
            In order to set this value, use the <see cref="M:NServiceBus.Saga.Saga`1.MarkAsComplete" /> method.
            </summary>
    </member>
    <member name="T:NServiceBus.Saga.TimeoutMessage">
      <summary>
            A message to signal a saga that a reminder was set.
            </summary>
    </member>
    <member name="M:NServiceBus.Saga.TimeoutMessage.#ctor">
      <summary>
            Default constructor for serialization purposes.
            </summary>
    </member>
    <member name="M:NServiceBus.Saga.TimeoutMessage.#ctor(System.DateTime,NServiceBus.Saga.ISagaEntity,System.Object)">
      <summary>
            Indicate a timeout at the expiration time for the given saga maintaining the given state.
            </summary>
      <param name="expiration">
      </param>
      <param name="saga">
      </param>
      <param name="state">
      </param>
    </member>
    <member name="M:NServiceBus.Saga.TimeoutMessage.#ctor(System.TimeSpan,NServiceBus.Saga.ISagaEntity,System.Object)">
      <summary>
            Indicate a timeout within the given time for the given saga maintaing the given state.
            </summary>
      <param name="expireIn">
      </param>
      <param name="saga">
      </param>
      <param name="state">
      </param>
    </member>
    <member name="M:NServiceBus.Saga.TimeoutMessage.#ctor(NServiceBus.Saga.ISagaEntity,System.Boolean)">
      <summary>
            Signal to the timeout manager that all other <see cref="T:NServiceBus.Saga.TimeoutMessage" />
            objects can be cleared for the given <see cref="N:NServiceBus.Saga" />.
            </summary>
      <param name="saga">
      </param>
      <param name="clear">
      </param>
    </member>
    <member name="M:NServiceBus.Saga.TimeoutMessage.HasNotExpired">
      <summary>
            Gets whether or not the TimeoutMessage has expired.
            </summary>
      <returns>true if the message has expired, otherwise false.</returns>
    </member>
    <member name="P:NServiceBus.Saga.TimeoutMessage.Expires">
      <summary>
            Gets/sets the date and time at which the timeout message is due to expire.
            Values are stored as <see cref="F:System.DateTimeKind.Utc" />.
            </summary>
    </member>
    <member name="P:NServiceBus.Saga.TimeoutMessage.SagaId">
      <summary>
            Gets/sets the Id of the workflow the TimeoutMessage is connected to.
            </summary>
    </member>
    <member name="P:NServiceBus.Saga.TimeoutMessage.State">
      <summary>
            Should be used for data to differentiate between various
            timeout occurrences.
            </summary>
    </member>
    <member name="P:NServiceBus.Saga.TimeoutMessage.ClearTimeout">
      <summary>
            When true, signals to the timeout manager that all other <see cref="T:NServiceBus.Saga.TimeoutMessage" /> objects
            can be cleared for the given <see cref="P:NServiceBus.Saga.TimeoutMessage.SagaId" />.
            </summary>
    </member>
    <member name="T:NServiceBus.Saga.UniqueAttribute">
      <summary>
            Used to specify that a saga property should be unique across all saga instances. 
            This will ensure that 2 saga instances don't get persisted when using the property to correlate between multiple message types
            </summary>
    </member>
    <member name="M:NServiceBus.Saga.UniqueAttribute.GetUniqueProperty(System.Type)">
      <summary>
            Gets a single property that is marked with the UniqueAttribute for a saga entity
            </summary>
      <param name="type">The type to evaluate</param>
      <returns>A PropertyInfo of the property marked with a UniqAttribute or null if not used</returns>
    </member>
    <member name="M:NServiceBus.Saga.UniqueAttribute.GetUniqueProperty(NServiceBus.Saga.ISagaEntity)">
      <summary>
            Gets a single property that is marked with the UniqueAttribute for a saga entity
            </summary>
      <param name="entity">A saga entity</param>
      <returns>A PropertyInfo of the property marked with a UniqAttribute or null if not used</returns>
    </member>
    <member name="M:NServiceBus.Saga.UniqueAttribute.GetUniqueProperties(NServiceBus.Saga.ISagaEntity)">
      <summary>
            Gets all the properties that are marked with the UniqueAttribute for a saga entity
            </summary>
      <param name="entity">A saga entity</param>
      <returns>A dictionary of property names and their values</returns>
    </member>
    <member name="M:NServiceBus.Saga.UniqueAttribute.GetUniqueProperties(System.Type)">
      <summary>
            Gets all the properties that are marked with the UniqueAttribute for the given Type
            </summary>
      <param name="type">The type to evaluate</param>
      <returns>A queryable of PropertyInfo</returns>
    </member>
  </members>
</doc>