<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Raven.Client.Silverlight</name>
    </assembly>
    <members>
        <member name="T:Raven.Client.DocumentStoreBase">
            <summary>
            Contains implementation of some IDocumentStore operations shared by DocumentStore implementations
            </summary>
        </member>
        <member name="T:Raven.Client.IDocumentStore">
            <summary>
            Interface for managing access to RavenDB and open sessions.
            </summary>
        </member>
        <member name="T:Raven.Client.IDisposalNotification">
            <summary>
            Provide a way for interested party to tell whatever implementers have been disposed
            </summary>
        </member>
        <member name="E:Raven.Client.IDisposalNotification.AfterDispose">
            <summary>
            Called after dispose is completed
            </summary>
        </member>
        <member name="P:Raven.Client.IDisposalNotification.WasDisposed">
            <summary>
            Whatever the instance has been disposed
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentStore.Changes(System.String)">
            <summary>
            Subscribe to change notifications from the server
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentStore.AggressivelyCacheFor(System.TimeSpan)">
            <summary>
            Setup the context for aggressive caching.
            </summary>
            <param name="cacheDuration">Specify the aggressive cache duration</param>
            <remarks>
            Aggressive caching means that we will not check the server to see whatever the response
            we provide is current or not, but will serve the information directly from the local cache
            without touching the server.
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentStore.AggressivelyCache">
            <summary>
            Setup the context for aggressive caching.
            </summary>
            <remarks>
            Aggressive caching means that we will not check the server to see whatever the response
            we provide is current or not, but will serve the information directly from the local cache
            without touching the server.
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentStore.DisableAggressiveCaching">
            <summary>
            Setup the context for no aggressive caching
            </summary>
            <remarks>
            This is mainly useful for internal use inside RavenDB, when we are executing
            queries that has been marked with WaitForNonStaleResults, we temporarily disable
            aggressive caching.
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentStore.SetRequestsTimeoutFor(System.TimeSpan)">
            <summary>
            Setup the WebRequest timeout for the session
            </summary>
            <param name="timeout">Specify the timeout duration</param>
            <remarks>
            Sets the timeout for the JsonRequest.  Scoped to the Current Thread.
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentStore.Initialize">
            <summary>
            Initializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentStore.OpenAsyncSession">
            <summary>
            Opens the async session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentStore.OpenAsyncSession(System.String)">
            <summary>
            Opens the async session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentStore.GetLastWrittenEtag">
            <summary>
             Gets the etag of the last document written by any session belonging to this 
             document store
            </summary>
        </member>
        <member name="P:Raven.Client.IDocumentStore.SharedOperationsHeaders">
            <summary>
            Gets the shared operations headers.
            </summary>
            <value>The shared operations headers.</value>
        </member>
        <member name="P:Raven.Client.IDocumentStore.JsonRequestFactory">
            <summary>
            Get the <see cref="T:Raven.Client.Silverlight.Connection.HttpJsonRequestFactory"/> for this store
            </summary>
        </member>
        <member name="P:Raven.Client.IDocumentStore.Identifier">
            <summary>
            Gets or sets the identifier for this store.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Raven.Client.IDocumentStore.AsyncDatabaseCommands">
            <summary>
            Gets the async database commands.
            </summary>
            <value>The async database commands.</value>
        </member>
        <member name="P:Raven.Client.IDocumentStore.Conventions">
            <summary>
            Gets the conventions.
            </summary>
            <value>The conventions.</value>
        </member>
        <member name="P:Raven.Client.IDocumentStore.Url">
            <summary>
            Gets the URL.
            </summary>
        </member>
        <member name="M:Raven.Client.DocumentStoreBase.AggressivelyCacheFor(System.TimeSpan)">
            <summary>
            Subscribe to change notifications from the server
            </summary>
        </member>
        <member name="M:Raven.Client.DocumentStoreBase.GetLastWrittenEtag">
            <summary>
             Gets the etag of the last document written by any session belonging to this 
             document store
            </summary>
        </member>
        <member name="M:Raven.Client.DocumentStoreBase.RegisterListener(Raven.Client.Listeners.IDocumentConversionListener)">
            <summary>
            Registers the conversion listener.
            </summary>
        </member>
        <member name="M:Raven.Client.DocumentStoreBase.RegisterListener(Raven.Client.Listeners.IExtendedDocumentConversionListener)">
            <summary>
            Registers the extended conversion listener.
            </summary>
        </member>
        <member name="M:Raven.Client.DocumentStoreBase.RegisterListener(Raven.Client.Listeners.IDocumentQueryListener)">
            <summary>
            Registers the query listener.
            </summary>
            <param name="queryListener">The query listener.</param>
        </member>
        <member name="M:Raven.Client.DocumentStoreBase.RegisterListener(Raven.Client.Listeners.IDocumentStoreListener)">
            <summary>
            Registers the store listener.
            </summary>
            <param name="documentStoreListener">The document store listener.</param>
        </member>
        <member name="M:Raven.Client.DocumentStoreBase.RegisterListener(Raven.Client.Listeners.IDocumentDeleteListener)">
            <summary>
            Registers the delete listener.
            </summary>
            <param name="deleteListener">The delete listener.</param>
        </member>
        <member name="M:Raven.Client.DocumentStoreBase.RegisterListener(Raven.Client.Listeners.IDocumentConflictListener)">
            <summary>
            Registers the conflict listener.
            </summary>
            <param name="conflictListener">The conflict listener.</param>
        </member>
        <member name="M:Raven.Client.DocumentStoreBase.GetProfilingInformationFor(System.Guid)">
            <summary>
             Get the profiling information for the given id
            </summary>
        </member>
        <member name="M:Raven.Client.DocumentStoreBase.AggressivelyCache">
            <summary>
            Setup the context for aggressive caching.
            </summary>
        </member>
        <member name="E:Raven.Client.DocumentStoreBase.AfterDispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:Raven.Client.DocumentStoreBase.WasDisposed">
            <summary>
            Whatever the instance has been disposed
            </summary>
        </member>
        <member name="P:Raven.Client.DocumentStoreBase.Conventions">
            <summary>
            Gets the conventions.
            </summary>
            <value>The conventions.</value>
        </member>
        <member name="P:Raven.Client.DocumentStoreBase.Url">
            <summary>
            Gets or sets the URL.
            </summary>
        </member>
        <member name="P:Raven.Client.DocumentStoreBase.EnlistInDistributedTransactions">
            <summary>
             Whatever or not we will automatically enlist in distributed transactions
            </summary>
        </member>
        <member name="P:Raven.Client.DocumentStoreBase.ResourceManagerId">
            <summary>
            The resource manager id for the document store.
            IMPORTANT: Using Guid.NewGuid() to set this value is almost certainly a mistake, you should set
            it to a value that remains consistent between restart of the system.
            </summary>
        </member>
        <member name="P:Raven.Client.DocumentStoreBase.RegisteredConversionListeners">
            <summary>
            Gets a read-only collection of the registered conversion listeners.
            </summary>
        </member>
        <member name="P:Raven.Client.DocumentStoreBase.RegisteredQueryListeners">
            <summary>
            Gets a read-only collection of the registered query listeners.
            </summary>
        </member>
        <member name="P:Raven.Client.DocumentStoreBase.RegisteredStoreListeners">
            <summary>
            Gets a read-only collection of the registered store listeners.
            </summary>
        </member>
        <member name="P:Raven.Client.DocumentStoreBase.RegisteredDeleteListeners">
            <summary>
            Gets a read-only collection of the registered delete listeners.
            </summary>
        </member>
        <member name="P:Raven.Client.DocumentStoreBase.RegisteredConflictListeners">
            <summary>
            Gets a read-only collection of the registered conflict listeners.
            </summary>
        </member>
        <member name="E:Raven.Client.DocumentStoreBase.SessionCreatedInternal">
            <summary>
             Internal notification for integration tools, mainly
            </summary>
        </member>
        <member name="T:Raven.Client.EntityStored">
            <summary>
            Delegate definition when an entity is stored in the session
            </summary>
        </member>
        <member name="T:Raven.Client.EntityToDocument">
            <summary>
            Delegate definition for converting an entity to a document and metadata
            </summary>
        </member>
        <member name="T:Raven.Client.DocumentToEntity">
            <summary>
            Delegate definition for converting a document and metadata to an entity
            </summary>
        </member>
        <member name="T:Raven.Client.FieldHighlightings">
            <summary>
                Query highlightings for the documents.
            </summary>
        </member>
        <member name="M:Raven.Client.FieldHighlightings.GetFragments(System.String)">
            <summary>
                Returns the list of document's field highlighting fragments.
            </summary>
            <param name="documentId">The document id.</param>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.FieldHighlightings.FieldName">
            <summary>
                The field name.
            </summary>
        </member>
        <member name="T:Raven.Client.IAdvancedDocumentSessionOperations">
            <summary>
            Advanced session operations
            </summary>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.IsLoaded(System.String)">
            <summary>
            Returns whatever a document with the specified id is loaded in the 
            current session
            </summary>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.Evict``1(``0)">
            <summary>
            Evicts the specified entity from the session.
            Remove the entity from the delete queue and stops tracking changes for this entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.Clear">
            <summary>
            Clears this instance.
            Remove all entities from the delete queue and stops tracking changes for all entities.
            </summary>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.MarkReadOnly(System.Object)">
            <summary>
            Mark the entity as read only, change tracking won't apply 
            to such an entity. This can be done as an optimization step, so 
            we don't need to check the entity for changes.
            </summary>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.GetMetadataFor``1(``0)">
            <summary>
            Gets the metadata for the specified entity.
            If the entity is transient, it will load the metadata from the store
            and associate the current state of the entity with the metadata from the server.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.GetEtagFor``1(``0)">
            <summary>
            Gets the ETag for the specified entity.
            If the entity is transient, it will load the etag from the store
            and associate the current state of the entity with the etag from the server.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.GetDocumentId(System.Object)">
            <summary>
            Gets the document id for the specified entity.
            </summary>
            <remarks>
            This function may return <c>null</c> if the entity isn't tracked by the session, or if the entity is 
            a new entity with a key that should be generated on the server. 
            </remarks>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.HasChanged(System.Object)">
            <summary>
            Determines whether the specified entity has changed.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            	<c>true</c> if the specified entity has changed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Raven.Client.IAdvancedDocumentSessionOperations.Defer(Raven.Abstractions.Commands.ICommandData[])">
            <summary>
            Defer commands to be executed on SaveChanges()
            </summary>
            <param name="commands">The commands to be executed</param>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.DocumentStore">
            <summary>
            The document store associated with this session
            </summary>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.StoreIdentifier">
            <summary>
            Gets the store identifier for this session.
            The store identifier is the identifier for the particular RavenDB instance. 
            </summary>
            <value>The store identifier.</value>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.UseOptimisticConcurrency">
            <summary>
            Gets or sets a value indicating whether the session should use optimistic concurrency.
            When set to <c>true</c>, a check is made so that a change made behind the session back would fail
            and raise <see cref="T:Raven.Abstractions.Exceptions.ConcurrencyException"/>.
            </summary>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.ExternalState">
            <summary>
            Allow extensions to provide additional state per session
            </summary>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.AllowNonAuthoritativeInformation">
            <summary>
            Gets or sets a value indicating whether non authoritative information is allowed.
            Non authoritative information is document that has been modified by a transaction that hasn't been committed.
            The server provides the latest committed version, but it is known that attempting to write to a non authoritative document
            will fail, because it is already modified.
            If set to <c>false</c>, the session will wait <see cref="P:Raven.Client.IAdvancedDocumentSessionOperations.NonAuthoritativeInformationTimeout"/> for the transaction to commit to get an
            authoritative information. If the wait is longer than <see cref="P:Raven.Client.IAdvancedDocumentSessionOperations.NonAuthoritativeInformationTimeout"/>, <see cref="T:Raven.Client.Exceptions.NonAuthoritativeInformationException"/> is thrown.
            </summary>
            <value>
            	<c>true</c> if non authoritative information is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.NonAuthoritativeInformationTimeout">
            <summary>
            Gets or sets the timeout to wait for authoritative information if encountered non authoritative document.
            </summary>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.MaxNumberOfRequestsPerSession">
            <summary>
            Gets or sets the max number of requests per session.
            If the <see cref="P:Raven.Client.IAdvancedDocumentSessionOperations.NumberOfRequests"/> rise above <see cref="P:Raven.Client.IAdvancedDocumentSessionOperations.MaxNumberOfRequestsPerSession"/>, an exception will be thrown.
            </summary>
            <value>The max number of requests per session.</value>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.NumberOfRequests">
            <summary>
            Gets the number of requests for this session
            </summary>
        </member>
        <member name="P:Raven.Client.IAdvancedDocumentSessionOperations.HasChanges">
            <summary>
            Gets a value indicating whether any of the entities tracked by the session has changes.
            </summary>
        </member>
        <member name="T:Raven.Client.IAsyncAdvancedSessionOperations">
            <summary>
            Advanced async session operations
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.LoadStartingWithAsync``1(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Load documents with the specified key prefix
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.AsyncLuceneQuery``2">
            <summary>
            Queries the index specified by <typeparamref name="TIndexCreator"/> using lucene syntax.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.AsyncLuceneQuery``1(System.String,System.Boolean)">
            <summary>
            Query the specified index using Lucene syntax
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.AsyncLuceneQuery``1">
            <summary>
            Dynamically query RavenDB using Lucene syntax
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.Store(System.Object,Raven.Abstractions.Data.Etag)">
            <summary>
            Stores the specified entity with the specified etag.
            The entity will be saved when <see cref="M:Raven.Client.IAsyncDocumentSession.SaveChangesAsync"/> is called.
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.Store(System.Object)">
            <summary>
            Stores the specified entity in the session. The entity will be saved when <see cref="M:Raven.Client.IAsyncDocumentSession.SaveChangesAsync"/> is called.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.Store(System.Object,Raven.Abstractions.Data.Etag,System.String)">
            <summary>
            Stores the specified entity with the specified etag, under the specified id
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.Store(System.Object,System.String)">
            <summary>
            Stores the specified dynamic entity, under the specified id
            </summary>
            <param name="entity">The entity.</param>
            <param name="id">The id to store this entity under. If other entity exists with the same id it will be overridden.</param>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.StreamAsync``1(Raven.Client.IAsyncDocumentQuery{``0})">
            <summary>
            Stream the results on the query to the client, converting them to 
            CLR types along the way.
            Does NOT track the entities in the session, and will not includes changes there when SaveChanges() is called
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.StreamAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            Stream the results on the query to the client, converting them to 
            CLR types along the way.
            Does NOT track the entities in the session, and will not includes changes there when SaveChanges() is called
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.StreamAsync``1(Raven.Client.IAsyncDocumentQuery{``0},Raven.Abstractions.Extensions.Reference{Raven.Abstractions.Data.QueryHeaderInformation})">
            <summary>
            Stream the results on the query to the client, converting them to 
            CLR types along the way.
            Does NOT track the entities in the session, and will not includes changes there when SaveChanges() is called
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.StreamAsync``1(System.Linq.IQueryable{``0},Raven.Abstractions.Extensions.Reference{Raven.Abstractions.Data.QueryHeaderInformation})">
            <summary>
            Stream the results on the query to the client, converting them to 
            CLR types along the way.
            Does NOT track the entities in the session, and will not includes changes there when SaveChanges() is called
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.StreamAsync``1(Raven.Abstractions.Data.Etag,System.Int32,System.Int32)">
            <summary>
            Stream the results of documents searhcto the client, converting them to CLR types along the way.
            Does NOT track the entities in the session, and will not includes changes there when SaveChanges() is called
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncAdvancedSessionOperations.StreamAsync``1(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Stream the results of documents searhcto the client, converting them to CLR types along the way.
            Does NOT track the entities in the session, and will not includes changes there when SaveChanges() is called
            </summary>
        </member>
        <member name="T:Raven.Client.IAsyncDocumentQuery`1">
            <summary>
             Asynchronous query against a raven index
            </summary>
        </member>
        <member name="T:Raven.Client.IDocumentQueryBase`2">
            <summary>
              A query against a Raven index
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.NegateNext">
            <summary>
              Negate the next operation
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Include(System.String)">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Where(System.Func{`0,System.Boolean})">
            <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Count(System.Func{`0,System.Boolean})">
            <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Count">
            <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Take(System.Int32)">
            <summary>
              Takes the specified count.
            </summary>
            <param name = "count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Skip(System.Int32)">
            <summary>
              Skips the specified count.
            </summary>
            <param name = "count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Where(System.String)">
            <summary>
              Filter the results from the index using the specified where clause.
            </summary>
            <param name = "whereClause">The where clause.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEquals(System.String,System.Object)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEquals``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEquals(System.String,System.Object,System.Boolean)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to allow wildcards only if analyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEquals``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,System.Boolean)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to allow wildcards only if analyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEquals(Raven.Client.WhereParams)">
            <summary>
              Matches exact value
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereIn(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Check that the field has one of the specified value
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereIn``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check that the field has one of the specified value
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereStartsWith(System.String,System.Object)">
            <summary>
              Matches fields which starts with the specified value.
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereStartsWith``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields which starts with the specified value.
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEndsWith(System.String,System.Object)">
            <summary>
              Matches fields which ends with the specified value.
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereEndsWith``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields which ends with the specified value.
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereBetween(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereBetween``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,``0)">
            <summary>
              Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereBetweenOrEqual(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereBetweenOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,``0)">
            <summary>
              Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereGreaterThan(System.String,System.Object)">
            <summary>
              Matches fields where the value is greater than the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereGreaterThan``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is greater than the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereGreaterThanOrEqual(System.String,System.Object)">
            <summary>
              Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereGreaterThanOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereLessThan(System.String,System.Object)">
            <summary>
              Matches fields where the value is less than the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereLessThan``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is less than the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereLessThanOrEqual(System.String,System.Object)">
            <summary>
              Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WhereLessThanOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.AndAlso">
            <summary>
              Add an AND to the query
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.OrElse">
            <summary>
              Add an OR to the query
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Boost(System.Decimal)">
            <summary>
              Specifies a boost weight to the last where clause.
              The higher the boost factor, the more relevant the term will be.
            </summary>
            <param name = "boost">boosting factor where 1.0 is default, less than 1.0 is lower weight, greater than 1.0 is higher weight</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Boosting%20a%20Term
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Fuzzy(System.Decimal)">
            <summary>
              Specifies a fuzziness factor to the single word term in the last where clause
            </summary>
            <param name = "fuzzy">0.0 to 1.0 where 1.0 means closer match</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Fuzzy%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Proximity(System.Int32)">
            <summary>
              Specifies a proximity distance for the phrase in the last where clause
            </summary>
            <param name = "proximity">number of words within</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Proximity%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WithinRadiusOf(System.Double,System.Double,System.Double,Raven.Abstractions.Indexing.SpatialUnits)">
            <summary>
              Filter matches to be inside the specified radius
            </summary>
            <param name = "radius">The radius.</param>
            <param name = "latitude">The latitude.</param>
            <param name = "longitude">The longitude.</param>
            <param name = "radiusUnits">The units of the <paramref name="radius"/>.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WithinRadiusOf(System.String,System.Double,System.Double,System.Double,Raven.Abstractions.Indexing.SpatialUnits)">
            <summary>
              Filter matches to be inside the specified radius
            </summary>
            <param name="fieldName">The field name for the radius</param>
            <param name = "radius">The radius.</param>
            <param name = "latitude">The latitude.</param>
            <param name = "longitude">The longitude.</param>
            <param name = "radiusUnits">The units of the <paramref name="radius"/>.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.RelatesToShape(System.String,System.String,Raven.Abstractions.Indexing.SpatialRelation,System.Double)">
            <summary>
            Filter matches based on a given shape - only documents with the shape defined in fieldName that
            have a relation rel with the given shapeWKT will be returned
            </summary>
            <param name="fieldName">The name of the field containing the shape to use for filtering</param>
            <param name="shapeWKT">The query shape</param>
            <param name="rel">Spatial relation to check</param>
            <param name="distanceErrorPct">The allowed error percentage</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.SortByDistance">
            <summary>
              Sorts the query results by distance.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.OrderBy(System.String[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by ascending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name = "fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by ascending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name = "propertySelectors">Property selectors for the fields.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.OrderByDescending(System.String[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by descending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name = "fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by descending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name = "propertySelectors">Property selectors for the fields.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Highlight(System.String,System.Int32,System.Int32,System.String)">
            <summary>
              Adds matches highlighting for the specified field.
            </summary>
            <remarks>
              The specified field should be analysed and stored for highlighter to work.
              For each match it creates a fragment that contains matched text surrounded by highlighter tags.
            </remarks>
            <param name="fieldName">The field name to highlight.</param>
            <param name="fragmentLength">The fragment length.</param>
            <param name="fragmentCount">The maximum number of fragments for the field.</param>
            <param name="fragmentsField">The field in query results item to put highlightings into.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Highlight(System.String,System.Int32,System.Int32,Raven.Client.FieldHighlightings@)">
            <summary>
              Adds matches highlighting for the specified field.
            </summary>
            <remarks>
              The specified field should be analysed and stored for highlighter to work.
              For each match it creates a fragment that contains matched text surrounded by highlighter tags.
            </remarks>
            <param name="fieldName">The field name to highlight.</param>
            <param name="fragmentLength">The fragment length.</param>
            <param name="fragmentCount">The maximum number of fragments for the field.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Highlight``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.IEnumerable}})">
            <summary>
              Adds matches highlighting for the specified field.
            </summary>
            <remarks>
              The specified field should be analysed and stored for highlighter to work.
              For each match it creates a fragment that contains matched text surrounded by highlighter tags.
            </remarks>
            <param name="propertySelector">The property to highlight.</param>
            <param name="fragmentLength">The fragment length.</param>
            <param name="fragmentCount">The maximum number of fragments for the field.</param>
            <param name="fragmentsPropertySelector">The property to put highlightings into.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Highlight``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32,System.Int32,Raven.Client.FieldHighlightings@)">
            <summary>
              Adds matches highlighting for the specified field.
            </summary>
            <remarks>
              The specified field should be analysed and stored for highlighter to work.
              For each match it creates a fragment that contains matched text surrounded by highlighter tags.
            </remarks>
            <param name="propertySelector">The property to highlight.</param>
            <param name="fragmentLength">The fragment length.</param>
            <param name="fragmentCount">The maximum number of fragments for the field.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.SetHighlighterTags(System.String,System.String)">
            <summary>
              Sets the tags to highlight matches with.
            </summary>
            <param name="preTag">Prefix tag.</param>
            <param name="postTag">Postfix tag.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.SetHighlighterTags(System.String[],System.String[])">
            <summary>
              Sets the tags to highlight matches with.
            </summary>
            <param name="preTags">Prefix tags.</param>
            <param name="postTags">Postfix tags.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOfNow">
            <summary>
              Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOfLastWrite">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOfLastWrite(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name = "cutOff">The cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name = "cutOff">The cut off.</param>
            <param name = "waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOf(Raven.Abstractions.Data.Etag)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff etag.
            </summary>
            <param name = "cutOffEtag">The cut off etag.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResultsAsOf(Raven.Abstractions.Data.Etag,System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff etag for the specified timeout.
            </summary>
            <param name = "cutOffEtag">The cut off etag.</param>
            <param name = "waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResults">
            <summary>
              EXPERT ONLY: Instructs the query to wait for non stale results.
              This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.BeforeQueryExecution(System.Action{Raven.Abstractions.Data.IndexQuery})">
            <summary>
            Allows you to modify the index query before it is sent to the server
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.WaitForNonStaleResults(System.TimeSpan)">
            <summary>
              EXPERT ONLY: Instructs the query to wait for non stale results for the specified wait timeout.
              This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.RandomOrdering">
            <summary>
            Order the search results randomly
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.RandomOrdering(System.String)">
            <summary>
            Order the search results randomly using the specified seed
            this is useful if you want to have repeatable random queries
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.AddOrder(System.String,System.Boolean)">
            <summary>
              Adds an ordering for a specific field to the query
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.AddOrder``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
              Adds an ordering for a specific field to the query
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.AddOrder(System.String,System.Boolean,System.Type)">
            <summary>
              Adds an ordering for a specific field to the query and specifies the type of field for sorting purposes
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
            <param name = "fieldType">the type of the field to be sorted.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.OpenSubclause">
            <summary>
              Simplified method for opening a new clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.CloseSubclause">
            <summary>
              Simplified method for closing a clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Search(System.String,System.String)">
            <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Search``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.GroupBy(Raven.Abstractions.Data.AggregationOperation,System.String[])">
            <summary>
              Instruct the index to group by the specified fields using the specified aggregation operation
            </summary>
            <remarks>
              This is only valid on dynamic indexes queries
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.GroupBy``1(Raven.Abstractions.Data.AggregationOperation,System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <summary>
              Instruct the index to group by the specified fields using the specified aggregation operation
            </summary>
            <remarks>
              This is only valid on dynamic indexes queries
            </remarks>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Intersect">
            <summary>
            Partition the query so we can intersect different parts of the query
            across different index entries.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.AfterQueryExecuted(System.Action{Raven.Abstractions.Data.QueryResult})">
            <summary>
            Callback to get the results of the query
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.InvokeAfterQueryExecuted(Raven.Abstractions.Data.QueryResult)">
            <summary>
            Called externally to raise the after query executed callback
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.Statistics(Raven.Client.RavenQueryStatistics@)">
            <summary>
            Provide statistics about the query, such as total count of matching records
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.UsingDefaultField(System.String)">
            <summary>
            Select the default field to use for this query
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.UsingDefaultOperator(Raven.Abstractions.Data.QueryOperator)">
            <summary>
            Select the default operator to use for this query
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.NoTracking">
            <summary>
            Disables tracking for queried entities by Raven's Unit of Work.
            Usage of this option will prevent holding query results in memory.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.NoCaching">
            <summary>
            Disables caching for query results.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.SetResultTransformer(System.String)">
            <summary>
            Sets a transformer to use after executing a query
            </summary>
            <param name="resultsTransformer"></param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.OrderByScore">
            <summary>
            Adds an ordering by score for a specific field to the query
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryBase`2.OrderByScoreDescending">
            <summary>
            Adds an ordering by score for a specific field to the query
            </summary>
        </member>
        <member name="P:Raven.Client.IDocumentQueryBase`2.DocumentConvention">
            <summary>
            Gets the document convention from the query session
            </summary>
        </member>
        <member name="P:Raven.Client.IDocumentQueryBase`2.Not">
            <summary>
              Negate the next operation
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentQuery`1.SelectFields``1(System.String[])">
            <summary>
            Selects the specified fields directly from the index
            </summary>
            <typeparam name="TProjection">The type of the projection.</typeparam>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentQuery`1.SelectFields``1">
            <summary>
            Selects all the projection fields directly from the index
            </summary>
            <typeparam name="TProjection">The type of the projection.</typeparam>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentQuery`1.ToListAsync">
            <summary>
            Gets the query result
            </summary>
            <value>The query result.</value>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentQuery`1.GetIndexQuery(System.Boolean)">
            <summary>
            Create the index query object for this query
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentQuery`1.GetFacetsAsync(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Get the facets as per the specified doc with the given start and pageSize
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentQuery`1.GetFacetsAsync(System.Collections.Generic.List{Raven.Abstractions.Data.Facet},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Get the facets as per the specified facets with the given start and pageSize
            </summary>
        </member>
        <member name="P:Raven.Client.IAsyncDocumentQuery`1.QueryResultAsync">
            <summary>
            Gets the query result
            Execute the query the first time that this is called.
            </summary>
            <value>The query result.</value>
        </member>
        <member name="T:Raven.Client.IAsyncDocumentSession">
            <summary>
            Interface for document session using async approaches
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Include(System.String)">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Include``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.StoreAsync(System.Object,Raven.Abstractions.Data.Etag)">
            <summary>
            Stores the specified entity with the specified etag.
            The entity will be saved when <see cref="M:Raven.Client.IAsyncDocumentSession.SaveChangesAsync"/> is called.
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.StoreAsync(System.Object)">
            <summary>
            Stores the specified entity in the session. The entity will be saved when <see cref="M:Raven.Client.IAsyncDocumentSession.SaveChangesAsync"/> is called.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.StoreAsync(System.Object,Raven.Abstractions.Data.Etag,System.String)">
            <summary>
            Stores the specified entity with the specified etag, under the specified id
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.StoreAsync(System.Object,System.String)">
            <summary>
            Stores the specified dynamic entity, under the specified id
            </summary>
            <param name="entity">The entity.</param>
            <param name="id">The id to store this entity under. If other entity exists with the same id it will be overridden.</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Delete``1(``0)">
            <summary>
            Marks the specified entity for deletion. The entity will be deleted when <see cref="M:Raven.Client.IAsyncDocumentSession.SaveChangesAsync"/> is called.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.LoadAsync``2(System.String)">
            <summary>
            Begins the a load that will use the specified results transformer against the specified id
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.LoadAsync``2(System.String,System.Action{Raven.Client.ILoadConfiguration})">
            <summary>
            Begins the a load that will use the specified results transformer against the specified id
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.LoadAsync``2(System.Collections.Generic.IEnumerable{System.String},System.Action{Raven.Client.ILoadConfiguration})">
            <summary>
            Begins the a load that will use the specified results transformer against the specified id
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.LoadAsync``1(System.String)">
            <summary>
            Begins the async load operation
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.LoadAsync``1(System.String[])">
            <summary>
            Begins the async multi-load operation
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.LoadAsync``2(System.String[])">
            <summary>
            Begins the async load operation
            </summary>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.LoadAsync``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Begins the async multi-load operation
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.LoadAsync``1(System.ValueType)">
            <summary>
            Begins the async load operation, with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(1)
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.LoadAsync``1(System.ValueType[])">
            <summary>
            Begins the async multi-load operation, with the specified ids after applying
            conventions on the provided ids to get the real document ids.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(1,2,3)
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.LoadAsync``1(System.Collections.Generic.IEnumerable{System.ValueType})">
            <summary>
            Begins the async multi-load operation, with the specified ids after applying
            conventions on the provided ids to get the real document ids.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(new List&lt;int&gt;(){1,2,3})
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.SaveChangesAsync">
            <summary>
            Begins the async save changes operation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Query``1(System.String,System.Boolean)">
            <summary>
            Queries the specified index using Linq.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <param name="indexName">Name of the index.</param>
            <param name="isMapReduce">Whatever we are querying a map/reduce index (modify how we treat identifier properties)</param>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Query``1">
            <summary>
            Dynamically queries RavenDB using LINQ
            </summary>
            <typeparam name="T">The result of the query</typeparam>
        </member>
        <member name="M:Raven.Client.IAsyncDocumentSession.Query``2">
            <summary>
            Queries the index specified by <typeparamref name="TIndexCreator"/> using Linq.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.IAsyncDocumentSession.Advanced">
            <summary>
            Get the accessor for advanced operations
            </summary>
            <remarks>
            Those operations are rarely needed, and have been moved to a separate 
            property to avoid cluttering the API
            </remarks>
        </member>
        <member name="T:Raven.Client.IAsyncDocumentSessionImpl">
            <summary>
            Interface for document session using async approaches
            </summary>
        </member>
        <member name="T:Raven.Client.IDocumentQuery`1">
            <summary>
            A query against a Raven index
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.SelectFields``1(System.String[])">
            <summary>
            Selects the specified fields directly from the index
            </summary>
            <typeparam name="TProjection">The type of the projection.</typeparam>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.SelectFields``1(System.String[],System.String[])">
            <summary>
            Selects the specified fields directly from the index
            </summary>
            <typeparam name="TProjection">The type of the projection.</typeparam>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.SelectFields``1">
            <summary>
            Selects the projection fields directly from the index
            </summary>
            <typeparam name="TProjection">The type of the projection.</typeparam>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.SetQueryInputs(System.Collections.Generic.Dictionary{System.String,Raven.Json.Linq.RavenJToken})">
            <summary>
            Sets user defined inputs to the query
            </summary>
            <param name="queryInputs"></param>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.Lazily">
            <summary>
            Register the query as a lazy query in the session and return a lazy
            instance that will evaluate the query only when needed
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.Lazily(System.Action{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            Register the query as a lazy query in the session and return a lazy
            instance that will evaluate the query only when needed.
            Also provide a function to execute when the value is evaluated
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.GetIndexQuery(System.Boolean)">
            <summary>
            Create the index query object for this query
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.GetFacets(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Get the facets as per the specified doc with the given start and pageSize
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQuery`1.GetFacets(System.Collections.Generic.List{Raven.Abstractions.Data.Facet},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Get the facets as per the specified facets with the given start and pageSize
            </summary>
        </member>
        <member name="T:Raven.Client.IDocumentQueryCustomization">
            <summary>
            Customize the document query
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOfLastWrite">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOfLastWrite(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOfNow">
            <summary>
            Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name="waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name="cutOff">The cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name="cutOff">The cut off.</param>
            <param name="waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOf(Raven.Abstractions.Data.Etag)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff etag.
            </summary>
            <param name="cutOffEtag">The cut off etag.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResultsAsOf(Raven.Abstractions.Data.Etag,System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff etag for the specified timeout.
            </summary>
            <param name="cutOffEtag">The cut off etag.</param>
            <param name="waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResults">
            <summary>
            EXPERT ONLY: Instructs the query to wait for non stale results.
            This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <typeparam name="TResult">The type of the object that holds the id that you want to include.</typeparam>
            <param name="path">The path, which is name of the property that holds the id of the object to include.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.Include``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <typeparam name="TResult">The type of the object that holds the id that you want to include.</typeparam>
            <typeparam name="TInclude">The type of the object that you want to include.</typeparam>
            <param name="path">The path, which is name of the property that holds the id of the object to include.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.Include(System.String)">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WaitForNonStaleResults(System.TimeSpan)">
            <summary>
            EXPERT ONLY: Instructs the query to wait for non stale results for the specified wait timeout.
            This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
            <param name="waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WithinRadiusOf(System.Double,System.Double,System.Double)">
            <summary>
            Filter matches to be inside the specified radius
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WithinRadiusOf(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Filter matches to be inside the specified radius
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WithinRadiusOf(System.Double,System.Double,System.Double,Raven.Abstractions.Indexing.SpatialUnits)">
            <summary>
            Filter matches to be inside the specified radius
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.WithinRadiusOf(System.String,System.Double,System.Double,System.Double,Raven.Abstractions.Indexing.SpatialUnits)">
            <summary>
            Filter matches to be inside the specified radius
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.RelatesToShape(System.String,System.String,Raven.Abstractions.Indexing.SpatialRelation)">
            <summary>
            Filter matches based on a given shape - only documents with the shape defined in fieldName that
            have a relation rel with the given shapeWKT will be returned
            </summary>
            <param name="fieldName">The name of the field containing the shape to use for filtering</param>
            <param name="shapeWKT">The query shape</param>
            <param name="rel">Spatial relation to check</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.SortByDistance">
            <summary>
            When using spatial queries, instruct the query to sort by the distance from the origin point
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.RandomOrdering">
            <summary>
            Order the search results randomly
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.RandomOrdering(System.String)">
            <summary>
            Order the search results randomly using the specified seed
            this is useful if you want to have repeatable random queries
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.BeforeQueryExecution(System.Action{Raven.Abstractions.Data.IndexQuery})">
            <summary>
            Allow you to modify the index query before it is executed
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.TransformResults(System.Func{Raven.Abstractions.Data.IndexQuery,System.Collections.Generic.IEnumerable{System.Object},System.Collections.Generic.IEnumerable{System.Object}})">
            <summary>
            Execute the transformation function on the results of this query.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.Highlight(System.String,System.Int32,System.Int32,System.String)">
            <summary>
              Adds matches highlighting for the specified field.
            </summary>
            <remarks>
              The specified field should be analysed and stored for highlighter to work.
              For each match it creates a fragment that contains matched text surrounded by highlighter tags.
            </remarks>
            <param name="fieldName">The field name to highlight.</param>
            <param name="fragmentLength">The fragment length.</param>
            <param name="fragmentCount">The maximum number of fragments for the field.</param>
            <param name="fragmentsField">The field in query results item to put highlightings into.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.Highlight(System.String,System.Int32,System.Int32,Raven.Client.FieldHighlightings@)">
            <summary>
              Adds matches highlighting for the specified field.
            </summary>
            <remarks>
              The specified field should be analysed and stored for highlighter to work.
              For each match it creates a fragment that contains matched text surrounded by highlighter tags.
            </remarks>
            <param name="fieldName">The field name to highlight.</param>
            <param name="fragmentLength">The fragment length.</param>
            <param name="fragmentCount">The maximum number of fragments for the field.</param>
            <param name="highlightings">Field highlightings for all results.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.SetHighlighterTags(System.String,System.String)">
            <summary>
              Sets the tags to highlight matches with.
            </summary>
            <param name="preTag">Prefix tag.</param>
            <param name="postTag">Postfix tag.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.SetHighlighterTags(System.String[],System.String[])">
            <summary>
              Sets the tags to highlight matches with.
            </summary>
            <param name="preTags">Prefix tags.</param>
            <param name="postTags">Postfix tags.</param>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.NoTracking">
            <summary>
            Disables tracking for queried entities by Raven's Unit of Work.
            Usage of this option will prevent holding query results in memory.
            </summary>
        </member>
        <member name="M:Raven.Client.IDocumentQueryCustomization.NoCaching">
            <summary>
            Disables caching for query results.
            </summary>
        </member>
        <member name="T:Raven.Client.ISyncAdvancedSessionOperation">
            <summary>
            Advanced synchronous session operations
            </summary>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.Refresh``1(``0)">
            <summary>
            Refreshes the specified entity from Raven server.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.LoadStartingWith``1(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Load documents with the specified key prefix
            </summary>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.LuceneQuery``2">
            <summary>
            Queries the index specified by <typeparamref name="TIndexCreator"/> using lucene syntax.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.LuceneQuery``1(System.String,System.Boolean)">
            <summary>
            Query the specified index using Lucene syntax
            </summary>
            <param name="indexName">Name of the index.</param>
            <param name="isMapReduce">Control how we treat identifier properties in map/reduce indexes</param>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.LuceneQuery``1">
            <summary>
            Dynamically query RavenDB using Lucene syntax
            </summary>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.GetDocumentUrl(System.Object)">
            <summary>
            Gets the document URL for the specified entity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.Stream``1(System.Linq.IQueryable{``0})">
            <summary>
            Stream the results on the query to the client, converting them to 
            CLR types along the way.
            Does NOT track the entities in the session, and will not includes changes there when SaveChanges() is called
            </summary>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.Stream``1(System.Linq.IQueryable{``0},Raven.Abstractions.Data.QueryHeaderInformation@)">
            <summary>
            Stream the results on the query to the client, converting them to 
            CLR types along the way.
            Does NOT track the entities in the session, and will not includes changes there when SaveChanges() is called
            </summary>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.Stream``1(Raven.Client.IDocumentQuery{``0})">
            <summary>
            Stream the results on the query to the client, converting them to 
            CLR types along the way.
            Does NOT track the entities in the session, and will not includes changes there when SaveChanges() is called
            </summary>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.Stream``1(Raven.Client.IDocumentQuery{``0},Raven.Abstractions.Data.QueryHeaderInformation@)">
            <summary>
            Stream the results on the query to the client, converting them to 
            CLR types along the way.
            Does NOT track the entities in the session, and will not includes changes there when SaveChanges() is called
            </summary>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.Stream``1(Raven.Abstractions.Data.Etag,System.Int32,System.Int32)">
            <summary>
            Stream the results of documents searhcto the client, converting them to CLR types along the way.
            Does NOT track the entities in the session, and will not includes changes there when SaveChanges() is called
            </summary>
        </member>
        <member name="M:Raven.Client.ISyncAdvancedSessionOperation.Stream``1(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Stream the results of documents searhcto the client, converting them to CLR types along the way.
            Does NOT track the entities in the session, and will not includes changes there when SaveChanges() is called
            </summary>
        </member>
        <member name="P:Raven.Client.ISyncAdvancedSessionOperation.Lazily">
            <summary>
            Access the lazy operations
            </summary>
        </member>
        <member name="P:Raven.Client.ISyncAdvancedSessionOperation.Eagerly">
            <summary>
            Access the eager operations
            </summary>
        </member>
        <member name="T:Raven.Client.ITransactionalDocumentSession">
            <summary>
            Implementers of this interface provide transactional operations
            Note that this interface is mostly useful only for expert usage
            </summary>
        </member>
        <member name="M:Raven.Client.ITransactionalDocumentSession.Commit(System.String)">
            <summary>
            Commits the transaction specified.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.ITransactionalDocumentSession.Rollback(System.String)">
            <summary>
            Rollbacks the transaction specified.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.ITransactionalDocumentSession.PrepareTransaction(System.String)">
            <summary>
            Prepares the transaction on the server.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="P:Raven.Client.ITransactionalDocumentSession.ResourceManagerId">
            <summary>
            The transaction resource manager identifier
            </summary>
        </member>
        <member name="P:Raven.Client.ITransactionalDocumentSession.DatabaseName">
            <summary>
            The db name for this session
            </summary>
        </member>
        <member name="T:Raven.Client.RavenQueryStatistics">
            <summary>
            Statistics about a raven query.
            Such as how many records match the query
            </summary>
        </member>
        <member name="M:Raven.Client.RavenQueryStatistics.UpdateQueryStats(Raven.Abstractions.Data.QueryResult)">
            <summary>
            Update the query stats from the query results
            </summary>
        </member>
        <member name="P:Raven.Client.RavenQueryStatistics.IsStale">
            <summary>
            Whatever the query returned potentially stale results
            </summary>
        </member>
        <member name="P:Raven.Client.RavenQueryStatistics.DurationMilliseconds">
            <summary>
            The duration of the query _server side_
            </summary>
        </member>
        <member name="P:Raven.Client.RavenQueryStatistics.TotalResults">
            <summary>
            What was the total count of the results that matched the query
            </summary>
        </member>
        <member name="P:Raven.Client.RavenQueryStatistics.SkippedResults">
            <summary>
            Gets or sets the skipped results
            </summary>
        </member>
        <member name="P:Raven.Client.RavenQueryStatistics.Timestamp">
            <summary>
            The time when the query results were unstale.
            </summary>
        </member>
        <member name="P:Raven.Client.RavenQueryStatistics.IndexName">
            <summary>
            The name of the index queried
            </summary>
        </member>
        <member name="P:Raven.Client.RavenQueryStatistics.IndexTimestamp">
            <summary>
            The timestamp of the queried index
            </summary>
        </member>
        <member name="P:Raven.Client.RavenQueryStatistics.IndexEtag">
            <summary>
            The etag of the queried index
            </summary>
        </member>
        <member name="P:Raven.Client.RavenQueryStatistics.NonAuthoritativeInformation">
            <summary>
            Gets or sets a value indicating whether any of the documents returned by this query
            are non authoritative (modified by uncommitted transaction).
            </summary>
        </member>
        <member name="P:Raven.Client.RavenQueryStatistics.LastQueryTime">
            <summary>
            The timestamp of the last time the index was queried
            </summary>
        </member>
        <member name="T:Raven.Client.StoredEntityEventArgs">
            <summary>
            The event arguments raised when an entity is stored
            </summary>
        </member>
        <member name="P:Raven.Client.StoredEntityEventArgs.SessionIdentifier">
            <summary>
            Gets or sets the session identifier.
            </summary>
            <value>The session identifier.</value>
        </member>
        <member name="P:Raven.Client.StoredEntityEventArgs.EntityInstance">
            <summary>
            Gets or sets the entity instance.
            </summary>
            <value>The entity instance.</value>
        </member>
        <member name="T:Raven.Client.WhereParams">
            <summary>
            Parameters for the Where Equals call
            </summary>
        </member>
        <member name="M:Raven.Client.WhereParams.#ctor">
            <summary>
            Create a new instance 
            </summary>
        </member>
        <member name="P:Raven.Client.WhereParams.FieldName">
            <summary>
            The field name
            </summary>
        </member>
        <member name="P:Raven.Client.WhereParams.Value">
            <summary>
            The field value
            </summary>
        </member>
        <member name="P:Raven.Client.WhereParams.IsAnalyzed">
            <summary>
            Should the field be analyzed
            </summary>
        </member>
        <member name="P:Raven.Client.WhereParams.AllowWildcards">
            <summary>
            Should the field allow wildcards
            </summary>
        </member>
        <member name="P:Raven.Client.WhereParams.IsNestedPath">
            <summary>
            Is this a root property or not?
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.CreateHttpJsonRequestParams.AddOperationHeaders(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Adds the operation headers.
            </summary>
            <param name="operationsHeaders">The operations headers.</param>
        </member>
        <member name="M:Raven.Client.Connection.CreateHttpJsonRequestParams.AddOperationHeaders(Raven.Client.Silverlight.MissingFromSilverlight.NameValueCollection)">
            <summary>
            Adds the operation headers.
            </summary>
            <param name="operationsHeaders">The operations headers.</param>
        </member>
        <member name="T:Raven.Client.Connection.DocumentConventionJsonExtensions">
            <summary>
            Extension to json objects
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.DocumentConventionJsonExtensions.Deserialize``1(Raven.Json.Linq.RavenJObject,Raven.Client.Document.DocumentConvention)">
            <summary>
            Deserializes the specified instance <param name="self"/> to an instance of <typeparam name="T"/> using the specified <param name="convention"/>
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.DocumentConventionJsonExtensions.Deserialize(Raven.Json.Linq.RavenJObject,System.Type,Raven.Client.Document.DocumentConvention)">
            <summary>
            Deserializes the specified instance <param name="self"/> to an instance of <param name="type"/> using the specified <param name="convention"/>
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.IRavenQueryInspector">
            <summary>
            Provide access to the underlying <see cref="T:Raven.Client.IDocumentQuery`1"/>
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IRavenQueryInspector.GetLastEqualityTerm(System.Boolean)">
            <summary>
            The last term that we asked the query to use equals on
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IRavenQueryInspector.GetIndexQuery(System.Boolean)">
            <summary>
            Get the index query for this query
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IRavenQueryInspector.GetFacetsAsync(System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Get the facets as per the specified facet document with the given start and pageSize
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.IRavenQueryInspector.GetFacetsAsync(System.Collections.Generic.List{Raven.Abstractions.Data.Facet},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Get the facet results as per the specified facets with the given start and pageSize
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.IRavenQueryInspector.IndexQueried">
            <summary>
            Get the name of the index being queried
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.IRavenQueryInspector.AsyncIndexQueried">
            <summary>
            Get the name of the index being queried in async queries
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.IRavenQueryInspector.AsyncDatabaseCommands">
            <summary>
            Grant access to the async database commands
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.IRavenQueryInspector.Session">
            <summary>
            The query session
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.JsonLuceneDateTimeConverter">
            <summary>
            Convert a lucene data format to and from json values
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.JsonConverter">
            <summary>
            Converts an object to and from JSON.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConverter.WriteJson(Raven.Imports.Newtonsoft.Json.JsonWriter,System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConverter.ReadJson(Raven.Imports.Newtonsoft.Json.JsonReader,System.Type,System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConverter.GetSchema">
            <summary>
            Gets the <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> of the JSON produced by the JsonConverter.
            </summary>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> of the JSON produced by the JsonConverter.</returns>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonConverter.CanRead">
            <summary>
            Gets a value indicating whether this <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/> can read JSON.
            </summary>
            <value><c>true</c> if this <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/> can read JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value><c>true</c> if this <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Raven.Client.Connection.JsonLuceneDateTimeConverter.WriteJson(Raven.Imports.Newtonsoft.Json.JsonWriter,System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Raven.Client.Connection.JsonLuceneDateTimeConverter.ReadJson(Raven.Imports.Newtonsoft.Json.JsonReader,System.Type,System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Raven.Client.Connection.JsonLuceneDateTimeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Raven.Client.Connection.JsonLuceneDateTimeConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Raven.Client.Connection.ReplicationInformer">
            <summary>
            Replication and failover management on the client side
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.ReplicationInformer.#ctor(Raven.Client.Document.DocumentConvention)">
            <summary>
             Create a new instance of this class
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.ReplicationInformer.UpdateReplicationInformationIfNeeded(Raven.Client.Connection.Async.AsyncServerClient)">
            <summary>
            Updates the replication information if needed.
            </summary>
            <param name="serverClient">The server client.</param>
        </member>
        <member name="M:Raven.Client.Connection.ReplicationInformer.GetFailureCount(System.String)">
            <summary>
            Get the current failure count for the url
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.ReplicationInformer.GetFailureLastCheck(System.String)">
            <summary>
            Get failure last check time for the url
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.ReplicationInformer.ShouldExecuteUsing(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Should execute the operation using the specified operation URL
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.ReplicationInformer.IsFirstFailure(System.String)">
            <summary>
            Determines whether this is the first failure on the specified operation URL.
            </summary>
            <param name="operationUrl">The operation URL.</param>
        </member>
        <member name="M:Raven.Client.Connection.ReplicationInformer.IncrementFailureCount(System.String)">
            <summary>
            Increments the failure count for the specified operation URL
            </summary>
            <param name="operationUrl">The operation URL.</param>
        </member>
        <member name="M:Raven.Client.Connection.ReplicationInformer.RefreshReplicationInformation(Raven.Client.Connection.Async.AsyncServerClient)">
            <summary>
            Refreshes the replication information.
            Expert use only.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.ReplicationInformer.ResetFailureCount(System.String)">
            <summary>
            Resets the failure count for the specified URL
            </summary>
            <param name="operationUrl">The operation URL.</param>
        </member>
        <member name="E:Raven.Client.Connection.ReplicationInformer.FailoverStatusChanged">
            <summary>
            Notify when the failover status changed
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.ReplicationInformer.ReplicationDestinationsUrls">
            <summary>
            Gets the replication destinations.
            </summary>
            <value>The replication destinations.</value>
        </member>
        <member name="T:Raven.Client.Connection.FailoverStatusChangedEventArgs">
            <summary>
            The event arguments for when the failover status changed
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.FailoverStatusChangedEventArgs.Failing">
            <summary>
            Whatever that url is now failing
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.FailoverStatusChangedEventArgs.Url">
            <summary>
            The url whose failover status changed
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.SerializationHelper">
            <summary>
             Helper method to do serialization from RavenJObject to JsonDocument
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.SerializationHelper.RavenJObjectsToJsonDocuments(System.Collections.Generic.IEnumerable{Raven.Json.Linq.RavenJObject})">
            <summary>
             Translate a collection of RavenJObject to JsonDocuments
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.SerializationHelper.ToJsonDocuments(System.Collections.Generic.IEnumerable{Raven.Json.Linq.RavenJObject})">
            <summary>
             Translate a collection of RavenJObject to JsonDocuments
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.SerializationHelper.ToJsonDocument(Raven.Json.Linq.RavenJObject)">
            <summary>
             Translate a collection of RavenJObject to JsonDocuments
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.SerializationHelper.ToQueryResult(Raven.Json.Linq.RavenJObject,Raven.Abstractions.Data.Etag,System.String)">
            <summary>
            Translate a result for a query
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.SerializationHelper.DeserializeJsonDocument(System.String,Raven.Json.Linq.RavenJToken,Raven.Client.Silverlight.MissingFromSilverlight.NameValueCollection,System.Net.HttpStatusCode)">
            <summary>
            Deserialize a request to a JsonDocument
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.SerializationHelper.DeserializeJsonDocumentMetadata(System.String,Raven.Client.Silverlight.MissingFromSilverlight.NameValueCollection,System.Net.HttpStatusCode)">
            <summary>
            Deserialize a request to a JsonDocument
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncDatabaseCommandsExtensions.PatchAsync(Raven.Client.Connection.Async.IAsyncDatabaseCommands,System.String,Raven.Abstractions.Data.PatchRequest[])">
            <summary>
            Sends a patch request for a specific document, ignoring the document's Etag
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patches">Array of patch requests</param>
        </member>
        <member name="T:Raven.Client.Connection.Async.AsyncServerClient">
            <summary>
            Access the database commands in async fashion
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.Async.IAsyncDatabaseCommands">
            <summary>
            An async database command operations
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.Profiling.IHoldProfilingInformation">
            <summary>
            Interface for getting profiling information about the actions of the system
            within a given context, usually the context is database commands or async database commands
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.IHoldProfilingInformation.ProfilingInformation">
            <summary>
            The profiling information
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetAsync(System.String)">
            <summary>
            Begins an async get operation
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetAsync(System.String[],System.String[],System.String,System.Collections.Generic.Dictionary{System.String,Raven.Json.Linq.RavenJToken},System.Boolean)">
            <summary>
            Begins an async multi get operation
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetDocumentsAsync(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Begins an async get operation for documents
            </summary>
            <param name="start">Paging start</param>
            <param name="pageSize">Size of the page.</param>
            <param name="metadataOnly">Load just the document metadata</param>
            <remarks>
            This is primarily useful for administration of a database
            </remarks>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.QueryAsync(System.String,Raven.Abstractions.Data.IndexQuery,System.String[],System.Boolean)">
            <summary>
            Begins the async query.
            </summary>
            <param name="index">The index.</param>
            <param name="query">The query.</param>
            <param name="includes">The include paths</param>
            <param name="metadataOnly">Load just the document metadata</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.BatchAsync(Raven.Abstractions.Commands.ICommandData[])">
            <summary>
            Begins the async batch operation
            </summary>
            <param name="commandDatas">The command data.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.SuggestAsync(System.String,Raven.Abstractions.Data.SuggestionQuery)">
            <summary>
            Returns a list of suggestions based on the specified suggestion query.
            </summary>
            <param name="index">The index to query for suggestions</param>
            <param name="suggestionQuery">The suggestion query.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetIndexNamesAsync(System.Int32,System.Int32)">
            <summary>
            Gets the index names from the server asynchronously
            </summary>
            <param name="start">Paging start</param>
            <param name="pageSize">Size of the page.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetIndexesAsync(System.Int32,System.Int32)">
            <summary>
            Gets the indexes from the server asynchronously
            </summary>
            <param name="start">Paging start</param>
            <param name="pageSize">Size of the page.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetTransformersAsync(System.Int32,System.Int32)">
            <summary>
            Gets the transformers from the server asynchronously
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.ResetIndexAsync(System.String)">
            <summary>
            Resets the specified index asynchronously
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetIndexAsync(System.String)">
            <summary>
            Gets the index definition for the specified name asynchronously
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetTransformerAsync(System.String)">
            <summary>
            Gets the transformer definition for the specified name asynchronously
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PutIndexAsync(System.String,Raven.Abstractions.Indexing.IndexDefinition,System.Boolean)">
            <summary>
            Puts the index definition for the specified name asynchronously
            </summary>
            <param name="name">The name.</param>
            <param name="indexDef">The index def.</param>
            <param name="overwrite">Should overwrite index</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PutTransformerAsync(System.String,Raven.Abstractions.Indexing.TransformerDefinition)">
            <summary>
            Puts the transformer definition for the specified name asynchronously
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.DeleteIndexAsync(System.String)">
            <summary>
            Deletes the index definition for the specified name asynchronously
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.DeleteByIndexAsync(System.String,Raven.Abstractions.Data.IndexQuery,System.Boolean)">
            <summary>
            Perform a set based deletes using the specified index.
            </summary>
            <param name="indexName">Name of the index.</param>
            <param name="queryToDelete">The query to delete.</param>
            <param name="allowStale">if set to <c>true</c> allow the operation while the index is stale.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.DeleteTransformerAsync(System.String)">
            <summary>
            Deletes the transformer definition for the specified name asynchronously
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.DeleteDocumentAsync(System.String)">
            <summary>
            Deletes the document for the specified id asynchronously
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PutAsync(System.String,Raven.Abstractions.Data.Etag,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
            Puts the document with the specified key in the database
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
            <param name="document">The document.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PatchAsync(System.String,Raven.Abstractions.Data.PatchRequest[],Raven.Abstractions.Data.Etag)">
            <summary>
            Sends a patch request for a specific document
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patches">Array of patch requests</param>
            <param name="etag">Require specific Etag [null to ignore]</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PatchAsync(System.String,Raven.Abstractions.Data.PatchRequest[],System.Boolean)">
            <summary>
            Sends a patch request for a specific document, ignoring the document's Etag
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patches">Array of patch requests</param>
            <param name="ignoreMissing">true if the patch request should ignore a missing document, false to throw DocumentDoesNotExistException</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PatchAsync(System.String,Raven.Abstractions.Data.PatchRequest[],Raven.Abstractions.Data.PatchRequest[],Raven.Json.Linq.RavenJObject)">
            <summary>
            Sends a patch request for a specific document which may or may not currently exist
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patchesToExisting">Array of patch requests to apply to an existing document</param>
            <param name="patchesToDefault">Array of patch requests to apply to a default document when the document is missing</param>
            <param name="defaultMetadata">The metadata for the default document when the document is missing</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PatchAsync(System.String,Raven.Abstractions.Data.ScriptedPatchRequest,System.Boolean)">
            <summary>
            Sends a patch request for a specific document, ignoring the document's Etag
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patch">The patch request to use (using JavaScript)</param>
            <param name="ignoreMissing">true if the patch request should ignore a missing document, false to throw DocumentDoesNotExistException</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PatchAsync(System.String,Raven.Abstractions.Data.ScriptedPatchRequest,Raven.Abstractions.Data.Etag)">
            <summary>
            Sends a patch request for a specific document
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patch">The patch request to use (using JavaScript)</param>
            <param name="etag">Require specific Etag [null to ignore]</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PatchAsync(System.String,Raven.Abstractions.Data.ScriptedPatchRequest,Raven.Abstractions.Data.ScriptedPatchRequest,Raven.Json.Linq.RavenJObject)">
            <summary>
            Sends a patch request for a specific document which may or may not currently exist
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patchExisting">The patch request to use (using JavaScript) to an existing document</param>
            <param name="patchDefault">The patch request to use (using JavaScript)  to a default document when the document is missing</param>
            <param name="defaultMetadata">The metadata for the default document when the document is missing</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.CreateRequest(System.String,System.String,System.Boolean)">
            <summary>
            Create a http request to the specified relative url on the current database
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.ForDatabase(System.String)">
            <summary>
            Create a new instance of <see cref="T:Raven.Client.Connection.Async.IAsyncDatabaseCommands"/> that will interacts
            with the specified database
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.ForSystemDatabase">
            <summary>
            Create a new instance of <see cref="T:Raven.Client.Connection.Async.IAsyncDatabaseCommands"/> that will interacts
            with the default database
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.With(System.Net.ICredentials)">
            <summary>
            Returns a new <see cref="T:Raven.Client.Connection.Async.IAsyncDatabaseCommands"/> using the specified credentials
            </summary>
            <param name="credentialsForSession">The credentials for session.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetStatisticsAsync">
            <summary>
            Retrieve the statistics for the database asynchronously
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetDatabaseNamesAsync(System.Int32,System.Int32)">
            <summary>
            Gets the list of databases from the server asynchronously
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.PutAttachmentAsync(System.String,Raven.Abstractions.Data.Etag,System.Byte[],Raven.Json.Linq.RavenJObject)">
            <summary>
            Puts the attachment with the specified key asynchronously
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
            <param name="data">The data.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetAttachmentAsync(System.String)">
            <summary>
            Gets the attachment by the specified key asynchronously
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.HeadAttachmentAsync(System.String)">
            <summary>
            Retrieves the attachment metadata with the specified key, not the actual attachmet
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.DeleteAttachmentAsync(System.String,Raven.Abstractions.Data.Etag)">
            <summary>
            Deletes the attachment with the specified key asynchronously
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetTermsAsync(System.String,System.String,System.String,System.Int32)">
            <summary>
             Get the possible terms for the specified field in the index asynchronously
             You can page through the results by use fromValue parameter as the 
             starting point for the next query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.DisableAllCaching">
            <summary>
            Disable all caching within the given scope
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.MultiGetAsync(Raven.Abstractions.Data.GetRequest[])">
            <summary>
            Perform a single POST request containing multiple nested GET requests
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.UpdateByIndex(System.String,Raven.Abstractions.Data.IndexQuery,Raven.Abstractions.Data.ScriptedPatchRequest)">
            <summary>
            Perform a set based update using the specified index, not allowing the operation
            if the index is stale
            </summary>
            <param name="indexName">Name of the index.</param>
            <param name="queryToUpdate">The query to update.</param>
            <param name="patch">The patch request to use (using JavaScript)</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.UpdateByIndex(System.String,Raven.Abstractions.Data.IndexQuery,Raven.Abstractions.Data.ScriptedPatchRequest,System.Boolean)">
            <summary>
            Perform a set based update using the specified index
            </summary>
            <param name="indexName">Name of the index.</param>
            <param name="queryToUpdate">The query to update.</param>
            <param name="patch">The patch request to use (using JavaScript)</param>
            <param name="allowStale">if set to <c>true</c> [allow stale].</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetFacetsAsync(System.String,Raven.Abstractions.Data.IndexQuery,System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Using the given Index, calculate the facets as per the specified doc with the given start and pageSize
            </summary>
            <param name="index">Name of the index</param>
            <param name="query">Query to build facet results</param>
            <param name="facetSetupDoc">Name of the FacetSetup document</param>
            <param name="start">Start index for paging</param>
            <param name="pageSize">Paging PageSize. If set, overrides Facet.MaxResults</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetFacetsAsync(System.String,Raven.Abstractions.Data.IndexQuery,System.Collections.Generic.List{Raven.Abstractions.Data.Facet},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Using the given Index, calculate the facets as per the specified doc with the given start and pageSize
            </summary>
            <param name="index">Name of the index</param>
            <param name="query">Query to build facet results</param>
            <param name="facets">List of facets</param>
            <param name="start">Start index for paging</param>
            <param name="pageSize">Paging PageSize. If set, overrides Facet.MaxResults</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetLogsAsync(System.Boolean)">
            <summary>
            Gets the Logs
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetLicenseStatusAsync">
            <summary>
            Gets the license Status
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetBuildNumberAsync">
            <summary>
            Gets the build number
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.StartBackupAsync(System.String,Raven.Abstractions.Data.DatabaseDocument)">
            <summary>
            Begins an async backup operation
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.StartRestoreAsync(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Begins an async restore operation
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.StartIndexingAsync">
            <summary>
            Sends an async command that enables indexing
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.StopIndexingAsync">
            <summary>
            Sends an async command that disables all indexing
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetIndexingStatusAsync">
            <summary>
            Get the indexing status
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.StartsWithAsync(System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            Get documents with id of a specific prefix
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.ForceReadFromMaster">
            <summary>
            Force the database commands to read directly from the master, unless there has been a failover.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.HeadAsync(System.String)">
            <summary>
            Retrieves the document metadata for the specified document key.
            </summary>
            <param name="key">The key.</param>
            <returns>The document metadata for the specified document, or null if the document does not exist</returns>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.StreamQueryAsync(System.String,Raven.Abstractions.Data.IndexQuery,Raven.Abstractions.Extensions.Reference{Raven.Abstractions.Data.QueryHeaderInformation})">
            <summary>
            Queries the specified index in the Raven flavored Lucene query syntax. Will return *all* results, regardless
            of the number of items that might be returned.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.StreamDocsAsync(Raven.Abstractions.Data.Etag,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Streams the documents by etag OR starts with the prefix and match the matches
            Will return *all* results, regardless of the number of itmes that might be returned.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncDatabaseCommands.GetBulkInsertOperation(Raven.Abstractions.Data.BulkInsertOptions,Raven.Client.Changes.IDatabaseChanges)">
            <summary>
            Get the low level  bulk insert operation
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Async.IAsyncDatabaseCommands.OperationsHeaders">
            <summary>
            Gets the operations headers.
            </summary>
            <value>The operations headers.</value>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncInfoDatabaseCommands.GetReplicationInfoAsync">
            <summary>
            Get replication info
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.Async.IAsyncGlobalAdminDatabaseCommands.GetStatisticsAsync">
            <summary>
            Get admin statistics
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.#ctor(System.String,Raven.Client.Document.DocumentConvention,System.String,System.Net.ICredentials,Raven.Client.Silverlight.Connection.HttpJsonRequestFactory,System.Nullable{System.Guid},System.Func{System.String,Raven.Client.Connection.ReplicationInformer},System.String,Raven.Client.Listeners.IDocumentConflictListener[])">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Connection.Async.AsyncServerClient"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.With(System.Net.ICredentials)">
            <summary>
            Returns a new <see cref="T:Raven.Client.Connection.Async.IAsyncDatabaseCommands"/> using the specified credentials
            </summary>
            <param name="credentialsForSession">The credentials for session.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetIndexNamesAsync(System.Int32,System.Int32)">
            <summary>
            Gets the index names from the server asynchronously
            </summary>
            <param name="start">Paging start</param>
            <param name="pageSize">Size of the page.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetIndexesAsync(System.Int32,System.Int32)">
            <summary>
            Gets the indexes from the server asynchronously
            </summary>
            <param name="start">Paging start</param>
            <param name="pageSize">Size of the page.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetTransformersAsync(System.Int32,System.Int32)">
            <summary>
            Gets the transformers from the server asynchronously
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.ResetIndexAsync(System.String)">
            <summary>
            Resets the specified index asynchronously
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetIndexAsync(System.String)">
            <summary>
            Gets the index definition for the specified name asynchronously
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetTransformerAsync(System.String)">
            <summary>
            Gets the transformer definition for the specified name asynchronously
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.PutIndexAsync(System.String,Raven.Abstractions.Indexing.IndexDefinition,System.Boolean)">
            <summary>
            Puts the index definition for the specified name asynchronously
            </summary>
            <param name="name">The name.</param>
            <param name="indexDef">The index def.</param>
            <param name="overwrite">Should overwrite index</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.PutTransformerAsync(System.String,Raven.Abstractions.Indexing.TransformerDefinition)">
            <summary>
            Puts the transformer definition for the specified name asynchronously
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.DirectPutIndexAsync(System.String,Raven.Abstractions.Indexing.IndexDefinition,System.Boolean,Raven.Client.Connection.OperationMetadata)">
            <summary>
            Puts the index definition for the specified name asynchronously with url
            </summary>
            <param name="name">The name.</param>
            <param name="indexDef">The index def.</param>
            <param name="overwrite">Should overwrite index</param>
            <param name="operationMetadata">The server's url</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.DirectPutTransformerAsync(System.String,Raven.Abstractions.Indexing.TransformerDefinition,Raven.Client.Connection.OperationMetadata)">
            <summary>
            Puts the transfromer definition for the specified name asynchronously with url
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.DeleteIndexAsync(System.String)">
            <summary>
            Deletes the index definition for the specified name asynchronously
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.DeleteDocumentAsync(System.String)">
            <summary>
            Deletes the document for the specified id asynchronously
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.PatchAsync(System.String,Raven.Abstractions.Data.PatchRequest[],System.Boolean)">
            <summary>
            Sends a patch request for a specific document, ignoring the document's Etag
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patches">Array of patch requests</param>
            <param name="ignoreMissing">true if the patch request should ignore a missing document, false to throw DocumentDoesNotExistException</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.PatchAsync(System.String,Raven.Abstractions.Data.PatchRequest[],Raven.Abstractions.Data.Etag)">
            <summary>
            Sends a patch request for a specific document
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patches">Array of patch requests</param>
            <param name="etag">Require specific Etag [null to ignore]</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.PatchAsync(System.String,Raven.Abstractions.Data.PatchRequest[],Raven.Abstractions.Data.PatchRequest[],Raven.Json.Linq.RavenJObject)">
            <summary>
            Sends a patch request for a specific document which may or may not currently exist
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patchesToExisting">Array of patch requests to apply to an existing document</param>
            <param name="patchesToDefault">Array of patch requests to apply to a default document when the document is missing</param>
            <param name="defaultMetadata">The metadata for the default document when the document is missing</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.PatchAsync(System.String,Raven.Abstractions.Data.ScriptedPatchRequest,System.Boolean)">
            <summary>
            Sends a patch request for a specific document, ignoring the document's Etag
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patch">The patch request to use (using JavaScript)</param>
            <param name="ignoreMissing">true if the patch request should ignore a missing document, false to throw DocumentDoesNotExistException</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.PatchAsync(System.String,Raven.Abstractions.Data.ScriptedPatchRequest,Raven.Abstractions.Data.Etag)">
            <summary>
            Sends a patch request for a specific document
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patch">The patch request to use (using JavaScript)</param>
            <param name="etag">Require specific Etag [null to ignore]</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.PatchAsync(System.String,Raven.Abstractions.Data.ScriptedPatchRequest,Raven.Abstractions.Data.ScriptedPatchRequest,Raven.Json.Linq.RavenJObject)">
            <summary>
            Sends a patch request for a specific document which may or may not currently exist
            </summary>
            <param name="key">Id of the document to patch</param>
            <param name="patchExisting">The patch request to use (using JavaScript) to an existing document</param>
            <param name="patchDefault">The patch request to use (using JavaScript)  to a default document when the document is missing</param>
            <param name="defaultMetadata">The metadata for the default document when the document is missing</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.PutAsync(System.String,Raven.Abstractions.Data.Etag,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
            Puts the document with the specified key in the database
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
            <param name="document">The document.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.ForDatabase(System.String)">
            <summary>
            Create a new instance of <see cref="T:Raven.Client.Connection.Async.IAsyncDatabaseCommands"/> that will interacts
            with the specified database
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.ForSystemDatabase">
            <summary>
            Create a new instance of <see cref="T:Raven.Client.Connection.Async.IAsyncDatabaseCommands"/> that will interact
            with the root database. Useful if the database has works against a tenant database.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetAsync(System.String)">
            <summary>
            Begins an async get operation
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetAsync(System.String[],System.String[],System.String,System.Collections.Generic.Dictionary{System.String,Raven.Json.Linq.RavenJToken},System.Boolean)">
            <summary>
            Begins an async multi get operation
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetDocumentsAsync(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Begins an async get operation for documents
            </summary>
            <remarks>
            This is primarily useful for administration of a database
            </remarks>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetFacetsAsync(System.String,Raven.Abstractions.Data.IndexQuery,System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Using the given Index, calculate the facets as per the specified doc with the given start and pageSize
            </summary>
            <param name="index">Name of the index</param>
            <param name="query">Query to build facet results</param>
            <param name="facetSetupDoc">Name of the FacetSetup document</param>
            <param name="start">Start index for paging</param>
            <param name="pageSize">Paging PageSize. If set, overrides Facet.MaxResults</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetFacetsAsync(System.String,Raven.Abstractions.Data.IndexQuery,System.Collections.Generic.List{Raven.Abstractions.Data.Facet},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Using the given Index, calculate the facets as per the specified doc with the given start and pageSize
            </summary>
            <param name="index">Name of the index</param>
            <param name="query">Query to build facet results</param>
            <param name="facets">List of facets</param>
            <param name="start">Start index for paging</param>
            <param name="pageSize">Paging PageSize. If set, overrides Facet.MaxResults</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.MultiGetAsync(Raven.Abstractions.Data.GetRequest[])">
            <summary>
            Perform a single POST request containing multiple nested GET requests
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.QueryAsync(System.String,Raven.Abstractions.Data.IndexQuery,System.String[],System.Boolean)">
            <summary>
            Begins the async query.
            </summary>
            <param name="index">The index.</param>
            <param name="query">The query.</param>
            <param name="includes">The include paths</param>
            <param name="metadataOnly">Load just the document metadata</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.HandleException(System.Net.WebException)">
            <summary>
            Attempts to handle an exception raised when receiving a response from the server
            </summary>
            <param name="e">The exception to handle</param>
            <returns>returns true if the exception is handled, false if it should be thrown</returns>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.SuggestAsync(System.String,Raven.Abstractions.Data.SuggestionQuery)">
            <summary>
            Returns a list of suggestions based on the specified suggestion query.
            </summary>
            <param name="index">The index to query for suggestions</param>
            <param name="suggestionQuery">The suggestion query.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.BatchAsync(Raven.Abstractions.Commands.ICommandData[])">
            <summary>
            Begins the async batch operation
            </summary>
            <param name="commandDatas">The command data.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetStatisticsAsync">
            <summary>
            Begins retrieving the statistics for the database
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetDatabaseNamesAsync(System.Int32,System.Int32)">
            <summary>
            Gets the list of databases from the server asynchronously
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.PutAttachmentAsync(System.String,Raven.Abstractions.Data.Etag,System.Byte[],Raven.Json.Linq.RavenJObject)">
            <summary>
            Puts the attachment with the specified key asynchronously
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
            <param name="data">The data.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetAttachmentAsync(System.String)">
            <summary>
            Gets the attachment by the specified key asynchronously
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.DeleteAttachmentAsync(System.String,Raven.Abstractions.Data.Etag)">
            <summary>
            Deletes the attachment with the specified key asynchronously
            </summary>
            <param name="key">The key.</param>
            <param name="etag">The etag.</param>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.DisableAllCaching">
            <summary>
            Disable all caching within the given scope
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetTermsAsync(System.String,System.String,System.String,System.Int32)">
            <summary>
             Get the possible terms for the specified field in the index asynchronously
             You can page through the results by use fromValue parameter as the 
             starting point for the next query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.ForceReadFromMaster">
            <summary>
            Force the database commands to read directly from the master, unless there has been a failover.
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.GetBulkInsertOperation(Raven.Abstractions.Data.BulkInsertOptions,Raven.Client.Changes.IDatabaseChanges)">
            <summary>
            Get the low level  bulk insert operation
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Async.AsyncServerClient.DirectHeadAsync(Raven.Client.Connection.OperationMetadata,System.String)">
            <summary>
            Do a direct HEAD request against the server for the specified document
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Async.AsyncServerClient.OperationsHeaders">
            <summary>
            Gets or sets the operations headers.
            </summary>
            <value>The operations headers.</value>
        </member>
        <member name="P:Raven.Client.Connection.Async.AsyncServerClient.ProfilingInformation">
            <summary>
            The profiling information
            </summary>
        </member>
        <member name="E:Raven.Client.Connection.Async.AsyncServerClient.FailoverStatusChanged">
            <summary>
            Notify when the failover status changed
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.Profiling.ProfilingContext">
            <summary>
            Manages all profiling activities for a given item
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Profiling.ProfilingContext.RecordAction(System.Object,Raven.Client.Connection.Profiling.RequestResultArgs)">
            <summary>
            Register the action as associated with the sender
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Profiling.ProfilingContext.TryGet(System.Guid)">
            <summary>
            Try to get a session matching the specified id.
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.Profiling.ProfilingInformation">
            <summary>
            Information about a particular session
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Profiling.ProfilingInformation.CreateProfilingInformation(System.Nullable{System.Guid})">
            <summary>
             Create a new instance of profiling information and provide additional context information
            </summary>
        </member>
        <member name="F:Raven.Client.Connection.Profiling.ProfilingInformation.Requests">
            <summary>
             The requests made by this session
            </summary>
        </member>
        <member name="F:Raven.Client.Connection.Profiling.ProfilingInformation.Id">
            <summary>
            Uniquely identify the session
            </summary>
        </member>
        <member name="F:Raven.Client.Connection.Profiling.ProfilingInformation.At">
            <summary>
            The time when the session was created
            </summary>
        </member>
        <member name="F:Raven.Client.Connection.Profiling.ProfilingInformation.DurationMilliseconds">
            <summary>
            The duration this session was opened
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Profiling.ProfilingInformation.#ctor(System.Nullable{System.Guid})">
            <summary>
             Create a new instance of this class
            </summary>
        </member>
        <member name="E:Raven.Client.Connection.Profiling.ProfilingInformation.OnContextCreated">
            <summary>
             A hook that allows extensions to provide additional information about the created context
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.ProfilingInformation.Context">
            <summary>
            Additional information that is added by extension
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.Profiling.RequestResultArgs">
            <summary>
            The result of a request made to the server
            </summary>
        </member>
        <member name="M:Raven.Client.Connection.Profiling.RequestResultArgs.#ctor">
            <summary>
            Creates a new instance of <seealso cref="T:Raven.Client.Connection.Profiling.RequestResultArgs"/>
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.AdditionalInformation">
            <summary>
            Any additional information that might be required
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.At">
            <summary>
            When the request completed
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.Status">
            <summary>
            The request status
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.Url">
            <summary>
            The request Url
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.DurationMilliseconds">
            <summary>
            How long this request took
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.Method">
            <summary>
            The request method
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.PostedData">
            <summary>
            The data posted to the server
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.HttpResult">
            <summary>
            The HTTP result for this request
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.Result">
            <summary>
            The result of this request
            </summary>
        </member>
        <member name="P:Raven.Client.Connection.Profiling.RequestResultArgs.TotalSize">
            <summary>
            Total amount of memory used by strings here
            </summary>
        </member>
        <member name="T:Raven.Client.Connection.Profiling.RequestStatus">
            <summary>
            The status of the request
            </summary>
        </member>
        <member name="F:Raven.Client.Connection.Profiling.RequestStatus.SentToServer">
            <summary>
            The request was sent to the server
            </summary>
        </member>
        <member name="F:Raven.Client.Connection.Profiling.RequestStatus.Cached">
            <summary>
            The request was served directly from the local cache
            after checking with the server to see if it was still 
            up to date
            </summary>
        </member>
        <member name="F:Raven.Client.Connection.Profiling.RequestStatus.AggressivelyCached">
            <summary>
            The request was served from the local cache without
            checking with the server and may be out of date
            </summary>
        </member>
        <member name="F:Raven.Client.Connection.Profiling.RequestStatus.ErrorOnServer">
            <summary>
            The server returned an error
            </summary>
        </member>
        <member name="T:Raven.Client.Converters.GuidConverter">
            <summary>
            Convert strings from / to guids
            </summary>
        </member>
        <member name="T:Raven.Client.Converters.ITypeConverter">
            <summary>
            Interface for performing type conversions.
            We couldn't use the built-in TypeConverter because it is too big an interface for people to build on.
            </summary>
        </member>
        <member name="M:Raven.Client.Converters.ITypeConverter.CanConvertFrom(System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
        </member>
        <member name="M:Raven.Client.Converters.ITypeConverter.ConvertFrom(System.String,System.Object,System.Boolean)">
            <summary>
            Converts the given object to the type of this converter.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="tag">The tag prefix to use</param>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
            <param name="allowNull">Whatever null is a valid value</param>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Raven.Client.Converters.ITypeConverter.ConvertTo(System.String)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
        </member>
        <member name="M:Raven.Client.Converters.GuidConverter.CanConvertFrom(System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
        </member>
        <member name="M:Raven.Client.Converters.GuidConverter.ConvertFrom(System.String,System.Object,System.Boolean)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Raven.Client.Converters.GuidConverter.ConvertTo(System.String)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
        </member>
        <member name="T:Raven.Client.Converters.Int32Converter">
            <summary>
            Convert strings from / to int32
            </summary>
        </member>
        <member name="M:Raven.Client.Converters.Int32Converter.CanConvertFrom(System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from. 
                            </param>
        </member>
        <member name="M:Raven.Client.Converters.Int32Converter.ConvertFrom(System.String,System.Object,System.Boolean)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Raven.Client.Converters.Int32Converter.ConvertTo(System.String)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
        </member>
        <member name="T:Raven.Client.Converters.Int64Converter">
            <summary>
            Convert strings from / to int64
            </summary>
        </member>
        <member name="M:Raven.Client.Converters.Int64Converter.CanConvertFrom(System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from. 
                            </param>
        </member>
        <member name="M:Raven.Client.Converters.Int64Converter.ConvertFrom(System.String,System.Object,System.Boolean)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Raven.Client.Converters.Int64Converter.ConvertTo(System.String)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <param name="value">The <see cref="T:System.Object"/> to convert. </param>
        </member>
        <member name="T:Raven.Client.Document.AbstractDocumentQuery`2">
            <summary>
              A query against a Raven index
            </summary>
        </member>
        <member name="T:Raven.Client.Document.IAbstractDocumentQuery`1">
            <summary>
             Mostly used by the linq provider
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WaitForNonStaleResults(System.TimeSpan)">
            <summary>
              Instruct the query to wait for non stale result for the specified wait timeout.
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.GetProjectionFields">
            <summary>
              Gets the fields for projection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.RandomOrdering">
            <summary>
            Order the search results randomly
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.RandomOrdering(System.String)">
            <summary>
            Order the search results randomly using the specified seed
            this is useful if you want to have repeatable random queries
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.AddOrder(System.String,System.Boolean)">
            <summary>
              Adds an ordering for a specific field to the query
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.AddOrder(System.String,System.Boolean,System.Type)">
            <summary>
              Adds an ordering for a specific field to the query and specifies the type of field for sorting purposes
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
            <param name = "fieldType">the type of the field to be sorted.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Include(System.String)">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Take(System.Int32)">
            <summary>
              Takes the specified count.
            </summary>
            <param name = "count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Skip(System.Int32)">
            <summary>
              Skips the specified count.
            </summary>
            <param name = "count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Where(System.String)">
            <summary>
              Filter the results from the index using the specified where clause.
            </summary>
            <param name = "whereClause">The where clause.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereEquals(System.String,System.Object)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereEquals(System.String,System.Object,System.Boolean)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to allow wildcards only if analyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.OpenSubclause">
            <summary>
              Simplified method for opening a new clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.GroupBy(Raven.Abstractions.Data.AggregationOperation,System.String[])">
            <summary>
              Instruct the index to group by the specified fields using the specified aggregation operation
            </summary>
            <remarks>
              This is only valid on dynamic indexes queries
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.CloseSubclause">
            <summary>
              Simplified method for closing a clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereEquals(Raven.Client.WhereParams)">
            <summary>
              Matches exact value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.NegateNext">
            <summary>
             Negate the next operation
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereIn(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Check that the field has one of the specified value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereStartsWith(System.String,System.Object)">
            <summary>
              Matches fields which starts with the specified value.
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereEndsWith(System.String,System.Object)">
            <summary>
              Matches fields which ends with the specified value.
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereBetween(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereBetweenOrEqual(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereGreaterThan(System.String,System.Object)">
            <summary>
              Matches fields where the value is greater than the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereGreaterThanOrEqual(System.String,System.Object)">
            <summary>
              Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereLessThan(System.String,System.Object)">
            <summary>
              Matches fields where the value is less than the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WhereLessThanOrEqual(System.String,System.Object)">
            <summary>
              Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.AndAlso">
            <summary>
              Add an AND to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.OrElse">
            <summary>
              Add an OR to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Boost(System.Decimal)">
            <summary>
              Specifies a boost weight to the last where clause.
              The higher the boost factor, the more relevant the term will be.
            </summary>
            <param name = "boost">boosting factor where 1.0 is default, less than 1.0 is lower weight, greater than 1.0 is higher weight</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Boosting%20a%20Term
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Fuzzy(System.Decimal)">
            <summary>
              Specifies a fuzziness factor to the single word term in the last where clause
            </summary>
            <param name = "fuzzy">0.0 to 1.0 where 1.0 means closer match</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Fuzzy%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Proximity(System.Int32)">
            <summary>
              Specifies a proximity distance for the phrase in the last where clause
            </summary>
            <param name = "proximity">number of words within</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Proximity%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.OrderBy(System.String[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by ascending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name = "fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Highlight(System.String,System.Int32,System.Int32,System.String)">
            <summary>
              Adds matches highlighting for the specified field.
            </summary>
            <remarks>
              The specified field should be analysed and stored for highlighter to work.
              For each match it creates a fragment that contains matched text surrounded by highlighter tags.
            </remarks>
            <param name="fieldName">The field name to highlight.</param>
            <param name="fragmentLength">The fragment length.</param>
            <param name="fragmentCount">The maximum number of fragments for the field.</param>
            <param name="fragmentsField">The field in query results item to put highlightings into.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Highlight(System.String,System.Int32,System.Int32,Raven.Client.FieldHighlightings@)">
            <summary>
              Adds matches highlighting for the specified field.
            </summary>
            <remarks>
              The specified field should be analysed and stored for highlighter to work.
              For each match it creates a fragment that contains matched text surrounded by highlighter tags.
            </remarks>
            <param name="fieldName">The field name to highlight.</param>
            <param name="fragmentLength">The fragment length.</param>
            <param name="fragmentCount">The maximum number of fragments for the field.</param>
            <param name="highlightings">Field highlightings for all results.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.SetHighlighterTags(System.String,System.String)">
            <summary>
              Sets the tags to highlight matches with.
            </summary>
            <param name="preTag">Prefix tag.</param>
            <param name="postTag">Postfix tag.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.SetHighlighterTags(System.String[],System.String[])">
            <summary>
              Sets the tags to highlight matches with.
            </summary>
            <param name="preTags">Prefix tags.</param>
            <param name="postTags">Postfix tags.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WaitForNonStaleResultsAsOfNow">
            <summary>
              Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name = "cutOff">The cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name = "cutOff">The cut off.</param>
            <param name = "waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.WaitForNonStaleResults">
            <summary>
              EXPERT ONLY: Instructs the query to wait for non stale results.
              This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.Search(System.String,System.String,Raven.Client.EscapeQueryOptions)">
            <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Raven.Client.Document.IAbstractDocumentQuery`1.GetLastEqualityTerm(System.Boolean)">
            <summary>
              The last term that we asked the query to use equals on
            </summary>
        </member>
        <member name="P:Raven.Client.Document.IAbstractDocumentQuery`1.IndexQueried">
            <summary>
              Get the name of the index being queried
            </summary>
        </member>
        <member name="P:Raven.Client.Document.IAbstractDocumentQuery`1.DocumentConvention">
            <summary>
            Gets the document convention from the query session
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.negate">
            <summary>
            Whatever to negate the next operation
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.theAsyncDatabaseCommands">
            <summary>
            Async database commands to use
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.indexName">
            <summary>
            The index to query
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.projectionFields">
            <summary>
              The list of fields to project directly from the results
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.fieldsToFetch">
            <summary>
              The list of fields to project directly from the index on the server
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.queryListeners">
            <summary>
            The query listeners for this query
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.theSession">
            <summary>
            The session for this query
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.cutoff">
            <summary>
              The cutoff date to use for detecting staleness in the index
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.orderByFields">
            <summary>
              The fields to order the results by
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.highlightedFields">
            <summary>
              The fields to highlight
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.highlighterPreTags">
            <summary>
              Highlighter pre tags
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.highlighterPostTags">
            <summary>
              Highlighter post tags
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.sortByHints">
            <summary>
              The types to sort the fields by (NULL if not specified)
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.pageSize">
            <summary>
              The page size to use when querying the index
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.queryText">
            <summary>
            The query to use
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.start">
            <summary>
              which record to start reading from
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.timeout">
            <summary>
            Timeout for this query
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.theWaitForNonStaleResults">
            <summary>
            Should we wait for non stale results
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.includes">
            <summary>
            The paths to include when loading the query
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.aggregationOp">
            <summary>
            What aggregated operation to execute
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.groupByFields">
            <summary>
            Fields to group on
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.queryStats">
            <summary>
            Holds the query stats
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.highlightings">
            <summary>
            Holds the query highlightings
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.resultsTransformer">
            <summary>
            The name of the results transformer to use after executing this query
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.disableEntitiesTracking">
            <summary>
            Determines if entities should be tracked and kept in memory
            </summary>
        </member>
        <member name="F:Raven.Client.Document.AbstractDocumentQuery`2.disableCaching">
            <summary>
            Determine if query results should be cached.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.#ctor(Raven.Client.Document.InMemoryDocumentSessionOperations,Raven.Client.Connection.Async.IAsyncDatabaseCommands,System.String,System.String[],System.String[],Raven.Client.Listeners.IDocumentQueryListener[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.AbstractDocumentQuery`2"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.#ctor(Raven.Client.Document.AbstractDocumentQuery{`0,`1})">
            <summary>
              Initializes a new instance of the <see cref="T:Raven.Client.IDocumentQuery`1"/> class.
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#Include(System.String)">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResults(System.TimeSpan)">
            <summary>
              EXPERT ONLY: Instructs the query to wait for non stale results for the specified wait timeout.
              This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#SortByDistance">
            <summary>
            When using spatial queries, instruct the query to sort by the distance from the origin point
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WithinRadiusOf(System.Double,System.Double,System.Double)">
            <summary>
              Filter matches to be inside the specified radius
            </summary>
            <param name = "radius">The radius.</param>
            <param name = "latitude">The latitude.</param>
            <param name = "longitude">The longitude.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WithinRadiusOf(System.Double,System.Double,System.Double,Raven.Abstractions.Indexing.SpatialUnits)">
            <summary>
              Filter matches to be inside the specified radius
            </summary>
            <param name = "radius">The radius.</param>
            <param name = "latitude">The latitude.</param>
            <param name = "longitude">The longitude.</param>
            <param name = "radiusUnits">The units of the <paramref name="radius"/></param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GenerateQueryWithinRadiusOf(System.String,System.Double,System.Double,System.Double,System.Double,System.Nullable{Raven.Abstractions.Indexing.SpatialUnits})">
            <summary>
              Filter matches to be inside the specified radius
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResults">
            <summary>
              EXPERT ONLY: Instructs the query to wait for non stale results.
              This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResults(System.TimeSpan)">
            <summary>
              Instruct the query to wait for non stale result for the specified wait timeout.
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GetProjectionFields">
            <summary>
              Gets the fields for projection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.RandomOrdering">
            <summary>
            Order the search results randomly
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.RandomOrdering(System.String)">
            <summary>
            Order the search results randomly using the specified seed
            this is useful if you want to have repeatable random queries
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.AddOrder(System.String,System.Boolean)">
            <summary>
              Adds an ordering for a specific field to the query
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.AddOrder(System.String,System.Boolean,System.Type)">
            <summary>
              Adds an ordering for a specific field to the query and specifies the type of field for sorting purposes
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
            <param name = "fieldType">the type of the field to be sorted.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Include(System.String)">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Where(System.Func{`0,System.Boolean})">
            <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Count(System.Func{`0,System.Boolean})">
            <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Count">
            <summary>
              This function exists solely to forbid in memory where clause on IDocumentQuery, because
              that is nearly always a mistake.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
              Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name = "path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Take(System.Int32)">
            <summary>
              Takes the specified count.
            </summary>
            <param name = "count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Skip(System.Int32)">
            <summary>
              Skips the specified count.
            </summary>
            <param name = "count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Where(System.String)">
            <summary>
              Filter the results from the index using the specified where clause.
            </summary>
            <param name = "whereClause">The where clause.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereEquals(System.String,System.Object)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereEquals(System.String,System.Object,System.Boolean)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to allow wildcards only if analyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.OpenSubclause">
            <summary>
              Simplified method for opening a new clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GroupBy(Raven.Abstractions.Data.AggregationOperation,System.String[])">
            <summary>
              Instruct the index to group by the specified fields using the specified aggregation operation
            </summary>
            <remarks>
              This is only valid on dynamic indexes queries
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.CloseSubclause">
            <summary>
              Simplified method for closing a clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereEquals(Raven.Client.WhereParams)">
            <summary>
              Matches exact value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.NegateNext">
            <summary>
             Negate the next operation
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereIn(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Check that the field has one of the specified value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereStartsWith(System.String,System.Object)">
            <summary>
              Matches fields which starts with the specified value.
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereEndsWith(System.String,System.Object)">
            <summary>
              Matches fields which ends with the specified value.
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereBetween(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereBetweenOrEqual(System.String,System.Object,System.Object)">
            <summary>
              Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereGreaterThan(System.String,System.Object)">
            <summary>
              Matches fields where the value is greater than the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereGreaterThanOrEqual(System.String,System.Object)">
            <summary>
              Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereLessThan(System.String,System.Object)">
            <summary>
              Matches fields where the value is less than the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WhereLessThanOrEqual(System.String,System.Object)">
            <summary>
              Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name = "fieldName">Name of the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.AndAlso">
            <summary>
              Add an AND to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.OrElse">
            <summary>
              Add an OR to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Boost(System.Decimal)">
            <summary>
              Specifies a boost weight to the last where clause.
              The higher the boost factor, the more relevant the term will be.
            </summary>
            <param name = "boost">boosting factor where 1.0 is default, less than 1.0 is lower weight, greater than 1.0 is higher weight</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Boosting%20a%20Term
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Fuzzy(System.Decimal)">
            <summary>
              Specifies a fuzziness factor to the single word term in the last where clause
            </summary>
            <param name = "fuzzy">0.0 to 1.0 where 1.0 means closer match</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Fuzzy%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Proximity(System.Int32)">
            <summary>
              Specifies a proximity distance for the phrase in the last where clause
            </summary>
            <param name = "proximity">number of words within</param>
            <returns></returns>
            <remarks>
              http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Proximity%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.OrderBy(System.String[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by ascending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name = "fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.OrderByDescending(System.String[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by descending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name = "fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOfNow">
            <summary>
              Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResultsAsOfLastWrite">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResultsAsOfLastWrite(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name = "cutOff">The cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name = "cutOff">The cut off.</param>
            <param name = "waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResultsAsOf(Raven.Abstractions.Data.Etag)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff etag.
            </summary>
            <param name="cutOffEtag">The cut off etag.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResultsAsOf(Raven.Abstractions.Data.Etag,System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff etag for the specified timeout.
            </summary>
            <param name="cutOffEtag">The cut off etag.</param>
            <param name="waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#WaitForNonStaleResultsAsOfNow">
            <summary>
              Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name = "waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name = "cutOff">The cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
              Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name = "cutOff">The cut off.</param>
            <param name = "waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOf(Raven.Abstractions.Data.Etag)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff etag.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOf(Raven.Abstractions.Data.Etag,System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff etag.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOfLastWrite">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResultsAsOfLastWrite(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.WaitForNonStaleResults">
            <summary>
              EXPERT ONLY: Instructs the query to wait for non stale results.
              This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Statistics(Raven.Client.RavenQueryStatistics@)">
            <summary>
            Provide statistics about the query, such as total count of matching records
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.AfterQueryExecuted(System.Action{Raven.Abstractions.Data.QueryResult})">
            <summary>
            Callback to get the results of the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.InvokeAfterQueryExecuted(Raven.Abstractions.Data.QueryResult)">
            <summary>
            Called externally to raise the after query executed callback
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GenerateIndexQuery(System.String)">
            <summary>
              Generates the index query.
            </summary>
            <param name = "query">The query.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Search(System.String,System.String,Raven.Client.EscapeQueryOptions)">
            <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents the query for this instance.
            </summary>
            <returns>
              A <see cref="T:System.String"/> that represents the query for this instance.
            </returns>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.GetLastEqualityTerm(System.Boolean)">
            <summary>
              The last term that we asked the query to use equals on
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#RandomOrdering">
            <summary>
            Order the search results randomly
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.Raven#Client#IDocumentQueryCustomization#RandomOrdering(System.String)">
            <summary>
            Order the search results randomly using the specified seed
            this is useful if you want to have repeatable random queries
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.ToListAsync">
            <summary>
            Returns a list of results for a query asynchronously. 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AbstractDocumentQuery`2.CountAsync">
            <summary>
            Gets the total count of records for this query
            </summary>
        </member>
        <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.IndexQueried">
            <summary>
              Get the name of the index being queried
            </summary>
        </member>
        <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.AsyncIndexQueried">
            <summary>
              Get the name of the index being queried
            </summary>
        </member>
        <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.AsyncDatabaseCommands">
            <summary>
              Grant access to the async database commands
            </summary>
        </member>
        <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.DocumentConvention">
            <summary>
            Gets the document convention from the query session
            </summary>
        </member>
        <member name="P:Raven.Client.Document.AbstractDocumentQuery`2.QueryResultAsync">
            <summary>
              Gets the query result
              Execute the query the first time that this is called.
            </summary>
            <value>The query result.</value>
        </member>
        <member name="T:Raven.Client.Document.AsyncDocumentQuery`1">
            <summary>
            A query against a Raven index
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.#ctor(Raven.Client.Document.InMemoryDocumentSessionOperations,Raven.Client.Connection.Async.IAsyncDatabaseCommands,System.String,System.String[],System.String[],Raven.Client.Listeners.IDocumentQueryListener[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.AsyncDocumentQuery`1"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.#ctor(Raven.Client.Document.AsyncDocumentQuery{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.AbstractDocumentQuery`2"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Include(System.String)">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Take(System.Int32)">
            <summary>
            Takes the specified count.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Skip(System.Int32)">
            <summary>
            Skips the specified count.
            </summary>
            <param name="count">The count.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Where(System.String)">
            <summary>
            Filter the results from the index using the specified where clause.
            </summary>
            <param name="whereClause">The where clause.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereEquals(System.String,System.Object)">
            <summary>
            	Matches exact value
            </summary>
            <remarks>
            	Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereEquals``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to NotAnalyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereEquals(System.String,System.Object,System.Boolean)">
            <summary>
            	Matches exact value
            </summary>
            <remarks>
            	Defaults to allow wildcards only if analyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereEquals``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,System.Boolean)">
            <summary>
              Matches exact value
            </summary>
            <remarks>
              Defaults to allow wildcards only if analyzed
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereEquals(Raven.Client.WhereParams)">
            <summary>
            	Matches exact value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereIn(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Check that the field has one of the specified value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereIn``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Check that the field has one of the specified value
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereStartsWith(System.String,System.Object)">
            <summary>
            Matches fields which starts with the specified value.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereStartsWith``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields which starts with the specified value.
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereEndsWith(System.String,System.Object)">
            <summary>
            Matches fields which ends with the specified value.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereEndsWith``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields which ends with the specified value.
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereBetween(System.String,System.Object,System.Object)">
            <summary>
            Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereBetween``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,``0)">
            <summary>
              Matches fields where the value is between the specified start and end, exclusive
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereBetweenOrEqual(System.String,System.Object,System.Object)">
            <summary>
            Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereBetweenOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,``0)">
            <summary>
              Matches fields where the value is between the specified start and end, inclusive
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "start">The start.</param>
            <param name = "end">The end.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereGreaterThan(System.String,System.Object)">
            <summary>
            Matches fields where the value is greater than the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereGreaterThan``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is greater than the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereGreaterThanOrEqual(System.String,System.Object)">
            <summary>
            Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereGreaterThanOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is greater than or equal to the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereLessThan(System.String,System.Object)">
            <summary>
            Matches fields where the value is less than the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereLessThan``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is less than the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WhereLessThanOrEqual(System.String,System.Object)">
            <summary>
            Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.WhereLessThanOrEqual``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
              Matches fields where the value is less than or equal to the specified value
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "value">The value.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#AndAlso">
            <summary>
            Add an AND to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#OrElse">
            <summary>
            Add an OR to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Boost(System.Decimal)">
            <summary>
            Specifies a boost weight to the last where clause.
            The higher the boost factor, the more relevant the term will be.
            </summary>
            <param name="boost">boosting factor where 1.0 is default, less than 1.0 is lower weight, greater than 1.0 is higher weight</param>
            <returns></returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Boosting%20a%20Term
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Fuzzy(System.Decimal)">
            <summary>
            Specifies a fuzziness factor to the single word term in the last where clause
            </summary>
            <param name="fuzzy">0.0 to 1.0 where 1.0 means closer match</param>
            <returns></returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Fuzzy%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Proximity(System.Int32)">
            <summary>
            Specifies a proximity distance for the phrase in the last where clause
            </summary>
            <param name="proximity">number of words within</param>
            <returns></returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Proximity%20Searches
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WithinRadiusOf(System.Double,System.Double,System.Double,Raven.Abstractions.Indexing.SpatialUnits)">
            <summary>
            Filter matches to be inside the specified radius
            </summary>
            <param name="radius">The radius.</param>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
            <param name="radiusUnits">The units of the <paramref name="radius"/>.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WithinRadiusOf(System.String,System.Double,System.Double,System.Double,Raven.Abstractions.Indexing.SpatialUnits)">
            <summary>
            Filter matches to be inside the specified radius
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#SortByDistance">
            <summary>
            Sorts the query results by distance.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#OrderBy(System.String[])">
            <summary>
            Order the results by the specified fields
            The fields are the names of the fields to sort, defaulting to sorting by ascending.
            You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by ascending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name = "propertySelectors">Property selectors for the fields.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#OrderByDescending(System.String[])">
            <summary>
            Order the results by the specified fields
            The fields are the names of the fields to sort, defaulting to sorting by descending.
            You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name="fields">The fields.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <summary>
              Order the results by the specified fields
              The fields are the names of the fields to sort, defaulting to sorting by descending.
              You can prefix a field name with '-' to indicate sorting by descending or '+' to sort by ascending
            </summary>
            <param name = "propertySelectors">Property selectors for the fields.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResultsAsOfNow">
            <summary>
            Instructs the query to wait for non stale results as of now.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResultsAsOfNow(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of now for the specified timeout.
            </summary>
            <param name="waitTimeout">The wait timeout.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResultsAsOf(System.DateTime)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff date.
            </summary>
            <param name="cutOff">The cut off.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResultsAsOf(System.DateTime,System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff date for the specified timeout
            </summary>
            <param name="cutOff">The cut off.</param>
            <param name="waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResultsAsOf(Raven.Abstractions.Data.Etag)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff etag.
            </summary>
            <param name="cutOffEtag">The cut off etag.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResultsAsOf(Raven.Abstractions.Data.Etag,System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the cutoff etag for the specified timeout.
            </summary>
            <param name="cutOffEtag">The cut off etag.</param>
            <param name="waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResultsAsOfLastWrite">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResultsAsOfLastWrite(System.TimeSpan)">
            <summary>
            Instructs the query to wait for non stale results as of the last write made by any session belonging to the 
            current document store.
            This ensures that you'll always get the most relevant results for your scenarios using simple indexes (map only or dynamic queries).
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this etag belong to is actually considered for the results. 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResults">
            <summary>
            EXPERT ONLY: Instructs the query to wait for non stale results.
            This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#BeforeQueryExecution(System.Action{Raven.Abstractions.Data.IndexQuery})">
            <summary>
            Allows you to modify the index query before it is sent to the server
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#WaitForNonStaleResults(System.TimeSpan)">
            <summary>
            EXPERT ONLY: Instructs the query to wait for non stale results for the specified wait timeout.
            This shouldn't be used outside of unit tests unless you are well aware of the implications
            </summary>
            <param name="waitTimeout">The wait timeout.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.SelectFields``1">
            <summary>
            Selects all the projection fields directly from the index
            </summary>
            <typeparam name="TProjection">The type of the projection.</typeparam>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.SelectFields``1(System.String[])">
            <summary>
            Selects the specified fields directly from the index
            </summary>
            <typeparam name="TProjection">The type of the projection.</typeparam>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.SelectFields``1(System.String[],System.String[])">
            <summary>
            Selects the specified fields directly from the index
            </summary>
            <typeparam name="TProjection">The type of the projection.</typeparam>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#AddOrder(System.String,System.Boolean)">
            <summary>
            Adds an ordering for a specific field to the query
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#OrderByScore">
            <summary>
            Adds an ordering by score for a specific field to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#OrderByScoreDescending">
            <summary>
            Adds an ordering by score descending for a specific field to the query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.AddOrder``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
              Adds an ordering for a specific field to the query
            </summary>
            <param name = "propertySelector">Property selector for the field.</param>
            <param name = "descending">if set to <c>true</c> [descending].</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#RandomOrdering">
            <summary>
            Order the search results randomly
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#RandomOrdering(System.String)">
            <summary>
            Order the search results randomly using the specified seed
            this is useful if you want to have repeatable random queries
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#AddOrder(System.String,System.Boolean,System.Type)">
            <summary>
            Adds an ordering for a specific field to the query and specifies the type of field for sorting purposes
            </summary>
            <param name="fieldName">Name of the field.</param>
            <param name="descending">if set to <c>true</c> [descending].</param>
            <param name="fieldType">the type of the field to be sorted.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#OpenSubclause">
            <summary>
            Simplified method for opening a new clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Search(System.String,System.String)">
            <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Search``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#CloseSubclause">
            <summary>
            Simplified method for closing a clause within the query
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.GroupBy``1(Raven.Abstractions.Data.AggregationOperation,System.Linq.Expressions.Expression{System.Func{`0,``0}}[])">
            <summary>
              Instruct the index to group by the specified fields using the specified aggregation operation
            </summary>
            <remarks>
              This is only valid on dynamic indexes queries
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Intersect">
            <summary>
            Partition the query so we can intersect different parts of the query
            across different index entries.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#GroupBy(Raven.Abstractions.Data.AggregationOperation,System.String[])">
            <summary>
             Instruct the index to group by the specified fields using the specified aggregation operation
            </summary>
             <remarks>
             This is only valid on dynamic indexes queries
             </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Statistics(Raven.Client.RavenQueryStatistics@)">
            <summary>
            Provide statistics about the query, such as total count of matching records
            </summary>
        </member>
        <member name="M:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#SetResultTransformer(System.String)">
            <summary>
            Sets a transformer to use after executing a query
            </summary>
            <param name="resultsTransformer"></param>
        </member>
        <member name="P:Raven.Client.Document.AsyncDocumentQuery`1.Raven#Client#IDocumentQueryBase{T@Raven#Client#IAsyncDocumentQuery{T}}#Not">
            <summary>
            Negate the next operation
            </summary>
        </member>
        <member name="T:Raven.Client.Document.AsyncMultiLoaderWithInclude`1">
            <summary>
            Fluent implementation for specifying include paths for loading documents
            </summary>
        </member>
        <member name="T:Raven.Client.Document.IAsyncLoaderWithInclude`1">
            <summary>
            Fluent interface for specifying include paths
            for loading documents
            </summary>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.Include(System.String)">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.LoadAsync(System.String[])">
            <summary>
            Begins the async multi-load operation
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.LoadAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Begins the async multi-load operation
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.LoadAsync(System.String)">
            <summary>
            Begins the async load operation
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.LoadAsync(System.ValueType)">
            <summary>
            Begins the async load operation, with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(1)
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.LoadAsync(System.ValueType[])">
            <summary>
            Begins the async multi-load operation, with the specified ids after applying
            conventions on the provided ids to get the real document ids.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(1,2,3)
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.LoadAsync(System.Collections.Generic.IEnumerable{System.ValueType})">
            <summary>
            Begins the async multi-load operation, with the specified ids after applying
            conventions on the provided ids to get the real document ids.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(new List&lt;int&gt;(){1,2,3})
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.LoadAsync``1(System.String[])">
            <summary>
            Begins the async multi-load operation
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.LoadAsync``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Begins the async multi-load operation
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.LoadAsync``1(System.String)">
            <summary>
            Begins the async load operation
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.LoadAsync``1(System.ValueType)">
            <summary>
            Begins the async load operation, with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(1)
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.LoadAsync``1(System.ValueType[])">
            <summary>
            Begins the async multi-load operation, with the specified ids after applying
            conventions on the provided ids to get the real document ids.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(1,2,3)
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.IAsyncLoaderWithInclude`1.LoadAsync``1(System.Collections.Generic.IEnumerable{System.ValueType})">
            <summary>
            Begins the async multi-load operation, with the specified ids after applying
            conventions on the provided ids to get the real document ids.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(new List&lt;int&gt;(){1,2,3})
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.Include(System.String)">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.Include``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.LoadAsync(System.String[])">
            <summary>
            Begins the async multi-load operation
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.LoadAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Begins the async multi-load operation
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.LoadAsync(System.String)">
            <summary>
            Begins the async load operation
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.LoadAsync(System.ValueType)">
            <summary>
            Begins the async load operation, with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(1)
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.LoadAsync(System.ValueType[])">
            <summary>
            Begins the async multi-load operation, with the specified ids after applying
            conventions on the provided ids to get the real document ids.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(1,2,3)
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.LoadAsync(System.Collections.Generic.IEnumerable{System.ValueType})">
            <summary>
            Begins the async multi-load operation, with the specified ids after applying
            conventions on the provided ids to get the real document ids.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(new List&lt;int&gt;(){1,2,3})
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.#ctor(Raven.Client.IAsyncDocumentSessionImpl)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.AsyncMultiLoaderWithInclude`1"/> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.LoadAsync``1(System.String[])">
            <summary>
            Begins the async multi-load operation
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.LoadAsync``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Begins the async multi-load operation
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.LoadAsync``1(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="id">The id.</param>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.LoadAsync``1(System.ValueType)">
            <summary>
            Begins the async load operation, with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(1)
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.LoadAsync``1(System.ValueType[])">
            <summary>
            Begins the async multi-load operation, with the specified ids after applying
            conventions on the provided ids to get the real document ids.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(1,2,3)
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.AsyncMultiLoaderWithInclude`1.LoadAsync``1(System.Collections.Generic.IEnumerable{System.ValueType})">
            <summary>
            Begins the async multi-load operation, with the specified ids after applying
            conventions on the provided ids to get the real document ids.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(new List&lt;int&gt;(){1,2,3})
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="T:Raven.Client.Document.DefaultRavenContractResolver">
            <summary>
            The default json contract will serialize all properties and all public fields
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Serialization.DefaultContractResolver">
            <summary>
            Used by <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/> to resolves a <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonContract"/> for a given <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Serialization.IContractResolver">
            <summary>
            Used by <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/> to resolves a <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonContract"/> for a given <see cref="T:System.Type"/>.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverObject" title="IContractResolver Class"/>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverExample" title="IContractResolver Example"/>
            </example>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.IContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.DefaultContractResolver"/> class.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.DefaultContractResolver"/> class.
            </summary>
            <param name="shareCache">
            If set to <c>true</c> the <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.DefaultContractResolver"/> will use a cached shared with other resolvers of the same type.
            Sharing the cache will significantly performance because expensive reflection will only happen once but could cause unexpected
            behavior if different instances of the resolver are suppose to produce different results. When set to false it is highly
            recommended to reuse <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.DefaultContractResolver"/> instances with the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/>.
            </param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)">
            <summary>
            Gets the serializable members for the type.
            </summary>
            <param name="objectType">The type to get serializable members for.</param>
            <returns>The serializable members for the type.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)">
            <summary>
            Creates a <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonObjectContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonObjectContract"/> for the given type.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo,Raven.Imports.Newtonsoft.Json.Serialization.JsonPropertyCollection)">
            <summary>
            Creates the constructor parameters.
            </summary>
            <param name="constructor">The constructor to create properties for.</param>
            <param name="memberProperties">The type's member properties.</param>
            <returns>Properties for the given <see cref="T:System.Reflection.ConstructorInfo"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty,System.Reflection.ParameterInfo)">
            <summary>
            Creates a <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
            <param name="matchingMemberProperty">The matching member property.</param>
            <param name="parameterInfo">The constructor parameter.</param>
            <returns>A created <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.ParameterInfo"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)">
            <summary>
            Resolves the default <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/> for the contract.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>The contract's default <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)">
            <summary>
            Creates a <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonDictionaryContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonDictionaryContract"/> for the given type.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)">
            <summary>
            Creates a <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonArrayContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonArrayContract"/> for the given type.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)">
            <summary>
            Creates a <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonPrimitiveContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonPrimitiveContract"/> for the given type.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)">
            <summary>
            Creates a <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonLinqContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonLinqContract"/> for the given type.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDynamicContract(System.Type)">
            <summary>
            Creates a <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonDynamicContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonDynamicContract"/> for the given type.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)">
            <summary>
            Creates a <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonStringContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonStringContract"/> for the given type.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)">
            <summary>
            Determines which contract type is created for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonContract"/> for the given type.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type,Raven.Imports.Newtonsoft.Json.MemberSerialization)">
            <summary>
            Creates properties for the given <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonContract"/>.
            </summary>
            <param name="type">The type to create properties for.</param>
            /// <param name="memberSerialization">The member serialization mode for the type.</param>
            <returns>Properties for the given <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonContract"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
            <summary>
            Creates the <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.IValueProvider"/> used by the serializer to get and set values from a member.
            </summary>
            <param name="member">The member.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.IValueProvider"/> used by the serializer to get and set values from a member.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,Raven.Imports.Newtonsoft.Json.MemberSerialization)">
            <summary>
            Creates a <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="memberSerialization">The member's parent <see cref="T:Raven.Imports.Newtonsoft.Json.MemberSerialization"/>.</param>
            <param name="member">The member to create a <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty"/> for.</param>
            <returns>A created <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)">
            <summary>
            Resolves the name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Name of the property.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(System.String)">
            <summary>
            Gets the resolved name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Name of the property.</returns>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.DefaultContractResolver.DynamicCodeGeneration">
            <summary>
            Gets a value indicating whether members are being get and set using dynamic code generation.
            This value is determined by the runtime permissions available.
            </summary>
            <value>
            	<c>true</c> if using dynamic code generation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultMembersSearchFlags">
            <summary>
            Gets or sets the default members search flags.
            </summary>
            <value>The default members search flags.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.DefaultContractResolver.SerializeCompilerGeneratedMembers">
            <summary>
            Gets or sets a value indicating whether compiler generated members should be serialized.
            </summary>
            <value>
            	<c>true</c> if serialized compiler generated members; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Raven.Client.Document.DefaultRavenContractResolver.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DefaultRavenContractResolver"/> class.
            </summary>
            <param name="shareCache">If set to <c>true</c> the <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.DefaultContractResolver"/> will use a cached shared with other resolvers of the same type.
            Sharing the cache will significantly performance because expensive reflection will only happen once but could cause unexpected
            behavior if different instances of the resolver are suppose to produce different results. When set to false it is highly
            recommended to reuse <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.DefaultContractResolver"/> instances with the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/>.</param>
        </member>
        <member name="M:Raven.Client.Document.DefaultRavenContractResolver.GetSerializableMembers(System.Type)">
            <summary>
            Gets the serializable members for the type.
            </summary>
            <param name="objectType">The type to get serializable members for.</param>
            <returns>The serializable members for the type.</returns>
        </member>
        <member name="T:Raven.Client.Document.DocumentConvention">
            <summary>
            The set of conventions used by the <see cref="T:Raven.Client.Document.DocumentStore"/> which allow the users to customize
            the way the Raven client API behaves
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DocumentConvention"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.DefaultFindFullDocumentKeyFromNonStringIdentifier(System.Object,System.Type,System.Boolean)">
            <summary>
             Find the full document name assuming that we are using the standard conventions
             for generating a document key
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.GenerateDocumentKeyUsingIdentity(Raven.Client.Document.DocumentConvention,System.Object)">
            <summary>
            Generates the document key using identity.
            </summary>
            <param name="conventions">The conventions.</param>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.DefaultTypeTagName(System.Type)">
            <summary>
            Get the default tag name for the specified type.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.GetTypeTagName(System.Type)">
            <summary>
            Gets the name of the type tag.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.GetIdentityProperty(System.Type)">
            <summary>
            Gets the identity property.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.RegisterAsyncIdConvention``1(System.Func{System.String,Raven.Client.Connection.Async.IAsyncDatabaseCommands,``0,System.Threading.Tasks.Task{System.String}})">
            <summary>
            Register an async id convention for a single type (and all of its derived types.
            Note that you can still fall back to the DocumentKeyGenerator if you want.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.CreateSerializer">
            <summary>
            Creates the serializer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.GetClrType(System.String,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
            Get the CLR type (if exists) from the document
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.GetClrTypeName(System.Type)">
            <summary>
             Get the CLR type name to be stored in the entity metadata
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentConvention.Clone">
            <summary>
            Clone the current conventions to a new instance
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FailoverBehavior">
            <summary>
            How should we behave in a replicated environment when we can't 
            reach the primary node and need to failover to secondary node(s).
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.CustomizeJsonSerializer">
            <summary>
            Register an action to customize the json serializer used by the <see cref="T:Raven.Client.Document.DocumentStore"/>
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.DisableProfiling">
            <summary>
            Disable all profiling support
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.AllowMultipuleAsyncOperations">
            <summary>
            Enable multipule async operations
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.IdentityTypeConvertors">
            <summary>
             A list of type converters that can be used to translate the document key (string)
             to whatever type it is that is used on the entity, if the type isn't already a string
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.IdentityPartsSeparator">
            <summary>
            Gets or sets the identity parts separator used by the HiLo generators
            </summary>
            <value>The identity parts separator.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.MaxNumberOfRequestsPerSession">
            <summary>
            Gets or sets the default max number of requests per session.
            </summary>
            <value>The max number of requests per session.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.AllowQueriesOnId">
            <summary>
            Whatever to allow queries on document id.
            By default, queries on id are disabled, because it is far more efficient
            to do a Load() than a Query() if you already know the id.
            This is NOT recommended and provided for backward compatibility purposes only.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.DefaultQueryingConsistency">
            <summary>
            The consistency options used when querying the database by default
            Note that this option impact only queries, since we have Strong Consistency model for the documents
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindClrType">
            <summary>
            Gets or sets the function to find the clr type of a document.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindClrTypeName">
            <summary>
            Gets or sets the function to find the clr type name from a clr type
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindFullDocumentKeyFromNonStringIdentifier">
            <summary>
            Gets or sets the function to find the full document key based on the type of a document
            and the value type identifier (just the numeric part of the id).
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.JsonContractResolver">
            <summary>
            Gets or sets the json contract resolver.
            </summary>
            <value>The json contract resolver.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindTypeTagName">
            <summary>
            Gets or sets the function to find the type tag.
            </summary>
            <value>The name of the find type tag.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindPropertyNameForIndex">
            <summary>
            Gets or sets the function to find the indexed property name
            given the indexed document type, the index name, the current path and the property path.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindPropertyNameForDynamicIndex">
            <summary>
            Gets or sets the function to find the indexed property name
            given the indexed document type, the index name, the current path and the property path.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.ShouldCacheRequest">
            <summary>
            Whatever or not RavenDB should cache the request to the specified url.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindIdentityProperty">
            <summary>
            Gets or sets the function to find the identity property.
            </summary>
            <value>The find identity property.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindIdentityPropertyNameFromEntityName">
            <summary>
            Get or sets the function to get the identity property name from the entity name
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.AsyncDocumentKeyGenerator">
            <summary>
            Gets or sets the document key generator.
            </summary>
            <value>The document key generator.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.UseParallelMultiGet">
            <summary>
            Instruct RavenDB to parallel Multi Get processing 
            when handling lazy requests
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.ShouldAggressiveCacheTrackChanges">
            <summary>
            Whatever or not RavenDB should in the aggressive cache mode use Changes API to track
            changes and rebuild the cache. This will make that outdated data will be revalidated
            to make the cache more updated, however it is still possible to get a state result because of the time
            needed to receive the notification and forcing to check for cached data.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.ShouldSaveChangesForceAggressiveCacheCheck">
            <summary>
            Whatever or not RavenDB should in the aggressive cache mode should force the aggresive cache
            to check with the server after we called SaveChanges() on a non empty data set.
            This will make any outdated data revalidated, and will work nicely as long as you have just a 
            single client. For multiple clients, <see cref="P:Raven.Client.Document.DocumentConvention.ShouldAggressiveCacheTrackChanges"/>.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.HandleUnauthorizedResponse">
            <summary>
            Handles unauthenticated responses, usually by authenticating against the oauth server
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.HandleForbiddenResponse">
            <summary>
            Handles forbidden responses
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.HandleUnauthorizedResponseAsync">
            <summary>
            Begins handling of unauthenticated responses, usually by authenticating against the oauth server
            in async manner
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.HandleForbiddenResponseAsync">
            <summary>
            Begins handling of forbidden responses
            in async manner
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.FindIdValuePartForValueTypeConversion">
            <summary>
            When RavenDB needs to convert between a string id to a value type like int or guid, it calls
            this to perform the actual work
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.SaveEnumsAsIntegers">
            <summary>
            Saves Enums as integers and instruct the Linq provider to query enums as integer values.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.TransformTypeTagNameToDocumentKeyPrefix">
            <summary>
            Translate the type tag name to the document key prefix
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.EnlistInDistributedTransactions">
            <summary>
             Whatever or not RavenDB will automatically enlist in distributed transactions
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.ApplyReduceFunction">
            <summary>
            This is called in order to ensure that reduce function in a sharded environment is run 
            over the merged results
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.ReplicationInformerFactory">
            <summary>
            This is called to provide replication behavior for the client. You can customize 
            this to inject your own replication / failover logic.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentConvention.MaxFailoverCheckPeriod">
            <summary>
            The maximum amount of time that we will wait before checking
            that a failed node is still up or not.
            Default: 5 minutes
            </summary>
        </member>
        <member name="T:Raven.Client.Document.ConsistencyOptions">
            <summary>
            The consistency options for all queries, fore more details about the consistency options, see:
            http://www.allthingsdistributed.com/2008/12/eventually_consistent.html
            
            Note that this option impact only queries, since we have Strong Consistency model for the documents
            </summary>
        </member>
        <member name="F:Raven.Client.Document.ConsistencyOptions.None">
            <summary>
            Ensures that after querying an index at time T, you will never see the results
            of the index at a time prior to T.
            This is ensured by the server, and require no action from the client
            </summary>
        </member>
        <member name="F:Raven.Client.Document.ConsistencyOptions.AlwaysWaitForNonStaleResultsAsOfLastWrite">
            <summary>
             After updating a documents, will only accept queries which already indexed the updated value.
            </summary>
        </member>
        <member name="F:Raven.Client.Document.ConsistencyOptions.QueryYourWrites">
            <summary>
            Use AlwaysWaitForNonStaleResultsAsOfLastWrite, instead
            </summary>
        </member>
        <member name="F:Raven.Client.Document.ConsistencyOptions.MonotonicRead">
            <summary>
            Use None, instead
            </summary>
        </member>
        <member name="T:Raven.Client.Document.DocumentSessionListeners">
            <summary>
            Holder for all the listeners for the session
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentSessionListeners.#ctor">
            <summary>
            Create a new instance of this class
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentSessionListeners.ConversionListeners">
            <summary>
            The conversion listeners
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentSessionListeners.ExtendedConversionListeners">
            <summary>
            The extended conversion listeners
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentSessionListeners.QueryListeners">
            <summary>
            The query listeners allow to modify queries before it is executed
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentSessionListeners.StoreListeners">
            <summary>
            The store listeners
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentSessionListeners.DeleteListeners">
            <summary>
            The delete listeners
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentSessionListeners.ConflictListeners">
            <summary>
            The conflict listeners
            </summary>
        </member>
        <member name="T:Raven.Client.Document.DocumentStore">
            <summary>
            Manages access to RavenDB and open sessions to work with RavenDB.
            </summary>
        </member>
        <member name="F:Raven.Client.Document.DocumentStore.currentSessionId">
            <summary>
            The current session id - only used during construction
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.DocumentStore"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.Initialize">
            <summary>
            Initializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.AssertValidConfiguration">
            <summary>
            validate the configuration for the document store
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.InitializeInternal">
            <summary>
            Initialize the document store access method to RavenDB
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.DisableAggressiveCaching">
            <summary>
            Setup the context for no aggressive caching
            </summary>
            <remarks>
            This is mainly useful for internal use inside RavenDB, when we are executing
            queries that have been marked with WaitForNonStaleResults, we temporarily disable
            aggressive caching.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.Changes(System.String)">
            <summary>
            Subscribe to change notifications from the server
            </summary>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.AggressivelyCacheFor(System.TimeSpan)">
            <summary>
            Setup the context for aggressive caching.
            </summary>
            <param name="cacheDuration">Specify the aggressive cache duration</param>
            <remarks>
            Aggressive caching means that we will not check the server to see whatever the response
            we provide is current or not, but will serve the information directly from the local cache
            without touching the server.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.SetRequestsTimeoutFor(System.TimeSpan)">
            <summary>
            Setup the WebRequest timeout for the session
            </summary>
            <param name="timeout">Specify the timeout duration</param>
            <remarks>
            Sets the timeout for the JsonRequest.  Scoped to the Current Thread.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.OpenAsyncSession">
            <summary>
            Opens the async session.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.DocumentStore.OpenAsyncSession(System.String)">
            <summary>
            Opens the async session.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.HasJsonRequestFactory">
            <summary>
            Whatever this instance has json request factory available
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.JsonRequestFactory">
            <summary>
             Get the <see cref="T:Raven.Client.Silverlight.Connection.HttpJsonRequestFactory"/> for the stores
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.AsyncDatabaseCommands">
            <summary>
            Gets the async database commands.
            </summary>
            <value>The async database commands.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.Credentials">
            <summary>
            Gets or sets the credentials.
            </summary>
            <value>The credentials.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.Identifier">
            <summary>
            Gets or sets the identifier for this store.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.ApiKey">
            <summary>
            The API Key to use when authenticating against a RavenDB server that
            supports API Key authentication
            </summary>
        </member>
        <member name="P:Raven.Client.Document.DocumentStore.DefaultDatabase">
            <summary>
            Gets or sets the default database name.
            </summary>
            <value>The default database name.</value>
        </member>
        <member name="E:Raven.Client.Document.DocumentStore.AfterDispose">
            <summary>
            Called after dispose is completed
            </summary>
        </member>
        <member name="M:Raven.Client.Document.EntityToJson.EntitiesToJsonCachingScope">
            <summary>
            All calls to convert an entity to a json object would be cache
            This is used inside the SaveChanges() action, where we need to access the entities json
            in several disparate places.
            
            Note: This assumes that no modifications can happen during the SaveChanges. This is naturally true
            Note: for SaveChanges (and multi threaded access will cause undefined behavior anyway).
            Note: For SaveChangesAsync, the same holds true as well.
            </summary>
        </member>
        <member name="P:Raven.Client.Document.EntityToJson.Listeners">
            <summary>
            All the listeners for this session
            </summary>
        </member>
        <member name="T:Raven.Client.Document.FailoverBehavior">
            <summary>
            Options for handling failover scenarios in replication environment
            </summary>
        </member>
        <member name="F:Raven.Client.Document.FailoverBehavior.AllowReadsFromSecondaries">
            <summary>
            Allow to read from the secondary server(s), but immediately fail writes
            to the secondary server(s).
            </summary>
            <remarks>
            This is usually the safest approach, because it means that you can still serve
            read requests when the primary node is down, but don't have to deal with replication
            conflicts if there are writes to the secondary when the primary node is down.
            </remarks>
        </member>
        <member name="F:Raven.Client.Document.FailoverBehavior.AllowReadsFromSecondariesAndWritesToSecondaries">
            <summary>
            Allow reads from and writes to secondary server(s).
            </summary>
            <remarks>
            Choosing this option requires that you'll have some way of propagating changes
            made to the secondary server(s) to the primary node when the primary goes back
            up. 
            A typical strategy to handle this is to make sure that the replication is setup
            in a master/master relationship, so any writes to the secondary server will be 
            replicated to the master server.
            Please note, however, that this means that your code must be prepared to handle
            conflicts in case of different writes to the same document across nodes.
            </remarks>
        </member>
        <member name="F:Raven.Client.Document.FailoverBehavior.FailImmediately">
            <summary>
            Immediately fail the request, without attempting any failover. This is true for both 
            reads and writes. The RavenDB client will not even check that you are using replication.
            </summary>
            <remarks>
            This is mostly useful when your replication setup is meant to be used for backups / external
            needs, and is not meant to be a failover storage.
            </remarks>
        </member>
        <member name="F:Raven.Client.Document.FailoverBehavior.ReadFromAllServers">
            <summary>
            Read requests will be spread across all the servers, instead of doing all the work against the master.
            Write requests will always go to the master.
            </summary>
            <remarks>
            This is useful for striping, spreading the read load among multiple servers. The idea is that this will give us better read performance overall.
            A single session will always use the same server, we don't do read striping within a single session.
            Note that using this means that you cannot set UserOptimisticConcurrency to true, because that would generate concurrency exceptions.
            If you want to use that, you have to open the session with ForceReadFromMaster set to true.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.GenerateEntityIdOnTheClient.TryGetIdFromInstance(System.Object,System.String@)">
            <summary>
            Attempts to get the document key from an instance 
            </summary>
        </member>
        <member name="M:Raven.Client.Document.GenerateEntityIdOnTheClient.GetOrGenerateDocumentKey(System.Object)">
            <summary>
            Tries to get the identity.
            </summary>
            <param name="entity">The entity.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.GenerateEntityIdOnTheClient.TrySetIdentity(System.Object,System.String)">
            <summary>
            Tries to set the identity property
            </summary>
            <param name="entity">The entity.</param>
            <param name="id">The id.</param>
        </member>
        <member name="T:Raven.Client.Document.InMemoryDocumentSessionOperations">
            <summary>
            Abstract implementation for in memory session operations
            </summary>
        </member>
        <member name="F:Raven.Client.Document.InMemoryDocumentSessionOperations.deletedEntities">
            <summary>
            The entities waiting to be deleted
            </summary>
        </member>
        <member name="F:Raven.Client.Document.InMemoryDocumentSessionOperations.knownMissingIds">
            <summary>
            Entities whose id we already know do not exists, because they are a missing include, or a missing load, etc.
            </summary>
        </member>
        <member name="F:Raven.Client.Document.InMemoryDocumentSessionOperations.entitiesAndMetadata">
            <summary>
            hold the data required to manage the data for RavenDB's Unit of Work
            </summary>
        </member>
        <member name="F:Raven.Client.Document.InMemoryDocumentSessionOperations.entitiesByKey">
            <summary>
            Translate between a key and its associated entity
            </summary>
        </member>
        <member name="F:Raven.Client.Document.InMemoryDocumentSessionOperations.listeners">
            <summary>
            all the listeners for this session
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.#ctor(System.String,Raven.Client.DocumentStoreBase,Raven.Client.Document.DocumentSessionListeners,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.InMemoryDocumentSessionOperations"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.GetEtagFor``1(``0)">
            <summary>
            Gets the ETag for the specified entity.
            If the entity is transient, it will load the etag from the store
            and associate the current state of the entity with the etag from the server.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.GetMetadataFor``1(``0)">
            <summary>
            Gets the metadata for the specified entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.GetJsonDocument(System.String)">
            <summary>
            Get the json document by key from the store
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.IsLoaded(System.String)">
            <summary>
            Returns whatever a document with the specified id is loaded in the 
            current session
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.IsDeleted(System.String)">
            <summary>
            Returns whatever a document with the specified id is deleted 
            or known to be missing
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.GetDocumentId(System.Object)">
            <summary>
            Gets the document id.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.HasChanged(System.Object)">
            <summary>
            Determines whether the specified entity has changed.
            </summary>
            <param name="entity">The entity.</param>
            <returns>
            	<c>true</c> if the specified entity has changed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.TrackEntity``1(Raven.Abstractions.Data.JsonDocument)">
            <summary>
            Tracks the entity inside the unit of work
            </summary>
            <typeparam name="T"></typeparam>
            <param name="documentFound">The document found.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.TrackEntity``1(System.String,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject,System.Boolean)">
            <summary>
            Tracks the entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="document">The document.</param>
            <param name="metadata">The metadata.</param>'
            <param name="noTracking"></param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.TrackEntity(System.Type,Raven.Abstractions.Data.JsonDocument)">
            <summary>
            Tracks the entity inside the unit of work
            </summary>
            <param name="entityType"></param>
            <param name="documentFound">The document found.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.TrackEntity(System.Type,System.String,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject,System.Boolean)">
            <summary>
            Tracks the entity.
            </summary>
            <param name="key">The key.</param>
            <param name="document">The document.</param>
            <param name="metadata">The metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.ConvertToEntity(System.Type,System.String,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
            Converts the json document to an entity.
            </summary>
            <param name="entityType"></param>
            <param name="id">The id.</param>
            <param name="documentFound">The document found.</param>
            <param name="metadata">The metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value of the specified type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Delete``1(``0)">
            <summary>
            Marks the specified entity for deletion. The entity will be deleted when SaveChanges is called.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.ConvertToEntity``1(System.String,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
            Converts the json document to an entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">The id.</param>
            <param name="documentFound">The document found.</param>
            <param name="metadata">The metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Store(System.Object)">
            <summary>
            Stores the specified entity in the session. The entity will be saved when SaveChanges is called.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Store(System.Object,Raven.Abstractions.Data.Etag)">
            <summary>
            Stores the specified entity in the session. The entity will be saved when SaveChanges is called.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Store(System.Object,System.String)">
            <summary>
            Stores the specified entity in the session, explicitly specifying its Id. The entity will be saved when SaveChanges is called.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Store(System.Object,Raven.Abstractions.Data.Etag,System.String)">
            <summary>
            Stores the specified entity in the session, explicitly specifying its Id. The entity will be saved when SaveChanges is called.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.CreatePutEntityCommand(System.Object,Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata)">
            <summary>
            Creates the put entity command.
            </summary>
            <param name="entity">The entity.</param>
            <param name="documentMetadata">The document metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.UpdateBatchResults(System.Collections.Generic.IList{Raven.Abstractions.Data.BatchResult},Raven.Client.Document.InMemoryDocumentSessionOperations.SaveChangesData)">
            <summary>
            Updates the batch results.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.PrepareForSaveChanges">
            <summary>
            Prepares for save changes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.MarkReadOnly(System.Object)">
            <summary>
            Mark the entity as read only, change tracking won't apply 
            to such an entity. This can be done as an optimization step, so 
            we don't need to check the entity for changes.
            This flag is persisted in the document metadata and subsequent modifications of the document will not be possible.
            If you want the session to ignore this entity, consider using the Evict() method.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.EntityChanged(System.Object,Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata)">
            <summary>
            Determines if the entity have changed.
            </summary>
            <param name="entity">The entity.</param>
            <param name="documentMetadata">The document metadata.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Evict``1(``0)">
            <summary>
            Evicts the specified entity from the session.
            Remove the entity from the delete queue and stops tracking changes for this entity.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Clear">
            <summary>
            Clears this instance.
            Remove all entities from the delete queue and stops tracking changes for all entities.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Defer(Raven.Abstractions.Commands.ICommandData[])">
            <summary>
            Defer commands to be executed on SaveChanges()
            </summary>
            <param name="commands">The commands to be executed</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Commit(System.String)">
            <summary>
            Commits the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Document.InMemoryDocumentSessionOperations.Rollback(System.String)">
            <summary>
            Rollbacks the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.Id">
            <summary>
            The session id 
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DatabaseName">
            <summary>
            The database name for this session
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentStore">
            <summary>
             The document store associated with this session
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NumberOfRequests">
            <summary>
            Gets the number of requests for this session
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NumberOfEntitiesInUnitOfWork">
            <summary>
            Gets the number of entities held in memory to manage Unit of Work
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NonAuthoritativeInformationTimeout">
            <summary>
            Gets or sets the timeout to wait for authoritative information if encountered non authoritative document.
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.StoreIdentifier">
            <summary>
            Gets the store identifier for this session.
            The store identifier is the identifier for the particular RavenDB instance.
            </summary>
            <value>The store identifier.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.Conventions">
            <summary>
            Gets the conventions used by this session
            </summary>
            <value>The conventions.</value>
            <remarks>
            This instance is shared among all sessions, changes to the <see cref="T:Raven.Client.Document.DocumentConvention"/> should be done
            via the <see cref="T:Raven.Client.IDocumentStore"/> instance, not on a single session.
            </remarks>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.ResourceManagerId">
            <summary>
            The transaction resource manager identifier
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.MaxNumberOfRequestsPerSession">
            <summary>
            Gets or sets the max number of requests per session.
            If the <see cref="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NumberOfRequests"/> rise above <see cref="P:Raven.Client.Document.InMemoryDocumentSessionOperations.MaxNumberOfRequestsPerSession"/>, an exception will be thrown.
            </summary>
            <value>The max number of requests per session.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.UseOptimisticConcurrency">
            <summary>
            Gets or sets a value indicating whether the session should use optimistic concurrency.
            When set to <c>true</c>, a check is made so that a change made behind the session back would fail
            and raise <see cref="T:Raven.Abstractions.Exceptions.ConcurrencyException"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.HasChanges">
            <summary>
            Gets a value indicating whether any of the entities tracked by the session has changes.
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.AllowNonAuthoritativeInformation">
            <summary>
            Gets or sets a value indicating whether non authoritative information is allowed.
            Non authoritative information is document that has been modified by a transaction that hasn't been committed.
            The server provides the latest committed version, but it is known that attempting to write to a non authoritative document
            will fail, because it is already modified.
            If set to <c>false</c>, the session will wait <see cref="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NonAuthoritativeInformationTimeout"/> for the transaction to commit to get an
            authoritative information. If the wait is longer than <see cref="P:Raven.Client.Document.InMemoryDocumentSessionOperations.NonAuthoritativeInformationTimeout"/>, <see cref="T:Raven.Client.Exceptions.NonAuthoritativeInformationException"/> is thrown.
            </summary>
            <value>
            	<c>true</c> if non authoritative information is allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata">
            <summary>
            Metadata held about an entity by the session
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.OriginalValue">
            <summary>
            Gets or sets the original value.
            </summary>
            <value>The original value.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.Metadata">
            <summary>
            Gets or sets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.ETag">
            <summary>
            Gets or sets the ETag.
            </summary>
            <value>The ETag.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.OriginalMetadata">
            <summary>
            Gets or sets the original metadata.
            </summary>
            <value>The original metadata.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.DocumentMetadata.ForceConcurrencyCheck">
            <summary>
            A concurrency check will be forced on this entity 
            even if UseOptimisticConcurrency is set to false
            </summary>
        </member>
        <member name="T:Raven.Client.Document.InMemoryDocumentSessionOperations.SaveChangesData">
            <summary>
            Data for a batch command to the server
            </summary>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.SaveChangesData.Commands">
            <summary>
            Gets or sets the commands.
            </summary>
            <value>The commands.</value>
        </member>
        <member name="P:Raven.Client.Document.InMemoryDocumentSessionOperations.SaveChangesData.Entities">
            <summary>
            Gets or sets the entities.
            </summary>
            <value>The entities.</value>
        </member>
        <member name="T:Raven.Client.Document.ReflectionUtil">
            <summary>
            Helper class for reflection operations
            </summary>
        </member>
        <member name="M:Raven.Client.Document.ReflectionUtil.GetFullNameWithoutVersionInformation(System.Type)">
            <summary>
            Gets the full name without version information.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <returns></returns>
        </member>
        <member name="E:Raven.Client.Document.ILowLevelBulkInsertOperation.Report">
            <summary>
                Report on the progress of the operation
            </summary>
        </member>
        <member name="M:Raven.Client.Document.ReplicationBehavior.WaitAsync(Raven.Abstractions.Data.Etag,System.Nullable{System.TimeSpan},System.String,System.Int32)">
            <summary>
            Represents an replication operation to all destination servers of an item specified by ETag
            </summary>
            <param name="etag">ETag of an replicated item</param>
            <param name="timeout">Optional timeout</param>
            <param name="database">The database from which to check, if null, the default database for the document store connection string</param>
            <param name="replicas">The min number of replicas that must have the value before we can return (or the number of destinations, if higher)</param>
            <returns>Task which will have the number of nodes that the caught up to the specified etag</returns>
        </member>
        <member name="T:Raven.Client.Document.Async.AsyncDocumentSession">
            <summary>
            Implementation for async document session 
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.IDocumentQueryGenerator">
            <summary>
             Generate a new document query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IDocumentQueryGenerator.Query``1(System.String,System.Boolean)">
            <summary>
            Create a new query for <typeparam name="T"/>
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IDocumentQueryGenerator.AsyncQuery``1(System.String,System.Boolean)">
            <summary>
            Create a new query for <typeparam name="T"/>
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.IDocumentQueryGenerator.Conventions">
            <summary>
            Gets the conventions associated with this query
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.#ctor(System.String,Raven.Client.Document.DocumentStore,Raven.Client.Connection.Async.IAsyncDatabaseCommands,Raven.Client.Document.DocumentSessionListeners,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Document.Async.AsyncDocumentSession"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.LoadStartingWithAsync``1(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Load documents with the specified key prefix
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.AsyncLuceneQuery``2">
            <summary>
            Queries the index specified by <typeparamref name="TIndexCreator"/> using lucene syntax.
            </summary>
            <typeparam name="T">The result of the query</typeparam>
            <typeparam name="TIndexCreator">The type of the index creator.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.AsyncLuceneQuery``1(System.String,System.Boolean)">
            <summary>
            Query the specified index using Lucene syntax
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.AsyncLuceneQuery``1">
            <summary>
            Dynamically query RavenDB using Lucene syntax
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Include(System.String)">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Include``2(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.LoadAsync``1(System.ValueType)">
            <summary>
            Begins the async load operation, with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(1)
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.LoadAsync``1(System.ValueType[])">
            <summary>
            Begins the async multi-load operation, with the specified ids after applying
            conventions on the provided ids to get the real document ids.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(1,2,3)
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.LoadAsync``1(System.Collections.Generic.IEnumerable{System.ValueType})">
            <summary>
            Begins the async multi-load operation, with the specified ids after applying
            conventions on the provided ids to get the real document ids.
            </summary>
            <remarks>
            This method allows you to call:
            LoadAsync{Post}(new List&lt;int&gt;(){1,2,3})
            And that call will internally be translated to 
            LoadAsync{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.LoadAsync``1(System.String)">
            <summary>
            Begins the async load operation
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.LoadAsync``1(System.String[])">
            <summary>
            Begins the async multi load operation
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.LoadAsyncInternal``1(System.String[],System.Collections.Generic.KeyValuePair{System.String,System.Type}[])">
            <summary>
            Begins the async multi load operation
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.SaveChangesAsync">
            <summary>
            Begins the async save changes operation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.GetJsonDocument(System.String)">
            <summary>
            Get the json document by key from the store
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Commit(System.String)">
            <summary>
            Commits the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Rollback(System.String)">
            <summary>
            Rollbacks the specified tx id.
            </summary>
            <param name="txId">The tx id.</param>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Query``1">
            <summary>
            Dynamically queries RavenDB using LINQ
            </summary>
            <typeparam name="T">The result of the query</typeparam>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.Raven#Client#Linq#IDocumentQueryGenerator#Query``1(System.String,System.Boolean)">
            <summary>
            Create a new query for <typeparam name="T"/>
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Async.AsyncDocumentSession.AsyncQuery``1(System.String,System.Boolean)">
            <summary>
            Create a new query for <typeparam name="T"/>
            </summary>
        </member>
        <member name="P:Raven.Client.Document.Async.AsyncDocumentSession.AsyncDatabaseCommands">
            <summary>
            Gets the async database commands.
            </summary>
            <value>The async database commands.</value>
        </member>
        <member name="P:Raven.Client.Document.Async.AsyncDocumentSession.Advanced">
            <summary>
            Get the accessor for advanced operations
            </summary>
            <remarks>
            Those operations are rarely needed, and have been moved to a separate 
            property to avoid cluttering the API
            </remarks>
        </member>
        <member name="T:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1">
            <summary>
            Fluent interface for specifying include paths
            for loading documents lazily
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Include(System.String)">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Include(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Includes the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load(System.ValueType)">
            <summary>
            Loads the specified entity with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load(System.ValueType[])">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1,2,3)
            And that call will internally be translated to 
            Load{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load(System.Collections.Generic.IEnumerable{System.ValueType})">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(new List&lt;int&gt;(){1,2,3})
            And that call will internally be translated to 
            Load{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load``1(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load``1(System.String)">
            <summary>
            Loads the specified id.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load``1(System.ValueType)">
            <summary>
            Loads the specified entity with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load``1(System.ValueType[])">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1,2,3)
            And that call will internally be translated to 
            Load{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazyLoaderWithInclude`1.Load``1(System.Collections.Generic.IEnumerable{System.ValueType})">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(new List&lt;int&gt;(){1,2,3})
            And that call will internally be translated to 
            Load{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="T:Raven.Client.Document.Batches.ILazySessionOperations">
            <summary>
            Specify interface for lazy operation for the session
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Include(System.String)">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Include``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Begin a load while including the specified path 
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``1(System.String[])">
            <summary>
            Loads the specified ids.
            </summary>
            <param name="ids">The ids.</param>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the specified ids.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``1(System.Collections.Generic.IEnumerable{System.String},System.Action{``0[]})">
            <summary>
            Loads the specified ids and a function to call when it is evaluated
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``1(System.String)">
            <summary>
            Loads the specified id.
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``1(System.String,System.Action{``0})">
            <summary>
            Loads the specified id and a function to call when it is evaluated
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``1(System.ValueType)">
            <summary>
            Loads the specified entity with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``1(System.ValueType,System.Action{``0})">
            <summary>
            Loads the specified entity with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1)
            And that call will internally be translated to 
            Load{Post}("posts/1");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``1(System.ValueType[])">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(1,2,3)
            And that call will internally be translated to 
            Load{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``1(System.Collections.Generic.IEnumerable{System.ValueType})">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(new List&lt;int&gt;(){1,2,3})
            And that call will internally be translated to 
            Load{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.Load``1(System.Collections.Generic.IEnumerable{System.ValueType},System.Action{``0[]})">
            <summary>
            Loads the specified entities with the specified id after applying
            conventions on the provided id to get the real document id.
            </summary>
            <remarks>
            This method allows you to call:
            Load{Post}(new List&lt;int&gt;(){1,2,3})
            And that call will internally be translated to 
            Load{Post}("posts/1","posts/2","posts/3");
            
            Or whatever your conventions specify.
            </remarks>
        </member>
        <member name="M:Raven.Client.Document.Batches.ILazySessionOperations.LoadStartingWith``1(System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Load documents with the specified key prefix
            </summary>
        </member>
        <member name="T:Raven.Client.Document.Batches.IEagerSessionOperations">
            <summary>
            Allow to perform eager operations on the session
            </summary>
        </member>
        <member name="M:Raven.Client.Document.Batches.IEagerSessionOperations.ExecuteAllPendingLazyOperations">
            <summary>
            Execute all the lazy requests pending within this session
            </summary>
        </member>
        <member name="T:Raven.Client.Exceptions.ConflictException">
            <summary>
            This exception occurs when a (replication) conflict is encountered.
            Usually this required a user to manually resolve the conflict.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.ConflictException.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ConflictException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.ConflictException.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ConflictException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.ConflictException.#ctor(System.String,System.Exception,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ConflictException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="P:Raven.Client.Exceptions.ConflictException.ConflictedVersionIds">
            <summary>
            Gets or sets the conflicted version ids.
            </summary>
            <value>The conflicted version ids.</value>
        </member>
        <member name="P:Raven.Client.Exceptions.ConflictException.Etag">
            <summary>
            Gets or sets the conflicted document etag
            </summary>
        </member>
        <member name="T:Raven.Client.Exceptions.NonAuthoritativeInformationException">
            <summary>
            This exception is raised when a non authoritative information is encountered
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.NonAuthoritativeInformationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonAuthoritativeInformationException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.NonAuthoritativeInformationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonAuthoritativeInformationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.NonAuthoritativeInformationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonAuthoritativeInformationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:Raven.Client.Exceptions.NonUniqueObjectException">
            <summary>
            This exception is thrown when a separate instance of an entity is added to the session
            when a different entity with the same key already exists within the session.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.NonUniqueObjectException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonUniqueObjectException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.NonUniqueObjectException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonUniqueObjectException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.NonUniqueObjectException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.NonUniqueObjectException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:Raven.Client.Exceptions.ReadVetoException">
            <summary>
            This exception is raised whenever a trigger vetoes the read by the session
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.ReadVetoException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ReadVetoException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Exceptions.ReadVetoException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ReadVetoException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Client.Exceptions.ReadVetoException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Exceptions.ReadVetoException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:Raven.Client.Extensions.AsyncDocumentSessionExtesions">
            <summary>
            Extension methods that allow the usage of non-async Store methods directly on an Async Session
            </summary>
        </member>
        <member name="M:Raven.Client.Extensions.AsyncDocumentSessionExtesions.Store(Raven.Client.IAsyncDocumentSession,System.Object,Raven.Abstractions.Data.Etag)">
            <summary>
            Stores the specified entity with the specified etag.
            The entity will be saved when <see cref="M:Raven.Client.IAsyncDocumentSession.SaveChangesAsync"/> is called.
            </summary>
        </member>
        <member name="M:Raven.Client.Extensions.AsyncDocumentSessionExtesions.Store(Raven.Client.IAsyncDocumentSession,System.Object)">
            <summary>
            Stores the specified entity in the session. The entity will be saved when <see cref="M:Raven.Client.IAsyncDocumentSession.SaveChangesAsync"/> is called.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Raven.Client.Extensions.AsyncDocumentSessionExtesions.Store(Raven.Client.IAsyncDocumentSession,System.Object,System.String)">
            <summary>
            Stores the specified entity with the specified etag, under the specified id
            </summary>
        </member>
        <member name="M:Raven.Client.Extensions.AsyncDocumentSessionExtesions.Store(Raven.Client.IAsyncDocumentSession,System.Object,Raven.Abstractions.Data.Etag,System.String)">
            <summary>
            Stores the specified dynamic entity, under the specified id
            </summary>
            <param name="entity">The entity.</param>
            <param name="id">The id to store this entity under. If other entity exists with the same id it will be overridden.</param>
        </member>
        <member name="T:Raven.Client.Extensions.DatabaseCommandsExtensions">
            <summary>
             Extension methods that make certain database command operations more convenient to use
            </summary>
        </member>
        <member name="M:Raven.Client.Extensions.DatabaseCommandsExtensions.PutIndexAsync``1(Raven.Client.Connection.Async.IAsyncDatabaseCommands,System.Boolean)">
            <summary>
            Asynchronously creates an index
            </summary>
            <typeparam name="T">The type that defines the index to be create.</typeparam>
            <param name="commands">The hook to the database commands.</param>
            <param name="overwrite">Should the index be overwritten if it already exists.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Extensions.MultiDatabase">
            <summary>
             Methods to create multitenant databases
            </summary>
        </member>
        <member name="T:Raven.Client.Extensions.MultiTenancyExtensions">
            <summary>
             Extension methods to create multitenant databases
            </summary>
        </member>
        <member name="M:Raven.Client.Extensions.MultiTenancyExtensions.EnsureDatabaseExistsAsync(Raven.Client.Connection.Async.IAsyncDatabaseCommands,System.String,System.Boolean)">
            <summary>
             Ensures that the database exists, creating it if needed
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1">
            <summary>
            Abstract class used to provide infrastructure service for actual creation tasks
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.AbstractIndexCreationTask">
            <summary>
            Base class for creating indexes
            </summary>
            <remarks>
            The naming convention is that underscores in the inherited class names are replaced by slashed
            For example: Posts_ByName will be saved to Posts/ByName
            </remarks>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractCommonApiForIndexesAndTransformers.Recurse``2(``0,System.Func{``0,``1})">
            <summary>
            Allows to use lambdas recursively
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractCommonApiForIndexesAndTransformers.Recurse``2(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Allows to use lambdas recursively
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractCommonApiForIndexesAndTransformers.Recurse``2(``0,System.Func{``0,System.Collections.Generic.ICollection{``1}})">
            <summary>
            Allows to use lambdas recursively
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractCommonApiForIndexesAndTransformers.Recurse``2(``0,System.Func{``0,System.Collections.Generic.ISet{``1}})">
            <summary>
            Allows to use lambdas recursively
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractCommonApiForIndexesAndTransformers.Recurse``2(``0,System.Func{``0,System.Collections.Generic.HashSet{``1}})">
            <summary>
            Allows to use lambdas recursively
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractCommonApiForIndexesAndTransformers.LoadAttachmentForIndexing(System.String)">
            <summary>
            Loads the specifed document during the indexing process
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractCommonApiForIndexesAndTransformers.LoadDocument``1(System.String)">
            <summary>
            Loads the specifed document during the indexing process
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractCommonApiForIndexesAndTransformers.LoadDocument``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the specifed document during the indexing process
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractCommonApiForIndexesAndTransformers.Recurse``2(``0,System.Func{``0,System.Collections.Generic.IList{``1}})">
            <summary>
            Allows to use lambdas recursively
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractCommonApiForIndexesAndTransformers.Recurse``2(``0,System.Func{``0,``1[]})">
            <summary>
            Allows to use lambdas recursively
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractCommonApiForIndexesAndTransformers.Recurse``2(``0,System.Func{``0,System.Collections.Generic.List{``1}})">
            <summary>
            Allows to use lambdas recursively
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractCommonApiForIndexesAndTransformers.MetadataFor(System.Object)">
            <summary>
            Allow to get to the metadata of the document
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractCommonApiForIndexesAndTransformers.AsDocument(System.Object)">
            <summary>
            Allow to get to the metadata of the document
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.CreateIndexDefinition">
            <summary>
            Creates the index definition.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.CreateField(System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Provide a way to dynamically index values with runtime known values
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.CreateField(System.String,System.Object)">
            <summary>
            Provide a way to dynamically index values with runtime known values
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.SpatialGenerate(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Generates a spatial field in the index, generating a Point from the provided lat/lng coordinates
            </summary>
            <param name="lat">Latitude</param>
            <param name="lng">Longitude</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.SpatialClustering(System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Generate field with values that can be used for spatial clustering on the lat/lng coordinates
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.SpatialClustering(System.String,System.Nullable{System.Double},System.Nullable{System.Double},System.Int32,System.Int32)">
            <summary>
            Generate field with values that can be used for spatial clustering on the lat/lng coordinates
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.SpatialGenerate(System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Generates a spatial field in the index, generating a Point from the provided lat/lng coordinates
            </summary>
            <param name="fieldName">The field name, will be used for querying</param>
            <param name="lat">Latitude</param>
            <param name="lng">Longitude</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.SpatialGenerate(System.String,System.String)">
            <summary>
            Generates a spatial field in the index, generating a Point from the provided lat/lng coordinates
            </summary>
            <param name="fieldName">The field name, will be used for querying</param>
            <param name="shapeWKT">The shape representation in the WKT format</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.SpatialGenerate(System.String,System.String,Raven.Abstractions.Indexing.SpatialSearchStrategy)">
            <summary>
            Generates a spatial field in the index, generating a Point from the provided lat/lng coordinates
            </summary>
            <param name="fieldName">The field name, will be used for querying</param>
            <param name="shapeWKT">The shape representation in the WKT format</param>
            <param name="strategy">The spatial strategy to use</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.SpatialGenerate(System.String,System.String,Raven.Abstractions.Indexing.SpatialSearchStrategy,System.Int32)">
            <summary>
            Generates a spatial field in the index, generating a Point from the provided lat/lng coordinates
            </summary>
            <param name="fieldName">The field name, will be used for querying</param>
            <param name="shapeWKT">The shape representation in the WKT format</param>
            <param name="strategy">The spatial strategy to use</param>
            <param name="maxTreeLevel">Maximum number of levels to be used in the PrefixTree, controls the precision of shape representation.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.ExecuteAsync(Raven.Client.Connection.Async.IAsyncDatabaseCommands,Raven.Client.Document.DocumentConvention)">
            <summary>
            Executes the index creation against the specified document store.
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractIndexCreationTask.IndexName">
            <summary>
            Gets the name of the index.
            </summary>
            <value>The name of the index.</value>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractIndexCreationTask.Conventions">
            <summary>
            Gets or sets the document store.
            </summary>
            <value>The document store.</value>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.SpatialIndex.Generate(System.String,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Generates a spatial field in the index, generating a Point from the provided lat/lng coordinates
            </summary>
            <param name="fieldName">The field name, will be used for querying</param>
            <param name="lat">Latitude</param>
            <param name="lng">Longitude</param>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask.SpatialIndex.Generate(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Generates a spatial field in the index, generating a Point from the provided lat/lng coordinates
            </summary>
            <param name="lat">Latitude</param>
            <param name="lng">Longitude</param>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.#ctor">
            <summary>
            Create a new instance
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Index(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Raven.Abstractions.Indexing.FieldIndexing)">
            <summary>
            Register a field to be indexed
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Index(System.String,Raven.Abstractions.Indexing.FieldIndexing)">
            <summary>
            Register a field to be indexed
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Spatial(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Func{Raven.Abstractions.Indexing.SpatialOptionsFactory,Raven.Abstractions.Indexing.SpatialOptions})">
            <summary>
            Register a field to be spatially indexed
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Spatial(System.String,System.Func{Raven.Abstractions.Indexing.SpatialOptionsFactory,Raven.Abstractions.Indexing.SpatialOptions})">
            <summary>
            Register a field to be spatially indexed
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Store(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Raven.Abstractions.Indexing.FieldStorage)">
            <summary>
            Register a field to be stored
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Store(System.String,Raven.Abstractions.Indexing.FieldStorage)">
            <summary>
            Register a field to be stored
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Analyze(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String)">
            <summary>
            Register a field to be analyzed
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Analyze(System.String,System.String)">
            <summary>
            Register a field to be analyzed
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.TermVector(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Raven.Abstractions.Indexing.FieldTermVector)">
            <summary>
            Register a field to have term vectors
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.TermVector(System.String,Raven.Abstractions.Indexing.FieldTermVector)">
            <summary>
            Register a field to have term vectors
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Sort(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Raven.Abstractions.Indexing.SortOptions)">
            <summary>
            Register a field to be sorted
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Sort(System.String,Raven.Abstractions.Indexing.SortOptions)">
            <summary>
            Register a field to be sorted
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Suggestion(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},Raven.Abstractions.Indexing.SuggestionOptions)">
            <summary>
            Register a field to be sorted
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.TransformResults">
            <summary>
            The result translator definition
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Reduce">
            <summary>
            The reduce definition
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Stores">
            <summary>
            Index storage options
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.StoresStrings">
            <summary>
            Index storage options
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.IndexSortOptions">
            <summary>
            Index sort options
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.IndexSortOptionsStrings">
            <summary>
            Index sort options
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.IndexSuggestions">
            <summary>
            Index suggest options
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Analyzers">
            <summary>
            Index sort options
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.AnalyzersStrings">
            <summary>
            Index sort options
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.TermVectors">
            <summary>
            Index term vector options
            </summary>		
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.TermVectorsStrings">
            <summary>
            Index term vector options
            </summary>		
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.SpatialIndexes">
            <summary>
            Spatial index options
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.SpatialIndexesStrings">
            <summary>
            Spatial index options
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.Indexes">
            <summary>
            Indexing options
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractGenericIndexCreationTask`1.IndexesStrings">
            <summary>
            Indexing options
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.AbstractIndexCreationTask`1">
            <summary>
            Base class for creating indexes
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.AbstractIndexCreationTask`2">
            <summary>
            Base class for creating indexes
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractIndexCreationTask`2.CreateIndexDefinition">
            <summary>
            Creates the index definition.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractIndexCreationTask`2.Map">
            <summary>
            The map definition
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.AbstractMultiMapIndexCreationTask`1">
            <summary>
            Allow to create indexes with multiple maps
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractMultiMapIndexCreationTask`1.AddMapForAll``1(System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.IEnumerable}})">
            <summary>
            Uses reflection to call <see cref="M:Raven.Client.Indexes.AbstractMultiMapIndexCreationTask`1.AddMap``1(System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.IEnumerable}})"/> for the base type and all available subclasses.
            </summary>
            <remarks>This is taken from Oren's code in this thread https://groups.google.com/d/msg/ravendb/eFUlQG-spzE/Ac0PrvsFyJYJ </remarks>
            <typeparam name="TBase">The base class type whose descendant types are to be included in the index.</typeparam>
            <param name="expr"></param>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractMultiMapIndexCreationTask`1.CreateIndexDefinition">
            <summary>
            Creates the index definition.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Raven.Client.Indexes.AbstractMultiMapIndexCreationTask">
            <summary>
            Allow to create indexes with multiple maps
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.AbstractTransformerCreationTask">
            <summary>
            Base class for creating transformers
            </summary>
            <remarks>
            The naming convention is that underscores in the inherited class names are replaced by slashed
            For example: Posts_ByName will be saved to Posts/ByName
            </remarks>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractTransformerCreationTask.CreateTransformerDefinition">
            <summary>
            Creates the Transformer definition.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.AbstractTransformerCreationTask.ExecuteAsync(Raven.Client.Connection.Async.IAsyncDatabaseCommands,Raven.Client.Document.DocumentConvention)">
            <summary>
            Executes the index creation against the specified document store.
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractTransformerCreationTask.TransformerName">
            <summary>
            Gets the name of the index.
            </summary>
            <value>The name of the index.</value>
        </member>
        <member name="P:Raven.Client.Indexes.AbstractTransformerCreationTask.Conventions">
            <summary>
            Gets or sets the document store.
            </summary>
            <value>The document store.</value>
        </member>
        <member name="T:Raven.Client.Indexes.ExpressionOperatorPrecedence">
            <summary>
            Precedence values for operations
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Primary">
            <summary>
            x.y  f(x)  a[x]  x++  x--  new
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Unary">
            <summary>
            +  -  !  ~  ++x  --x  (T)x
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Multiplicative">
            <summary>
            *  /  %
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Additive">
            <summary>
            +  -
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Shift">
            <summary>
            &lt;&lt; &gt;&gt;
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.RelationalAndTypeTesting">
            <summary>
            &lt;  &gt;  &lt;=  &gt;=  is  as
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Equality">
            <summary>
            ==  !=
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.LogicalAND">
            <summary>
            &amp;
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.LogicalXOR">
            <summary>
            ^
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.LogicalOR">
            <summary>
            |
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.ConditionalAND">
            <summary>
            &amp;&amp; (AndAlso in VB)
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.ConditionalOR">
            <summary>
            ||
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.NullCoalescing">
            <summary>
            ??
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Conditional">
            <summary>
            ?:
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.Assignment">
            <summary>
            =  *=  /=  %=  +=  -=  &lt;&lt;=  &gt;&gt;=  &amp;=  ^=  |=
            </summary>
        </member>
        <member name="F:Raven.Client.Indexes.ExpressionOperatorPrecedence.ParenthesisNotNeeded">
            <summary>
            pseudo operator for comparisons
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.ExpressionOperatorPrecedenceExtension">
            <summary>
            Methods on the enum
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionOperatorPrecedenceExtension.NeedsParenthesisFor(Raven.Client.Indexes.ExpressionOperatorPrecedence,Raven.Client.Indexes.ExpressionOperatorPrecedence)">
            <summary>
            Needs parenthesis for the expression
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.ExpressionStringBuilder">
            <summary>
              Based off of System.Linq.Expressions.ExpressionStringBuilder
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.ExpressionToString(Raven.Client.Document.DocumentConvention,System.Boolean,System.Type,System.String,System.Linq.Expressions.Expression)">
            <summary>
              Convert the expression to a string
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.ToString">
            <summary>
              Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
              A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.BinaryExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitBlock(System.Linq.Expressions.BlockExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.BlockExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.CatchBlock" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.ConditionalExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
              Visits the <see cref = "T:System.Linq.Expressions.ConstantExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
            <summary>
              Visits the <see cref = "T:System.Linq.Expressions.DebugInfoExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitDefault(System.Linq.Expressions.DefaultExpression)">
            <summary>
              Visits the <see cref = "T:System.Linq.Expressions.DefaultExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.DynamicExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitElementInit(System.Linq.Expressions.ElementInit)">
            <summary>
              Visits the element init.
            </summary>
            <param name = "initializer">The initializer.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitExtension(System.Linq.Expressions.Expression)">
            <summary>
              Visits the children of the extension expression.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitGoto(System.Linq.Expressions.GotoExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.GotoExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitIndex(System.Linq.Expressions.IndexExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.IndexExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.InvocationExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitLabel(System.Linq.Expressions.LabelExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.LabelExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <summary>
              Visits the lambda.
            </summary>
            <typeparam name = "T"></typeparam>
            <param name = "node">The node.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.ListInitExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitLoop(System.Linq.Expressions.LoopExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.LoopExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.MemberExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
              Visits the member assignment.
            </summary>
            <param name = "assignment">The assignment.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.MemberInitExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
              Visits the member list binding.
            </summary>
            <param name = "binding">The binding.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
              Visits the member member binding.
            </summary>
            <param name = "binding">The binding.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.MethodCallExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.NewExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.NewArrayExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
              Visits the <see cref = "T:System.Linq.Expressions.ParameterExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.RuntimeVariablesExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.SwitchExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.SwitchCase" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitTry(System.Linq.Expressions.TryExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.TryExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.TypeBinaryExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:Raven.Client.Indexes.ExpressionStringBuilder.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
              Visits the children of the <see cref = "T:System.Linq.Expressions.UnaryExpression" />.
            </summary>
            <param name = "node">The expression to visit.</param>
            <returns>
              The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="T:Raven.Client.Indexes.IClientSideDatabase">
            <summary>
            DatabaseAccessor for loading documents in the translator
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IClientSideDatabase.Load``1(System.String)">
            <summary>
            Loading a document during result transformers
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IClientSideDatabase.Load``1(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loading documents during result transformers
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IClientSideDatabase.Include(System.String)">
            <summary>
            Will ask RavenDB to include this document in the query results
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IClientSideDatabase.Include(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Will ask RavenDB to include these documents in the query results
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.IndexCreation">
            <summary>
            Helper class for creating indexes from implementations of <see cref="T:Raven.Client.Indexes.AbstractIndexCreationTask"/>.
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IndexCreation.CreateIndexesAsync(System.Reflection.Assembly,Raven.Client.IDocumentStore)">
            <summary>
            Creates the indexes found in the specified assembly.
            </summary>
            <param name="assemblyToScanForIndexingTasks">The assembly to scan for indexing tasks.</param>
            <param name="documentStore">The document store.</param>
        </member>
        <member name="M:Raven.Client.Indexes.IndexCreation.CreateIndexesAsync(System.ComponentModel.Composition.Hosting.ExportProvider,Raven.Client.IDocumentStore)">
            <summary>
            Creates the indexes found in the specified catalog
            </summary>
            <param name="catalogToGetnIndexingTasksFrom">The catalog to get indexing tasks from.</param>
            <param name="documentStore">The document store.</param>
        </member>
        <member name="M:Raven.Client.Indexes.IndexCreation.CreateIndexesAsync(System.ComponentModel.Composition.Hosting.ExportProvider,Raven.Client.Connection.Async.IAsyncDatabaseCommands,Raven.Client.Document.DocumentConvention)">
            <summary>
            Creates the indexes found in the specified catalog
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.IndexDefinitionBuilder`2">
            <summary>
            This class provides a way to define a strongly typed index on the client.
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IndexDefinitionBuilder`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Indexes.IndexDefinitionBuilder`2"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IndexDefinitionBuilder`2.ToIndexDefinition(Raven.Client.Document.DocumentConvention,System.Boolean)">
            <summary>
            Toes the index definition.
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.Map">
            <summary>
            Gets or sets the map function
            </summary>
            <value>The map.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.Reduce">
            <summary>
            Gets or sets the reduce function
            </summary>
            <value>The reduce.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.TransformResults">
            <summary>
            Gets or sets the reduce function
            </summary>
            <value>The reduce.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.Stores">
            <summary>
            Gets or sets the stores options
            </summary>
            <value>The stores.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.StoresStrings">
            <summary>
            Gets or sets the stores options
            </summary>
            <value>The stores.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.Indexes">
            <summary>
            Gets or sets the indexing options
            </summary>
            <value>The indexes.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.IndexesStrings">
            <summary>
            Gets or sets the indexing options
            </summary>
            <value>The indexes.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.SortOptions">
            <summary>
            Gets or sets the sort options.
            </summary>
            <value>The sort options.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.SortOptionsStrings">
            <summary>
            Gets or sets the sort options.
            </summary>
            <value>The sort options.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.Analyzers">
            <summary>
            Get os set the analyzers
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.AnalyzersStrings">
            <summary>
            Get os set the analyzers
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.Suggestions">
            <summary>
            Gets or sets the suggestion options.
            </summary>
            <value>The suggestion options.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.TermVectors">
            <summary>
            Gets or sets the term vector options
            </summary>
            <value>The term vectors.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.TermVectorsStrings">
            <summary>
            Gets or sets the term vector options
            </summary>
            <value>The term vectors.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.SpatialIndexes">
            <summary>
            Gets or sets the spatial options
            </summary>
            <value>The spatial options.</value>
        </member>
        <member name="P:Raven.Client.Indexes.IndexDefinitionBuilder`2.SpatialIndexesStrings">
            <summary>
            Gets or sets the spatial options
            </summary>
            <value>The spatial options.</value>
        </member>
        <member name="T:Raven.Client.Indexes.IndexDefinitionBuilder`1">
            <summary>
            This class provides a way to define a strongly typed index on the client.
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.IndexDefinitionHelper">
            <summary>
            Generate index definition from linq expressions
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.IndexDefinitionHelper.PruneToFailureLinqQueryAsStringToWorkableCode``2(System.Linq.Expressions.LambdaExpression,Raven.Client.Document.DocumentConvention,System.String,System.Boolean)">
            <summary>
            Perform the actual generation
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.RavenDocumentsByEntityName">
            <summary>
             Create an index that allows to tag entities by their entity name
            </summary>
        </member>
        <member name="M:Raven.Client.Indexes.RavenDocumentsByEntityName.CreateIndexDefinition">
            <summary>
            Creates the Raven/DocumentsByEntityName index
            </summary>
        </member>
        <member name="P:Raven.Client.Indexes.RavenDocumentsByEntityName.IndexName">
            <summary>
            Return the actual index name
            </summary>
        </member>
        <member name="T:Raven.Client.Indexes.RavenMethodAttribute">
            <summary>
            When applied to a custom extension method used in an index, RavenDB will translate
            the invocation to a regular method call so it can be understood by the server.
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.ExpressionInfo">
            <summary>
            This class represents a node in an expression, usually a member - but in the case of dynamic queries the path to a member
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.ExpressionInfo.#ctor(System.String,System.Type,System.Boolean)">
            <summary>
            Creates an ExpressionMemberInfo
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.ExpressionInfo.Path">
            <summary>
            Gets the full path of the member being referred to by this node
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.ExpressionInfo.Type">
            <summary>
            Gets the actual type being referred to
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.ExpressionInfo.IsNestedPath">
            <summary>
            Whatever the expression is of a nested path
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.ExpressionInfo.MaybeProperty">
            <summary>
            Maybe contain the relevant property
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.IRavenQueryable`1">
            <summary>
            An implementation of <see cref="T:System.Linq.IOrderedQueryable`1"/> with Raven specific operation
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryable`1.Statistics(Raven.Client.RavenQueryStatistics@)">
            <summary>
            Provide statistics about the query, such as total count of matching records
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryable`1.Customize(System.Action{Raven.Client.IDocumentQueryCustomization})">
            <summary>
            Customizes the query using the specified action
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryable`1.TransformWith``2">
            <summary>
            Specifies a result transformer to use on the results
            </summary>
            <typeparam name="TTransformer"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryable`1.AddQueryInput(System.String,Raven.Json.Linq.RavenJToken)">
            <summary>
            Inputs a key and value to the query (accessible by the transformer)
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.IRavenQueryProvider">
            <summary>
            Extension for the built-in <see cref="T:System.Linq.IQueryProvider"/> allowing for Raven specific operations
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.AfterQueryExecuted(System.Action{Raven.Abstractions.Data.QueryResult})">
            <summary>
            Callback to get the results of the query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.Customize(System.Action{Raven.Client.IDocumentQueryCustomization})">
            <summary>
            Customizes the query using the specified action
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.TransformWith(System.String)">
            <summary>
            The name of the transformer to use with this query
            </summary>
            <param name="transformerName"></param>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.For``1">
            <summary>
            Change the result type for the query provider
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.ToAsyncLuceneQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Convert the Linq query to a Lucene query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.ToLuceneQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Convert the linq query to a Lucene query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.Lazily``1(System.Linq.Expressions.Expression,System.Action{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Convert the Linq query to a lazy Lucene query and provide a function to execute when it is being evaluate
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.MoveAfterQueryExecuted``1(Raven.Client.IAsyncDocumentQuery{``0})">
            <summary>
            Move the registered after query actions
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.IRavenQueryProvider.AddQueryInput(System.String,Raven.Json.Linq.RavenJToken)">
            <summary>
            Adds input to this query via a key/value pair
            </summary>
            <param name="input"></param>
            <param name="foo"></param>
        </member>
        <member name="P:Raven.Client.Linq.IRavenQueryProvider.IndexName">
            <summary>
            Gets the name of the index.
            </summary>
            <value>The name of the index.</value>
        </member>
        <member name="P:Raven.Client.Linq.IRavenQueryProvider.QueryGenerator">
            <summary>
            Get the query generator
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.IRavenQueryProvider.CustomizeQuery">
            <summary>
            The action to execute on the customize query
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.IRavenQueryProvider.FieldsToFetch">
            <summary>
            Set the fields to fetch
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.IRavenQueryProvider.ResultTransformer">
            <summary>
            The result transformer to use
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.IRavenQueryProvider.QueryInputs">
            <summary>
            Gets the query inputs being supplied to
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqPathProvider.GetPath(System.Linq.Expressions.Expression)">
            <summary>
            Get the path from the expression, including considering dictionary calls
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqPathProvider.GetValueFromExpression(System.Linq.Expressions.Expression,System.Type)">
            <summary>
            Get the actual value from the expression
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.LinqPathProvider.GetMemberExpression(System.Linq.Expressions.Expression)">
            <summary>
            Get the member expression from the expression
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryableExtensions.Where``1(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryableExtensions.Where``1(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryableExtensions.OrderBy``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryableExtensions.OrderBy``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryableExtensions.OrderByDescending``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryableExtensions.OrderByDescending``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryableExtensions.Select``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryableExtensions.Select``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryableExtensions.In``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
             implementation of In operator
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryableExtensions.In``1(``0,``0[])">
            <summary>
             implementation of In operator
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryableExtensions.Skip``1(Raven.Client.Linq.IRavenQueryable{``0},System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence and then returns the remaining elements.
            </summary>
            Summary:
        </member>
        <member name="T:Raven.Client.Linq.RavenQueryInspector`1">
            <summary>
            Implements <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/>
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.#ctor(Raven.Client.Linq.IRavenQueryProvider,Raven.Client.RavenQueryStatistics,Raven.Client.RavenQueryHighlightings,System.String,System.Linq.Expressions.Expression,Raven.Client.Document.InMemoryDocumentSessionOperations,Raven.Client.Connection.Async.IAsyncDatabaseCommands,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Linq.RavenQueryInspector`1"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.Statistics(Raven.Client.RavenQueryStatistics@)">
            <summary>
            Provide statistics about the query, such as total count of matching records
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.Customize(System.Action{Raven.Client.IDocumentQueryCustomization})">
            <summary>
            Customizes the query using the specified action
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.GetLastEqualityTerm(System.Boolean)">
            <summary>
             Get the last equality term for the query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.ToList``1">
            <summary>
              This function exists solely to forbid calling ToList() on a queryable in Silverlight.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.ToArray``1">
            <summary>
              This function exists solely to forbid calling ToArray() on a queryable in Silverlight.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryInspector`1.FieldsToFetch(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Set the fields to fetch
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryInspector`1.IndexQueried">
            <summary>
            Get the name of the index being queried
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryInspector`1.AsyncIndexQueried">
            <summary>
            Get the name of the index being queried asynchronously
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryInspector`1.AsyncDatabaseCommands">
            <summary>
            Grant access to the async database commands
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.RavenQueryProvider`1">
            <summary>
            An implementation of <see cref="T:Raven.Client.Linq.IRavenQueryProvider"/>
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.#ctor(Raven.Client.Linq.IDocumentQueryGenerator,System.String,Raven.Client.RavenQueryStatistics,Raven.Client.RavenQueryHighlightings,Raven.Client.Connection.Async.IAsyncDatabaseCommands,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Linq.RavenQueryProvider`1"/> class.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.For``1">
            <summary>
            Change the result type for the query provider
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query represented by a specified expression tree.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>
            The value that results from executing the specified query.
            </returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            Executes the specified expression.
            </summary>
            <typeparam name="S"></typeparam>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the query represented by a specified expression tree.
            </summary>
            <param name="expression">An expression tree that represents a LINQ query.</param>
            <returns>
            The value that results from executing the specified query.
            </returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.AfterQueryExecuted(System.Action{Raven.Abstractions.Data.QueryResult})">
            <summary>
            Callback to get the results of the query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.Customize(System.Action{Raven.Client.IDocumentQueryCustomization})">
            <summary>
            Customizes the query using the specified action
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.MoveAfterQueryExecuted``1(Raven.Client.IAsyncDocumentQuery{``0})">
            <summary>
            Move the registered after query actions
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.ToAsyncLuceneQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Convert the expression to a Lucene query
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.Lazily``1(System.Linq.Expressions.Expression,System.Action{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Register the query as a lazy query in the session and return a lazy
            instance that will evaluate the query only when needed
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProvider`1.ToLuceneQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            Convert the expression to a Lucene query
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProvider`1.CustomizedQuery">
            <summary>
            Gets the actions for customizing the generated lucene query
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProvider`1.IndexName">
            <summary>
            Gets the name of the index.
            </summary>
            <value>The name of the index.</value>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProvider`1.QueryGenerator">
            <summary>
            Get the query generator
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProvider`1.FieldsToFetch">
            <summary>
            Set the fields to fetch
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProvider`1.ResultTransformer">
            <summary>
            Gets the results transformer to use
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProvider`1.FieldsToRename">
            <summary>
            Set the fields to rename
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.RavenQueryProviderProcessor`1">
            <summary>
            Process a Linq expression to a Lucene query
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.queryGenerator">
            <summary>
            The query generator
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.indexName">
            <summary>
            The index name
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.#ctor(Raven.Client.Linq.IDocumentQueryGenerator,System.Action{Raven.Client.IDocumentQueryCustomization},System.Action{Raven.Abstractions.Data.QueryResult},System.String,System.Collections.Generic.HashSet{System.String},System.Collections.Generic.List{Raven.Client.Linq.RenamedField},System.Boolean,System.String,System.Collections.Generic.Dictionary{System.String,Raven.Json.Linq.RavenJToken})">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Client.Linq.RavenQueryProviderProcessor`1"/> class.
            </summary>
            <param name="queryGenerator">The document query generator.</param>
            <param name="customizeQuery">The customize query.</param>
            <param name="afterQueryExecuted">Executed after the query run, allow access to the query results</param>
            <param name="indexName">The name of the index the query is executed against.</param>
            <param name="fieldsToFetch">The fields to fetch in this query</param>
            <param name="fieldsTRename">The fields to rename for the results of this query</param>
            <param name="isMapReduce"></param>
            <param name="resultsTransformer"></param>
            <param name="queryInputs"></param>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.VisitExpression(System.Linq.Expressions.Expression)">
            <summary>
            Visits the expression and generate the lucene query
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.GetMember(System.Linq.Expressions.Expression)">
            <summary>
            Gets member info for the specified expression and the path to that expression
            </summary>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.GetLuceneQueryFor(System.Linq.Expressions.Expression)">
            <summary>
            Gets the lucene query.
            </summary>
            <value>The lucene query.</value>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.GetAsyncLuceneQueryFor(System.Linq.Expressions.Expression)">
            <summary>
            Gets the lucene query.
            </summary>
            <value>The lucene query.</value>
        </member>
        <member name="M:Raven.Client.Linq.RavenQueryProviderProcessor`1.Execute(System.Linq.Expressions.Expression)">
            <summary>
            Executes the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProviderProcessor`1.CurrentPath">
            <summary>
            Gets the current path in the case of expressions within collections
            </summary>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProviderProcessor`1.FieldsToFetch">
            <summary>
            Gets or sets the fields to fetch.
            </summary>
            <value>The fields to fetch.</value>
        </member>
        <member name="P:Raven.Client.Linq.RavenQueryProviderProcessor`1.FieldsToRename">
            <summary>
            Rename the fields from one name to another
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType">
            <summary>
            Different query types 
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.Any">
            <summary>
            
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.Count">
            <summary>
            Get count of items for the query
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.LongCount">
            <summary>
            Get count of items for the query as an Int64
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.First">
            <summary>
            Get only the first item
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.FirstOrDefault">
            <summary>
            Get only the first item (or null)
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.Single">
            <summary>
            Get only the first item (or throw if there are more than one)
            </summary>
        </member>
        <member name="F:Raven.Client.Linq.RavenQueryProviderProcessor`1.SpecialQueryType.SingleOrDefault">
            <summary>
            Get only the first item (or throw if there are more than one) or null if empty
            </summary>
        </member>
        <member name="T:Raven.Client.Linq.Indexing.IndexingLinqExtensions">
            <summary>
            Extension methods that adds additional behavior during indexing operations
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.Indexing.IndexingLinqExtensions.WhereEntityIs``1(System.Collections.Generic.IEnumerable{System.Object},System.String[])">
            <summary>
            Marker method for allowing complex (multi entity) queries on the server.
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.Indexing.IndexingLinqExtensions.Boost(System.Object,System.Single)">
            <summary>
            Boost the value with the given amount
            </summary>
        </member>
        <member name="M:Raven.Client.Linq.Indexing.IndexingLinqExtensions.IfEntityIs``1(System.Object,System.String)">
            <summary>
            Marker method for allowing complex (multi entity) queries on the server.
            </summary>
        </member>
        <member name="T:Raven.Client.Listeners.IDocumentConflictListener">
            <summary>
            Hooks for users that allows you to handle document replication conflicts
            </summary>
        </member>
        <member name="T:Raven.Client.Listeners.IDocumentConversionListener">
            <summary>
            Hook for users to provide additional logic for converting to / from 
            entities to document/metadata pairs.
            </summary>
        </member>
        <member name="M:Raven.Client.Listeners.IDocumentConversionListener.EntityToDocument(System.String,System.Object,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
            Called when converting an entity to a document and metadata
            </summary>
        </member>
        <member name="M:Raven.Client.Listeners.IDocumentConversionListener.DocumentToEntity(System.String,System.Object,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
            Called when converting a document and metadata to an entity
            </summary>
        </member>
        <member name="T:Raven.Client.Listeners.IDocumentDeleteListener">
            <summary>
            Hook for users to provide additional logic on delete operations
            </summary>
        </member>
        <member name="M:Raven.Client.Listeners.IDocumentDeleteListener.BeforeDelete(System.String,System.Object,Raven.Json.Linq.RavenJObject)">
            <summary>
            Invoked before the delete request is sent to the server.
            </summary>
            <param name="key">The key.</param>
            <param name="entityInstance">The entity instance.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="T:Raven.Client.Listeners.IDocumentQueryListener">
            <summary>
            Hook for users to modify all queries globally
            </summary>
        </member>
        <member name="M:Raven.Client.Listeners.IDocumentQueryListener.BeforeQueryExecuted(Raven.Client.IDocumentQueryCustomization)">
            <summary>
            Allow to customize a query globally
            </summary>
        </member>
        <member name="T:Raven.Client.Listeners.IDocumentStoreListener">
            <summary>
            Hook for users to provide additional logic on store operations
            </summary>
        </member>
        <member name="M:Raven.Client.Listeners.IDocumentStoreListener.BeforeStore(System.String,System.Object,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
            Invoked before the store request is sent to the server.
            </summary>
            <param name="key">The key.</param>
            <param name="entityInstance">The entity instance.</param>
            <param name="metadata">The metadata.</param>
            <param name="original">The original document that was loaded from the server</param>
            <returns>
            Whatever the entity instance was modified and requires us re-serialize it.
            Returning true would force re-serialization of the entity, returning false would 
            mean that any changes to the entityInstance would be ignored in the current SaveChanges call.
            </returns>
        </member>
        <member name="M:Raven.Client.Listeners.IDocumentStoreListener.AfterStore(System.String,System.Object,Raven.Json.Linq.RavenJObject)">
            <summary>
            Invoked after the store request is sent to the server.
            </summary>
            <param name="key">The key.</param>
            <param name="entityInstance">The entity instance.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="T:Raven.Client.Listeners.IExtendedDocumentConversionListener">
            <summary>
            Extended hook for users to provide additional logic for converting to / from 
            entities to document/metadata pairs.
            </summary>
        </member>
        <member name="M:Raven.Client.Listeners.IExtendedDocumentConversionListener.BeforeConversionToDocument(System.String,System.Object,Raven.Json.Linq.RavenJObject)">
            <summary>
            Called before converting an entity to a document and metadata
            </summary>
        </member>
        <member name="M:Raven.Client.Listeners.IExtendedDocumentConversionListener.AfterConversionToDocument(System.String,System.Object,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
            Called after having converted an entity to a document and metadata
            </summary>
        </member>
        <member name="M:Raven.Client.Listeners.IExtendedDocumentConversionListener.BeforeConversionToEntity(System.String,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject)">
            <summary>
            Called before converting a document and metadata to an entity
            </summary>
        </member>
        <member name="M:Raven.Client.Listeners.IExtendedDocumentConversionListener.AfterConversionToEntity(System.String,Raven.Json.Linq.RavenJObject,Raven.Json.Linq.RavenJObject,System.Object)">
            <summary>
            Called after having converted a document and metadata to an entity
            </summary>
        </member>
        <member name="T:Raven.Client.LinqExtensions">
            <summary>
             Extensions to the linq syntax
            </summary>
            <summary>
             Extensions to the linq syntax
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.Include``1(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <typeparam name="TResult">The type of the object that holds the id that you want to include.</typeparam>
            <param name="source">The source for querying</param>
            <param name="path">The path, which is name of the property that holds the id of the object to include.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.LinqExtensions.Include``2(Raven.Client.Linq.IRavenQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Includes the specified path in the query, loading the document specified in that path
            </summary>
            <typeparam name="TResult">The type of the object that holds the id that you want to include.</typeparam>
            <typeparam name="TInclude">The type of the object that you want to include.</typeparam>
            <param name="source">The source for querying</param>
            <param name="path">The path, which is name of the property that holds the id of the object to include.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Client.LinqExtensions.AggregateBy``1(System.Linq.IQueryable{``0},System.String,System.String)">
            <summary>
            Query the facets results for this query using aggregation
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.AggregateBy``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Query the facets results for this query using aggregation
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.AggregateBy``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String)">
            <summary>
            Query the facets results for this query using aggregation with a specific display name
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.ToFacetsAsync``1(System.Linq.IQueryable{``0},System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Async Query the facets results for this query using the specified facet document with the given start and pageSize
            </summary>
            <param name="facetSetupDoc">Name of the FacetSetup document</param>
            <param name="start">Start index for paging</param>
            <param name="pageSize">Paging PageSize. If set, overrides Facet.MaxResults</param>
        </member>
        <member name="M:Raven.Client.LinqExtensions.ToFacetsAsync``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{Raven.Abstractions.Data.Facet},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Async Query the facets results for this query using the specified list of facets with the given start and pageSize
            </summary>
            <param name="facets">List of facets</param>
            <param name="start">Start index for paging</param>
            <param name="pageSize">Paging PageSize. If set, overrides Facet.MaxResults</param>
        </member>
        <member name="M:Raven.Client.LinqExtensions.ToFacetsAsync``1(Raven.Client.IAsyncDocumentQuery{``0},System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Async Query the facets results for this query using the specified facet document with the given start and pageSize
            </summary>
            <param name="facetSetupDoc">Name of the FacetSetup document</param>
            <param name="start">Start index for paging</param>
            <param name="pageSize">Paging PageSize. If set, overrides Facet.MaxResults</param>
        </member>
        <member name="M:Raven.Client.LinqExtensions.As``1(System.Linq.IQueryable)">
            <summary>
            Project using a different type
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.Intersect``1(System.Linq.IQueryable{``0})">
            <summary>
            Partition the query so we can intersect different parts of the query
            across different index entries.
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.AsProjection``1(System.Linq.IQueryable)">
            <summary>
            Project using a different type
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.SuggestAsync(System.Linq.IQueryable,Raven.Abstractions.Data.SuggestionQuery)">
            <summary>
            Suggest alternative values for the queried term
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.SuggestAsync(System.Linq.IQueryable)">
            <summary>
            Suggest alternative values for the queried term
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.Lazily``1(System.Linq.IQueryable{``0})">
            <summary>
            Register the query as a lazy query in the session and return a lazy
            instance that will evaluate the query only when needed
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.Lazily``1(System.Linq.IQueryable{``0},System.Action{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Register the query as a lazy query in the session and return a lazy
            instance that will evaluate the query only when needed
            As well as a function to execute when the value is evaluated
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.ToListAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            Returns a list of results for a query asynchronously. 
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.AnyAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            Determines whether a sequence contains any elements.
            </summary>
            
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            
            <param name="source">
            The <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/> that contains the elements to be counted.
            </param>
            
            <returns>
            true if the source sequence contains any elements; otherwise, false.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:Raven.Client.LinqExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Determines whether any element of a sequence satisfies a condition.
            </summary>
            
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            
            <param name="source">
            The <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/> that contains the elements to be counted.
            </param>
            
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            
            <returns>
            true if any elements in the source sequence pass the test in the specified
            predicate; otherwise, false.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
        </member>
        <member name="M:Raven.Client.LinqExtensions.CountAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            Returns the number of elements in a sequence.
            </summary>
            
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            
            <param name="source">
            The <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/> that contains the elements to be counted.
            </param>
            
            <returns>
            The number of elements in the input sequence.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            
            <exception cref="T:System.OverflowException">
            The number of elements in source is larger than <see cref="F:System.Int32.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Raven.Client.LinqExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Returns the number of elements in the specified sequence that satisfies a condition.
            </summary>
            
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            
            <param name="source">
            The <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/> that contains the elements to be counted.
            </param>
            
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            
            <returns>
            The number of elements in the sequence that satisfies the condition in
            the predicate function.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
            
            <exception cref="T:System.OverflowException">
            The number of elements in source is larger than <see cref="F:System.Int32.MaxValue"/>.
            </exception>
        </member>
        <member name="M:Raven.Client.LinqExtensions.FirstAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            Asynchronously returns the first element of a sequence.
            </summary>
            
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            
            <param name="source">
            The <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/> to return the first element of.
            </param>
            
            <returns>
            The first element in source.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
            The source sequence is empty or source
            is not of type <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/>.
            </exception>
        </member>
        <member name="M:Raven.Client.LinqExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Asynchronously returns the first element of a sequence that satisfies a specified condition.
            </summary>
            
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            
            <param name="source">
            The <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/> to return the first element of.
            </param>
            
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            
            <returns>
            The first element in source.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
            No element satisfies the condition in predicate,
            the source sequence is empty or source
            is not of type <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/>.
            </exception>
        </member>
        <member name="M:Raven.Client.LinqExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            Asynchronously returns the first element of a sequence, or a default value if the sequence contains no elements.
            </summary>
            
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            
            <param name="source">
            The <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/> to return the first element of.
            </param>
            
            <returns>
            default(TSource) if source is empty; otherwise,
            the first element in source.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
            source is not of type <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/>.
            </exception>
        </member>
        <member name="M:Raven.Client.LinqExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Asynchronously returns the first element of a sequence that satisfies a specified
            condition or a default value if no such element is found.
            </summary>
            
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            
            <param name="source">
            The <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/> to return the first element of.
            </param>
            
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            
            <returns>
            default(TSource) if source is empty or
            if no element passes the test specified by predicate;
            otherwise, the first element in source that passes
            the test specified by predicate.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
            source is not of type <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/>.
            </exception>
        </member>
        <member name="M:Raven.Client.LinqExtensions.SingleAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            Asynchronously returns the only element of a sequence, and throws an exception if there
            is not exactly one element in the sequence.
            </summary>
            
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            
            <param name="source">
            The <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/> to return the single element of.
            </param>
            
            <returns>
            The single element of the input sequence.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
            The source sequence is empty, has more than one element or
            is not of type <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/>.
            </exception>
        </member>
        <member name="M:Raven.Client.LinqExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Asynchronously returns the only element of a sequence, and throws an exception if there
            is not exactly one element in the sequence.
            </summary>
            
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            
            <param name="source">
            The <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/> to return the single element of.
            </param>
            
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            
            <returns>
            The single element of the input sequence that satisfies the condition in predicate.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
            No element satisfies the condition in predicate, more than
            one element satisfies the condition, the source sequence is empty or
            source is not of type <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/>.
            </exception>
        </member>
        <member name="M:Raven.Client.LinqExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0})">
            <summary>
            Asynchronously returns the only element of a sequence, or a default value if the
            sequence is empty; this method throws an exception if there is more than one
            element in the sequence.
            </summary>
            
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            
            <param name="source">
            The <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/> to return the first element of.
            </param>
            
            <returns>
            The single element of the input sequence, or default(TSource)
            if the sequence contains no elements.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
            source has more than one element or
            is not of type <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/>.
            </exception>
        </member>
        <member name="M:Raven.Client.LinqExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Asynchronously returns the only element of a sequence that satisfies a specified
            condition or a default value if no such element exists; this method throws an
            exception if more than one element satisfies the condition.
            </summary>
            
            <typeparam name="TSource">
            The type of the elements of source.
            </typeparam>
            
            <param name="source">
            The <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/> to return the first element of.
            </param>
            
            <param name="predicate">
            A function to test each element for a condition.
            </param>
            
            <returns>
            The single element of the input sequence that satisfies the condition in predicate,
            or default(TSource) if no such element is found.
            </returns>
            
            <exception cref="T:System.ArgumentNullException">
            source or predicate is null.
            </exception>
            
            <exception cref="T:System.InvalidOperationException">
            More than one element satisfies the condition in predicate
            or source is not of type <see cref="T:Raven.Client.Linq.IRavenQueryable`1"/>.
            </exception>
        </member>
        <member name="M:Raven.Client.LinqExtensions.Search``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.String,System.Decimal,Raven.Client.SearchOptions,Raven.Client.EscapeQueryOptions)">
            <summary>
            Perform a search for documents which fields that match the searchTerms.
            If there is more than a single term, each of them will be checked independently.
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.OrderByScore``1(System.Linq.IQueryable{``0})">
            <summary>
            Perform an initial sort by lucene score.
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.ToList``1(Raven.Client.Linq.IRavenQueryable{``0})">
            <summary>
              This function exists solely to forbid calling ToList() on a queryable in Silverlight.
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.ToArray``1(Raven.Client.Linq.IRavenQueryable{``0})">
            <summary>
              This function exists solely to forbid calling ToArray() on a queryable in Silverlight.
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
              This function exists solely to forbid calling ToDictionary() on a queryable in Silverlight.
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
              This function exists solely to forbid calling ToDictionary() on a queryable in Silverlight.
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
              This function exists solely to forbid calling ToDictionary() on a queryable in Silverlight.
            </summary>
        </member>
        <member name="M:Raven.Client.LinqExtensions.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
              This function exists solely to forbid calling ToDictionary() on a queryable in Silverlight.
            </summary>
        </member>
        <member name="F:Raven.Client.EscapeQueryOptions.AllowAllWildcards">
            <summary>
            This allows queries such as Name:*term*, which tend to be much
            more expensive and less performant than any other queries. 
            Consider carefully whatever you really need this, as there are other
            alternative for searching without doing extremely expensive leading 
            wildcard matches.
            </summary>
        </member>
        <member name="T:Raven.Client.Shard.IShardResolutionStrategy">
            <summary>
            Implementers of this interface provide a way to decide which shards will be queried
            for a specified operation
            </summary>
        </member>
        <member name="M:Raven.Client.Shard.IShardResolutionStrategy.GenerateShardIdFor(System.Object,Raven.Client.ITransactionalDocumentSession)">
            <summary>
             Generate a shard id for the specified entity
             </summary>
        </member>
        <member name="M:Raven.Client.Shard.IShardResolutionStrategy.MetadataShardIdFor(System.Object)">
            <summary>
             The shard id for the server that contains the metadata (such as the HiLo documents)
             for the given entity
             </summary>
        </member>
        <member name="M:Raven.Client.Shard.IShardResolutionStrategy.PotentialShardsFor(Raven.Client.Shard.ShardRequestData)">
            <summary>
             Selects the shard ids appropriate for the specified data.
             </summary><returns>Return a list of shards ids that will be search. Returning null means search all shards.</returns>
        </member>
        <member name="T:Raven.Client.Shard.ShardRequestData">
            <summary>
            Information required to resolve the appropriate shard for an entity / entity and key
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardRequestData.Keys">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Client.Shard.ShardRequestData.EntityType">
            <summary>
            Gets or sets the type of the entity.
            </summary>
            <value>The type of the entity.</value>
        </member>
        <member name="P:Raven.Client.Shard.ShardRequestData.Query">
            <summary>
            Gets or sets the query being executed
            </summary>
        </member>
        <member name="P:Raven.Client.Shard.ShardRequestData.IndexName">
            <summary>
            The index name for this query
            </summary>
        </member>
        <member name="T:Raven.Client.Util.Inflector">
            <summary>
            The Inflector class transforms words from one 
            form to another. For example, from singular to plural.
            </summary>
        </member>
        <member name="M:Raven.Client.Util.Inflector.Pluralize(System.String)">
            <summary>
            Return the plural of a word.
            </summary>
            <param name="word">The singular form</param>
            <returns>The plural form of <paramref name="word"/></returns>
        </member>
        <member name="M:Raven.Client.Util.Inflector.Singularize(System.String)">
            <summary>
            Return the singular of a word.
            </summary>
            <param name="word">The plural form</param>
            <returns>The singular form of <paramref name="word"/></returns>
        </member>
        <member name="M:Raven.Client.Util.Inflector.Capitalize(System.String)">
            <summary>
            Capitalizes a word.
            </summary>
            <param name="word">The word to be capitalized.</param>
            <returns><paramref name="word"/> capitalized.</returns>
        </member>
        <member name="T:Raven.Client.Util.JSBeautify">
            <summary>
            Original code taken from:
            https://raw.github.com/einars/js-beautify/master/attic/unmaintained/c-sharp/JSBeautify.cs
            Used under the BSD license: https://github.com/einars/js-beautify/blob/master/license.txt
            </summary>
        </member>
        <member name="T:Raven.Client.Util.ObjectReferenceEqualityComparer`1">
            <summary>
            A generic object comparer that would only use object's reference, 
            ignoring any <see cref="T:System.IEquatable`1"/> or <see cref="M:System.Object.Equals(System.Object)"/>  overrides.
            </summary>
        </member>
        <member name="F:Raven.Client.Util.ObjectReferenceEqualityComparer`1.Default">
            <summary>
            The default ObjectReferenceEqualityComparer instance
            </summary>
        </member>
        <member name="M:Raven.Client.Util.ObjectReferenceEqualityComparer`1.Equals(`0,`0)">
            <summary>
            When overridden in a derived class, determines whether two objects of type <typeparamref name="T"/> are equal.
            </summary>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
            <param name="x">The first object to compare.</param><param name="y">The second object to compare.</param>
        </member>
        <member name="M:Raven.Client.Util.ObjectReferenceEqualityComparer`1.GetHashCode(`0)">
            <summary>
            When overridden in a derived class, serves as a hash function for the specified object for hashing algorithms and data structures, such as a hash table.
            </summary>
            <returns>
            A hash code for the specified object.
            </returns>
            <param name="obj">The object for which to get a hash code.</param><exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="F:Raven.Abstractions.Default.DateTimeFormatsToRead">
            <remarks>
            'r' format is used on the in metadata, because it's delivered as http header. 
            </remarks>
        </member>
        <member name="T:Raven.Abstractions.Commands.DeleteCommandData">
            <summary>
            A single batch operation for a document DELETE
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Commands.ICommandData">
            <summary>
            A single operation inside a batch
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Commands.ICommandData.ToJson">
            <summary>
            Translate this instance to a Json object.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Commands.ICommandData.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.ICommandData.Method">
            <summary>
            Gets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.ICommandData.Etag">
            <summary>
            Gets the etag.
            </summary>
            <value>The etag.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.ICommandData.TransactionInformation">
            <summary>
            Gets the transaction information.
            </summary>
            <value>The transaction information.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.ICommandData.Metadata">
            <summary>
            Gets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.ICommandData.AdditionalData">
            <summary>
            Gets the Additional Data.
            </summary>
            <value>The Additional Data.</value>
        </member>
        <member name="M:Raven.Abstractions.Commands.DeleteCommandData.ToJson">
            <summary>
            Translate this instance to a Json object.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Commands.DeleteCommandData.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.DeleteCommandData.Method">
            <summary>
            Gets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.DeleteCommandData.Etag">
            <summary>
            Gets or sets the etag.
            </summary>
            <value>The etag.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.DeleteCommandData.TransactionInformation">
            <summary>
            Gets or sets the transaction information.
            </summary>
            <value>The transaction information.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.DeleteCommandData.Metadata">
            <summary>
            Gets or sets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="T:Raven.Abstractions.Commands.PatchCommandData">
            <summary>
             A single batch operation for a document PATCH
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Commands.PatchCommandData.ToJson">
            <summary>
            Translate this instance to a Json object.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Commands.PatchCommandData.Patches">
            <summary>
            Gets or sets the patches applied to this document
            </summary>
            <value>The patches.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.PatchCommandData.PatchesIfMissing">
            <summary>
            Gets or sets the patches to apply to a default document if the document is missing
            </summary>
            <value>The patches.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.PatchCommandData.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.PatchCommandData.Method">
            <summary>
            Gets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.PatchCommandData.Etag">
            <summary>
            Gets or sets the etag.
            </summary>
            <value>The etag.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.PatchCommandData.TransactionInformation">
            <summary>
            Gets the transaction information.
            </summary>
            <value>The transaction information.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.PatchCommandData.Metadata">
            <summary>
            Gets or sets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="T:Raven.Abstractions.Commands.PutCommandData">
            <summary>
            A single batch operation for a document PUT
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Commands.PutCommandData.ToJson">
            <summary>
            Translate this instance to a Json object.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Commands.PutCommandData.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.PutCommandData.Method">
            <summary>
            Gets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.PutCommandData.Etag">
            <summary>
            Gets or sets the etag.
            </summary>
            <value>The etag.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.PutCommandData.Document">
            <summary>
            Gets or sets the document.
            </summary>
            <value>The document.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.PutCommandData.TransactionInformation">
            <summary>
            Gets the transaction information.
            </summary>
            <value>The transaction information.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.PutCommandData.Metadata">
            <summary>
            Gets or sets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="T:Raven.Abstractions.Commands.ScriptedPatchCommandData">
            <summary>
             A single batch operation for a document EVAL (using a Javascript)
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Commands.ScriptedPatchCommandData.ToJson">
            <summary>
            Translate this instance to a Json object.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Commands.ScriptedPatchCommandData.Patch">
            <summary>
            Gets or sets the ScriptedPatchRequest (using JavaScript) that is used to patch the document
            </summary>
            <value>The Script.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.ScriptedPatchCommandData.PatchIfMissing">
            <summary>
            Gets or sets the ScriptedPatchRequest (using JavaScript) that is used to patch a default document if the document is missing
            </summary>
            <value>The Script.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.ScriptedPatchCommandData.Key">
            <summary>
            Gets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.ScriptedPatchCommandData.Method">
            <summary>
            Gets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.ScriptedPatchCommandData.Etag">
            <summary>
            Gets or sets the etag.
            </summary>
            <value>The etag.</value>
        </member>
        <member name="P:Raven.Abstractions.Commands.ScriptedPatchCommandData.AdditionalData">
            <summary>
            Gets the Additional Data.
            </summary>
            <value>The Additional Data.</value>
        </member>
        <member name="M:Raven.Abstractions.Connection.CountingStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Raven.Abstractions.Connection.CountingStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <returns>
            The new position within the current stream.
            </returns>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter. </param><param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position. </param><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:Raven.Abstractions.Connection.CountingStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes. </param><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Raven.Abstractions.Connection.CountingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source. </param><param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream. </param><param name="count">The maximum number of bytes to be read from the current stream. </param><exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length. </exception><exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null. </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.NotSupportedException">The stream does not support reading. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:Raven.Abstractions.Connection.CountingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream. </param><param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream. </param><param name="count">The number of bytes to be written to the current stream. </param><exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length. </exception><exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null. </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.NotSupportedException">The stream does not support writing. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:Raven.Abstractions.Connection.CountingStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>
            true if the stream supports reading; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Raven.Abstractions.Connection.CountingStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>
            true if the stream supports seeking; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Raven.Abstractions.Connection.CountingStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>
            true if the stream supports writing; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Raven.Abstractions.Connection.CountingStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <returns>
            A long value representing the length of the stream in bytes.
            </returns>
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:Raven.Abstractions.Connection.CountingStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <returns>
            The current position within the stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="T:Raven.Abstractions.Connection.WebRequestEventArgs">
            <summary>
            Event arguments for the event of creating a <see cref="T:System.Net.WebRequest"/>
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Connection.WebRequestEventArgs.Request">
            <summary>
            Gets or sets the web request.
            </summary>
            <value>The request.</value>
        </member>
        <member name="P:Raven.Abstractions.Connection.WebRequestEventArgs.JsonRequest">
            <summary>
            The RavenDB json request
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Connection.WebResponseExtensions">
            <summary>
            Extensions for web requests
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Connection.WebResponseExtensions.GetResponseStreamWithHttpDecompression(System.Net.WebResponse)">
            <summary>
            Gets the response stream with HTTP decompression.
            </summary>
            <param name="response">The response.</param>
            <returns></returns>
        </member>
        <member name="T:Raven.Abstractions.Data.Attachment">
            <summary>
            Attachment data and metadata
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.Attachment.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.Attachment.Size">
            <summary>
            The size of the attachment
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.Attachment.Metadata">
            <summary>
            Gets or sets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.Attachment.Etag">
            <summary>
            Gets or sets the etag.
            </summary>
            <value>The etag.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.Attachment.Key">
            <summary>
            The attachment name
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Data.BatchResult">
            <summary>
            The result of a single operation inside a batch
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.BatchResult.Etag">
            <summary>
            Gets or sets the etag generated by the etag (if applicable)
            </summary>
            <value>The etag.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.BatchResult.Method">
            <summary>
            Gets or sets the method used for the operation (PUT,DELETE,PATCH).
            </summary>
            <value>The method.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.BatchResult.Key">
            <summary>
            Gets or sets the key of the document
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.BatchResult.Metadata">
            <summary>
            Gets or sets the updated metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.BatchResult.AdditionalData">
            <summary>
            Gets or sets the updated Additional Data.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.BatchResult.PatchResult">
            <summary>
            Gets or sets the result of a PATCH operation.
            </summary>
            <value>The PatchResult.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.BatchResult.Deleted">
            <summary>
            Gets or sets the result of a DELETE operation.
            </summary>
            <value>true if the document was deleted, false if it did not exist.</value>
        </member>
        <member name="M:Raven.Abstractions.Data.ConnectionStringParser`1.ProcessConnectionStringOption(System.Net.NetworkCredential,System.String,System.String)">
            <summary>
            Parse the connection string option
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.Constants.EarthMeanRadiusKm">
             <summary>
             The International Union of Geodesy and Geophysics says the Earth's mean radius in KM is:
            
             [1] http://en.wikipedia.org/wiki/Earth_radius
             </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.FacetResult.Values">
            <summary>
            The facet terms and hits up to a limit of MaxResults items (as specified in the facet setup document), sorted
            in TermSortMode order (as indicated in the facet setup document).
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.FacetResult.RemainingTerms">
            <summary>
            A list of remaining terms in term sort order for terms that are outside of the MaxResults count.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.FacetResult.RemainingTermsCount">
            <summary>
            The number of remaining terms outside of those covered by the Values terms.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.FacetResult.RemainingHits">
            <summary>
            The number of remaining hits outside of those covered by the Values terms.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.FacetResults.Results">
            <summary>
            A list of results for the facet.  One entry for each term/range as specified in the facet setup document.
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Data.HighlightedField">
            <summary>
                Represent a field highlight options
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Data.HighlightedField.TryParse(System.String,Raven.Abstractions.Data.HighlightedField@)">
            <summary>
                Converts the string representation of a field highlighting options to the <see cref="T:Raven.Abstractions.Data.HighlightedField"/> class.
            </summary>
            <param name="value">
                Field highlighting options
                <example>Text:250,3,TextFragments</example>
            </param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="P:Raven.Abstractions.Data.HighlightedField.Field">
            <summary>
                Gets or sets the field.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.HighlightedField.FragmentLength">
            <summary>
                Gets or sets the fragment length.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.HighlightedField.FragmentCount">
            <summary>
                Gets or sets a value indicating how many highlight fragments should be created for the field
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.HighlightedField.FragmentsField">
            <summary>
                Gets or sets the field in query result item for highlighting fragments
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Data.IJsonDocumentMetadata">
            <summary>
            Interface that is used purely internally
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.IJsonDocumentMetadata.Metadata">
            <summary>
            	Gets or sets the metadata for the document
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.IJsonDocumentMetadata.Key">
            <summary>
            	Gets or sets the key for the document
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.IJsonDocumentMetadata.NonAuthoritativeInformation">
            <summary>
            	Gets or sets a value indicating whether this document is non authoritative (modified by uncommitted transaction).
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.IJsonDocumentMetadata.Etag">
            <summary>
            Gets or sets the etag.
            </summary>
            <value>The etag.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.IJsonDocumentMetadata.LastModified">
            <summary>
            	Gets or sets the last modified date for the document
            </summary>
            <value>The last modified.</value>
        </member>
        <member name="T:Raven.Abstractions.Data.IndexFailureInformation">
            <summary>
            Information about index failure rates
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Data.IndexFailureInformation.GetErrorMessage">
            <summary>
            Gets the error message.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexFailureInformation.IsInvalidIndex">
            <summary>
            Gets a value indicating whether this is invalid index.
            </summary>
            <value>
            	<c>true</c> if this is invalid index; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexFailureInformation.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexFailureInformation.Attempts">
            <summary>
            Gets or sets the number of indexing attempts.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexFailureInformation.Errors">
            <summary>
            Gets or sets the number of indexing errors.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexFailureInformation.Successes">
            <summary>
            Gets or sets the number of indexing successes.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexFailureInformation.ReduceAttempts">
            <summary>
            Gets or sets the number of reduce attempts.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexFailureInformation.ReduceErrors">
            <summary>
            Gets or sets the number of reduce errors.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexFailureInformation.ReduceSuccesses">
            <summary>
            Gets or sets the number of reduce successes.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexFailureInformation.FailureRate">
            <summary>
            Gets the failure rate.
            </summary>
            <value>The failure rate.</value>
        </member>
        <member name="T:Raven.Abstractions.Data.IndexQuery">
            <summary>
            All the information required to query a Raven index
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Data.IndexQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Data.IndexQuery"/> class.
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Data.IndexQuery.GetIndexQueryUrl(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Gets the index query URL.
            </summary>
            <param name="operationUrl">The operation URL.</param>
            <param name="index">The index.</param>
            <param name="operationName">Name of the operation.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Abstractions.Data.IndexQuery.GetCustomQueryStringVariables">
            <summary>
            Gets the custom query string variables.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.PageSizeSet">
            <summary>
            Whatever the page size was explicitly set or still at its default value
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.Query">
            <summary>
            Gets or sets the query.
            </summary>
            <value>The query.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.TotalSize">
            <summary>
            Gets or sets the total size.
            </summary>
            <value>The total size.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.QueryInputs">
            <summary>
            Additional query inputs
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.Start">
            <summary>
            Gets or sets the start of records to read.
            </summary>
            <value>The start.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.PageSize">
            <summary>
            Gets or sets the size of the page.
            </summary>
            <value>The size of the page.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.AggregationOperation">
            <summary>
            The aggregation operation for this query
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.GroupBy">
            <summary>
            The fields to group the query by
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.FieldsToFetch">
            <summary>
            Gets or sets the fields to fetch.
            </summary>
            <value>The fields to fetch.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.SortedFields">
            <summary>
            Gets or sets the fields to sort by
            </summary>
            <value>The sorted fields.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.Cutoff">
            <summary>
            Gets or sets the cutoff date
            </summary>
            <value>The cutoff.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.CutoffEtag">
            <summary>
            Gets or sets the cutoff etag
            </summary>
            <remarks>
            Cutoff etag is used to check if the index has already process a document with the given
            etag. Unlike Cutoff, which uses dates and is susceptible to clock synchronization issues between
            machines, cutoff etag doesn't rely on both the server and client having a synchronized clock and 
            can work without it.
            However, when used to query map/reduce indexes, it does NOT guarantee that the document that this
            etag belong to is actually considered for the results. 
            What it does it guarantee that the document has been mapped, but not that the mapped values has been reduce. 
            Since map/reduce queries, by their nature,tend to be far less susceptible to issues with staleness, this is 
            considered to be an acceptable tradeoff.
            If you need absolute no staleness with a map/reduce index, you will need to ensure synchronized clocks and 
            use the Cutoff date option, instead.
            </remarks>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.DefaultField">
            <summary>
            The default field to use when querying directly on the Lucene query
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.DefaultOperator">
            <summary>
            Changes the default operator mode we use for queries.
            When set to Or a query such as 'Name:John Age:18' will be interpreted as:
             Name:John OR Age:18
            When set to And the query will be interpreted as:
             Name:John AND Age:18
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.SkipTransformResults">
            <summary>
            If set to true, RavenDB won't execute the transform results function
            returning just the raw results instead
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.SkippedResults">
            <summary>
            Gets or sets the number of skipped results.
            </summary>
            <value>The skipped results.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.DebugOptionGetIndexEntries">
            <summary>
            Whatever we should get the raw index queries
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.HighlightedFields">
            <summary>
            Gets or sets the options to highlight the fields
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.HighlighterPreTags">
            <summary>
            Gets or sets the highlighter pre tags
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.HighlighterPostTags">
            <summary>
            Gets or sets the highlighter post tags
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.ResultsTransformer">
            <summary>
            Gets or sets the results transformer
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.IndexQuery.DisableCaching">
            <summary>
            Whatever we should disable caching of query results
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Data.JsonDocument">
            <summary>
            A document representation:
            * Data / Projection
            * Etag
            * Metadata
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Data.JsonDocument.#ctor">
            <summary>
            Create a new instance of JsonDocument
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.JsonDocument.SerializedSizeOnDisk">
            <summary>
            How much space this document takes on disk
            Only relevant during indexing phases, and not available on the client
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.JsonDocument.SkipDeleteFromIndex">
            <summary>
            Whatever this document can be skipped from delete
            Only relevant during indexing phases, and not available on the client
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Data.JsonDocument.ToJson">
            <summary>
            Translate the json document to a <see cref="T:Raven.Json.Linq.RavenJObject"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Raven.Abstractions.Data.JsonDocument.DataAsJson">
            <summary>
            Gets or sets the document data as json.
            </summary>
            <value>The data as json.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.JsonDocument.Metadata">
            <summary>
            Gets or sets the metadata for the document
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.JsonDocument.Key">
            <summary>
            Gets or sets the key for the document
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.JsonDocument.NonAuthoritativeInformation">
            <summary>
            Gets or sets a value indicating whether this document is non authoritative (modified by uncommitted transaction).
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.JsonDocument.Etag">
            <summary>
            Gets or sets the etag.
            </summary>
            <value>The etag.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.JsonDocument.LastModified">
            <summary>
            Gets or sets the last modified date for the document
            </summary>
            <value>The last modified.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.JsonDocument.TempIndexScore">
            <summary>
            The ranking of this result in the current query
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Data.JsonDocumentMetadata">
            <summary>
            A document representation:
            * Etag
            * Metadata
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.JsonDocumentMetadata.Metadata">
            <summary>
            Gets or sets the metadata for the document
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.JsonDocumentMetadata.Key">
            <summary>
            Gets or sets the key for the document
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.JsonDocumentMetadata.NonAuthoritativeInformation">
            <summary>
            Gets or sets a value indicating whether this document is non authoritative (modified by uncommitted transaction).
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.JsonDocumentMetadata.Etag">
            <summary>
            Gets or sets the etag.
            </summary>
            <value>The etag.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.JsonDocumentMetadata.LastModified">
            <summary>
            Gets or sets the last modified date for the document
            </summary>
            <value>The last modified.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.MoreLikeThisQuery.MinimumTermFrequency">
            <summary>
            Ignore terms with less than this frequency in the source doc. Default is 2.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.MoreLikeThisQuery.MinimumDocumentFrequency">
            <summary>
            Ignore words which do not occur in at least this many documents. Default is 5.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.MoreLikeThisQuery.MaximumDocumentFrequency">
            <summary>
            Ignore words which occur in more than this many documents. Default is Int32.MaxValue.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.MoreLikeThisQuery.MaximumDocumentFrequencyPercentage">
            <summary>
            Ignore words which occur in more than this percentage of documents.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.MoreLikeThisQuery.Boost">
            <summary>
            Boost terms in query based on score. Default is false.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.MoreLikeThisQuery.BoostFactor">
            <summary>
            Boost factor when boosting based on score. Default is 1.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.MoreLikeThisQuery.MinimumWordLength">
            <summary>
            Ignore words less than this length or if 0 then this has no effect. Default is 0.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.MoreLikeThisQuery.MaximumWordLength">
            <summary>
            Ignore words greater than this length or if 0 then this has no effect. Default is 0.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.MoreLikeThisQuery.MaximumQueryTerms">
            <summary>
            Return a Query with no more than this many terms. Default is 25.
            </summary> 
        </member>
        <member name="P:Raven.Abstractions.Data.MoreLikeThisQuery.MaximumNumberOfTokensParsed">
            <summary>
            The maximum number of tokens to parse in each example doc field that is not stored with TermVector support. Default is 5000.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.MoreLikeThisQuery.StopWordsDocumentId">
            <summary>
            The document id containing the custom stop words
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.MoreLikeThisQuery.Fields">
            <summary>
            The fields to compare
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.MoreLikeThisQuery.DocumentId">
            <summary>
            The document id to use as the basis for comparison
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.MoreLikeThisQuery.IndexName">
            <summary>
            The name of the index to use for this operation
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.MoreLikeThisQuery.MapGroupFields">
            <summary>
            Values for the the mapping group fields to use as the basis for comparison
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Data.MultiLoadResult">
            <summary>
            Represent a result which include both document results and included documents
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Data.MultiLoadResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Data.MultiLoadResult"/> class.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.MultiLoadResult.Results">
            <summary>
            Gets or sets the document results.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.MultiLoadResult.Includes">
            <summary>
            Gets or sets the included documents
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Data.PatchCommandType">
            <summary>
            Patch command options
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.PatchCommandType.Set">
            <summary>
            Set a property
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.PatchCommandType.Unset">
            <summary>
            Unset (remove) a property
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.PatchCommandType.Add">
            <summary>
            Add an item to an array
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.PatchCommandType.Insert">
            <summary>
            Insert an item to an array at a specified position
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.PatchCommandType.Remove">
            <summary>
            Remove an item from an array at a specified position
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.PatchCommandType.Modify">
            <summary>
            Modify a property value by providing a nested set of patch operation
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.PatchCommandType.Inc">
            <summary>
            Increment a property by a specified value
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.PatchCommandType.Copy">
            <summary>
            Copy a property value to another property
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.PatchCommandType.Rename">
            <summary>
            Rename a property
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Data.PatchRequest">
            <summary>
            A patch request for a specified document
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Data.PatchRequest.ToJson">
            <summary>
            Translate this instance to json
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Data.PatchRequest.FromJson(Raven.Json.Linq.RavenJObject)">
            <summary>
            Create an instance from a json object
            </summary>
            <param name="patchRequestJson">The patch request json.</param>
        </member>
        <member name="P:Raven.Abstractions.Data.PatchRequest.Type">
            <summary>
            Gets or sets the type of the operation
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.PatchRequest.PrevVal">
            <summary>
            Gets or sets the previous value, which is compared against the current value to verify a
            change isn't overwriting new values.
            If the value is null, the operation is always successful
            </summary>
            <value>The previous value.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.PatchRequest.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.PatchRequest.Nested">
            <summary>
            Gets or sets the nested operations to perform. This is only valid when the <see cref="P:Raven.Abstractions.Data.PatchRequest.Type"/> is <see cref="F:Raven.Abstractions.Data.PatchCommandType.Modify"/>.
            </summary>
            <value>The nested.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.PatchRequest.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.PatchRequest.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.PatchRequest.AllPositions">
            <summary>
            Get or sets AllPositions. Set this property to true if you want to modify all items in an collection.
            </summary>
            <value>AllPositions true/false</value>
        </member>
        <member name="T:Raven.Abstractions.Data.PatchResult">
            <summary>
            The result of a patch operation
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.PatchResult.DocumentDoesNotExists">
            <summary>
            The document does not exists, operation was a no-op
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.PatchResult.Patched">
            <summary>
            Document was properly patched
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.PatchResult.Tested">
            <summary>
            Document was properly tested
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Data.PutResult">
            <summary>
            The result of a PUT operation
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.PutResult.Key">
            <summary>
            Gets or sets the key.
            </summary>
            <value>The key.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.PutResult.ETag">
            <summary>
            Gets or sets the generated Etag for the PUT operation
            </summary>
            <value>The Etag.</value>
        </member>
        <member name="T:Raven.Abstractions.Data.QueryResult">
            <summary>
            The result of a query
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Data.QueryResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Data.QueryResult"/> class.
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Data.QueryResult.EnsureSnapshot">
            <summary>
            Ensures that the query results can be used in snapshots
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Data.QueryResult.CreateSnapshot">
            <summary>
            Creates a snapshot of the query results
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.QueryResult.Results">
            <summary>
            Gets or sets the document resulting from this query.
            </summary>
            <value>The results.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.QueryResult.Includes">
            <summary>
            Gets or sets the document included in the result.
            </summary>
            <value>The includes.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.QueryResult.IsStale">
            <summary>
            Gets or sets a value indicating whether the index is stale.
            </summary>
            <value><c>true</c> if the index is stale; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.QueryResult.IndexTimestamp">
            <summary>
            The last time the index was updated.
            This can be used to determine the freshness of the data.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.QueryResult.TotalResults">
            <summary>
            Gets or sets the total results for this query
            </summary>
            <value>The total results.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.QueryResult.SkippedResults">
            <summary>
            Gets or sets the skipped results
            </summary>
            <value>The skipped results.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.QueryResult.IndexName">
            <summary>
            The index used to answer this query
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.QueryResult.IndexEtag">
            <summary>
            The last etag indexed by the index.
            This can be used to determine whatever the results can be cached.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.QueryResult.ResultEtag">
            <summary>
            The ETag value for this index current state, which include what we docs we indexed,
            what document were deleted, etc.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.QueryResult.Highlightings">
            <summary>
            Gets or sets highlighter results 
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.QueryResult.NonAuthoritativeInformation">
            <summary>
            Gets or sets a value indicating whether any of the documents returned by this query
            are non authoritative (modified by uncommitted transaction).
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.QueryResult.LastQueryTime">
            <summary>
            The timestamp of the last time the index was queried
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.QueryResult.DurationMilliseconds">
            <summary>
            The duration of actually executing the query server side
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Data.ScriptedPatchRequest">
            <summary>
            A Advanced patch request for a specified document (using JavaScript)
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.ScriptedPatchRequest.Script">
            <summary>
            The JavaScript function to use the patch a document
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:Raven.Abstractions.Data.SortedField">
            <summary>
            Represent a field sort options
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Data.SortedField.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Data.SortedField"/> class.
            </summary>
            <param name="fieldWithPotentialPrefix">The field with potential prefix.</param>
        </member>
        <member name="P:Raven.Abstractions.Data.SortedField.Field">
            <summary>
            Gets or sets the field.
            </summary>
            <value>The field.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.SortedField.Descending">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Raven.Abstractions.Data.SortedField"/> is descending.
            </summary>
            <value><c>true</c> if descending; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Raven.Abstractions.Data.SpatialIndexQuery">
            <summary>
            A query using spatial filtering
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Data.SpatialIndexQuery.#ctor(Raven.Abstractions.Data.IndexQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Data.SpatialIndexQuery"/> class.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="M:Raven.Abstractions.Data.SpatialIndexQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Data.SpatialIndexQuery"/> class.
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Data.SpatialIndexQuery.GetCustomQueryStringVariables">
            <summary>
            Gets the custom query string variables.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Raven.Abstractions.Data.SpatialIndexQuery.RadiusUnitOverride">
            <summary>
            Overrides the units defined in the spatial index
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Data.StringDistanceTypes">
            <summary>
            String distance algorithms used in suggestion query
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.StringDistanceTypes.None">
            <summary>
            Default, suggestion is not active
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.StringDistanceTypes.Default">
            <summary>
            Default, equivalent to Levenshtein
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.StringDistanceTypes.Levenshtein">
            <summary>
            Levenshtein distance algorithm (default)
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.StringDistanceTypes.JaroWinkler">
            <summary>
            JaroWinkler distance algorithm
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Data.StringDistanceTypes.NGram">
            <summary>
            NGram distance algorithm
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Data.SuggestionQuery">
            <summary>
            
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Data.SuggestionQuery.#ctor">
            <summary>
            Create a new instance of <seealso cref="T:Raven.Abstractions.Data.SuggestionQuery"/>
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.SuggestionQuery.Term">
            <summary>
            Gets or sets the term. The term is what the user likely entered, and will used as the basis of the suggestions.
            </summary>
            <value>The term.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.SuggestionQuery.Field">
            <summary>
            Gets or sets the field to be used in conjunction with the index.
            </summary>
            <value>The field.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.SuggestionQuery.MaxSuggestions">
            <summary>
            Gets or sets the number of suggestions to return.
            </summary>
            <value>The number of suggestions.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.SuggestionQuery.Distance">
            <summary>
            Gets or sets the string distance algorithm.
            </summary>
            <value>The distance.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.SuggestionQuery.Accuracy">
            <summary>
            Gets or sets the accuracy.
            </summary>
            <value>The accuracy.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.SuggestionQuery.Popularity">
            <summary>
            Whatever to return the terms in order of popularity
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Data.SuggestionQueryResult">
            <summary>
            The result of the suggestion query
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.SuggestionQueryResult.Suggestions">
            <summary>
            The suggestions based on the term and dictionary
            </summary>
            <value>The suggestions.</value>
        </member>
        <member name="T:Raven.Abstractions.Data.TransactionInformation">
            <summary>
            Transaction information that identify the transaction id and timeout
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Data.TransactionInformation.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Raven.Abstractions.Data.TransactionInformation.Timeout">
            <summary>
            Gets or sets the timeout.
            </summary>
            <value>The timeout.</value>
        </member>
        <member name="T:Raven.Abstractions.Exceptions.BadRequestException">
            <summary>
            This exception is raised when a bad request is made to the server
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Exceptions.BadRequestException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Exceptions.BadRequestException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Exceptions.BadRequestException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Exceptions.BadRequestException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Abstractions.Exceptions.BadRequestException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Exceptions.BadRequestException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:Raven.Abstractions.Exceptions.ConcurrencyException">
            <summary>
            This exception is raised when a concurrency conflict is encountered
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Exceptions.ConcurrencyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Exceptions.ConcurrencyException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Exceptions.ConcurrencyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Exceptions.ConcurrencyException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Abstractions.Exceptions.ConcurrencyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Exceptions.ConcurrencyException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="P:Raven.Abstractions.Exceptions.ConcurrencyException.ExpectedETag">
            <summary>
            Gets or sets the expected E tag.
            </summary>
            <value>The expected E tag.</value>
        </member>
        <member name="P:Raven.Abstractions.Exceptions.ConcurrencyException.ActualETag">
            <summary>
            Gets or sets the actual E tag.
            </summary>
            <value>The actual E tag.</value>
        </member>
        <member name="T:Raven.Abstractions.Exceptions.DocumentDoesNotExistsException">
            <summary>
            This exception is raised when a patch is made against a non existing document
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Exceptions.DocumentDoesNotExistsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Exceptions.DocumentDoesNotExistsException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Exceptions.DocumentDoesNotExistsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Exceptions.DocumentDoesNotExistsException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Abstractions.Exceptions.DocumentDoesNotExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Exceptions.DocumentDoesNotExistsException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:Raven.Abstractions.Exceptions.IndexDisabledException">
            <summary>
            This exception is raised when querying an index that was disabled because the error rate exceeded safety margins
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Exceptions.IndexDisabledException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Exceptions.IndexDisabledException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Exceptions.IndexDisabledException.#ctor(Raven.Abstractions.Data.IndexFailureInformation)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Exceptions.IndexDisabledException"/> class.
            </summary>
            <param name="information">The information.</param>
        </member>
        <member name="M:Raven.Abstractions.Exceptions.IndexDisabledException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Exceptions.IndexDisabledException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Abstractions.Exceptions.IndexDisabledException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Exceptions.IndexDisabledException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="P:Raven.Abstractions.Exceptions.IndexDisabledException.Information">
            <summary>
            Gets or sets the information about the index failure 
            </summary>
            <value>The information.</value>
        </member>
        <member name="T:Raven.Abstractions.Exceptions.IndexDoesNotExistsException">
            <summary>
            This exception is raised when a query is made against a non existing index
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Exceptions.IndexDoesNotExistsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Exceptions.IndexDoesNotExistsException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Exceptions.IndexDoesNotExistsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Exceptions.IndexDoesNotExistsException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Abstractions.Exceptions.IndexDoesNotExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Exceptions.IndexDoesNotExistsException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:Raven.Abstractions.Exceptions.OperationVetoedException">
            <summary>
            This exception is raised when an operation has been vetoed by a trigger
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Exceptions.OperationVetoedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Exceptions.OperationVetoedException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Exceptions.OperationVetoedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Exceptions.OperationVetoedException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Raven.Abstractions.Exceptions.OperationVetoedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Exceptions.OperationVetoedException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="T:Raven.Abstractions.Extensions.DisposableAction">
            <summary>
            A helper class that translate between Disposable and Action
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Extensions.DisposableAction.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Extensions.DisposableAction"/> class.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Raven.Abstractions.Extensions.DisposableAction.Dispose">
            <summary>
            Execute the relevant actions
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Extensions.ExceptionExtensions">
            <summary>
             Extension methods to handle common scenarios
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Extensions.ExceptionExtensions.ExtractSingleInnerException(System.AggregateException)">
            <summary>
            Recursively examines the inner exceptions of an <see cref="T:System.AggregateException"/> and returns a single child exception.
            </summary>
            <returns>
            If any of the aggregated exceptions have more than one inner exception, null is returned.
            </returns>
        </member>
        <member name="M:Raven.Abstractions.Extensions.ExceptionExtensions.SimplifyError(System.Exception)">
            <summary>
            Extracts a portion of an exception for a user friendly display
            </summary>
            <param name="e">The exception.</param>
            <returns>The primary portion of the exception message.</returns>
        </member>
        <member name="M:Raven.Abstractions.Extensions.ExceptionExtensions.ExceptionToString(System.Exception,System.Action{System.Text.StringBuilder})">
            <remarks>Code from http://stackoverflow.com/questions/1886611/c-overriding-tostring-method-for-custom-exceptions </remarks>
        </member>
        <member name="T:Raven.Abstractions.Extensions.ExpressionExtensions">
            <summary>
             Extensions for Linq expressions
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Extensions.ExpressionExtensions.ToPropertyPath(System.Linq.Expressions.LambdaExpression,System.Char,System.Char)">
            <summary>
             Turn an expression like x=&lt; x.User.Name to "User.Name"
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Extensions.JsonExtensions">
            <summary>
            Json extensions 
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Extensions.JsonExtensions.ToJObject(System.Byte[])">
            <summary>
            Convert a byte array to a RavenJObject
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Extensions.JsonExtensions.ToJObject(System.IO.Stream)">
            <summary>
            Convert a byte array to a RavenJObject
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Extensions.JsonExtensions.WriteTo(Raven.Json.Linq.RavenJToken,System.IO.Stream)">
            <summary>
            Convert a RavenJToken to a byte array
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Extensions.JsonExtensions.JsonDeserialization``1(System.Byte[])">
            <summary>
            Deserialize a <param name="self"/> to an instance of <typeparam name="T"/>
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Extensions.JsonExtensions.JsonDeserialization``1(Raven.Json.Linq.RavenJObject)">
            <summary>
            Deserialize a <param name="self"/> to an instance of<typeparam name="T"/>
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Extensions.JsonExtensions.JsonDeserialization``1(System.IO.StreamReader)">
            <summary>
            Deserialize a <param name="self"/> to an instance of<typeparam name="T"/>
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Extensions.JsonExtensions.JsonDeserialization``1(System.IO.Stream)">
            <summary>
            Deserialize a <param name="self"/> to an instance of<typeparam name="T"/>
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Extensions.MetadataExtensions">
            <summary>
            Extensions for handling metadata
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Extensions.MetadataExtensions.FilterHeaders(Raven.Json.Linq.RavenJObject)">
            <summary>
            Filters the headers from unwanted headers
            </summary>
            <param name="self">The self.</param>
            <returns></returns>public static RavenJObject FilterHeaders(this System.Collections.Specialized.NameValueCollection self, bool isServerDocument)
        </member>
        <member name="M:Raven.Abstractions.Extensions.MetadataExtensions.FilterHeaders(Raven.Client.Silverlight.MissingFromSilverlight.NameValueCollection)">
            <summary>
            Filters the headers from unwanted headers
            </summary>
            <returns></returns>public static RavenJObject FilterHeaders(this System.Collections.Specialized.NameValueCollection self, bool isServerDocument)
        </member>
        <member name="M:Raven.Abstractions.Extensions.MetadataExtensions.FilterHeaders(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}})">
            <summary>
            Filters the headers from unwanted headers
            </summary>
            <returns></returns>public static RavenJObject FilterHeaders(this System.Collections.Specialized.NameValueCollection self, bool isServerDocument)
        </member>
        <member name="T:Raven.Abstractions.Extensions.Reference`1">
            <summary>
            A reference that can be used with lambda expression
            to pass a value out.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Extensions.Reference`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Raven.Abstractions.Extensions.StreamExtensions">
            <summary>
            Extensions for working with streams
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Extensions.StreamExtensions.ReadData(System.IO.Stream)">
            <summary>
            Reads the entire request buffer to memory and return it as a byte array.
            </summary>
            <param name="stream">The stream to read.</param>
            <returns>The returned byte array.</returns>
        </member>
        <member name="M:Raven.Abstractions.Extensions.StreamExtensions.ReadDataAsync(System.IO.Stream)">
            <summary>
            Asynchronously reads the entire request buffer to memory and return it as a byte array.
            </summary>
            <param name="stream">The stream to read.</param>
            <returns>A task that, when completed, contains the returned byte array.</returns>
        </member>
        <member name="M:Raven.Abstractions.Extensions.StreamExtensions.ReadEntireBlock(System.IO.Stream,System.Int32)">
            <summary>
            Allocates a byte array and reads an entire block from the stream
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Extensions.StreamExtensions.ReadEntireBlock(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads an entire block from the stream
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.JsonTextReaderAsync">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to JSON text data.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.IJsonLineInfo">
            <summary>
            Provides an interface to enable a class to return line and position information.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.IJsonLineInfo.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
            	<c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.IJsonLineInfo.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
            <value>The current line number or 0 if no line information is available (for example, HasLineInfo returns false).</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.IJsonLineInfo.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
            <value>The current line position or 0 if no line information is available (for example, HasLineInfo returns false).</value>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextReaderAsync.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> class with the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="reader">The <c>TextReader</c> containing the XML data to read.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextReaderAsync.ReadAsync">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextReaderAsync.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]"/>.
            </summary>
            <returns>
            A <see cref="T:Byte[]"/> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextReaderAsync.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextReaderAsync.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextReaderAsync.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextReaderAsync.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextReaderAsync.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.DateTimeOffset"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextReaderAsync.Close">
            <summary>
            Changes the state to closed. 
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextReaderAsync.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
            	<c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextReaderAsync.SkipAsync">
            <summary>
            Skips the children of the current token.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextReaderAsync.SetToken(Raven.Imports.Newtonsoft.Json.JsonToken)">
            <summary>
            Sets the current token.
            </summary>
            <param name="newToken">The new token.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextReaderAsync.SetToken(Raven.Imports.Newtonsoft.Json.JsonToken,System.Object)">
            <summary>
            Sets the current token and value.
            </summary>
            <param name="newToken">The new token.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextReaderAsync.SetStateBasedOnCurrent">
            <summary>
            Sets the state based on current token type.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextReaderAsync.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextReaderAsync.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonTextReaderAsync.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
            <value>
            The current line number or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonTextReaderAsync.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
            <value>
            The current line position or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonTextReaderAsync.CurrentState">
            <summary>
            Gets the current reader JsonReader.State.
            </summary>
            <value>The current reader JsonReader.State.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonTextReaderAsync.CloseInput">
            <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader"/> should be closed when the reader is closed.
            </summary>
            <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader"/> when
            the reader is closed; otherwise false. The default is true.
            </value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonTextReaderAsync.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonTextReaderAsync.DateTimeZoneHandling">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> time zones are handling when reading JSON.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonTextReaderAsync.DateParseHandling">
            <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonTextReaderAsync.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReaderException"/>.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonTextReaderAsync.TokenType">
            <summary>
            Gets the type of the current JSON token. 
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonTextReaderAsync.Value">
            <summary>
            Gets the text value of the current JSON token.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonTextReaderAsync.ValueType">
            <summary>
            Gets The Common Language Runtime (CLR) type for the current JSON token.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonTextReaderAsync.Depth">
            <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
            <value>The depth of the current token in the JSON document.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonTextReaderAsync.Path">
            <summary>
            Gets the path of the current JSON token. 
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonTextReaderAsync.Culture">
            <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Indexing.FieldIndexing">
            <summary>
            Options for indexing a field
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.FieldIndexing.No">
            <summary>
            Do not index the field value. This field can thus not be searched, but one can still access its contents provided it is stored.
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.FieldIndexing.Analyzed">
            <summary>
            Index the tokens produced by running the field's value through an Analyzer. This is useful for common text.
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.FieldIndexing.NotAnalyzed">
            <summary>
            Index the field's value without using an Analyzer, so it can be searched.  As no analyzer is used the 
            value will be stored as a single term. This is useful for unique Ids like product numbers.
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.FieldIndexing.Default">
            <summary>
            Index this field using the default internal analyzer: LowerCaseKeywordAnalyzer
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Indexing.FieldStorage">
            <summary>
            Specifies whether and how a field should be stored.
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.FieldStorage.Yes">
            <summary>
            Store the original field value in the index. This is useful for short texts like a document's title which should be displayed with the results. 
            The value is stored in its original form, i.e. no analyzer is used before it is stored.
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.FieldStorage.No">
            <summary>
            Do not store the field value in the index.
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Indexing.FieldTermVector">
            <summary>
            Specifies whether to include term vectors for a field
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.FieldTermVector.No">
            <summary>
            Do not store term vectors
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.FieldTermVector.Yes">
            <summary>
            Store the term vectors of each document. A term vector is a list of the document's
            terms and their number of occurrences in that document.
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.FieldTermVector.WithPositions">
            <summary>
            Store the term vector + token position information
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.FieldTermVector.WithOffsets">
            <summary>
            Store the term vector + Token offset information
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.FieldTermVector.WithPositionsAndOffsets">
            <summary>
            Store the term vector + Token position and offset information
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Indexing.IndexDefinition">
            <summary>
            A definition of a RavenIndex
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Indexing.IndexDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Indexing.IndexDefinition"/> class.
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Indexing.IndexDefinition.Equals(Raven.Abstractions.Indexing.IndexDefinition)">
            <summary>
            Equals the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Abstractions.Indexing.IndexDefinition.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Raven.Abstractions.Indexing.IndexDefinition.GetIndexHash">
            <summary>
            Provide a cached version of the index hash code, which is used when generating
            the index etag. 
            It isn't really useful for anything else, in particular, we cache that because
            we want to avoid calculating the cost of doing this over and over again on each 
            query.
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Indexing.IndexDefinition.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Raven.Abstractions.Indexing.IndexDefinition.RemoveDefaultValues">
            <summary>
            Remove the default values that we don't actually need
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Indexing.IndexDefinition.Name">
            <summary>
            Get or set the name of the index
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Indexing.IndexDefinition.LockMode">
            <summary>
            Get or set the index lock mode
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Indexing.IndexDefinition.Map">
            <summary>
            Gets or sets the map function, if there is only one
            </summary>
            <remarks>
            This property only exists for backward compatibility purposes
            </remarks>
        </member>
        <member name="P:Raven.Abstractions.Indexing.IndexDefinition.Maps">
            <summary>
            All the map functions for this index
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Indexing.IndexDefinition.Reduce">
            <summary>
            Gets or sets the reduce function
            </summary>
            <value>The reduce.</value>
        </member>
        <member name="P:Raven.Abstractions.Indexing.IndexDefinition.TransformResults">
            <summary>
            Gets or sets the translator function
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Indexing.IndexDefinition.IsMapReduce">
            <summary>
            Gets a value indicating whether this instance is map reduce index definition
            </summary>
            <value>
            	<c>true</c> if this instance is map reduce; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Raven.Abstractions.Indexing.IndexDefinition.Stores">
            <summary>
            Gets or sets the stores options
            </summary>
            <value>The stores.</value>
        </member>
        <member name="P:Raven.Abstractions.Indexing.IndexDefinition.Indexes">
            <summary>
            Gets or sets the indexing options
            </summary>
            <value>The indexes.</value>
        </member>
        <member name="P:Raven.Abstractions.Indexing.IndexDefinition.SortOptions">
            <summary>
            Gets or sets the sort options.
            </summary>
            <value>The sort options.</value>
        </member>
        <member name="P:Raven.Abstractions.Indexing.IndexDefinition.Analyzers">
            <summary>
            Gets or sets the analyzers options
            </summary>
            <value>The analyzers.</value>
        </member>
        <member name="P:Raven.Abstractions.Indexing.IndexDefinition.Fields">
            <summary>
            The fields that are queryable in the index
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Indexing.IndexDefinition.Suggestions">
            <summary>
            Gets or sets the suggest options
            </summary>
            <value>The suggest options.</value>
        </member>
        <member name="P:Raven.Abstractions.Indexing.IndexDefinition.TermVectors">
            <summary>
            Gets or sets the term vectors options
            </summary>
            <value>The term vectors.</value>
        </member>
        <member name="P:Raven.Abstractions.Indexing.IndexDefinition.SpatialIndexes">
            <summary>
            Gets or sets the spatial options
            </summary>
            <value>The spatial options.</value>
        </member>
        <member name="P:Raven.Abstractions.Indexing.IndexDefinition.InternalFieldsMapping">
            <summary>
            Internal map of field names to expressions generating them
            Only relevant for auto indexes and only used internally
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Indexing.TransformerDefinition.TransformResults">
            <summary>
            Gets or sets the translator function
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Indexing.NumberUtil">
            <summary>
            Helper function for numeric to indexed string and vice versa
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Indexing.NumberUtil.NumberToString(System.Int32)">
            <summary>
            Translate a number to an indexable string
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Indexing.NumberUtil.NumberToString(System.Int64)">
            <summary>
            Translate a number to an indexable string
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Indexing.NumberUtil.NumberToString(System.Single)">
            <summary>
            Translate a number to an indexable string
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Indexing.NumberUtil.NumberToString(System.Double)">
            <summary>
            Translate a number to an indexable string
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Indexing.NumberUtil.StringToNumber(System.String)">
            <summary>
            Translate an indexable string to a number
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Indexing.SortOptions">
            <summary>
            The sort options to use for a particular field
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.SortOptions.None">
            <summary>
            No sort options
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.SortOptions.String">
            <summary>Sort using term values as Strings.  Sort values are String and lower
            values are at the front. 
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.SortOptions.Int">
            <summary>Sort using term values as encoded Integers.  Sort values are Integer and
            lower values are at the front. 
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.SortOptions.Float">
            <summary>Sort using term values as encoded Floats.  Sort values are Float and
            lower values are at the front. 
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.SortOptions.Long">
            <summary>Sort using term values as encoded Longs.  Sort values are Long and
            lower values are at the front. 
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.SortOptions.Double">
            <summary>Sort using term values as encoded Doubles.  Sort values are Double and
            lower values are at the front. 
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.SortOptions.Short">
            <summary>Sort using term values as encoded Shorts.  Sort values are Short and
            lower values are at the front. 
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.SortOptions.Custom">
            <summary>Sort using a custom Comparator.  Sort values are any Comparable and
            sorting is done according to natural order. 
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.SortOptions.Byte">
            <summary>Sort using term values as encoded Bytes.  Sort values are Byte and
            lower values are at the front. 
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.SortOptions.StringVal">
            <summary>Sort using term values as Strings, but comparing by
            value (using String.compareTo) for all comparisons.
            This is typically slower than {@link #STRING}, which
            uses ordinals to do the sorting. 
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Indexing.SpatialOptions.Units">
            <summary>
            Circle radius units, only used for geography  indexes
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Indexing.SpatialRelation.Nearby">
            <summary>
            Does not filter the query, merely sort by the distance
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Indexing.GeographySpatialOptionsFactory.Default(Raven.Abstractions.Indexing.SpatialUnits)">
            <summary>
            Defines a Geohash Prefix Tree index using a default Max Tree Level <see cref="F:Raven.Abstractions.Indexing.SpatialOptions.DefaultGeohashLevel"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Raven.Abstractions.Indexing.SuggestionOptions.Distance">
            <summary>
            Gets or sets the string distance algorithm.
            </summary>
            <value>The distance. The default value is StringDistanceTypes.Levenshtein.</value>
        </member>
        <member name="P:Raven.Abstractions.Indexing.SuggestionOptions.Accuracy">
            <summary>
            Gets or sets the accuracy.
            </summary>
            <value>The accuracy. The default value is 0.5f.</value>
        </member>
        <member name="M:Raven.Abstractions.Json.JsonDateTimeOffsetConverter.WriteJson(Raven.Imports.Newtonsoft.Json.JsonWriter,System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> to write to.</param><param name="value">The value.</param><param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Raven.Abstractions.Json.JsonDateTimeOffsetConverter.ReadJson(Raven.Imports.Newtonsoft.Json.JsonReader,System.Type,System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> to read from.</param><param name="objectType">Type of the object.</param><param name="existingValue">The existing value of object being read.</param><param name="serializer">The calling serializer.</param>
            <returns>
            The object value.
            </returns>
        </member>
        <member name="M:Raven.Abstractions.Json.JsonDateTimeOffsetConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Raven.Abstractions.Json.JsonEnumConverter">
            <summary>
            Convert an enum to a json string
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Json.JsonEnumConverter.WriteJson(Raven.Imports.Newtonsoft.Json.JsonWriter,System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Raven.Abstractions.Json.JsonEnumConverter.ReadJson(Raven.Imports.Newtonsoft.Json.JsonReader,System.Type,System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Raven.Abstractions.Json.JsonEnumConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Raven.Abstractions.Json.JsonMultiDimensionalArrayConverter">
            <summary>
            Convert a MultiDimensional Array to a json string
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Json.JsonMultiDimensionalArrayConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Raven.Abstractions.Json.JsonMultiDimensionalArrayConverter.ReadJson(Raven.Imports.Newtonsoft.Json.JsonReader,System.Type,System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Raven.Abstractions.Json.JsonMultiDimensionalArrayConverter.WriteJson(Raven.Imports.Newtonsoft.Json.JsonWriter,System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Raven.Abstractions.Json.JsonMultiDimensionalArrayConverter.ReadRank(Raven.Imports.Newtonsoft.Json.JsonReader,Raven.Imports.Newtonsoft.Json.JsonSerializer,System.Type)">
            <summary>
            Read in all the values from the Json reader and populate a nested ArrayList
            </summary>
            <param name="reader">JsonReader to use</param>
            <param name="serializer">JsonSerializer to use</param>
            <param name="elementType">The element type</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Abstractions.Json.JsonMultiDimensionalArrayConverter.GetRankLengthList(System.Collections.Generic.List{System.Object})">
            <summary>
            Retrieve a list of lengths for each rank represented
            </summary>
            <param name="arrayList">The list to process</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Abstractions.Json.JsonMultiDimensionalArrayConverter.SetValues(System.Array,System.Int32[],System.Int32[],System.Int32,System.Collections.Generic.List{System.Object})">
            <summary>
            Assign values from the ArrayList into their respective place in the multidimensional array
            </summary>
            <param name="multiDimensionalArray">Array that will be receiving the newValues</param>
            <param name="rankLengthList">A list of the lengths of each rank</param>
            <param name="assignToIndexList">A list of the current index settings to be used for assignments</param>
            <param name="currentRank">Rank currently being processed</param>
            <param name="newValues">New Values that will be used in the assignment</param>
        </member>
        <member name="M:Raven.Abstractions.Json.JsonMultiDimensionalArrayConverter.WriteRank(Raven.Imports.Newtonsoft.Json.JsonWriter,Raven.Imports.Newtonsoft.Json.JsonSerializer,System.Array,System.Int32,System.Int32[])">
            <summary>
            Write a rank of an array in Json format
            </summary>
            <param name="writer">JsonWriter in use</param>
            <param name="serializer">JsonSerializer in use</param>
            <param name="array">Array to be written</param>
            <param name="currentRank">Current rank "depth"</param>
            <param name="assignFromIndexList">List of indexes currently being used to read from the array</param>
        </member>
        <member name="T:Raven.Abstractions.Json.JTokenExtensions">
            <summary>
            Extensions for RavenJToken
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.JsonTextReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to JSON text data.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.JsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> class with the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>true if the next token was read successfully; false if there are no more tokens to read.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonReader.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]"/>.
            </summary>
            <returns>A <see cref="T:Byte[]"/> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonReader.Skip">
            <summary>
            Skips the children of the current token.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonReader.SetToken(Raven.Imports.Newtonsoft.Json.JsonToken)">
            <summary>
            Sets the current token.
            </summary>
            <param name="newToken">The new token.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonReader.SetToken(Raven.Imports.Newtonsoft.Json.JsonToken,System.Object)">
            <summary>
            Sets the current token and value.
            </summary>
            <param name="newToken">The new token.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonReader.SetStateBasedOnCurrent">
            <summary>
            Sets the state based on current token type.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonReader.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonReader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonReader.Close">
            <summary>
            Changes the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader.State"/> to Closed. 
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonReader.CurrentState">
            <summary>
            Gets the current reader state.
            </summary>
            <value>The current reader state.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonReader.CloseInput">
            <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader"/> should be closed when the reader is closed.
            </summary>
            <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader"/> when
            the reader is closed; otherwise false. The default is true.
            </value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonReader.DateTimeZoneHandling">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> time zones are handling when reading JSON.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonReader.DateParseHandling">
            <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonReader.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReaderException"/>.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonReader.TokenType">
            <summary>
            Gets the type of the current JSON token. 
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonReader.Value">
            <summary>
            Gets the text value of the current JSON token.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonReader.ValueType">
            <summary>
            Gets The Common Language Runtime (CLR) type for the current JSON token.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonReader.Depth">
            <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
            <value>The depth of the current token in the JSON document.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonReader.Path">
            <summary>
            Gets the path of the current JSON token. 
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonReader.Culture">
            <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.JsonReader.State">
            <summary>
            Specifies the state of the reader.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonReader.State.Start">
            <summary>
            The Read method has not been called.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonReader.State.Complete">
            <summary>
            The end of the file has been reached successfully.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonReader.State.Property">
            <summary>
            Reader is at a property.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonReader.State.ObjectStart">
            <summary>
            Reader is at the start of an object.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonReader.State.Object">
            <summary>
            Reader is in an object.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonReader.State.ArrayStart">
            <summary>
            Reader is at the start of an array.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonReader.State.Array">
            <summary>
            Reader is in an array.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonReader.State.Closed">
            <summary>
            The Close method has been called.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonReader.State.PostValue">
            <summary>
            Reader has just read a value.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonReader.State.ConstructorStart">
            <summary>
            Reader is at the start of a constructor.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonReader.State.Constructor">
            <summary>
            Reader in a constructor.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonReader.State.Error">
            <summary>
            An error occurred that prevents the read operation from continuing.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonReader.State.Finished">
            <summary>
            The end of the file has been reached successfully.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> class with the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="reader">The <c>TextReader</c> containing the XML data to read.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]"/>.
            </summary>
            <returns>
            A <see cref="T:Byte[]"/> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextReader.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.DateTimeOffset"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextReader.Close">
            <summary>
            Changes the state to closed. 
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextReader.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
            	<c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonTextReader.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
            <value>
            The current line number or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonTextReader.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
            <value>
            The current line position or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
        </member>
        <member name="M:Raven.Json.Linq.Extensions.Value``1(System.Collections.Generic.IEnumerable{Raven.Json.Linq.RavenJToken})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:Raven.Json.Linq.RavenJToken"/> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Json.Linq.RavenJToken"/>.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:Raven.Json.Linq.RavenJToken"/> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Json.Linq.RavenJToken"/>.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Raven.Json.Linq.RavenJToken})">
            <summary>
            Returns a collection of converted child values of every object in the source collection.
            </summary>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Json.Linq.RavenJToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every node in the source collection.</returns>
        </member>
        <member name="M:Raven.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Raven.Json.Linq.RavenJToken},System.String)">
            <summary>
            Returns a collection of child values of every object in the source collection with the given key.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Json.Linq.RavenJToken"/> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Json.Linq.RavenJToken"/> that contains the values of every node in the source collection with the given key.</returns>
        </member>
        <member name="M:Raven.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Raven.Json.Linq.RavenJToken})">
            <summary>
            Returns a collection of child values of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Json.Linq.RavenJToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Json.Linq.RavenJToken"/> that contains the values of every node in the source collection.</returns>
        </member>
        <member name="T:Raven.Json.Linq.RavenJArray">
            <summary>
            Represents a JSON array.
            </summary>
        </member>
        <member name="T:Raven.Json.Linq.RavenJToken">
            <summary>
            Represents an abstract JSON token.
            </summary>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.CloneToken">
            <summary>
            Clones this object
            </summary>
            <returns>A cloned RavenJToken</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Raven.Json.Linq.RavenJToken"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Raven.Json.Linq.RavenJToken"/>.</param>
            <returns>A <see cref="T:Raven.Json.Linq.RavenJToken"/> with the value of the specified object</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.FromObject(System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Raven.Json.Linq.RavenJToken"/> from an object using the specified <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Raven.Json.Linq.RavenJToken"/>.</param>
            <param name="jsonSerializer">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/> that will be used when reading the object.</param>
            <returns>A <see cref="T:Raven.Json.Linq.RavenJToken"/> with the value of the specified object</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.ToString">
            <summary>
            Returns the indented JSON for this token.
            </summary>
            <returns>
            The indented JSON for this token.
            </returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.ToString(Raven.Imports.Newtonsoft.Json.Formatting,Raven.Imports.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Returns the JSON for this token using the given formatting and converters.
            </summary>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="converters">A collection of <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
            <returns>The JSON for this token using the given formatting and converters.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.WriteTo(Raven.Imports.Newtonsoft.Json.JsonWriter,Raven.Imports.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.ReadFrom(Raven.Imports.Newtonsoft.Json.JsonReader)">
            <summary>
            Creates a <see cref="T:Raven.Json.Linq.RavenJToken"/> from a <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">An <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Raven.Json.Linq.RavenJToken"/>.</param>
            <returns>
            An <see cref="T:Raven.Json.Linq.RavenJToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.Parse(System.String)">
            <summary>
            Load a <see cref="T:Raven.Json.Linq.RavenJToken"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Raven.Json.Linq.RavenJToken"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.Load(Raven.Imports.Newtonsoft.Json.JsonReader)">
            <summary>
            Creates a <see cref="T:Raven.Json.Linq.RavenJToken"/> from a <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">An <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Raven.Json.Linq.RavenJToken"/>.</param>
            <returns>
            An <see cref="T:Raven.Json.Linq.RavenJToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.Value``1(System.String)">
            <summary>
            Gets the <see cref="T:Raven.Json.Linq.RavenJToken"/> with the specified key converted to the specified type.
            </summary>
            <typeparam name="T">The type to convert the token to.</typeparam>
            <param name="key">The token key.</param>
            <returns>The converted token value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.DeepEquals(Raven.Json.Linq.RavenJToken,Raven.Json.Linq.RavenJToken)">
            <summary>
            Compares the values of two tokens, including the values of all descendant tokens.
            </summary>
            <param name="t1">The first <see cref="T:Raven.Json.Linq.RavenJToken"/> to compare.</param>
            <param name="t2">The second <see cref="T:Raven.Json.Linq.RavenJToken"/> to compare.</param>
            <returns>true if the tokens are equal; otherwise false.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.SelectToken(System.String)">
            <summary>
            Selects the token that matches the object path.
            </summary>
            <param name="path">
            The object path from the current <see cref="T:Raven.Json.Linq.RavenJToken"/> to the <see cref="T:Raven.Json.Linq.RavenJToken"/>
            to be returned. This must be a string of property names or array indexes separated
            by periods, such as <code>Tables[0].DefaultView[0].Price</code> in C# or
            <code>Tables(0).DefaultView(0).Price</code> in Visual Basic.
            </param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJToken"/> that matches the object path or a null reference if no matching token is found.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.SelectToken(System.String,System.Boolean)">
            <summary>
            Selects the token that matches the object path.
            </summary>
            <param name="path">
            The object path from the current <see cref="T:Raven.Json.Linq.RavenJToken"/> to the <see cref="T:Raven.Json.Linq.RavenJToken"/>
            to be returned. This must be a string of property names or array indexes separated
            by periods, such as <code>Tables[0].DefaultView[0].Price</code> in C# or
            <code>Tables(0).DefaultView(0).Price</code> in Visual Basic.
            </param>
            <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no token is found.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJToken"/> that matches the object path.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.SelectToken(Raven.Json.Linq.RavenJPath)">
            <summary>
            Selects the token that matches the object path.
            </summary>
            <param name="path">
            The object path from the current <see cref="T:Raven.Json.Linq.RavenJToken"/> to the <see cref="T:Raven.Json.Linq.RavenJToken"/>
            to be returned. This must be a string of property names or array indexes separated
            by periods, such as <code>Tables[0].DefaultView[0].Price</code> in C# or
            <code>Tables(0).DefaultView(0).Price</code> in Visual Basic.
            </param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJToken"/> that matches the object path or a null reference if no matching token is found.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.SelectToken(Raven.Json.Linq.RavenJPath,System.Boolean)">
            <summary>
            Selects the token that matches the object path.
            </summary>
            <param name="path">
            The object path from the current <see cref="T:Raven.Json.Linq.RavenJToken"/> to the <see cref="T:Raven.Json.Linq.RavenJToken"/>
            to be returned. This must be a string of property names or array indexes separated
            by periods, such as <code>Tables[0].DefaultView[0].Price</code> in C# or
            <code>Tables(0).DefaultView(0).Price</code> in Visual Basic.
            </param>
            <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no token is found.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJToken"/> that matches the object path.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the child values of this <see cref="T:Raven.Json.Linq.RavenJToken"/>, in document order.
            </returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.Values">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Boolean)~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.DateTimeOffset)~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTimeOffset"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.Boolean})~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Int64)~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.DateTime})~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.DateTimeOffset})~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.Decimal})~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.Double})~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Int16)~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int16"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.UInt16)~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Int32)~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.Int32})~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.DateTime)~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.Int64})~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.Single})~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Decimal)~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.Int16})~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.UInt16})~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.UInt32})~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Nullable{System.UInt64})~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Double)~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Single)~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.String)~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.UInt32)~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.UInt64)~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJToken.op_Implicit(System.Byte[])~Raven.Json.Linq.RavenJToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte[]"/> to <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Json.Linq.RavenJValue"/> from.</param>
            <returns>The <see cref="T:Raven.Json.Linq.RavenJValue"/> initialized with the specified value.</returns>
        </member>
        <member name="P:Raven.Json.Linq.RavenJToken.Type">
            <summary>
            Gets the node type for this <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Raven.Json.Linq.RavenJArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJArray"/> class.
            </summary>
        </member>
        <member name="M:Raven.Json.Linq.RavenJArray.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJArray"/> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJArray.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJArray"/> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJArray.Parse(System.String)">
            <summary>
            Load a <see cref="T:Raven.Json.Linq.RavenJArray"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Raven.Json.Linq.RavenJArray"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJArray.WriteTo(Raven.Imports.Newtonsoft.Json.JsonWriter,Raven.Imports.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJArray.Insert(System.Int32,Raven.Json.Linq.RavenJToken)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
        </member>
        <member name="P:Raven.Json.Linq.RavenJArray.Type">
            <summary>
            Gets the node type for this <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Raven.Json.Linq.RavenJArray.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Raven.Json.Linq.RavenJToken"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:Raven.Json.Linq.RavenJObject">
            <summary>
            Represents a JSON object.
            </summary>
        </member>
        <member name="M:Raven.Json.Linq.RavenJObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJObject"/> class.
            </summary>
        </member>
        <member name="M:Raven.Json.Linq.RavenJObject.Value``1(System.String)">
            <summary>
            Gets the <see cref="T:Raven.Json.Linq.RavenJToken"/> with the specified key converted to the specified type.
            </summary>
            <typeparam name="T">The type to convert the token to.</typeparam>
            <param name="key">The token key.</param>
            <returns>The converted token value.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJObject.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Raven.Json.Linq.RavenJObject"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Raven.Json.Linq.RavenJObject"/>.</param>
            <returns>A <see cref="T:Raven.Json.Linq.RavenJObject"/> with the values of the specified object</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJObject.FromObject(System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Raven.Json.Linq.RavenJArray"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Raven.Json.Linq.RavenJArray"/>.</param>
            <param name="jsonSerializer">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/> that will be used to read the object.</param>
            <returns>A <see cref="T:Raven.Json.Linq.RavenJArray"/> with the values of the specified object</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJObject.Load(Raven.Imports.Newtonsoft.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Raven.Json.Linq.RavenJObject"/> from a <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Raven.Json.Linq.RavenJObject"/>.</param>
            <returns>A <see cref="T:Raven.Json.Linq.RavenJObject"/> that contains the JSON that was read from the specified <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJObject.Parse(System.String)">
            <summary>
            Load a <see cref="T:Raven.Json.Linq.RavenJObject"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Raven.Json.Linq.RavenJObject"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJObject.WriteTo(Raven.Imports.Newtonsoft.Json.JsonWriter,Raven.Imports.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="P:Raven.Json.Linq.RavenJObject.__ExternalState">
            <summary>
            This can be used to attach additional state for external clients
            Not used by anything related to JSON
            </summary>
        </member>
        <member name="P:Raven.Json.Linq.RavenJObject.Type">
            <summary>
            Gets the node type for this <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Raven.Json.Linq.RavenJObject.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:Raven.Json.Linq.RavenJToken"/> with the specified property name.
            </summary>
            <value></value>
        </member>
        <member name="T:Raven.Json.Linq.RavenJTokenEqualityComparer">
            <summary>
            Compares tokens to determine whether they are equal.
            </summary>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenEqualityComparer.Equals(Raven.Json.Linq.RavenJToken,Raven.Json.Linq.RavenJToken)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <see cref="T:Raven.Json.Linq.RavenJToken"/> to compare.</param>
            <param name="y">The second object of type <see cref="T:Raven.Json.Linq.RavenJToken"/> to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenEqualityComparer.GetHashCode(Raven.Json.Linq.RavenJToken)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="T:Raven.Json.Linq.RavenJTokenReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenReader.#ctor(Raven.Json.Linq.RavenJToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJTokenReader"/> class.
            </summary>
            <param name="token">The token to read from.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]"/>.
            </summary>
            <returns>A <see cref="T:Byte[]"/> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenReader.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
        </member>
        <member name="T:Raven.Json.Linq.RavenJTokenWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.JsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.#ctor">
            <summary>
            Creates an instance of the <c>JsonWriter</c> class. 
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a Json object.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteEndObject">
            <summary>
            Writes the end of a Json object.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a Json array.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteEndArray">
            <summary>
            Writes the end of an array.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteEndConstructor">
            <summary>
            Writes the end constructor.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteEnd">
            <summary>
            Writes the end of the current Json object or array.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteToken(Raven.Imports.Newtonsoft.Json.JsonReader)">
            <summary>
            Writes the current <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> token and its children.
            </summary>
            <param name="reader">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> to read the token from.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteToken(Raven.Imports.Newtonsoft.Json.JsonReader,System.Boolean)">
            <summary>
            Writes the current <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> token.
            </summary>
            <param name="reader">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> to read the token from.</param>
            <param name="writeChildren">A flag indicating whether the current token's children should be written.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteEnd(Raven.Imports.Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteIndent">
            <summary>
            Writes indent characters.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValueDelimiter">
            <summary>
            Writes the JSON value delimiter.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteIndentSpace">
            <summary>
            Writes an indent space.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON without changing the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteRawValue(System.String)">
            <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int32})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt32})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int64})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt64})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Single})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Double})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Boolean})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int16})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt16})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Char})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Byte})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.SByte})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Decimal})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTime})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTimeOffset})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Guid})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.TimeSpan})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:Byte[]"/> value.
            </summary>
            <param name="value">The <see cref="T:Byte[]"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteWhitespace(System.String)">
            <summary>
            Writes out the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonWriter.CloseOutput">
            <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader"/> should be closed when the writer is closed.
            </summary>
            <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader"/> when
            the writer is closed; otherwise false. The default is true.
            </value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonWriter.Top">
            <summary>
            Gets the top.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonWriter.WriteState">
            <summary>
            Gets the state of the writer.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonWriter.Path">
            <summary>
            Gets the path of the writer. 
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonWriter.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonWriter.DateFormatHandling">
            <summary>
            Get or set how dates are written to JSON text.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonWriter.DateTimeZoneHandling">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> time zones are handling when writing JSON text.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonWriter.StringEscapeHandling">
            <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteStartArray">
            <summary>
            Writes the beginning of a Json array.
            </summary>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteEnd(Raven.Imports.Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the end.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:Byte[]"/> value.
            </summary>
            <param name="value">The <see cref="T:Byte[]"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJTokenWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="P:Raven.Json.Linq.RavenJTokenWriter.Token">
            <summary>
            Gets the token being writen.
            </summary>
            <value>The token being writen.</value>
        </member>
        <member name="T:Raven.Json.Linq.RavenJValue">
            <summary>
            Represents a value in JSON (string, integer, date, etc).
            </summary>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Json.Linq.RavenJValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.WriteTo(Raven.Imports.Newtonsoft.Json.JsonWriter,Raven.Imports.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Raven.Json.Linq.RavenJValue.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Raven.Json.Linq.RavenJValue.Type">
            <summary>
            Gets the node type for this <see cref="T:Raven.Json.Linq.RavenJToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Raven.Json.Linq.RavenJValue.Value">
            <summary>
            Gets or sets the underlying token value.
            </summary>
            <value>The underlying token value.</value>
        </member>
        <member name="T:Raven.Abstractions.Linq.DateTools">
            <summary> Provides support for converting dates to strings and vice-versa.
            The strings are structured so that lexicographic sorting orders 
            them by date, which makes them suitable for use as field values 
            and search terms.
            
            <p/>This class also helps you to limit the resolution of your dates. Do not
            save dates with a finer resolution than you really need, as then
            RangeQuery and PrefixQuery will require more memory and become slower.
            
            <p/>Compared to {@link DateField} the strings generated by the methods
            in this class take slightly more space, unless your selected resolution
            is set to <code>Resolution.DAY</code> or lower.
            
            <p/>
            Another approach is {@link NumericUtils}, which provides
            a sortable binary representation (prefix encoded) of numeric values, which
            date/time are.
            For indexing a {@link Date} or {@link Calendar}, just get the Unix timestamp as
            <code>long</code> using {@link Date#getTime} or {@link Calendar#getTimeInMillis} and
            index this as a numeric value with {@link NumericField}
            and use {@link NumericRangeQuery} to query it.
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Linq.DateTools.DateToString(System.DateTime,Raven.Abstractions.Linq.DateTools.Resolution)">
            <summary> Converts a Date to a string suitable for indexing.
            
            </summary>
            <param name="date">the date to be converted
            </param>
            <param name="resolution">the desired resolution, see
            {@link #Round(Date, DateTools.Resolution)}
            </param>
            <returns> a string in format <code>yyyyMMddHHmmssSSS</code> or shorter,
            depending on <code>resolution</code>; using GMT as timezone 
            </returns>
        </member>
        <member name="M:Raven.Abstractions.Linq.DateTools.TimeToString(System.Int64,Raven.Abstractions.Linq.DateTools.Resolution)">
            <summary> Converts a millisecond time to a string suitable for indexing.
            
            </summary>
            <param name="time">the date expressed as milliseconds since January 1, 1970, 00:00:00 GMT
            </param>
            <param name="resolution">the desired resolution, see
            {@link #Round(long, DateTools.Resolution)}
            </param>
            <returns> a string in format <code>yyyyMMddHHmmssSSS</code> or shorter,
            depending on <code>resolution</code>; using GMT as timezone
            </returns>
        </member>
        <member name="M:Raven.Abstractions.Linq.DateTools.StringToTime(System.String)">
            <summary> Converts a string produced by <code>timeToString</code> or
            <code>DateToString</code> back to a time, represented as the
            number of milliseconds since January 1, 1970, 00:00:00 GMT.
            
            </summary>
            <param name="dateString">the date string to be converted
            </param>
            <returns> the number of milliseconds since January 1, 1970, 00:00:00 GMT
            </returns>
            <throws>  ParseException if <code>dateString</code> is not in the  </throws>
            <summary>  expected format 
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Linq.DateTools.StringToDate(System.String)">
            <summary> Converts a string produced by <code>timeToString</code> or
            <code>DateToString</code> back to a time, represented as a
            Date object.
            
            </summary>
            <param name="dateString">the date string to be converted
            </param>
            <returns> the parsed time as a Date object 
            </returns>
            <throws>  ParseException if <code>dateString</code> is not in the  </throws>
            <summary>  expected format 
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Linq.DateTools.Round(System.DateTime,Raven.Abstractions.Linq.DateTools.Resolution)">
            <summary>
            Limit a date's resolution. For example, the date <code>2004-09-21 13:50:11</code>
            will be changed to <code>2004-09-01 00:00:00</code> when using
            <code>Resolution.MONTH</code>.
            </summary>
            <param name="date">The date.</param>
            <param name="resolution">The desired resolution of the date to be returned</param>
            <returns>
            the date with all values more precise than <code>resolution</code>
            set to 0 or 1
            </returns>
        </member>
        <member name="M:Raven.Abstractions.Linq.DateTools.Round(System.Int64,Raven.Abstractions.Linq.DateTools.Resolution)">
            <summary> Limit a date's resolution. For example, the date <code>1095767411000</code>
            (which represents 2004-09-21 13:50:11) will be changed to 
            <code>1093989600000</code> (2004-09-01 00:00:00) when using
            <code>Resolution.MONTH</code>.
            
            </summary>
            <param name="time">The time in milliseconds (not ticks).</param>
            <param name="resolution">The desired resolution of the date to be returned
            </param>
            <returns> the date with all values more precise than <code>resolution</code>
            set to 0 or 1, expressed as milliseconds since January 1, 1970, 00:00:00 GMT
            </returns>
        </member>
        <member name="T:Raven.Abstractions.Linq.DateTools.Resolution">
            <summary>Specifies the time granularity. </summary>
        </member>
        <member name="F:Raven.Abstractions.Linq.DateTools.Resolution.YEAR">
            <summary>
            Resolution by year
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Linq.DateTools.Resolution.MONTH">
            <summary>
            Resolution by month
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Linq.DateTools.Resolution.DAY">
            <summary>
            Resolution by day
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Linq.DateTools.Resolution.HOUR">
            <summary>
            Resolution by hour
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Linq.DateTools.Resolution.MINUTE">
            <summary>
            Resolution by minute
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Linq.DateTools.Resolution.SECOND">
            <summary>
            Resolution by second
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Linq.DateTools.Resolution.MILLISECOND">
            <summary>
            Resolution by millisecond
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Linq.DateTools.Resolution.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Raven.Abstractions.Linq.IDynamicJsonObject.Inner">
            <summary>
            Gets the inner json object
            </summary>
            <value>The inner.</value>
        </member>
        <member name="T:Raven.Abstractions.Linq.DynamicJsonObject">
            <summary>
            A dynamic implementation on top of <see cref="T:Raven.Json.Linq.RavenJObject"/>
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Linq.DynamicJsonObject.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Raven.Abstractions.Linq.DynamicJsonObject.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="other">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Raven.Abstractions.Linq.DynamicJsonObject.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Raven.Abstractions.Linq.DynamicJsonObject.#ctor(Raven.Json.Linq.RavenJObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Linq.DynamicJsonObject"/> class.
            </summary>
            <param name="inner">The obj.</param>
        </member>
        <member name="M:Raven.Abstractions.Linq.DynamicJsonObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject"/> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result"/>.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Raven.Abstractions.Linq.DynamicJsonObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <summary>
            Provides the implementation for operations that get a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject"/> class can override this method to specify dynamic behavior for indexing operations.
            </summary>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:Raven.Abstractions.Linq.DynamicJsonObject.GetValue(System.String)">
            <summary>
            Gets the value for the specified name
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Abstractions.Linq.DynamicJsonObject.GetDocumentId">
            <summary>
            Gets the document id.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Raven.Abstractions.Linq.DynamicJsonObject.Raven#Abstractions#Linq#IDynamicJsonObject#Inner">
            <summary>
            Gets the inner json object
            </summary>
            <value>The inner.</value>
        </member>
        <member name="P:Raven.Abstractions.Linq.DynamicList.Length">
            <summary>
            Gets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="T:Raven.Abstractions.Replication.ReplicationDestination">
            <summary>
            Data class for replication destination documents
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Replication.ReplicationDestination.url">
            <summary>
            The name of the connection string specified in the 
            server configuration file. 
            Override all other properties of the destination
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Replication.ReplicationDestination.Url">
            <summary>
            Gets or sets the URL of the replication destination
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:Raven.Abstractions.Replication.ReplicationDestination.Username">
            <summary>
            The replication server username to use
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Replication.ReplicationDestination.Password">
            <summary>
            The replication server password to use
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Replication.ReplicationDestination.Domain">
            <summary>
            The replication server domain to use
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Replication.ReplicationDestination.ApiKey">
            <summary>
            The replication server api key to use
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Replication.ReplicationDestination.Database">
            <summary>
            The database to use
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Replication.ReplicationDestination.TransitiveReplicationBehavior">
            <summary>
            How should the replication bundle behave with respect to replicated documents.
            If a document was replicated to us from another node, should we replicate that to
            this destination, or should we replicate only documents that were locally modified.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Replication.ReplicationDestination.IgnoredClient">
            <summary>
            Gets or sets if the replication will ignore this destination in the client
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Replication.ReplicationDestination.Disabled">
            <summary>
            Gets or sets if replication to this destination is disabled in both client and server.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Replication.ReplicationDestination.ClientVisibleUrl">
            <summary>
            Gets or sets the Client URL of the replication destination
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Replication.TransitiveReplicationOptions">
            <summary>
            Options for how to replicate replicated documents
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Replication.TransitiveReplicationOptions.None">
            <summary>
            Don't replicate replicated documents
            </summary>
        </member>
        <member name="F:Raven.Abstractions.Replication.TransitiveReplicationOptions.Replicate">
            <summary>
            Replicate replicated documents
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Replication.ReplicationDocument">
            <summary>
            This class represent the list of replication destinations for the server
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Replication.ReplicationDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Abstractions.Replication.ReplicationDocument"/> class.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Replication.ReplicationDocument.Destinations">
            <summary>
            Gets or sets the list of replication destinations.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Replication.ReplicationDocument.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Raven.Abstractions.Replication.ReplicationDocument.Source">
            <summary>
            Gets or sets the Source.
            </summary>
            <value>The Source.</value>
        </member>
        <member name="P:Raven.Abstractions.Smuggler.SmugglerOptions.BackupPath">
            <summary>
            The path to write to when doing an export, or where to read from when doing an import.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Smuggler.SmugglerOptions.OperateOnTypes">
            <summary>
            Specify the types to operate on. You can specify more than one type by combining items with the OR parameter.
            Default is all items.
            Usage example: OperateOnTypes = ItemType.Indexes | ItemType.Documents | ItemType.Attachments.
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Smuggler.SmugglerOptions.Timeout">
            <summary>
            The timeout for requests
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Smuggler.SmugglerOptions.BatchSize">
            <summary>
            The batch size for loading to ravendb
            </summary>
        </member>
        <member name="P:Raven.Abstractions.Smuggler.SmugglerOptions.ShouldExcludeExpired">
            <summary>
            Should we exclude any documents which have already expired by checking the expiration meta property created by the expiration bundle
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Spatial.ShapeConverter">
            <summary>
            Converts shape objects to strings, if they are not already a string
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Spatial.WktSanitizer">
            <summary>
            Santizes WKT strings, reducing them to 2D (discarding 3D and 4D values).
            We do this because we only index and query in 2D,
            but its nice to allow users to store shapes in 3D and 4D if they need to.
            </summary>
        </member>
        <member name="T:Raven.Abstractions.Util.RavenQuery">
            <summary>
            Helper class that provide a way to escape query terms
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Util.RavenQuery.Escape(System.String)">
            <summary>
            Escapes Lucene operators and quotes phrases
            </summary>
        </member>
        <member name="M:Raven.Abstractions.Util.RavenQuery.Escape(System.String,System.Boolean,System.Boolean)">
            <summary>
            Escapes Lucene operators and quotes phrases
            </summary>
            <returns>escaped term</returns>
            <remarks>
            http://lucene.apache.org/java/2_4_0/queryparsersyntax.html#Escaping%20Special%20Characters
            </remarks>
        </member>
        <member name="M:Raven.Abstractions.Util.RavenQuery.EscapeField(System.String)">
            <summary>
            Escapes Lucene field
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Bson.BsonObjectId">
            <summary>
            Represents a BSON Oid (object id).
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonObjectId.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Bson.BsonObjectId"/> class.
            </summary>
            <param name="value">The Oid value.</param>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Bson.BsonObjectId.Value">
            <summary>
            Gets or sets the value of the Oid.
            </summary>
            <value>The value of the Oid.</value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Bson.BsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream,System.Boolean,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
            <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind"/> used when reading <see cref="T:System.DateTime"/> values from BSON.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader,System.Boolean,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="reader">The reader.</param>
            <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
            <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind"/> used when reading <see cref="T:System.DateTime"/> values from BSON.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]"/>.
            </summary>
            <returns>
            A <see cref="T:Byte[]"/> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonReader.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>
            A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonReader.Close">
            <summary>
            Changes the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader.State"/> to Closed.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Bson.BsonReader.JsonNet35BinaryCompatibility">
            <summary>
            Gets or sets a value indicating whether binary data reading should compatible with incorrect Json.NET 3.5 written binary.
            </summary>
            <value>
            	<c>true</c> if binary data reading will be compatible with incorrect Json.NET 3.5 written binary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Bson.BsonReader.ReadRootValueAsArray">
            <summary>
            Gets or sets a value indicating whether the root object will be read as a JSON array.
            </summary>
            <value>
            	<c>true</c> if the root object will be read as a JSON array; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Bson.BsonReader.DateTimeKindHandling">
            <summary>
            Gets or sets the <see cref="T:System.DateTimeKind"/> used when reading <see cref="T:System.DateTime"/> values from BSON.
            </summary>
            <value>The <see cref="T:System.DateTimeKind"/> used when reading <see cref="T:System.DateTime"/> values from BSON.</value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.BinaryWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter"/> class.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.WriteEnd(Raven.Imports.Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the end.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.WriteRawValue(System.String)">
            <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a Json array.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a Json object.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:Byte[]"/> value.
            </summary>
            <param name="value">The <see cref="T:Byte[]"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.WriteObjectId(System.Byte[])">
            <summary>
            Writes a <see cref="T:Byte[]"/> value that represents a BSON object id.
            </summary>
            <param name="value">The Object ID value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.WriteRegex(System.String,System.String)">
            <summary>
            Writes a BSON regex.
            </summary>
            <param name="pattern">The regex pattern.</param>
            <param name="options">The regex options.</param>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Bson.BsonWriter.DateTimeKindHandling">
            <summary>
            Gets or sets the <see cref="T:System.DateTimeKind"/> used when writing <see cref="T:System.DateTime"/> values to BSON.
            When set to <see cref="F:System.DateTimeKind.Unspecified"/> no conversion will occur.
            </summary>
            <value>The <see cref="T:System.DateTimeKind"/> used when writing <see cref="T:System.DateTime"/> values to BSON.</value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.ConstructorHandling">
            <summary>
            Specifies how constructors are used when initializing objects during deserialization by the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.ConstructorHandling.Default">
            <summary>
            First attempt to use the public default constructor, then fall back to single paramatized constructor, then the non-public default constructor.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.ConstructorHandling.AllowNonPublicDefaultConstructor">
            <summary>
            Json.NET will use a non-public default constructor before falling back to a paramatized constructor.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.DateFormatHandling">
            <summary>
            Specifies how dates are formatted when writing JSON text.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.DateFormatHandling.IsoDateFormat">
            <summary>
            Dates are written in the ISO 8601 format, e.g. "2012-03-21T05:40Z".
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.DateFormatHandling.MicrosoftDateFormat">
            <summary>
            Dates are written in the Microsoft JSON format, e.g. "\/Date(1198908717056)\/".
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.DateParseHandling">
            <summary>
            Specifies how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON text.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.DateParseHandling.None">
            <summary>
            Date formatted strings are not parsed to a date type and are read as strings.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.DateParseHandling.DateTime">
            <summary>
            Date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed to <see cref="F:Raven.Imports.Newtonsoft.Json.DateParseHandling.DateTime"/>.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.DateParseHandling.DateTimeOffset">
            <summary>
            Date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed to <see cref="F:Raven.Imports.Newtonsoft.Json.DateParseHandling.DateTimeOffset"/>.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.DateTimeZoneHandling">
            <summary>
            Specifies how to treat the time value when converting between string and <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.DateTimeZoneHandling.Local">
            <summary>
            Treat as local time. If the <see cref="T:System.DateTime"/> object represents a Coordinated Universal Time (UTC), it is converted to the local time.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.DateTimeZoneHandling.Utc">
            <summary>
            Treat as a UTC. If the <see cref="T:System.DateTime"/> object represents a local time, it is converted to a UTC.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.DateTimeZoneHandling.Unspecified">
            <summary>
            Treat as a local time if a <see cref="T:System.DateTime"/> is being converted to a string.
            If a string is being converted to <see cref="T:System.DateTime"/>, convert to a local time if a time zone is specified.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind">
            <summary>
            Time zone information should be preserved when converting.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.DefaultValueHandling">
            <summary>
            Specifies default value handling options for the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingObject" title="DefaultValueHandling Class"/>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingExample" title="DefaultValueHandling Ignore Example"/>
            </example>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.DefaultValueHandling.Include">
            <summary>
            Include members where the member value is the same as the member's default value when serializing objects.
            Included members are written to JSON. Has no effect when deserializing.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.DefaultValueHandling.Ignore">
            <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            so that is is not written to JSON.
            This option will ignore all default values (e.g. <c>null</c> for objects and nullable typesl; <c>0</c> for integers,
            decimals and floating point numbers; and <c>false</c> for booleans). The default value ignored can be changed by
            placing the <see cref="T:System.ComponentModel.DefaultValueAttribute"/> on the property.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.DefaultValueHandling.Populate">
            <summary>
            Members with a default value but no JSON will be set to their default value when deserializing.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.DefaultValueHandling.IgnoreAndPopulate">
            <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            and sets members to their default value when deserializing.
            </summary>
        </member>
        <member name="T:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle">
            <summary>
            Indicates the method that will be used during deserialization for locating and loading assemblies.
            </summary>
        </member>
        <member name="F:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle.Simple">
            <summary>
            In simple mode, the assembly used during deserialization need not match exactly the assembly used during serialization. Specifically, the version numbers need not match as the LoadWithPartialName method is used to load the assembly.
            </summary>
        </member>
        <member name="F:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle.Full">
            <summary>
            In full mode, the assembly used during deserialization must match exactly the assembly used during serialization. The Load method of the Assembly class is used to load the assembly.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Formatting">
            <summary>
            Specifies formatting options for the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonTextWriter"/>.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Formatting.None">
            <summary>
            No special formatting is applied. This is the default.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Formatting.Indented">
            <summary>
            Causes child objects to be indented according to the <see cref="P:Raven.Imports.Newtonsoft.Json.JsonTextWriter.Indentation"/> and <see cref="P:Raven.Imports.Newtonsoft.Json.JsonTextWriter.IndentChar"/> settings.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.JsonArrayAttribute">
            <summary>
            Instructs the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/> how to serialize the collection.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.JsonContainerAttribute">
            <summary>
            Instructs the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/> how to serialize the object.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonContainerAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonContainerAttribute"/> class.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonContainerAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonContainerAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonContainerAttribute.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonContainerAttribute.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonContainerAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonContainerAttribute.ItemConverterType">
            <summary>
            Gets the collection's items converter.
            </summary>
            <value>The collection's items converter.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonContainerAttribute.IsReference">
            <summary>
            Gets or sets a value that indicates whether to preserve object references.
            </summary>
            <value>
            	<c>true</c> to keep object reference; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonContainerAttribute.ItemIsReference">
            <summary>
            Gets or sets a value that indicates whether to preserve collection's items references.
            </summary>
            <value>
            	<c>true</c> to keep collection's items object references; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonContainerAttribute.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing the collection's items.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonContainerAttribute.ItemTypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing the collection's items.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonArrayAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonArrayAttribute"/> class.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonArrayAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonObjectAttribute"/> class with a flag indicating whether the array can contain null items
            </summary>
            <param name="allowNullItems">A flag indicating whether the array can contain null items.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonArrayAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonArrayAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonArrayAttribute.AllowNullItems">
            <summary>
            Gets or sets a value indicating whether null items are allowed in the collection.
            </summary>
            <value><c>true</c> if null items are allowed in the collection; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.JsonConstructorAttribute">
            <summary>
            Instructs the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/> to use the specified constructor when deserializing that object.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.JsonConvert">
            <summary>
            Provides methods for converting between common language runtime types and JSON types.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="SerializeObject" title="Serializing and Deserializing JSON with JsonConvert" />
            </example>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonConvert.True">
            <summary>
            Represents JavaScript's boolean value true as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonConvert.False">
            <summary>
            Represents JavaScript's boolean value false as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonConvert.Null">
            <summary>
            Represents JavaScript's null as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonConvert.Undefined">
            <summary>
            Represents JavaScript's undefined as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonConvert.PositiveInfinity">
            <summary>
            Represents JavaScript's positive infinity as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonConvert.NegativeInfinity">
            <summary>
            Represents JavaScript's negative infinity as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonConvert.NaN">
            <summary>
            Represents JavaScript's NaN as a string. This field is read-only.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.ToString(System.DateTime)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.ToString(System.DateTime,Raven.Imports.Newtonsoft.Json.DateFormatHandling,Raven.Imports.Newtonsoft.Json.DateTimeZoneHandling)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> to its JSON string representation using the <see cref="T:Raven.Imports.Newtonsoft.Json.DateFormatHandling"/> specified.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">The format the date will be converted to.</param>
            <param name="timeZoneHandling">The time zone handling when the date is converted to a string.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset)">
            <summary>
            Converts the <see cref="T:System.DateTimeOffset"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset,Raven.Imports.Newtonsoft.Json.DateFormatHandling)">
            <summary>
            Converts the <see cref="T:System.DateTimeOffset"/> to its JSON string representation using the <see cref="T:Raven.Imports.Newtonsoft.Json.DateFormatHandling"/> specified.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">The format the date will be converted to.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.ToString(System.Boolean)">
            <summary>
            Converts the <see cref="T:System.Boolean"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.ToString(System.Char)">
            <summary>
            Converts the <see cref="T:System.Char"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Char"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.ToString(System.Enum)">
            <summary>
            Converts the <see cref="T:System.Enum"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Enum"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.ToString(System.Int32)">
            <summary>
            Converts the <see cref="T:System.Int32"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.ToString(System.Int16)">
            <summary>
            Converts the <see cref="T:System.Int16"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int16"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.ToString(System.UInt16)">
            <summary>
            Converts the <see cref="T:System.UInt16"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt16"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.ToString(System.UInt32)">
            <summary>
            Converts the <see cref="T:System.UInt32"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.ToString(System.Int64)">
            <summary>
            Converts the <see cref="T:System.Int64"/>  to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.ToString(System.UInt64)">
            <summary>
            Converts the <see cref="T:System.UInt64"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.ToString(System.Single)">
            <summary>
            Converts the <see cref="T:System.Single"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Single"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.ToString(System.Double)">
            <summary>
            Converts the <see cref="T:System.Double"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.ToString(System.Byte)">
            <summary>
            Converts the <see cref="T:System.Byte"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.ToString(System.SByte)">
            <summary>
            Converts the <see cref="T:System.SByte"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.ToString(System.Decimal)">
            <summary>
            Converts the <see cref="T:System.Decimal"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.ToString(System.Guid)">
            <summary>
            Converts the <see cref="T:System.Guid"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Guid"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.ToString(System.TimeSpan)">
            <summary>
            Converts the <see cref="T:System.TimeSpan"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.TimeSpan"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.ToString(System.Uri)">
            <summary>
            Converts the <see cref="T:System.Uri"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.ToString(System.String)">
            <summary>
            Converts the <see cref="T:System.String"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char)">
            <summary>
            Converts the <see cref="T:System.String"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="delimiter">The string delimiter character.</param>
            <returns>A JSON string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.ToString(System.Object)">
            <summary>
            Converts the <see cref="T:System.Object"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object)">
            <summary>
            Serializes the specified object to a JSON string.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Raven.Imports.Newtonsoft.Json.Formatting)">
            <summary>
            Serializes the specified object to a JSON string.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Raven.Imports.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="converters">A collection converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Raven.Imports.Newtonsoft.Json.Formatting,Raven.Imports.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="converters">A collection converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="settings">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Raven.Imports.Newtonsoft.Json.Formatting,Raven.Imports.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="settings">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.DeserializeObject(System.String)">
            <summary>
            Deserializes the JSON to a .NET object.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,Raven.Imports.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to a .NET object.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="settings">
            The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0)">
            <summary>
            Deserializes the JSON to the given anonymous type.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be infered from the anonymous type passed
            as a parameter.
            </typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="anonymousTypeObject">The anonymous type object.</param>
            <returns>The deserialized anonymous type from the JSON string.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Raven.Imports.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Raven.Imports.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The object to deserialize.</param>
            <param name="settings">
            The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Raven.Imports.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Raven.Imports.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize to.</param>
            <param name="settings">
            The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object)">
            <summary>
            Populates the object with values from the JSON string.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Populates the object with values from the JSON string.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
            <param name="settings">
            The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.JsonConverterAttribute">
            <summary>
            Instructs the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/> to use the specified <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/> when serializing the member or class.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverterAttribute"/> class.
            </summary>
            <param name="converterType">Type of the converter.</param>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonConverterAttribute.ConverterType">
            <summary>
            Gets the type of the converter.
            </summary>
            <value>The type of the converter.</value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.JsonConverterCollection">
            <summary>
            Represents a collection of <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/>.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.JsonDictionaryAttribute">
            <summary>
            Instructs the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/> how to serialize the collection.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonDictionaryAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonDictionaryAttribute"/> class.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonDictionaryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonDictionaryAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.JsonException">
            <summary>
            The exception thrown when an error occurs during Json serialization or deserialization.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.JsonIgnoreAttribute">
            <summary>
            Instructs the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/> not to serialize the public field or public read/write property value.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.JsonObjectAttribute">
            <summary>
            Instructs the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/> how to serialize the object.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonObjectAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonObjectAttribute"/> class.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonObjectAttribute.#ctor(Raven.Imports.Newtonsoft.Json.MemberSerialization)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonObjectAttribute"/> class with the specified member serialization.
            </summary>
            <param name="memberSerialization">The member serialization.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonObjectAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonObjectAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonObjectAttribute.MemberSerialization">
            <summary>
            Gets or sets the member serialization.
            </summary>
            <value>The member serialization.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonObjectAttribute.ItemRequired">
            <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
            <value>
            	A value indicating whether the object's properties are required.
            </value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.JsonPropertyAttribute">
            <summary>
            Instructs the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/> to always serialize the member with the specified name.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonPropertyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonPropertyAttribute"/> class.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonPropertyAttribute"/> class with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonPropertyAttribute.ItemConverterType">
            <summary>
            Gets or sets the converter used when serializing the property's collection items.
            </summary>
            <value>The collection's items converter.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonPropertyAttribute.NullValueHandling">
            <summary>
            Gets or sets the null value handling used when serializing this property.
            </summary>
            <value>The null value handling.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonPropertyAttribute.DefaultValueHandling">
            <summary>
            Gets or sets the default value handling used when serializing this property.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonPropertyAttribute.ReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing this property.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonPropertyAttribute.ObjectCreationHandling">
            <summary>
            Gets or sets the object creation handling used when deserializing this property.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonPropertyAttribute.TypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing this property.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonPropertyAttribute.IsReference">
            <summary>
            Gets or sets whether this property's value is serialized as a reference.
            </summary>
            <value>Whether this property's value is serialized as a reference.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonPropertyAttribute.Order">
            <summary>
            Gets or sets the order of serialization and deserialization of a member.
            </summary>
            <value>The numeric order of serialization or deserialization.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonPropertyAttribute.Required">
            <summary>
            Gets or sets a value indicating whether this property is required.
            </summary>
            <value>
            	A value indicating whether this property is required.
            </value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonPropertyAttribute.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonPropertyAttribute.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the the reference loop handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items reference loop handling.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonPropertyAttribute.ItemTypeNameHandling">
            <summary>
            Gets or sets the the type name handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items type name handling.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonPropertyAttribute.ItemIsReference">
            <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
            <value>Whether this property's collection items are serialized as a reference.</value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.JsonReaderException">
            <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonReaderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReaderException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReaderException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReaderException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonReaderException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonReaderException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonReaderException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.JsonSerializationException">
            <summary>
            The exception thrown when an error occurs during Json serialization or deserialization.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonSerializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializationException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonSerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializationException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializationException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.JsonSerializer">
            <summary>
            Serializes and deserializes objects into and from the JSON format.
            The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/> enables you to control how objects are encoded into JSON.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/> class.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonSerializer.Create(Raven.Imports.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Creates a new <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/> instance using the specified <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="settings">The settings to be applied to the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/>.</param>
            <returns>A new <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/> instance using the specified <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonSerializer.Populate(System.IO.TextReader,System.Object)">
            <summary>
            Populates the JSON values onto the target object.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> that contains the JSON structure to reader values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonSerializer.Populate(Raven.Imports.Newtonsoft.Json.JsonReader,System.Object)">
            <summary>
            Populates the JSON values onto the target object.
            </summary>
            <param name="reader">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> that contains the JSON structure to reader values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonSerializer.Deserialize(Raven.Imports.Newtonsoft.Json.JsonReader)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> that contains the JSON structure to deserialize.</param>
            <returns>The <see cref="T:System.Object"/> being deserialized.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonSerializer.Deserialize(System.IO.TextReader,System.Type)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:System.IO.StringReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> containing the object.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType"/> being deserialized.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonSerializer.Deserialize``1(Raven.Imports.Newtonsoft.Json.JsonReader)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> containing the object.</param>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <returns>The instance of <typeparamref name="T"/> being deserialized.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonSerializer.Deserialize(Raven.Imports.Newtonsoft.Json.JsonReader,System.Type)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> containing the object.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType"/> being deserialized.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> used to write the Json structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonSerializer.Serialize(Raven.Imports.Newtonsoft.Json.JsonWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/>. 
            </summary>
            <param name="jsonWriter">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> used to write the Json structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="E:Raven.Imports.Newtonsoft.Json.JsonSerializer.Error">
            <summary>
            Occurs when the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/> errors during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializer.ReferenceResolver">
            <summary>
            Gets or sets the <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.IReferenceResolver"/> used by the serializer when resolving references.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializer.Binder">
            <summary>
            Gets or sets the <see cref="T:Raven.Imports.Newtonsoft.Json.SerializationBinder"/> used by the serializer when resolving type names.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializer.TraceWriter">
            <summary>
            Gets or sets the <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.ITraceWriter"/> used by the serializer when writing trace messages.
            </summary>
            <value>The trace writer.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializer.TypeNameHandling">
            <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializer.TypeNameAssemblyFormat">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializer.PreserveReferencesHandling">
            <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializer.ReferenceLoopHandling">
            <summary>
            Get or set how reference loops (e.g. a class referencing itself) is handled.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializer.MissingMemberHandling">
            <summary>
            Get or set how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializer.NullValueHandling">
            <summary>
            Get or set how null values are handled during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializer.DefaultValueHandling">
            <summary>
            Get or set how null default are handled during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializer.ObjectCreationHandling">
            <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializer.ConstructorHandling">
            <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
            <value>The constructor handling.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializer.Converters">
            <summary>
            Gets a collection <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/> that will be used during serialization.
            </summary>
            <value>Collection <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/> that will be used during serialization.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializer.ContractResolver">
            <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializer.Context">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext"/> used by the serializer when invoking serialization callback methods.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializer.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializer.DateFormatHandling">
            <summary>
            Get or set how dates are written to JSON text.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializer.DateTimeZoneHandling">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> time zones are handling during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializer.DateParseHandling">
            <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializer.Culture">
            <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializer.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReaderException"/>.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializer.CheckAdditionalContent">
            <summary>
            Gets a value indicating whether there will be a check for additional JSON content after deserializing an object.
            </summary>
            <value>
            	<c>true</c> if there will be a check for additional JSON content after deserializing an object; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings">
            <summary>
            Specifies the settings on a <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/> object.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings"/> class.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings.ReferenceLoopHandling">
            <summary>
            Gets or sets how reference loops (e.g. a class referencing itself) is handled.
            </summary>
            <value>Reference loop handling.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings.MissingMemberHandling">
            <summary>
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
            <value>Missing member handling.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings.ObjectCreationHandling">
            <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings.NullValueHandling">
            <summary>
            Gets or sets how null values are handled during serialization and deserialization.
            </summary>
            <value>Null value handling.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings.DefaultValueHandling">
            <summary>
            Gets or sets how null default are handled during serialization and deserialization.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings.Converters">
            <summary>
            Gets or sets a collection <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/> that will be used during serialization.
            </summary>
            <value>The converters.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings.PreserveReferencesHandling">
            <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
            <value>The preserve references handling.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling">
            <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormat">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings.ConstructorHandling">
            <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
            <value>The constructor handling.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings.ContractResolver">
            <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
            <value>The contract resolver.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings.ReferenceResolver">
            <summary>
            Gets or sets the <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.IReferenceResolver"/> used by the serializer when resolving references.
            </summary>
            <value>The reference resolver.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings.TraceWriter">
            <summary>
            Gets or sets the <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.ITraceWriter"/> used by the serializer when writing trace messages.
            </summary>
            <value>The trace writer.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings.Binder">
            <summary>
            Gets or sets the <see cref="T:Raven.Imports.Newtonsoft.Json.SerializationBinder"/> used by the serializer when resolving type names.
            </summary>
            <value>The binder.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings.Error">
            <summary>
            Gets or sets the error handler called during serialization and deserialization.
            </summary>
            <value>The error handler called during serialization and deserialization.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings.Context">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext"/> used by the serializer when invoking serialization callback methods.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReaderException"/>.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings.DateFormatHandling">
            <summary>
            Get or set how dates are written to JSON text.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings.DateTimeZoneHandling">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> time zones are handling during serialization and deserialization.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings.DateParseHandling">
            <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings.Culture">
            <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonSerializerSettings.CheckAdditionalContent">
            <summary>
            Gets a value indicating whether there will be a check for additional content after deserializing an object.
            </summary>
            <value>
            	<c>true</c> if there will be a check for additional content after deserializing an object; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.JsonTextWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Creates an instance of the <c>JsonWriter</c> class using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <c>TextWriter</c> to write to.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.WriteStartObject">
            <summary>
            Writes the beginning of a Json object.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.WriteStartArray">
            <summary>
            Writes the beginning of a Json array.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.WriteEnd(Raven.Imports.Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.WriteIndent">
            <summary>
            Writes indent characters.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.WriteValueDelimiter">
            <summary>
            Writes the JSON value delimiter.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.WriteIndentSpace">
            <summary>
            Writes an indent space.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:Byte[]"/> value.
            </summary>
            <param name="value">The <see cref="T:Byte[]"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonTextWriter.WriteWhitespace(System.String)">
            <summary>
            Writes out the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonTextWriter.Indentation">
            <summary>
            Gets or sets how many IndentChars to write for each level in the hierarchy when <see cref="T:Raven.Imports.Newtonsoft.Json.Formatting"/> is set to <c>Formatting.Indented</c>.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonTextWriter.QuoteChar">
            <summary>
            Gets or sets which character to use to quote attribute values.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonTextWriter.IndentChar">
            <summary>
            Gets or sets which character to use for indenting when <see cref="T:Raven.Imports.Newtonsoft.Json.Formatting"/> is set to <c>Formatting.Indented</c>.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonTextWriter.QuoteName">
            <summary>
            Gets or sets a value indicating whether object names will be surrounded with quotes.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.JsonToken">
            <summary>
            Specifies the type of Json token.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonToken.None">
            <summary>
            This is returned by the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> if a <see cref="M:Raven.Imports.Newtonsoft.Json.JsonReader.Read"/> method has not been called. 
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonToken.StartObject">
            <summary>
            An object start token.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonToken.StartArray">
            <summary>
            An array start token.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonToken.StartConstructor">
            <summary>
            A constructor start token.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonToken.PropertyName">
            <summary>
            An object property name.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonToken.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonToken.Raw">
            <summary>
            Raw JSON.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonToken.Integer">
            <summary>
            An integer.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonToken.Float">
            <summary>
            A float.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonToken.String">
            <summary>
            A string.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonToken.Boolean">
            <summary>
            A boolean.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonToken.Null">
            <summary>
            A null token.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonToken.Undefined">
            <summary>
            An undefined token.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonToken.EndObject">
            <summary>
            An object end token.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonToken.EndArray">
            <summary>
            An array end token.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonToken.EndConstructor">
            <summary>
            A constructor end token.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonToken.Date">
            <summary>
            A Date.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.JsonToken.Bytes">
            <summary>
            Byte data.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.JsonValidatingReader">
            <summary>
            Represents a reader that provides <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> validation.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonValidatingReader.#ctor(Raven.Imports.Newtonsoft.Json.JsonReader)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonValidatingReader"/> class that
            validates the content returned from the given <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> to read from while validating.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonValidatingReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonValidatingReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]"/>.
            </summary>
            <returns>
            A <see cref="T:Byte[]"/> or a null reference if the next JSON token is null.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonValidatingReader.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonValidatingReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonValidatingReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonValidatingReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
        </member>
        <member name="E:Raven.Imports.Newtonsoft.Json.JsonValidatingReader.ValidationEventHandler">
            <summary>
            Sets an event handler for receiving schema validation errors.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonValidatingReader.Value">
            <summary>
            Gets the text value of the current JSON token.
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonValidatingReader.Depth">
            <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
            <value>The depth of the current token in the JSON document.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonValidatingReader.Path">
            <summary>
            Gets the path of the current JSON token. 
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonValidatingReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonValidatingReader.TokenType">
            <summary>
            Gets the type of the current JSON token.
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonValidatingReader.ValueType">
            <summary>
            Gets the Common Language Runtime (CLR) type for the current JSON token.
            </summary>
            <value></value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonValidatingReader.Schema">
            <summary>
            Gets or sets the schema.
            </summary>
            <value>The schema.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonValidatingReader.Reader">
            <summary>
            Gets the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> used to construct this <see cref="T:Raven.Imports.Newtonsoft.Json.JsonValidatingReader"/>.
            </summary>
            <value>The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> specified in the constructor.</value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.JsonWriterException">
            <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriterException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriterException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriterException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriterException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.JsonWriterException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.MemberSerialization">
            <summary>
            Specifies the member serialization options for the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.MemberSerialization.OptOut">
            <summary>
            All public members are serialized by default. Members can be excluded using <see cref="T:Raven.Imports.Newtonsoft.Json.JsonIgnoreAttribute"/> or NonSerializedAttribute.
            This is the default member serialization mode.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.MemberSerialization.OptIn">
            <summary>
            Only members must be marked with <see cref="T:Raven.Imports.Newtonsoft.Json.JsonPropertyAttribute"/> or <see cref="T:System.Runtime.Serialization.DataMemberAttribute"/> are serialized.
            This member serialization mode can also be set by marking the class with <see cref="T:System.Runtime.Serialization.DataContractAttribute"/>.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.MemberSerialization.Fields">
            <summary>
            All public and private fields are serialized. Members can be excluded using <see cref="T:Raven.Imports.Newtonsoft.Json.JsonIgnoreAttribute"/> or NonSerializedAttribute.
            This member serialization mode can also be set by marking the class with <see cref="T:System.SerializableAttribute"/>
            and setting IgnoreSerializableAttribute on <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.DefaultContractResolver"/> to false.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.MissingMemberHandling">
            <summary>
            Specifies missing member handling options for the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.MissingMemberHandling.Ignore">
            <summary>
            Ignore a missing member and do not attempt to deserialize it.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.MissingMemberHandling.Error">
            <summary>
            Throw a <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializationException"/> when a missing member is encountered during deserialization.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.NullValueHandling">
            <summary>
            Specifies null value handling options for the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingObject" title="NullValueHandling Class"/>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingExample" title="NullValueHandling Ignore Example"/>
            </example>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.NullValueHandling.Include">
            <summary>
            Include null values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.NullValueHandling.Ignore">
            <summary>
            Ignore null values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.ObjectCreationHandling">
            <summary>
            Specifies how object creation is handled by the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.ObjectCreationHandling.Auto">
            <summary>
            Reuse existing objects, create new objects when needed.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.ObjectCreationHandling.Reuse">
            <summary>
            Only reuse existing objects.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.ObjectCreationHandling.Replace">
            <summary>
            Always create new objects.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.PreserveReferencesHandling">
            <summary>
            Specifies reference handling options for the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/>.
            Note that references cannot be preserved when a value is set via a non-default constructor such as types that implement ISerializable.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="PreservingObjectReferencesOn" title="Preserve Object References"/>       
            </example>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.PreserveReferencesHandling.None">
            <summary>
            Do not preserve references when serializing types.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.PreserveReferencesHandling.Objects">
            <summary>
            Preserve references when serializing into a JSON object structure.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.PreserveReferencesHandling.Arrays">
            <summary>
            Preserve references when serializing into a JSON array structure.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.PreserveReferencesHandling.All">
            <summary>
            Preserve references when serializing.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.ReferenceLoopHandling">
            <summary>
            Specifies reference loop handling options for the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.ReferenceLoopHandling.Error">
            <summary>
            Throw a <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializationException"/> when a loop is encountered.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.ReferenceLoopHandling.Ignore">
            <summary>
            Ignore loop references and do not serialize.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.ReferenceLoopHandling.Serialize">
            <summary>
            Serialize loop references.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Required">
            <summary>
            Indicating whether a property is required.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Required.Default">
            <summary>
            The property is not required. The default state.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Required.AllowNull">
            <summary>
            The property must be defined in JSON but can be a null value.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Required.Always">
            <summary>
            The property must be defined in JSON and cannot be a null value.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.SerializationBinder">
            <summary>
            Allows users to control class loading and mandate what class to load.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.SerializationBinder.BindToType(System.String,System.String)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object</param>
            <returns>The type of the object the formatter creates a new instance of.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.SerializationBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="serializedType">The type of the object the formatter creates a new instance of.</param>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object.</param>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.StringEscapeHandling">
            <summary>
            Specifies how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.StringEscapeHandling.Default">
            <summary>
            Only control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.StringEscapeHandling.EscapeNonAscii">
            <summary>
            All non-ASCII and control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.StringEscapeHandling.EscapeHtml">
            <summary>
            HTML (&lt;, &gt;, &amp;, &apos;, &quot;) and control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.TraceLevel">
            <summary>
            Specifies what messages to output for the <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.ITraceWriter"/> class.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.TraceLevel.Off">
            <summary>
            Output no tracing and debugging messages.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.TraceLevel.Error">
            <summary>
            Output error-handling messages.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.TraceLevel.Warning">
            <summary>
            Output warnings and error-handling messages.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.TraceLevel.Info">
            <summary>
            Output informational messages, warnings, and error-handling messages.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.TraceLevel.Verbose">
            <summary>
            Output all debugging and tracing messages.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.TypeNameHandling">
            <summary>
            Specifies type name handling options for the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.TypeNameHandling.None">
            <summary>
            Do not include the .NET type name when serializing types.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.TypeNameHandling.Objects">
            <summary>
            Include the .NET type name when serializing into a JSON object structure.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.TypeNameHandling.Arrays">
            <summary>
            Include the .NET type name when serializing into a JSON array structure.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.TypeNameHandling.All">
            <summary>
            Always include the .NET type name when serializing.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.TypeNameHandling.Auto">
            <summary>
            Include the .NET type name when the type of the object being serialized is not the same as its declared type.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.WriteState">
            <summary>
            Specifies the state of the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.WriteState.Error">
            <summary>
            An exception has been thrown, which has left the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> in an invalid state.
            You may call the <see cref="M:Raven.Imports.Newtonsoft.Json.JsonWriter.Close"/> method to put the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> in the <c>Closed</c> state.
            Any other <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> method calls results in an <see cref="T:System.InvalidOperationException"/> being thrown. 
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.WriteState.Closed">
            <summary>
            The <see cref="M:Raven.Imports.Newtonsoft.Json.JsonWriter.Close"/> method has been called. 
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.WriteState.Object">
            <summary>
            An object is being written. 
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.WriteState.Array">
            <summary>
            A array is being written.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.WriteState.Constructor">
            <summary>
            A constructor is being written.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.WriteState.Property">
            <summary>
            A property is being written.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.WriteState.Start">
            <summary>
            A write method has not been called.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Converters.BsonObjectIdConverter">
            <summary>
            Converts a <see cref="T:Raven.Imports.Newtonsoft.Json.Bson.BsonObjectId"/> to and from JSON and BSON.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Converters.BsonObjectIdConverter.WriteJson(Raven.Imports.Newtonsoft.Json.JsonWriter,System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Converters.BsonObjectIdConverter.ReadJson(Raven.Imports.Newtonsoft.Json.JsonReader,System.Type,System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Converters.BsonObjectIdConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Converters.CustomCreationConverter`1">
            <summary>
            Create a custom object
            </summary>
            <typeparam name="T">The object type to convert.</typeparam>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Converters.CustomCreationConverter`1.WriteJson(Raven.Imports.Newtonsoft.Json.JsonWriter,System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Converters.CustomCreationConverter`1.ReadJson(Raven.Imports.Newtonsoft.Json.JsonReader,System.Type,System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Converters.CustomCreationConverter`1.Create(System.Type)">
            <summary>
            Creates an object which will then be populated by the serializer.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>The created object.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Converters.CustomCreationConverter`1.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Converters.DateTimeConverterBase">
            <summary>
            Provides a base class for converting a <see cref="T:System.DateTime"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Converters.DateTimeConverterBase.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Converters.ExpandoObjectConverter">
            <summary>
            Converts an ExpandoObject to and from JSON.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Converters.ExpandoObjectConverter.WriteJson(Raven.Imports.Newtonsoft.Json.JsonWriter,System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Converters.ExpandoObjectConverter.ReadJson(Raven.Imports.Newtonsoft.Json.JsonReader,System.Type,System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Converters.ExpandoObjectConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Converters.ExpandoObjectConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Converters.IsoDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to and from the ISO 8601 date format (e.g. 2008-04-12T12:53Z).
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Converters.IsoDateTimeConverter.WriteJson(Raven.Imports.Newtonsoft.Json.JsonWriter,System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Converters.IsoDateTimeConverter.ReadJson(Raven.Imports.Newtonsoft.Json.JsonReader,System.Type,System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeStyles">
            <summary>
            Gets or sets the date time styles used when converting a date to and from JSON.
            </summary>
            <value>The date time styles used when converting a date to and from JSON.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeFormat">
            <summary>
            Gets or sets the date time format used when converting a date to and from JSON.
            </summary>
            <value>The date time format used when converting a date to and from JSON.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Converters.IsoDateTimeConverter.Culture">
            <summary>
            Gets or sets the culture used when converting a date to and from JSON.
            </summary>
            <value>The culture used when converting a date to and from JSON.</value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Converters.JavaScriptDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to and from a JavaScript date constructor (e.g. new Date(52231943)).
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Raven.Imports.Newtonsoft.Json.JsonWriter,System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Raven.Imports.Newtonsoft.Json.JsonReader,System.Type,System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing property value of the JSON that is being converted.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Converters.KeyValuePairConverter">
            <summary>
            Converts a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to and from JSON.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Converters.KeyValuePairConverter.WriteJson(Raven.Imports.Newtonsoft.Json.JsonWriter,System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Converters.KeyValuePairConverter.ReadJson(Raven.Imports.Newtonsoft.Json.JsonReader,System.Type,System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Converters.KeyValuePairConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Converters.RegexConverter">
            <summary>
            Converts a <see cref="T:System.Text.RegularExpressions.Regex"/> to and from JSON and BSON.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Converters.RegexConverter.WriteJson(Raven.Imports.Newtonsoft.Json.JsonWriter,System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Converters.RegexConverter.ReadJson(Raven.Imports.Newtonsoft.Json.JsonReader,System.Type,System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Converters.RegexConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Converters.StringEnumConverter">
            <summary>
            Converts an <see cref="T:System.Enum"/> to and from its name string value.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Converters.StringEnumConverter.WriteJson(Raven.Imports.Newtonsoft.Json.JsonWriter,System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Converters.StringEnumConverter.ReadJson(Raven.Imports.Newtonsoft.Json.JsonReader,System.Type,System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Converters.StringEnumConverter.GetEnumNameMap(System.Type)">
            <summary>
            A cached representation of the Enum string representation to respect per Enum field name.
            </summary>
            <param name="t">The type of the Enum.</param>
            <returns>A map of enum field name to either the field name, or the configured enum member name (<see cref="T:System.Runtime.Serialization.EnumMemberAttribute"/>).</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Converters.StringEnumConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Converters.StringEnumConverter.CamelCaseText">
            <summary>
            Gets or sets a value indicating whether the written enum text should be camel case.
            </summary>
            <value><c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Converters.VersionConverter">
            <summary>
            Converts a <see cref="T:System.Version"/> to and from a string (e.g. "1.2.3.4").
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Converters.VersionConverter.WriteJson(Raven.Imports.Newtonsoft.Json.JsonWriter,System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Converters.VersionConverter.ReadJson(Raven.Imports.Newtonsoft.Json.JsonReader,System.Type,System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing property value of the JSON that is being converted.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Converters.VersionConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Linq.Extensions">
            <summary>
            Contains the LINQ to JSON extension methods.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains the ancestors of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> that contains the ancestors of every node in the source collection.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains the descendants of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JContainer"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> that contains the descendants of every node in the source collection.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.Extensions.Properties(System.Collections.Generic.IEnumerable{Raven.Imports.Newtonsoft.Json.Linq.JObject})">
            <summary>
            Returns a collection of child properties of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JObject"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JProperty"/> that contains the properties of every object in the source collection.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Raven.Imports.Newtonsoft.Json.Linq.JToken},System.Object)">
            <summary>
            Returns a collection of child values of every object in the source collection with the given key.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> that contains the values of every node in the source collection with the given key.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Raven.Imports.Newtonsoft.Json.Linq.JToken})">
            <summary>
            Returns a collection of child values of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> that contains the values of every node in the source collection.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Raven.Imports.Newtonsoft.Json.Linq.JToken},System.Object)">
            <summary>
            Returns a collection of converted child values of every object in the source collection with the given key.
            </summary>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every node in the source collection with the given key.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Raven.Imports.Newtonsoft.Json.Linq.JToken})">
            <summary>
            Returns a collection of converted child values of every object in the source collection.
            </summary>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every node in the source collection.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.Extensions.Value``1(System.Collections.Generic.IEnumerable{Raven.Imports.Newtonsoft.Json.Linq.JToken})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.Extensions.Children``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of child tokens of every array in the source collection.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> that contains the values of every node in the source collection.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.Extensions.Children``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of converted child tokens of every array in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <typeparam name="T">The source collection type.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every node in the source collection.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.Extensions.AsJEnumerable(System.Collections.Generic.IEnumerable{Raven.Imports.Newtonsoft.Json.Linq.JToken})">
            <summary>
            Returns the input typed as <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.IJEnumerable`1"/>.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>The input typed as <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.IJEnumerable`1"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.Extensions.AsJEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the input typed as <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.IJEnumerable`1"/>.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>The input typed as <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.IJEnumerable`1"/>.</returns>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Linq.IJEnumerable`1">
            <summary>
            Represents a collection of <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> objects.
            </summary>
            <typeparam name="T">The type of token</typeparam>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.IJEnumerable`1.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.IJEnumerable`1"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Linq.JArray">
            <summary>
            Represents a JSON array.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Linq.JContainer">
            <summary>
            Represents a token that can contain other tokens.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Linq.JToken">
            <summary>
            Represents an abstract JSON token.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.DeepEquals(Raven.Imports.Newtonsoft.Json.Linq.JToken,Raven.Imports.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Compares the values of two tokens, including the values of all descendant tokens.
            </summary>
            <param name="t1">The first <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to compare.</param>
            <param name="t2">The second <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to compare.</param>
            <returns>true if the tokens are equal; otherwise false.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.AddAfterSelf(System.Object)">
            <summary>
            Adds the specified content immediately after this token.
            </summary>
            <param name="content">A content object that contains simple content or a collection of content objects to be added after this token.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.AddBeforeSelf(System.Object)">
            <summary>
            Adds the specified content immediately before this token.
            </summary>
            <param name="content">A content object that contains simple content or a collection of content objects to be added before this token.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.Ancestors">
            <summary>
            Returns a collection of the ancestor tokens of this token.
            </summary>
            <returns>A collection of the ancestor tokens of this token.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.AfterSelf">
            <summary>
            Returns a collection of the sibling tokens after this token, in document order.
            </summary>
            <returns>A collection of the sibling tokens after this tokens, in document order.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.BeforeSelf">
            <summary>
            Returns a collection of the sibling tokens before this token, in document order.
            </summary>
            <returns>A collection of the sibling tokens before this token, in document order.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.Value``1(System.Object)">
            <summary>
            Gets the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> with the specified key converted to the specified type.
            </summary>
            <typeparam name="T">The type to convert the token to.</typeparam>
            <param name="key">The token key.</param>
            <returns>The converted token value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.Children">
            <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> containing the child tokens of this <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.Children``1">
            <summary>
            Returns a collection of the child tokens of this token, in document order, filtered by the specified type.
            </summary>
            <typeparam name="T">The type to filter the child tokens on.</typeparam>
            <returns>A <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JEnumerable`1"/> containing the child tokens of this <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the child values of this <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.Remove">
            <summary>
            Removes this token from its parent.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.Replace(Raven.Imports.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Replaces this token with the specified token.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.WriteTo(Raven.Imports.Newtonsoft.Json.JsonWriter,Raven.Imports.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.ToString">
            <summary>
            Returns the indented JSON for this token.
            </summary>
            <returns>
            The indented JSON for this token.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.ToString(Raven.Imports.Newtonsoft.Json.Formatting,Raven.Imports.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Returns the JSON for this token using the given formatting and converters.
            </summary>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="converters">A collection of <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
            <returns>The JSON for this token using the given formatting and converters.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.Boolean">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.DateTimeOffset">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Boolean}">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.Int64">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTime}">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTimeOffset}">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Decimal}">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Double}">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Char}">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.Int32">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.Int16">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Int16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.UInt16">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.Char">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Char"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.Byte">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int32}">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int16}">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt16}">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Byte}">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.DateTime">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int64}">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Single}">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.Decimal">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt32}">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt64}">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.Double">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.Single">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.UInt32">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.UInt64">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.Byte[]">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Byte[]"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.Guid">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Guid}">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.TimeSpan">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.TimeSpan}">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Explicit(Raven.Imports.Newtonsoft.Json.Linq.JToken)~System.Uri">
            <summary>
            Performs an explicit conversion from <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Uri"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Boolean)~Raven.Imports.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean"/> to <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTimeOffset)~Raven.Imports.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTimeOffset"/> to <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Boolean})~Raven.Imports.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int64)~Raven.Imports.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTime})~Raven.Imports.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTimeOffset})~Raven.Imports.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Decimal})~Raven.Imports.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Double})~Raven.Imports.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int16)~Raven.Imports.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int16"/> to <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt16)~Raven.Imports.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16"/> to <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int32)~Raven.Imports.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int32})~Raven.Imports.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTime)~Raven.Imports.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime"/> to <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int64})~Raven.Imports.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Single})~Raven.Imports.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Decimal)~Raven.Imports.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal"/> to <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int16})~Raven.Imports.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt16})~Raven.Imports.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt32})~Raven.Imports.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt64})~Raven.Imports.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Double)~Raven.Imports.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double"/> to <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Single)~Raven.Imports.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single"/> to <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Implicit(System.String)~Raven.Imports.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt32)~Raven.Imports.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32"/> to <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt64)~Raven.Imports.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte[])~Raven.Imports.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte[]"/> to <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Uri)~Raven.Imports.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Uri"/> to <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Implicit(System.TimeSpan)~Raven.Imports.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.TimeSpan"/> to <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.TimeSpan})~Raven.Imports.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Guid)~Raven.Imports.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Guid"/> to <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Guid})~Raven.Imports.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.CreateReader">
            <summary>
            Creates an <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> for this token.
            </summary>
            <returns>An <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> that can be used to read this token and its descendants.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>A <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> with the value of the specified object</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.FromObject(System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> from an object using the specified <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.</param>
            <param name="jsonSerializer">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/> that will be used when reading the object.</param>
            <returns>A <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> with the value of the specified object</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.ToObject``1">
            <summary>
            Creates the specified .NET type from the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.ToObject(System.Type)">
            <summary>
            Creates the specified .NET type from the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="objectType">The object type that the token will be deserialized to.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.ToObject``1(Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates the specified .NET type from the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> using the specified <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
            <param name="jsonSerializer">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/> that will be used when creating the object.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.ToObject(System.Type,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates the specified .NET type from the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> using the specified <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <param name="objectType">The object type that the token will be deserialized to.</param>
            <param name="jsonSerializer">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/> that will be used when creating the object.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.ReadFrom(Raven.Imports.Newtonsoft.Json.JsonReader)">
            <summary>
            Creates a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> from a <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">An <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>
            An <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.Parse(System.String)">
            <summary>
            Load a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.Load(Raven.Imports.Newtonsoft.Json.JsonReader)">
            <summary>
            Creates a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> from a <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">An <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>
            An <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.SelectToken(System.String)">
            <summary>
            Selects the token that matches the object path.
            </summary>
            <param name="path">
            The object path from the current <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>
            to be returned. This must be a string of property names or array indexes separated
            by periods, such as <code>Tables[0].DefaultView[0].Price</code> in C# or
            <code>Tables(0).DefaultView(0).Price</code> in Visual Basic.
            </param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> that matches the object path or a null reference if no matching token is found.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.SelectToken(System.String,System.Boolean)">
            <summary>
            Selects the token that matches the object path.
            </summary>
            <param name="path">
            The object path from the current <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>
            to be returned. This must be a string of property names or array indexes separated
            by periods, such as <code>Tables[0].DefaultView[0].Price</code> in C# or
            <code>Tables(0).DefaultView(0).Price</code> in Visual Basic.
            </param>
            <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no token is found.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> that matches the object path.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JToken.DeepClone">
            <summary>
            Creates a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>. All child tokens are recursively cloned.
            </summary>
            <returns>A new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JToken.EqualityComparer">
            <summary>
            Gets a comparer that can compare two tokens for value equality.
            </summary>
            <value>A <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JTokenEqualityComparer"/> that can compare two nodes for value equality.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JToken.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JToken.Root">
            <summary>
            Gets the root <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> of this <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The root <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> of this <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JToken.Type">
            <summary>
            Gets the node type for this <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JToken.HasValues">
            <summary>
            Gets a value indicating whether this token has childen tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JToken.Next">
            <summary>
            Gets the next sibling token of this node.
            </summary>
            <value>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> that contains the next sibling token.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JToken.Previous">
            <summary>
            Gets the previous sibling token of this node.
            </summary>
            <value>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> that contains the previous sibling token.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JToken.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JToken.First">
            <summary>
            Get the first child token of this token.
            </summary>
            <value>A <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> containing the first child token of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JToken.Last">
            <summary>
            Get the last child token of this token.
            </summary>
            <value>A <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> containing the last child token of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.</value>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JContainer.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Raven.Imports.Newtonsoft.Json.Linq.JContainer.CollectionChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JContainer.Children">
            <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> containing the child tokens of this <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>, in document order.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JContainer.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the child values of this <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>, in document order.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JContainer.Descendants">
            <summary>
            Returns a collection of the descendant tokens for this token in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the descendant tokens of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JContainer.Add(System.Object)">
            <summary>
            Adds the specified content as children of this <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="content">The content to be added.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JContainer.AddFirst(System.Object)">
            <summary>
            Adds the specified content as the first children of this <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="content">The content to be added.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JContainer.CreateWriter">
            <summary>
            Creates an <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> that can be used to add tokens to the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <returns>An <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> that is ready to have content written to it.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JContainer.ReplaceAll(System.Object)">
            <summary>
            Replaces the children nodes of this token with the specified content.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JContainer.RemoveAll">
            <summary>
            Removes the child nodes from this token.
            </summary>
        </member>
        <member name="E:Raven.Imports.Newtonsoft.Json.Linq.JContainer.CollectionChanged">
            <summary>
            Occurs when the items list of the collection has changed, or the collection is reset.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JContainer.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JContainer.HasValues">
            <summary>
            Gets a value indicating whether this token has childen tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JContainer.First">
            <summary>
            Get the first child token of this token.
            </summary>
            <value>
            A <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> containing the first child token of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JContainer.Last">
            <summary>
            Get the last child token of this token.
            </summary>
            <value>
            A <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> containing the last child token of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JContainer.Count">
            <summary>
            Gets the count of child JSON tokens.
            </summary>
            <value>The count of child JSON tokens</value>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JArray"/> class.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JArray.#ctor(Raven.Imports.Newtonsoft.Json.Linq.JArray)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JArray"/> class from another <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JArray"/> object.
            </summary>
            <param name="other">A <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JArray"/> object to copy from.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JArray.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JArray"/> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JArray.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JArray"/> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JArray.Load(Raven.Imports.Newtonsoft.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JArray"/> from a <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JArray"/>.</param>
            <returns>A <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JArray"/> that contains the JSON that was read from the specified <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JArray.Parse(System.String)">
            <summary>
            Load a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JArray"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JArray"/> populated from the string that contains JSON.</returns>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text"/>
            </example>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JArray.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JArray"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JArray"/>.</param>
            <returns>A <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JArray"/> with the values of the specified object</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JArray.FromObject(System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JArray"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JArray"/>.</param>
            <param name="jsonSerializer">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/> that will be used to read the object.</param>
            <returns>A <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JArray"/> with the values of the specified object</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JArray.WriteTo(Raven.Imports.Newtonsoft.Json.JsonWriter,Raven.Imports.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JArray.IndexOf(Raven.Imports.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JArray.Insert(System.Int32,Raven.Imports.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JArray.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JArray.Add(Raven.Imports.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JArray.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JArray.Contains(Raven.Imports.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JArray.Remove(Raven.Imports.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JArray.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JArray.Type">
            <summary>
            Gets the node type for this <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JArray.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JArray.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Linq.JConstructor">
            <summary>
            Represents a JSON constructor.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JConstructor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JConstructor"/> class.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JConstructor.#ctor(Raven.Imports.Newtonsoft.Json.Linq.JConstructor)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JConstructor"/> class from another <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JConstructor"/> object.
            </summary>
            <param name="other">A <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JConstructor"/> object to copy from.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JConstructor"/> class with the specified name and content.
            </summary>
            <param name="name">The constructor name.</param>
            <param name="content">The contents of the constructor.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JConstructor"/> class with the specified name and content.
            </summary>
            <param name="name">The constructor name.</param>
            <param name="content">The contents of the constructor.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JConstructor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JConstructor"/> class with the specified name.
            </summary>
            <param name="name">The constructor name.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JConstructor.WriteTo(Raven.Imports.Newtonsoft.Json.JsonWriter,Raven.Imports.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JConstructor.Load(Raven.Imports.Newtonsoft.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JConstructor"/> from a <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JConstructor"/>.</param>
            <returns>A <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JConstructor"/> that contains the JSON that was read from the specified <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JConstructor.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JConstructor.Name">
            <summary>
            Gets or sets the name of this constructor.
            </summary>
            <value>The constructor name.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JConstructor.Type">
            <summary>
            Gets the node type for this <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JConstructor.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Linq.JEnumerable`1">
            <summary>
            Represents a collection of <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> objects.
            </summary>
            <typeparam name="T">The type of token</typeparam>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Linq.JEnumerable`1.Empty">
            <summary>
            An empty collection of <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> objects.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JEnumerable`1"/> struct.
            </summary>
            <param name="enumerable">The enumerable.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JEnumerable`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JEnumerable`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JEnumerable`1.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.IJEnumerable`1"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Linq.JObject">
            <summary>
            Represents a JSON object.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JObject"/> class.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JObject.#ctor(Raven.Imports.Newtonsoft.Json.Linq.JObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JObject"/> class from another <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JObject"/> object.
            </summary>
            <param name="other">A <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JObject"/> object to copy from.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JObject.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JObject"/> class with the specified content.
            </summary>
            <param name="content">The contents of the object.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JObject.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JObject"/> class with the specified content.
            </summary>
            <param name="content">The contents of the object.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JObject.Properties">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of this object's properties.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of this object's properties.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JObject.Property(System.String)">
            <summary>
            Gets a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JProperty"/> the specified name.
            </summary>
            <param name="name">The property name.</param>
            <returns>A <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JProperty"/> with the specified name or null.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JObject.PropertyValues">
            <summary>
            Gets an <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JEnumerable`1"/> of this object's property values.
            </summary>
            <returns>An <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JEnumerable`1"/> of this object's property values.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JObject.Load(Raven.Imports.Newtonsoft.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JObject"/> from a <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JObject"/>.</param>
            <returns>A <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JObject"/> that contains the JSON that was read from the specified <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JObject.Parse(System.String)">
            <summary>
            Load a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JObject"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JObject"/> populated from the string that contains JSON.</returns>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text"/>
            </example>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JObject.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JObject"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JObject"/>.</param>
            <returns>A <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JObject"/> with the values of the specified object</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JObject.FromObject(System.Object,Raven.Imports.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JArray"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JArray"/>.</param>
            <param name="jsonSerializer">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/> that will be used to read the object.</param>
            <returns>A <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JArray"/> with the values of the specified object</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JObject.WriteTo(Raven.Imports.Newtonsoft.Json.JsonWriter,Raven.Imports.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JObject.GetValue(System.String)">
            <summary>
            Gets the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> with the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <value>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> with the specified property name.</value>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JObject.GetValue(System.String,System.StringComparison)">
            <summary>
            Gets the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison"/> will be used to match a property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <value>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> with the specified property name.</value>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,System.StringComparison,Raven.Imports.Newtonsoft.Json.Linq.JToken@)">
            <summary>
            Tries to get the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison"/> will be used to match a property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns>true if a value was successfully retrieved; otherwise, false.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JObject.Add(System.String,Raven.Imports.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Adds the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JObject.Remove(System.String)">
            <summary>
            Removes the property with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>true if item was successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,Raven.Imports.Newtonsoft.Json.Linq.JToken@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <returns>true if a value was successfully retrieved; otherwise, false.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JObject.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JObject.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Raven.Imports.Newtonsoft.Json.Linq.JObject.PropertyChanged"/> event with the provided arguments.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JObject.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JObject.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="E:Raven.Imports.Newtonsoft.Json.Linq.JObject.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JObject.Type">
            <summary>
            Gets the node type for this <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JObject.Item(System.Object)">
            <summary>
            Gets the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JObject.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> with the specified property name.
            </summary>
            <value></value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Linq.JProperty">
            <summary>
            Represents a JSON property.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JProperty.#ctor(Raven.Imports.Newtonsoft.Json.Linq.JProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JProperty"/> class from another <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JProperty"/> object.
            </summary>
            <param name="other">A <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JProperty"/> object to copy from.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JProperty"/> class.
            </summary>
            <param name="name">The property name.</param>
            <param name="content">The property content.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JProperty"/> class.
            </summary>
            <param name="name">The property name.</param>
            <param name="content">The property content.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JProperty.WriteTo(Raven.Imports.Newtonsoft.Json.JsonWriter,Raven.Imports.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JProperty.Load(Raven.Imports.Newtonsoft.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JProperty"/> from a <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JProperty"/>.</param>
            <returns>A <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JProperty"/> that contains the JSON that was read from the specified <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JProperty.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JProperty.Name">
            <summary>
            Gets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JProperty.Value">
            <summary>
            Gets or sets the property value.
            </summary>
            <value>The property value.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JProperty.Type">
            <summary>
            Gets the node type for this <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Linq.JRaw">
            <summary>
            Represents a raw JSON string.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Linq.JValue">
            <summary>
            Represents a value in JSON (string, integer, date, etc).
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JValue.#ctor(Raven.Imports.Newtonsoft.Json.Linq.JValue)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> class from another <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> object.
            </summary>
            <param name="other">A <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> object to copy from.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JValue.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JValue.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JValue.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JValue.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JValue.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JValue.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JValue.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JValue.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JValue.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JValue.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JValue.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JValue.CreateComment(System.String)">
            <summary>
            Creates a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> comment with the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> comment with the given value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JValue.CreateString(System.String)">
            <summary>
            Creates a <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> string with the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JValue"/> string with the given value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JValue.WriteTo(Raven.Imports.Newtonsoft.Json.JsonWriter,Raven.Imports.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JValue.Equals(Raven.Imports.Newtonsoft.Json.Linq.JValue)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JValue.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JValue.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JValue.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JValue.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JValue.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JValue.CompareTo(Raven.Imports.Newtonsoft.Json.Linq.JValue)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj"/>.
            Zero
            This instance is equal to <paramref name="obj"/>.
            Greater than zero
            This instance is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="obj"/> is not the same type as this instance.
            </exception>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JValue.HasValues">
            <summary>
            Gets a value indicating whether this token has childen tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JValue.Type">
            <summary>
            Gets the node type for this <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JValue.Value">
            <summary>
            Gets or sets the underlying token value.
            </summary>
            <value>The underlying token value.</value>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JRaw.#ctor(Raven.Imports.Newtonsoft.Json.Linq.JRaw)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JRaw"/> class from another <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JRaw"/> object.
            </summary>
            <param name="other">A <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JRaw"/> object to copy from.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JRaw.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JRaw"/> class.
            </summary>
            <param name="rawJson">The raw json.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JRaw.Create(Raven.Imports.Newtonsoft.Json.JsonReader)">
            <summary>
            Creates an instance of <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JRaw"/> with the content of the reader's current token.
            </summary>
            <param name="reader">The reader.</param>
            <returns>An instance of <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JRaw"/> with the content of the reader's current token.</returns>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Linq.JTokenEqualityComparer">
            <summary>
            Compares tokens to determine whether they are equal.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenEqualityComparer.Equals(Raven.Imports.Newtonsoft.Json.Linq.JToken,Raven.Imports.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to compare.</param>
            <param name="y">The second object of type <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenEqualityComparer.GetHashCode(Raven.Imports.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Linq.JTokenReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenReader.#ctor(Raven.Imports.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JTokenReader"/> class.
            </summary>
            <param name="token">The token to read from.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]"/>.
            </summary>
            <returns>
            A <see cref="T:Byte[]"/> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenReader.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Linq.JTokenType">
            <summary>
            Specifies the type of token.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Linq.JTokenType.None">
            <summary>
            No token type has been set.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Linq.JTokenType.Object">
            <summary>
            A JSON object.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Linq.JTokenType.Array">
            <summary>
            A JSON array.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Linq.JTokenType.Constructor">
            <summary>
            A JSON constructor.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Linq.JTokenType.Property">
            <summary>
            A JSON object property.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Linq.JTokenType.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Linq.JTokenType.Integer">
            <summary>
            An integer value.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Linq.JTokenType.Float">
            <summary>
            A float value.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Linq.JTokenType.String">
            <summary>
            A string value.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Linq.JTokenType.Boolean">
            <summary>
            A boolean value.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Linq.JTokenType.Null">
            <summary>
            A null value.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Linq.JTokenType.Undefined">
            <summary>
            An undefined value.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Linq.JTokenType.Date">
            <summary>
            A date value.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Linq.JTokenType.Raw">
            <summary>
            A raw JSON value.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Linq.JTokenType.Bytes">
            <summary>
            A collection of bytes value.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Linq.JTokenType.Guid">
            <summary>
            A Guid value.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Linq.JTokenType.Uri">
            <summary>
            A Uri value.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Linq.JTokenType.TimeSpan">
            <summary>
            A TimeSpan value.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.#ctor(Raven.Imports.Newtonsoft.Json.Linq.JContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter"/> class writing to the given <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JContainer"/>.
            </summary>
            <param name="container">The container being written to.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter"/> class.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.WriteStartObject">
            <summary>
            Writes the beginning of a Json object.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.WriteStartArray">
            <summary>
            Writes the beginning of a Json array.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.WriteEnd(Raven.Imports.Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the end.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:Byte[]"/> value.
            </summary>
            <param name="value">The <see cref="T:Byte[]"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Linq.JTokenWriter.Token">
            <summary>
            Gets the token being writen.
            </summary>
            <value>The token being writen.</value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Schema.Extensions">
            <summary>
            Contains the JSON schema extension methods.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Schema.Extensions.IsValid(Raven.Imports.Newtonsoft.Json.Linq.JToken,Raven.Imports.Newtonsoft.Json.Schema.JsonSchema)">
            <summary>
            Determines whether the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> is valid.
            </summary>
            <param name="source">The source <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Schema.Extensions.IsValid(Raven.Imports.Newtonsoft.Json.Linq.JToken,Raven.Imports.Newtonsoft.Json.Schema.JsonSchema,System.Collections.Generic.IList{System.String}@)">
            <summary>
            Determines whether the <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> is valid.
            </summary>
            <param name="source">The source <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
            <param name="errorMessages">When this method returns, contains any error messages generated while validating. </param>
            <returns>
            	<c>true</c> if the specified <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Schema.Extensions.Validate(Raven.Imports.Newtonsoft.Json.Linq.JToken,Raven.Imports.Newtonsoft.Json.Schema.JsonSchema)">
            <summary>
            Validates the specified <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="source">The source <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Schema.Extensions.Validate(Raven.Imports.Newtonsoft.Json.Linq.JToken,Raven.Imports.Newtonsoft.Json.Schema.JsonSchema,Raven.Imports.Newtonsoft.Json.Schema.ValidationEventHandler)">
            <summary>
            Validates the specified <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="source">The source <see cref="T:Raven.Imports.Newtonsoft.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
            <param name="validationEventHandler">The validation event handler.</param>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema">
            <summary>
            An in-memory representation of a JSON Schema.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> class.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.Read(Raven.Imports.Newtonsoft.Json.JsonReader)">
            <summary>
            Reads a <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> from the specified <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> containing the JSON Schema to read.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> object representing the JSON Schema.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.Read(Raven.Imports.Newtonsoft.Json.JsonReader,Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Reads a <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> from the specified <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:Raven.Imports.Newtonsoft.Json.JsonReader"/> containing the JSON Schema to read.</param>
            <param name="resolver">The <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaResolver"/> to use when resolving schema references.</param>
            <returns>The <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> object representing the JSON Schema.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.Parse(System.String)">
            <summary>
            Load a <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> from a string that contains schema JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.Parse(System.String,Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Parses the specified json.
            </summary>
            <param name="json">The json.</param>
            <param name="resolver">The resolver.</param>
            <returns>A <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.WriteTo(Raven.Imports.Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes this schema to a <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.WriteTo(Raven.Imports.Newtonsoft.Json.JsonWriter,Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Writes this schema to a <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> using the specified <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaResolver"/>.
            </summary>
            <param name="writer">A <see cref="T:Raven.Imports.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="resolver">The resolver used.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.Required">
            <summary>
            Gets or sets whether the object is required.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.ReadOnly">
            <summary>
            Gets or sets whether the object is read only.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.Hidden">
            <summary>
            Gets or sets whether the object is visible to users.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.Transient">
            <summary>
            Gets or sets whether the object is transient.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.Description">
            <summary>
            Gets or sets the description of the object.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.Type">
            <summary>
            Gets or sets the types of values allowed by the object.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.Pattern">
            <summary>
            Gets or sets the pattern.
            </summary>
            <value>The pattern.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.MinimumLength">
            <summary>
            Gets or sets the minimum length.
            </summary>
            <value>The minimum length.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.MaximumLength">
            <summary>
            Gets or sets the maximum length.
            </summary>
            <value>The maximum length.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.DivisibleBy">
            <summary>
            Gets or sets a number that the value should be divisble by.
            </summary>
            <value>A number that the value should be divisble by.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.Minimum">
            <summary>
            Gets or sets the minimum.
            </summary>
            <value>The minimum.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.Maximum">
            <summary>
            Gets or sets the maximum.
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.ExclusiveMinimum">
            <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "minimum" attribute.
            </summary>
            <value>A flag indicating whether the value can not equal the number defined by the "minimum" attribute.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.ExclusiveMaximum">
            <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "maximum" attribute.
            </summary>
            <value>A flag indicating whether the value can not equal the number defined by the "maximum" attribute.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.MinimumItems">
            <summary>
            Gets or sets the minimum number of items.
            </summary>
            <value>The minimum number of items.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.MaximumItems">
            <summary>
            Gets or sets the maximum number of items.
            </summary>
            <value>The maximum number of items.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.Items">
            <summary>
            Gets or sets the <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> of items.
            </summary>
            <value>The <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> of items.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.PositionalItemsValidation">
            <summary>
            Gets or sets a value indicating whether items in an array are validated using the <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> instance at their array position from <see cref="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.Items"/>.
            </summary>
            <value>
            	<c>true</c> if items are validated using their array position; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.AdditionalItems">
            <summary>
            Gets or sets the <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> of additional items.
            </summary>
            <value>The <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> of additional items.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalItems">
            <summary>
            Gets or sets a value indicating whether additional items are allowed.
            </summary>
            <value>
            	<c>true</c> if additional items are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.UniqueItems">
            <summary>
            Gets or sets whether the array items must be unique.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.Properties">
            <summary>
            Gets or sets the <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> of properties.
            </summary>
            <value>The <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> of properties.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.AdditionalProperties">
            <summary>
            Gets or sets the <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> of additional properties.
            </summary>
            <value>The <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> of additional properties.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.PatternProperties">
            <summary>
            Gets or sets the pattern properties.
            </summary>
            <value>The pattern properties.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalProperties">
            <summary>
            Gets or sets a value indicating whether additional properties are allowed.
            </summary>
            <value>
            	<c>true</c> if additional properties are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.Requires">
            <summary>
            Gets or sets the required property if this property is present.
            </summary>
            <value>The required property if this property is present.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.Enum">
            <summary>
            Gets or sets the a collection of valid enum values allowed.
            </summary>
            <value>A collection of valid enum values allowed.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.Disallow">
            <summary>
            Gets or sets disallowed types.
            </summary>
            <value>The disallow types.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.Default">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.Extends">
            <summary>
            Gets or sets the collection of <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> that this schema extends.
            </summary>
            <value>The collection of <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> that this schema extends.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema.Format">
            <summary>
            Gets or sets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaException">
            <summary>
            Returns detailed information about the schema exception.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaException"/> class.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaGenerator">
            <summary>
            Generates a <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> from a specified <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type)">
            <summary>
            Generate a <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> from.</param>
            <returns>A <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Generate a <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> from.</param>
            <param name="resolver">The <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaResolver"/> used to resolve schema references.</param>
            <returns>A <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,System.Boolean)">
            <summary>
            Generate a <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> from.</param>
            <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> will be nullable.</param>
            <returns>A <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaResolver,System.Boolean)">
            <summary>
            Generate a <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> from.</param>
            <param name="resolver">The <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaResolver"/> used to resolve schema references.</param>
            <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> will be nullable.</param>
            <returns>A <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaGenerator.UndefinedSchemaIdHandling">
            <summary>
            Gets or sets how undefined schemas are handled by the serializer.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaGenerator.ContractResolver">
            <summary>
            Gets or sets the contract resolver.
            </summary>
            <value>The contract resolver.</value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaResolver">
            <summary>
            Resolves <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> from an id.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaResolver"/> class.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(System.String)">
            <summary>
            Gets a <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> for the specified reference.
            </summary>
            <param name="reference">The id.</param>
            <returns>A <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/> for the specified reference.</returns>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaResolver.LoadedSchemas">
            <summary>
            Gets or sets the loaded schemas.
            </summary>
            <value>The loaded schemas.</value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaType">
            <summary>
            The value types allowed by the <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchema"/>.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaType.None">
            <summary>
            No type specified.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaType.String">
            <summary>
            String type.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaType.Float">
            <summary>
            Float type.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaType.Integer">
            <summary>
            Integer type.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaType.Boolean">
            <summary>
            Boolean type.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaType.Object">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaType.Array">
            <summary>
            Array type.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaType.Null">
            <summary>
            Null type.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaType.Any">
            <summary>
            Any type.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Schema.UndefinedSchemaIdHandling">
            <summary>
            Specifies undefined schema Id handling options for the <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaGenerator"/>.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.None">
            <summary>
            Do not infer a schema Id.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseTypeName">
            <summary>
            Use the .NET type name as the schema Id.
            </summary>
        </member>
        <member name="F:Raven.Imports.Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseAssemblyQualifiedName">
            <summary>
            Use the assembly qualified .NET type name as the schema Id.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Schema.ValidationEventArgs">
            <summary>
            Returns detailed information related to the <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.ValidationEventHandler"/>.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.ValidationEventArgs.Exception">
            <summary>
            Gets the <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.JsonSchemaException"/> associated with the validation error.
            </summary>
            <value>The JsonSchemaException associated with the validation error.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.ValidationEventArgs.Path">
            <summary>
            Gets the path of the JSON location where the validation error occurred.
            </summary>
            <value>The path of the JSON location where the validation error occurred.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Schema.ValidationEventArgs.Message">
            <summary>
            Gets the text description corresponding to the validation error.
            </summary>
            <value>The text description.</value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Schema.ValidationEventHandler">
            <summary>
            Represents the callback method that will handle JSON schema validation events and the <see cref="T:Raven.Imports.Newtonsoft.Json.Schema.ValidationEventArgs"/>.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver">
            <summary>
            Resolves member mappings for a type, camel casing property names.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver"/> class.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.ResolvePropertyName(System.String)">
            <summary>
            Resolves the name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>The property name camel cased.</returns>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Serialization.IReferenceResolver">
            <summary>
            Used to resolve references when serializing and deserializing JSON by the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.IReferenceResolver.ResolveReference(System.Object,System.String)">
            <summary>
            Resolves a reference to its object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="reference">The reference to resolve.</param>
            <returns>The object that</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.IReferenceResolver.GetReference(System.Object,System.Object)">
            <summary>
            Gets the reference for the sepecified object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The object to get a reference for.</param>
            <returns>The reference to the object.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.IReferenceResolver.IsReferenced(System.Object,System.Object)">
            <summary>
            Determines whether the specified object is referenced.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The object to test for a reference.</param>
            <returns>
            	<c>true</c> if the specified object is referenced; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.IReferenceResolver.AddReference(System.Object,System.String,System.Object)">
            <summary>
            Adds a reference to the specified object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="reference">The reference.</param>
            <param name="value">The object to reference.</param>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Serialization.DefaultSerializationBinder">
            <summary>
            The default serialization binder used when resolving and loading classes from type names.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(System.String,System.String)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object.</param>
            <returns>
            The type of the object the formatter creates a new instance of.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="serializedType">The type of the object the formatter creates a new instance of.</param>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object. </param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object. </param>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Serialization.ErrorContext">
            <summary>
            Provides information surrounding an error.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.ErrorContext.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.ErrorContext.OriginalObject">
            <summary>
            Gets the original object that caused the error.
            </summary>
            <value>The original object that caused the error.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.ErrorContext.Member">
            <summary>
            Gets the member that caused the error.
            </summary>
            <value>The member that caused the error.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.ErrorContext.Path">
            <summary>
            Gets the path of the JSON location where the error occurred.
            </summary>
            <value>The path of the JSON location where the error occurred.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.ErrorContext.Handled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.ErrorContext"/> is handled.
            </summary>
            <value><c>true</c> if handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Serialization.ErrorEventArgs">
            <summary>
            Provides data for the Error event.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.ErrorEventArgs.#ctor(System.Object,Raven.Imports.Newtonsoft.Json.Serialization.ErrorContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.ErrorEventArgs"/> class.
            </summary>
            <param name="currentObject">The current object.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.ErrorEventArgs.CurrentObject">
            <summary>
            Gets the current object the error event is being raised against.
            </summary>
            <value>The current object the error event is being raised against.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.ErrorEventArgs.ErrorContext">
            <summary>
            Gets the error context.
            </summary>
            <value>The error context.</value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Serialization.ITraceWriter">
            <summary>
            Represents a trace writer.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.ITraceWriter.Trace(Raven.Imports.Newtonsoft.Json.TraceLevel,System.String,System.Exception)">
            <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
            <param name="level">The <see cref="T:Raven.Imports.Newtonsoft.Json.TraceLevel"/> at which to write this trace.</param>
            <param name="message">The trace message.</param>
            <param name="ex">The trace exception. This parameter is optional.</param>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.ITraceWriter.LevelFilter">
            <summary>
            Gets the <see cref="T:Raven.Imports.Newtonsoft.Json.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
            <value>The <see cref="T:Raven.Imports.Newtonsoft.Json.TraceLevel"/> that will be used to filter the trace messages passed to the writer.</value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Serialization.IValueProvider">
            <summary>
            Provides methods to get and set values.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.IValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.IValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonArrayContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonContainerContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonContract.UnderlyingType">
            <summary>
            Gets the underlying type for the contract.
            </summary>
            <value>The underlying type for the contract.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonContract.CreatedType">
            <summary>
            Gets or sets the type created during deserialization.
            </summary>
            <value>The type created during deserialization.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonContract.IsReference">
            <summary>
            Gets or sets whether this type contract is serialized as a reference.
            </summary>
            <value>Whether this type contract is serialized as a reference.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonContract.Converter">
            <summary>
            Gets or sets the default <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/> for this contract.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonContract.OnDeserialized">
            <summary>
            Gets or sets the method called immediately after deserialization of the object.
            </summary>
            <value>The method called immediately after deserialization of the object.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonContract.OnDeserializing">
            <summary>
            Gets or sets the method called during deserialization of the object.
            </summary>
            <value>The method called during deserialization of the object.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonContract.OnSerialized">
            <summary>
            Gets or sets the method called after serialization of the object graph.
            </summary>
            <value>The method called after serialization of the object graph.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonContract.OnSerializing">
            <summary>
            Gets or sets the method called before serialization of the object.
            </summary>
            <value>The method called before serialization of the object.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonContract.DefaultCreator">
            <summary>
            Gets or sets the default creator method used to create the object.
            </summary>
            <value>The default creator method used to create the object.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonContract.DefaultCreatorNonPublic">
            <summary>
            Gets or sets a value indicating whether the default creator is non public.
            </summary>
            <value><c>true</c> if the default object creator is non-public; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonContract.OnError">
            <summary>
            Gets or sets the method called when an error is thrown during the serialization of the object.
            </summary>
            <value>The method called when an error is thrown during the serialization of the object.</value>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.JsonContainerContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonContainerContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonContainerContract.ItemConverter">
            <summary>
            Gets or sets the default collection items <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonContainerContract.ItemIsReference">
            <summary>
            Gets or sets a value indicating whether the collection items preserve object references.
            </summary>
            <value><c>true</c> if collection items preserve object references; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonContainerContract.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the collection item reference loop handling.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonContainerContract.ItemTypeNameHandling">
            <summary>
            Gets or sets the collection item type name handling.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.JsonArrayContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonArrayContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonArrayContract.CollectionItemType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the collection items.
            </summary>
            <value>The <see cref="T:System.Type"/> of the collection items.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonArrayContract.IsMultidimensionalArray">
            <summary>
            Gets a value indicating whether the collection type is a multidimensional array.
            </summary>
            <value><c>true</c> if the collection type is a multidimensional array; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonDictionaryContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.JsonDictionaryContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonDictionaryContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonDictionaryContract.PropertyNameResolver">
            <summary>
            Gets or sets the property name resolver.
            </summary>
            <value>The property name resolver.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryKeyType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the dictionary keys.
            </summary>
            <value>The <see cref="T:System.Type"/> of the dictionary keys.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryValueType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the dictionary values.
            </summary>
            <value>The <see cref="T:System.Type"/> of the dictionary values.</value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonDynamicContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.JsonDynamicContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonDynamicContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonDynamicContract.Properties">
            <summary>
            Gets the object's properties.
            </summary>
            <value>The object's properties.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonDynamicContract.PropertyNameResolver">
            <summary>
            Gets or sets the property name resolver.
            </summary>
            <value>The property name resolver.</value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonLinqContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.JsonLinqContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonLinqContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonObjectContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.JsonObjectContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonObjectContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonObjectContract.MemberSerialization">
            <summary>
            Gets or sets the object member serialization.
            </summary>
            <value>The member object serialization.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonObjectContract.ItemRequired">
            <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
            <value>
            	A value indicating whether the object's properties are required.
            </value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonObjectContract.Properties">
            <summary>
            Gets the object's properties.
            </summary>
            <value>The object's properties.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonObjectContract.ConstructorParameters">
            <summary>
            Gets the constructor parameters required for any non-default constructor
            </summary>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonObjectContract.OverrideConstructor">
            <summary>
            Gets or sets the override constructor used to create the object.
            This is set when a constructor is marked up using the
            JsonConstructor attribute.
            </summary>
            <value>The override constructor.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonObjectContract.ParametrizedConstructor">
            <summary>
            Gets or sets the parametrized constructor used to create the object.
            </summary>
            <value>The parametrized constructor.</value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonPrimitiveContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.JsonPrimitiveContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonPrimitiveContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty">
            <summary>
            Maps a JSON property to a .NET member or constructor parameter.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty.DeclaringType">
            <summary>
            Gets or sets the type that declared this property.
            </summary>
            <value>The type that declared this property.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty.Order">
            <summary>
            Gets or sets the order of serialization and deserialization of a member.
            </summary>
            <value>The numeric order of serialization or deserialization.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty.UnderlyingName">
            <summary>
            Gets or sets the name of the underlying member or parameter.
            </summary>
            <value>The name of the underlying member or parameter.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty.ValueProvider">
            <summary>
            Gets the <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.IValueProvider"/> that will get and set the <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty"/> during serialization.
            </summary>
            <value>The <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.IValueProvider"/> that will get and set the <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty"/> during serialization.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty.PropertyType">
            <summary>
            Gets or sets the type of the property.
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty.Converter">
            <summary>
            Gets or sets the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonConverter"/> for the property.
            If set this converter takes presidence over the contract converter for the property type.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty.MemberConverter">
            <summary>
            Gets the member converter.
            </summary>
            <value>The member converter.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty.Ignored">
            <summary>
            Gets a value indicating whether this <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty"/> is ignored.
            </summary>
            <value><c>true</c> if ignored; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty.Readable">
            <summary>
            Gets a value indicating whether this <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty"/> is readable.
            </summary>
            <value><c>true</c> if readable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty.Writable">
            <summary>
            Gets a value indicating whether this <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty"/> is writable.
            </summary>
            <value><c>true</c> if writable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty.HasMemberAttribute">
            <summary>
            Gets a value indicating whether this <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty"/> has a member attribute.
            </summary>
            <value><c>true</c> if has a member attribute; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty.Required">
            <summary>
            Gets a value indicating whether this <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty"/> is required.
            </summary>
            <value>A value indicating whether this <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty"/> is required.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty.IsReference">
            <summary>
            Gets a value indicating whether this property preserves object references.
            </summary>
            <value>
            	<c>true</c> if this instance is reference; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty.NullValueHandling">
            <summary>
            Gets the property null value handling.
            </summary>
            <value>The null value handling.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty.DefaultValueHandling">
            <summary>
            Gets the property default value handling.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty.ReferenceLoopHandling">
            <summary>
            Gets the property reference loop handling.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty.ObjectCreationHandling">
            <summary>
            Gets the property object creation handling.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty.TypeNameHandling">
            <summary>
            Gets or sets the type name handling.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty.ShouldSerialize">
            <summary>
            Gets or sets a predicate used to determine whether the property should be serialize.
            </summary>
            <value>A predicate used to determine whether the property should be serialize.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty.GetIsSpecified">
            <summary>
            Gets or sets a predicate used to determine whether the property should be serialized.
            </summary>
            <value>A predicate used to determine whether the property should be serialized.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty.SetIsSpecified">
            <summary>
            Gets or sets an action used to set whether the property has been deserialized.
            </summary>
            <value>An action used to set whether the property has been deserialized.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty.ItemConverter">
            <summary>
            Gets or sets the converter used when serializing the property's collection items.
            </summary>
            <value>The collection's items converter.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty.ItemIsReference">
            <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
            <value>Whether this property's collection items are serialized as a reference.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty.ItemTypeNameHandling">
            <summary>
            Gets or sets the the type name handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items type name handling.</value>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the the reference loop handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items reference loop handling.</value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonPropertyCollection">
            <summary>
            A collection of <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty"/> objects.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.JsonPropertyCollection.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonPropertyCollection"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.JsonPropertyCollection.GetKeyForItem(Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty)">
            <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
            <param name="item">The element from which to extract the key.</param>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.JsonPropertyCollection.AddProperty(Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty)">
            <summary>
            Adds a <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty"/> object.
            </summary>
            <param name="property">The property to add to the collection.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.JsonPropertyCollection.GetClosestMatchProperty(System.String)">
            <summary>
            Gets the closest matching <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonProperty"/> object.
            First attempts to get an exact case match of propertyName and then
            a case insensitive match.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>A matching property if found.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.JsonPropertyCollection.GetProperty(System.String,System.StringComparison)">
            <summary>
            Gets a property by property name.
            </summary>
            <param name="propertyName">The name of the property to get.</param>
            <param name="comparisonType">Type property name string comparison.</param>
            <returns>A matching property if found.</returns>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonStringContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:Raven.Imports.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.JsonStringContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.JsonStringContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Serialization.MemoryTraceWriter">
            <summary>
            Represents a trace writer that writes to memory. When the trace message limit is
            reached then old trace messages will be removed as new messages are added.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.MemoryTraceWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.MemoryTraceWriter"/> class.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.MemoryTraceWriter.Trace(Raven.Imports.Newtonsoft.Json.TraceLevel,System.String,System.Exception)">
            <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
            <param name="level">The <see cref="T:Raven.Imports.Newtonsoft.Json.TraceLevel"/> at which to write this trace.</param>
            <param name="message">The trace message.</param>
            <param name="ex">The trace exception. This parameter is optional.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.MemoryTraceWriter.GetTraceMessages">
            <summary>
            Returns an enumeration of the most recent trace messages.
            </summary>
            <returns>An enumeration of the most recent trace messages.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.MemoryTraceWriter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> of the most recent trace messages.
            </summary>
            <returns>
            A <see cref="T:System.String"/> of the most recent trace messages.
            </returns>
        </member>
        <member name="P:Raven.Imports.Newtonsoft.Json.Serialization.MemoryTraceWriter.LevelFilter">
            <summary>
            Gets the <see cref="T:Raven.Imports.Newtonsoft.Json.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
            <value>
            The <see cref="T:Raven.Imports.Newtonsoft.Json.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            </value>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Serialization.ObjectConstructor`1">
            <summary>
            Represents a method that constructs an object.
            </summary>
            <typeparam name="T">The object type to create.</typeparam>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Serialization.OnErrorAttribute">
            <summary>
            When applied to a method, specifies that the method is called when an error occurs serializing an object.
            </summary>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Serialization.ReflectionValueProvider">
            <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo"/> using reflection.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.ReflectionValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Raven.Imports.Newtonsoft.Json.Serialization.ReflectionValueProvider"/> class.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.ReflectionValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Serialization.ReflectionValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Determines whether the collection is null or empty.
            </summary>
            <param name="collection">The collection.</param>
            <returns>
            	<c>true</c> if the collection is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified collection to the specified generic IList.
            </summary>
            <param name="initial">The list to add to.</param>
            <param name="collection">The collection of elements to add.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Utilities.CollectionUtils.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns the index of the first occurrence in a sequence by using a specified IEqualityComparer.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="list">A sequence in which to locate a value.</param>
            <param name="value">The object to locate in the sequence</param>
            <param name="comparer">An equality comparer to compare values.</param>
            <returns>The zero-based index of the first occurrence of value within the entire sequence, if found; otherwise, –1.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Utilities.ConvertUtils.Convert(System.Object,System.Globalization.CultureInfo,System.Type)">
            <summary>
            Converts the value to the specified type.
            </summary>
            <param name="initialValue">The value to convert.</param>
            <param name="culture">The culture to use when converting.</param>
            <param name="targetType">The type to convert the value to.</param>
            <returns>The converted type.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Utilities.ConvertUtils.TryConvert(System.Object,System.Globalization.CultureInfo,System.Type,System.Object@)">
            <summary>
            Converts the value to the specified type.
            </summary>
            <param name="initialValue">The value to convert.</param>
            <param name="culture">The culture to use when converting.</param>
            <param name="targetType">The type to convert the value to.</param>
            <param name="convertedValue">The converted value if the conversion was successful or the default value of <c>T</c> if it failed.</param>
            <returns>
            	<c>true</c> if <c>initialValue</c> was converted successfully; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(System.Object,System.Globalization.CultureInfo,System.Type)">
            <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
            <param name="initialValue">The value to convert.</param>
            <param name="culture">The culture to use when converting.</param>
            <param name="targetType">The type to convert or cast the value to.</param>
            <returns>
            The converted type. If conversion was unsuccessful, the initial value
            is returned if assignable to the target type.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodWithResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Raven.Imports.Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback,Raven.Imports.Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic that returns a result
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodReturnLast(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Raven.Imports.Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodNoResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Raven.Imports.Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.GetRestrictions">
            <summary>
            Returns a Restrictions object which includes our current restrictions merged
            with a restriction limiting our type
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1">
            <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1(System.Type)">
            <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
            <param name="enumType">The enum type to get names and values for.</param>
            <returns></returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)">
            <summary>
            Gets the type of the typed collection's items.
            </summary>
            <param name="type">The type.</param>
            <returns>The type of the typed collection's items.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
            <summary>
            Gets the member's underlying type.
            </summary>
            <param name="member">The member.</param>
            <returns>The underlying type of the member.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the member is an indexed property.
            </summary>
            <param name="member">The member.</param>
            <returns>
            	<c>true</c> if the member is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the property is an indexed property.
            </summary>
            <param name="property">The property.</param>
            <returns>
            	<c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Gets the member's value on the object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target object.</param>
            <returns>The member's value on the object.</returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets the member's value on the target object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
            <param name="member">The MemberInfo to determine whether can be read.</param>
            /// <param name="nonPublic">if set to <c>true</c> then allow the member to be gotten non-publicly.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo,System.Boolean,System.Boolean)">
            <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
            <param name="member">The MemberInfo to determine whether can be set.</param>
            <param name="nonPublic">if set to <c>true</c> then allow the member to be set non-publicly.</param>
            <param name="canSetReadOnly">if set to <c>true</c> then allow the member to be set if read-only.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Raven.Imports.Newtonsoft.Json.Utilities.StringBuffer">
            <summary>
            Builds a string. Unlike StringBuilder this class lets you reuse it's internal buffer.
            </summary>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Utilities.StringUtils.IsWhiteSpace(System.String)">
            <summary>
            Determines whether the string is all white space. Empty string will return false.
            </summary>
            <param name="s">The string to test whether it is all white space.</param>
            <returns>
            	<c>true</c> if the string is all white space; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Raven.Imports.Newtonsoft.Json.Utilities.StringUtils.NullEmptyString(System.String)">
            <summary>
            Nulls an empty string.
            </summary>
            <param name="s">The string.</param>
            <returns>Null if the string was null, otherwise the string unchanged.</returns>
        </member>
        <member name="T:Raven.Client.Silverlight.Connection.HttpJsonRequest">
            <summary>
            A representation of an HTTP json request to the RavenDB server
            Since we are using the ClientHttp stack for Silverlight, we don't need to implement
            caching, it is already implemented for us.
            Note: that the RavenDB server generates both an ETag and an Expires header to ensure proper
            Note: behavior from the silverlight http stack
            </summary>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.HttpJsonRequest.ReadResponseStringAsync">
            <summary>
            Begins the read response string.
            </summary>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.HttpJsonRequest.WriteAsync(System.String)">
            <summary>
            Begins the write operation
            </summary>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.HttpJsonRequest.WriteAsync(System.Byte[])">
            <summary>
            Begins the write operation
            </summary>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.HttpJsonRequest.AddOperationHeaders(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Adds the operation headers.
            </summary>
            <param name="operationsHeaders">The operations headers.</param>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.HttpJsonRequest.AddOperationHeader(System.String,System.String)">
            <summary>
            Adds the operation header
            </summary>
        </member>
        <member name="P:Raven.Client.Silverlight.Connection.HttpJsonRequest.ResponseHeaders">
            <summary>
            Gets or sets the response headers.
            </summary>
            <value>The response headers.</value>
        </member>
        <member name="P:Raven.Client.Silverlight.Connection.HttpJsonRequest.ResponseStatusCode">
            <summary>
            Gets or sets the response status code.
            </summary>
            <value>The response status code.</value>
        </member>
        <member name="P:Raven.Client.Silverlight.Connection.HttpJsonRequest.WaitForTask">
            <summary>
            The task to wait all other actions on
            </summary>
        </member>
        <member name="T:Raven.Client.Silverlight.Connection.HttpJsonRequestFactory">
            <summary>
             Create the HTTP Json Requests to the RavenDB Server
             and manages the http cache
            </summary>
        </member>
        <member name="M:Raven.Client.Silverlight.Connection.HttpJsonRequestFactory.InvokeLogRequest(Raven.Client.Connection.Profiling.IHoldProfilingInformation,System.Func{Raven.Client.Connection.Profiling.RequestResultArgs})">
            <summary>
            Invoke the LogRequest event
            </summary>
        </member>
        <member name="P:Raven.Client.Silverlight.Connection.HttpJsonRequestFactory.EnableBasicAuthenticationOverUnsecuredHttpEvenThoughPasswordsWouldBeSentOverTheWireInClearTextToBeStolenByHackers">
            <summary>
            Advanced: Don't set this unless you know what you are doing!
            
            Enable using basic authentication using http
            By default, RavenDB only allows basic authentication over HTTPS, setting this property to true
            will instruct RavenDB to make unsecured calls (usually only good for testing / internal networks).
            </summary>
        </member>
        <member name="E:Raven.Client.Silverlight.Connection.HttpJsonRequestFactory.ConfigureRequest">
            <summary>
            Occurs when a json request is created
            </summary>
        </member>
        <member name="E:Raven.Client.Silverlight.Connection.HttpJsonRequestFactory.LogRequest">
            <summary>
            Occurs when a json request is completed
            </summary>
        </member>
        <member name="P:Raven.Client.Silverlight.Connection.HttpJsonRequestFactory.DisableRequestCompression">
            <summary>
            Determine whether to use compression or not 
            </summary>
        </member>
        <member name="T:Ionic.Zlib.Adler">
            <summary>
            Computes an Adler-32 checksum. 
            </summary>
            <remarks>
            The Adler checksum is similar to a CRC checksum, but faster to compute, though less
            reliable.  It is used in producing RFC1950 compressed streams.  The Adler checksum
            is a required part of the "ZLIB" standard.  Applications will almost never need to
            use this class directly.
            </remarks>
        </member>
        <member name="T:Ionic.Zlib.CompressionLevel">
            <summary>
            The compression level to be used when using a DeflateStream or ZlibStream with CompressionMode.Compress.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.None">
            <summary>
            None means that the data will be simply stored, with no change at all.
            If you are producing ZIPs for use on Mac OSX, be aware that archives produced with CompressionLevel.None
            cannot be opened with the default zip reader. Use a different CompressionLevel.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level0">
            <summary>
            Same as None.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.BestSpeed">
            <summary>
            The fastest but least effective compression.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level1">
            <summary>
            A synonym for BestSpeed.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level2">
            <summary>
            A little slower, but better, than level 1.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level3">
            <summary>
            A little slower, but better, than level 2.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level4">
            <summary>
            A little slower, but better, than level 3.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level5">
            <summary>
            A little slower than level 4, but with better compression.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Default">
            <summary>
            The default compression level, with a good balance of speed and compression efficiency.   
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level6">
            <summary>
            A synonym for Default.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level7">
            <summary>
            Pretty good compression!
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level8">
            <summary>
             Better compression than Level7!
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.BestCompression">
            <summary>
            The "best" compression, where best means greatest reduction in size of the input data stream. 
            This is also the slowest compression.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionLevel.Level9">
            <summary>
            A synonym for BestCompression.
            </summary>
        </member>
        <member name="T:Ionic.Zlib.CompressionMode">
            <summary>
            An enum to specify the direction of transcoding - whether to compress or decompress.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionMode.Compress">
            <summary>
            Used to specify that the stream should compress the data.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionMode.Decompress">
            <summary>
            Used to specify that the stream should decompress the data.
            </summary>
        </member>
        <member name="T:Ionic.Zlib.CompressionStrategy">
            <summary>
            Describes options for how the compression algorithm is executed.  Different strategies
            work better on different sorts of data.  The strategy parameter can affect the compression
            ratio and the speed of compression but not the correctness of the compresssion.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionStrategy.Default">
            <summary>
            The default strategy is probably the best for normal data. 
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionStrategy.Filtered">
            <summary>
            The <c>Filtered</c> strategy is intended to be used most effectively with data produced by a
            filter or predictor.  By this definition, filtered data consists mostly of small
            values with a somewhat random distribution.  In this case, the compression algorithm
            is tuned to compress them better.  The effect of <c>Filtered</c> is to force more Huffman
            coding and less string matching; it is a half-step between <c>Default</c> and <c>HuffmanOnly</c>.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.CompressionStrategy.HuffmanOnly">
            <summary>
            Using <c>HuffmanOnly</c> will force the compressor to do Huffman encoding only, with no
            string matching.
            </summary>
        </member>
        <member name="T:Ionic.Zlib.CRC32">
            <summary>
            Calculates a 32bit Cyclic Redundancy Checksum (CRC) using the same polynomial
            used by Zip. This type is used internally by DotNetZip; it is generally not used
            directly by applications wishing to create, read, or manipulate zip archive
            files.
            </summary>
        </member>
        <member name="M:Ionic.Zlib.CRC32.GetCrc32(System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:Ionic.Zlib.CRC32.GetCrc32AndCopy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream, and writes the input into the
            output stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <param name="output">The stream into which to deflate the input</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:Ionic.Zlib.CRC32.ComputeCrc32(System.Int32,System.Byte)">
            <summary>
            Get the CRC32 for the given (word,byte) combo.  This is a computation
            defined by PKzip.
            </summary>
            <param name="W">The word to start with.</param>
            <param name="B">The byte to combine it with.</param>
            <returns>The CRC-ized result.</returns>
        </member>
        <member name="M:Ionic.Zlib.CRC32.SlurpBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Update the value for the running CRC32 using the given block of bytes.
            This is useful when using the CRC32() class in a Stream.
            </summary>
            <param name="block">block of bytes to slurp</param>
            <param name="offset">starting point in the block</param>
            <param name="count">how many bytes within the block to slurp</param>
        </member>
        <member name="M:Ionic.Zlib.CRC32.Combine(System.Int32,System.Int32)">
            <summary>
            Combines the given CRC32 value with the current running total.
            </summary>
            <remarks>
            This is useful when using a divide-and-conquer approach to calculating a CRC.
            Multiple threads can each calculate a CRC32 on a segment of the data, and then
            combine the individual CRC32 values at the end.
            </remarks>
            <param name="crc">the crc value to be combined with this one</param>
            <param name="length">the length of data the CRC value was calculated on</param>
        </member>
        <member name="P:Ionic.Zlib.CRC32.TotalBytesRead">
            <summary>
            indicates the total number of bytes read on the CRC stream.
            This is used when writing the ZipDirEntry when compressing files.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.CRC32.Crc32Result">
            <summary>
            Indicates the current CRC for all blocks slurped in.
            </summary>
        </member>
        <member name="T:Ionic.Zlib.CrcCalculatorStream">
             <summary>
             A Stream that calculates a CRC32 (a checksum) on all bytes read,
             or on all bytes written.
             </summary>
            
             <remarks>
             <para>
             This class can be used to verify the CRC of a ZipEntry when
             reading from a stream, or to calculate a CRC when writing to a
             stream.  The stream should be used to either read, or write, but
             not both.  If you intermix reads and writes, the results are not
             defined.
             </para>
            
             <para>
             This class is intended primarily for use internally by the
             DotNetZip library.
             </para>
             </remarks>
        </member>
        <member name="M:Ionic.Zlib.CrcCalculatorStream.#ctor(System.IO.Stream)">
            <summary>
            The default constructor.
            </summary>
            <remarks>
            Instances returned from this constructor will leave the underlying stream
            open upon Close().
            </remarks>
            <param name="stream">The underlying stream</param>
        </member>
        <member name="M:Ionic.Zlib.CrcCalculatorStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            The constructor allows the caller to specify how to handle the underlying
            stream at close.
            </summary>
            <param name="stream">The underlying stream</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the CrcCalculatorStream.; false otherwise.</param>
        </member>
        <member name="M:Ionic.Zlib.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64)">
            <summary>
            A constructor allowing the specification of the length of the stream to read.
            </summary>
            <remarks>
            Instances returned from this constructor will leave the underlying stream open
            upon Close().
            </remarks>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
        </member>
        <member name="M:Ionic.Zlib.CrcCalculatorStream.#ctor(System.IO.Stream,System.Int64,System.Boolean)">
            <summary>
            A constructor allowing the specification of the length of the stream to
            read, as well as whether to keep the underlying stream open upon Close().
            </summary>
            <param name="stream">The underlying stream</param>
            <param name="length">The length of the stream to slurp</param>
            <param name="leaveOpen">true to leave the underlying stream
            open upon close of the CrcCalculatorStream.; false otherwise.</param>
        </member>
        <member name="M:Ionic.Zlib.CrcCalculatorStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from the stream
            </summary>
            <param name="buffer">the buffer to read</param>
            <param name="offset">the offset at which to start</param>
            <param name="count">the number of bytes to read</param>
            <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:Ionic.Zlib.CrcCalculatorStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write to the stream.
            </summary>
            <param name="buffer">the buffer from which to write</param>
            <param name="offset">the offset at which to start writing</param>
            <param name="count">the number of bytes to write</param>
        </member>
        <member name="M:Ionic.Zlib.CrcCalculatorStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:Ionic.Zlib.CrcCalculatorStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Not implemented.
            </summary>
            <param name="offset">N/A</param>
            <param name="origin">N/A</param>
            <returns>N/A</returns>
        </member>
        <member name="M:Ionic.Zlib.CrcCalculatorStream.SetLength(System.Int64)">
            <summary>
            Not implemented.
            </summary>
            <param name="value">N/A</param>
        </member>
        <member name="M:Ionic.Zlib.CrcCalculatorStream.Close">
            <summary>
            Closes the stream.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.CrcCalculatorStream.TotalBytesSlurped">
             <summary>
             Gets the total number of bytes run through the CRC32 calculator.
             </summary>
            
             <remarks>
             This is either the total number of bytes read, or the total number of bytes
             written, depending on the direction of this stream.
             </remarks>
        </member>
        <member name="P:Ionic.Zlib.CrcCalculatorStream.Crc">
            <summary>
            Provides the current CRC for all blocks slurped in.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.CrcCalculatorStream.LeaveOpen">
            <summary>
            Indicates whether the underlying stream will be left open when the
            CrcCalculatorStream is Closed.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.CrcCalculatorStream.CanRead">
            <summary>
            Indicates whether the stream supports reading.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.CrcCalculatorStream.CanSeek">
            <summary>
            Indicates whether the stream supports seeking.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.CrcCalculatorStream.CanWrite">
            <summary>
            Indicates whether the stream supports writing.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.CrcCalculatorStream.Length">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.CrcCalculatorStream.Position">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="T:Ionic.Zlib.DeflateStream">
             <summary>
             A class for compressing and decompressing streams using the Deflate algorithm.
             </summary>
            
             <remarks>
            
             <para>
               The DeflateStream is a <see href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a <see cref="T:System.IO.Stream"/>.  It adds DEFLATE compression or decompression to any
               stream.
             </para>
            
             <para>
               Using this stream, applications can compress or decompress data via stream
               <c>Read</c> and <c>Write</c> operations.  Either compresssion or decompression
               can occur through either reading or writing. The compression format used is
               DEFLATE, which is documented in <see href="http://www.ietf.org/rfc/rfc1951.txt">IETF RFC 1951</see>, "DEFLATE
               Compressed Data Format Specification version 1.3.".
             </para>
            
             <para>
               This class is similar to <see cref="T:Ionic.Zlib.ZlibStream"/>, except that
               <c>ZlibStream</c> adds the <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
               1950 - ZLIB</see> framing bytes to a compressed stream when compressing, or
               expects the RFC1950 framing bytes when decompressing. The <c>DeflateStream</c>
               does not.
             </para>
            
             </remarks>
            
             <seealso cref="T:Ionic.Zlib.ZlibStream"/>
             <seealso cref="T:Ionic.Zlib.GZipStream"/>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode)">
             <summary>
               Create a DeflateStream using the specified CompressionMode.
             </summary>
            
             <remarks>
               When mode is <c>CompressionMode.Compress</c>, the DeflateStream will use
               the default compression level. The "captive" stream will be closed when
               the DeflateStream is closed.
             </remarks>
            
             <example>
             This example uses a DeflateStream to compress data from a file, and writes
             the compressed data to another file.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".deflated"))
                 {
                     using (Stream compressor = new DeflateStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".deflated")
                     Using compressor As Stream = New DeflateStream(raw, CompressionMode.Compress)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the DeflateStream will compress or decompress.</param>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel)">
             <summary>
             Create a DeflateStream using the specified CompressionMode and the specified CompressionLevel.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is
               ignored.  The "captive" stream will be closed when the DeflateStream is
               closed.
             </para>
            
             </remarks>
            
             <example>
            
               This example uses a DeflateStream to compress data from a file, and writes
               the compressed data to another file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".deflated"))
                 {
                     using (Stream compressor = new DeflateStream(raw,
                                                                  CompressionMode.Compress,
                                                                  CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n= -1;
                         while (n != 0)
                         {
                             if (n &gt; 0)
                                 compressor.Write(buffer, 0, n);
                             n= input.Read(buffer, 0, buffer.Length);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".deflated")
                     Using compressor As Stream = New DeflateStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the <c>DeflateStream</c> will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>DeflateStream</c> using the specified
               <c>CompressionMode</c>, and explicitly specify whether the
               stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compression.  Specify true for
               the <paramref name="leaveOpen"/> parameter to leave the stream open.
             </para>
            
             <para>
               The <c>DeflateStream</c> will use the default compression level.
             </para>
            
             <para>
               See the other overloads of this constructor for example code.
             </para>
             </remarks>
            
             <param name="stream">
               The stream which will be read or written. This is called the
               "captive" stream in other places in this documentation.
             </param>
            
             <param name="mode">
               Indicates whether the <c>DeflateStream</c> will compress or decompress.
             </param>
            
             <param name="leaveOpen">true if the application would like the stream to
             remain open after inflation/deflation.</param>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>DeflateStream</c> using the specified <c>CompressionMode</c>
               and the specified <c>CompressionLevel</c>, and explicitly specify whether
               the stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is ignored.
             </para>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               <see cref="T:System.IO.MemoryStream"/> that will be re-read after
               compression.  Specify true for the <paramref name="leaveOpen"/> parameter
               to leave the stream open.
             </para>
            
             </remarks>
            
             <example>
            
               This example shows how to use a <c>DeflateStream</c> to compress data from
               a file, and store the compressed data into another file.
            
             <code>
             using (var output = System.IO.File.Create(fileToCompress + ".deflated"))
             {
                 using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
                 {
                     using (Stream compressor = new DeflateStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n= -1;
                         while (n != 0)
                         {
                             if (n &gt; 0)
                                 compressor.Write(buffer, 0, n);
                             n= input.Read(buffer, 0, buffer.Length);
                         }
                     }
                 }
                 // can write additional data to the output stream here
             }
             </code>
            
             <code lang="VB">
             Using output As FileStream = File.Create(fileToCompress &amp; ".deflated")
                 Using input As Stream = File.OpenRead(fileToCompress)
                     Using compressor As Stream = New DeflateStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
                 ' can write additional data to the output stream here.
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the DeflateStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.Dispose(System.Boolean)">
            <summary>
            Dispose the stream.
            </summary>
            <remarks>
            This may or may not result in a <c>Close()</c> call on the captive stream.
            See the constructors that have a <c>leaveOpen</c> parameter for more information.
            </remarks>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Read data from the stream.
             </summary>
             <remarks>
            
             <para>
               If you wish to use the <c>DeflateStream</c> to compress data while
               reading, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Compress</c>, providing an uncompressed data stream.
               Then call Read() on that <c>DeflateStream</c>, and the data read will be
               compressed as you read.  If you wish to use the <c>DeflateStream</c> to
               decompress data while reading, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Decompress</c>, providing a readable compressed data
               stream.  Then call Read() on that <c>DeflateStream</c>, and the data read
               will be decompressed as you read.
             </para>
            
             <para>
               A <c>DeflateStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not both.
             </para>
            
             </remarks>
             <param name="buffer">The buffer into which the read data should be placed.</param>
             <param name="offset">the offset within that data array to put the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
             <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="offset">this is irrelevant, since it will always throw!</param>
            <param name="origin">this is irrelevant, since it will always throw!</param>
            <returns>irrelevant!</returns>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">this is irrelevant, since it will always throw!</param>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
             <remarks>
            
             <para>
               If you wish to use the <c>DeflateStream</c> to compress data while
               writing, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Compress</c>, and a writable output stream.  Then call
               <c>Write()</c> on that <c>DeflateStream</c>, providing uncompressed data
               as input.  The data sent to the output stream will be the compressed form
               of the data written.  If you wish to use the <c>DeflateStream</c> to
               decompress data while writing, you can create a <c>DeflateStream</c> with
               <c>CompressionMode.Decompress</c>, and a writable output stream.  Then
               call <c>Write()</c> on that stream, providing previously compressed
               data. The data sent to the output stream will be the decompressed form of
               the data written.
             </para>
            
             <para>
               A <c>DeflateStream</c> can be used for <c>Read()</c> or <c>Write()</c>,
               but not both.
             </para>
            
             </remarks>
            
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using DEFLATE (RFC 1951).
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Ionic.Zlib.DeflateStream.UncompressString(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Ionic.Zlib.DeflateStream.UncompressString(System.Byte[])">DeflateStream.UncompressString(byte[])</seealso>
             <seealso cref="M:Ionic.Zlib.DeflateStream.CompressBuffer(System.Byte[])">DeflateStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:Ionic.Zlib.GZipStream.CompressString(System.String)">GZipStream.CompressString(string)</seealso>
             <seealso cref="M:Ionic.Zlib.ZlibStream.CompressString(System.String)">ZlibStream.CompressString(string)</seealso>
            
             <param name="s">
               A string to compress. The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using DEFLATE.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Ionic.Zlib.DeflateStream.UncompressBuffer(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Ionic.Zlib.DeflateStream.CompressString(System.String)">DeflateStream.CompressString(string)</seealso>
             <seealso cref="M:Ionic.Zlib.DeflateStream.UncompressBuffer(System.Byte[])">DeflateStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])">GZipStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:Ionic.Zlib.ZlibStream.CompressBuffer(System.Byte[])">ZlibStream.CompressBuffer(byte[])</seealso>
            
             <param name="b">
               A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a DEFLATE'd byte array into a single string.
             </summary>
            
             <seealso cref="M:Ionic.Zlib.DeflateStream.CompressString(System.String)">DeflateStream.CompressString(String)</seealso>
             <seealso cref="M:Ionic.Zlib.DeflateStream.UncompressBuffer(System.Byte[])">DeflateStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:Ionic.Zlib.GZipStream.UncompressString(System.Byte[])">GZipStream.UncompressString(byte[])</seealso>
             <seealso cref="M:Ionic.Zlib.ZlibStream.UncompressString(System.Byte[])">ZlibStream.UncompressString(byte[])</seealso>
            
             <param name="compressed">
               A buffer containing DEFLATE-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
        </member>
        <member name="M:Ionic.Zlib.DeflateStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a DEFLATE'd byte array into a byte array.
             </summary>
            
             <seealso cref="M:Ionic.Zlib.DeflateStream.CompressBuffer(System.Byte[])">DeflateStream.CompressBuffer(byte[])</seealso>
             <seealso cref="M:Ionic.Zlib.DeflateStream.UncompressString(System.Byte[])">DeflateStream.UncompressString(byte[])</seealso>
             <seealso cref="M:Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])">GZipStream.UncompressBuffer(byte[])</seealso>
             <seealso cref="M:Ionic.Zlib.ZlibStream.UncompressBuffer(System.Byte[])">ZlibStream.UncompressBuffer(byte[])</seealso>
            
             <param name="compressed">
               A buffer containing data that has been compressed with DEFLATE.
             </param>
            
             <returns>The data in uncompressed form</returns>
        </member>
        <member name="P:Ionic.Zlib.DeflateStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.
            </summary>
            <remarks> See the ZLIB documentation for the meaning of the flush behavior.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.DeflateStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes.  The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:Ionic.Zlib.DeflateStream.Strategy">
             <summary>
               The ZLIB strategy to be used during compression.
             </summary>
            
             <remarks>
               By tweaking this parameter, you may be able to optimize the compression for
               data with particular characteristics.
             </remarks>
        </member>
        <member name="P:Ionic.Zlib.DeflateStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:Ionic.Zlib.DeflateStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="P:Ionic.Zlib.DeflateStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.DeflateStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.DeflateStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.DeflateStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.DeflateStream.Position">
             <summary>
             The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see cref="T:System.NotImplementedException"/>. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
        <member name="T:Ionic.Zlib.FlushType">
            <summary>
            Describes how to flush the current deflate operation. 
            </summary>
            <remarks>
            The different FlushType values are useful when using a Deflate in a streaming application.
            </remarks>
        </member>
        <member name="F:Ionic.Zlib.FlushType.None">
            <summary>No flush at all.</summary>
        </member>
        <member name="F:Ionic.Zlib.FlushType.Partial">
            <summary>Closes the current block, but doesn't flush it to
            the output. Used internally only in hypothetical
            scenarios.  This was supposed to be removed by Zlib, but it is
            still in use in some edge cases. 
            </summary>
        </member>
        <member name="F:Ionic.Zlib.FlushType.Sync">
            <summary>
            Use this during compression to specify that all pending output should be
            flushed to the output buffer and the output should be aligned on a byte
            boundary.  You might use this in a streaming communication scenario, so that
            the decompressor can get all input data available so far.  When using this
            with a ZlibCodec, <c>AvailableBytesIn</c> will be zero after the call if
            enough output space has been provided before the call.  Flushing will
            degrade compression and so it should be used only when necessary.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.FlushType.Full">
            <summary>
            Use this during compression to specify that all output should be flushed, as
            with <c>FlushType.Sync</c>, but also, the compression state should be reset
            so that decompression can restart from this point if previous compressed
            data has been damaged or if random access is desired.  Using
            <c>FlushType.Full</c> too often can significantly degrade the compression.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.FlushType.Finish">
            <summary>Signals the end of the compression/decompression stream.</summary>
        </member>
        <member name="T:Ionic.Zlib.GZipStream">
             <summary>
               A class for compressing and decompressing GZIP streams.
             </summary>
             <remarks>
            
             <para>
               The <c>GZipStream</c> is a <see href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a
               <see cref="T:System.IO.Stream"/>. It adds GZIP compression or decompression to any
               stream.
             </para>
            
             <para>
               Like the <c>System.IO.Compression.GZipStream</c> in the .NET Base Class Library, the
               <c>Ionic.Zlib.GZipStream</c> can compress while writing, or decompress while
               reading, but not vice versa.  The compression method used is GZIP, which is
               documented in <see href="http://www.ietf.org/rfc/rfc1952.txt">IETF RFC
               1952</see>, "GZIP file format specification version 4.3".</para>
            
             <para>
               A <c>GZipStream</c> can be used to decompress data (through <c>Read()</c>) or
               to compress data (through <c>Write()</c>), but not both.
             </para>
            
             <para>
               If you wish to use the <c>GZipStream</c> to compress data, you must wrap it
               around a write-able stream. As you call <c>Write()</c> on the <c>GZipStream</c>, the
               data will be compressed into the GZIP format.  If you want to decompress data,
               you must wrap the <c>GZipStream</c> around a readable stream that contains an
               IETF RFC 1952-compliant stream.  The data will be decompressed as you call
               <c>Read()</c> on the <c>GZipStream</c>.
             </para>
            
             <para>
               Though the GZIP format allows data from multiple files to be concatenated
               together, this stream handles only a single segment of GZIP format, typically
               representing a single file.
             </para>
            
             <para>
               This class is similar to <see cref="T:Ionic.Zlib.ZlibStream"/> and <see cref="T:Ionic.Zlib.DeflateStream"/>.
               <c>ZlibStream</c> handles RFC1950-compliant streams.  <see cref="T:Ionic.Zlib.DeflateStream"/>
               handles RFC1951-compliant streams. This class handles RFC1952-compliant streams.
             </para>
            
             </remarks>
            
             <seealso cref="T:Ionic.Zlib.DeflateStream"/>
             <seealso cref="T:Ionic.Zlib.ZlibStream"/>
        </member>
        <member name="F:Ionic.Zlib.GZipStream.LastModified">
             <summary>
               The last modified time for the GZIP stream.
             </summary>
            
             <remarks>
               GZIP allows the storage of a last modified time with each GZIP entry.
               When compressing data, you can set this before the first call to
               <c>Write()</c>.  When decompressing, you can retrieve this value any time
               after the first call to <c>Read()</c>.
             </remarks>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c>.
             </summary>
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>GZipStream</c> will use the
               default compression level.
             </para>
            
             <para>
               As noted in the class documentation, the <c>CompressionMode</c> (Compress
               or Decompress) also establishes the "direction" of the stream.  A
               <c>GZipStream</c> with <c>CompressionMode.Compress</c> works only through
               <c>Write()</c>.  A <c>GZipStream</c> with
               <c>CompressionMode.Decompress</c> works only through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
               This example shows how to use a GZipStream to compress data.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new GZipStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim outputFile As String = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                 Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
            
             <example>
             This example shows how to use a GZipStream to uncompress a file.
             <code>
             private void GunZipFile(string filename)
             {
                 if (!filename.EndsWith(".gz))
                     throw new ArgumentException("filename");
                 var DecompressedFile = filename.Substring(0,filename.Length-3);
                 byte[] working = new byte[WORKING_BUFFER_SIZE];
                 int n= 1;
                 using (System.IO.Stream input = System.IO.File.OpenRead(filename))
                 {
                     using (Stream decompressor= new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, true))
                     {
                         using (var output = System.IO.File.Create(DecompressedFile))
                         {
                             while (n !=0)
                             {
                                 n= decompressor.Read(working, 0, working.Length);
                                 if (n > 0)
                                 {
                                     output.Write(working, 0, n);
                                 }
                             }
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Private Sub GunZipFile(ByVal filename as String)
                 If Not (filename.EndsWith(".gz)) Then
                     Throw New ArgumentException("filename")
                 End If
                 Dim DecompressedFile as String = filename.Substring(0,filename.Length-3)
                 Dim working(WORKING_BUFFER_SIZE) as Byte
                 Dim n As Integer = 1
                 Using input As Stream = File.OpenRead(filename)
                     Using decompressor As Stream = new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, True)
                         Using output As Stream = File.Create(UncompressedFile)
                             Do
                                 n= decompressor.Read(working, 0, working.Length)
                                 If n > 0 Then
                                     output.Write(working, 0, n)
                                 End IF
                             Loop While (n  > 0)
                         End Using
                     End Using
                 End Using
             End Sub
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c> and
               the specified <c>CompressionLevel</c>.
             </summary>
             <remarks>
            
             <para>
               The <c>CompressionMode</c> (Compress or Decompress) also establishes the
               "direction" of the stream.  A <c>GZipStream</c> with
               <c>CompressionMode.Compress</c> works only through <c>Write()</c>.  A
               <c>GZipStream</c> with <c>CompressionMode.Decompress</c> works only
               through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
            
             This example shows how to use a <c>GZipStream</c> to compress a file into a .gz file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".gz"))
                 {
                     using (Stream compressor = new GZipStream(raw,
                                                               CompressionMode.Compress,
                                                               CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".gz")
                     Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the <c>GZipStream</c> will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c>, and
               explicitly specify whether the stream should be left open after Deflation
               or Inflation.
             </summary>
            
             <remarks>
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compressed data has been written
               to it.  Specify true for the <paramref name="leaveOpen"/> parameter to leave
               the stream open.
             </para>
            
             <para>
               The <see cref="T:Ionic.Zlib.CompressionMode"/> (Compress or Decompress) also
               establishes the "direction" of the stream.  A <c>GZipStream</c> with
               <c>CompressionMode.Compress</c> works only through <c>Write()</c>.  A <c>GZipStream</c>
               with <c>CompressionMode.Decompress</c> works only through <c>Read()</c>.
             </para>
            
             <para>
               The <c>GZipStream</c> will use the default compression level. If you want
               to specify the compression level, see <see cref="M:Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel,System.Boolean)"/>.
             </para>
            
             <para>
               See the other overloads of this constructor for example code.
             </para>
            
             </remarks>
            
             <param name="stream">
               The stream which will be read or written. This is called the "captive"
               stream in other places in this documentation.
             </param>
            
             <param name="mode">Indicates whether the GZipStream will compress or decompress.
             </param>
            
             <param name="leaveOpen">
               true if the application would like the base stream to remain open after
               inflation/deflation.
             </param>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>GZipStream</c> using the specified <c>CompressionMode</c> and the
               specified <c>CompressionLevel</c>, and explicitly specify whether the
               stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               memory stream that will be re-read after compressed data has been written
               to it.  Specify true for the <paramref name="leaveOpen"/> parameter to
               leave the stream open.
             </para>
            
             <para>
               As noted in the class documentation, the <c>CompressionMode</c> (Compress
               or Decompress) also establishes the "direction" of the stream.  A
               <c>GZipStream</c> with <c>CompressionMode.Compress</c> works only through
               <c>Write()</c>.  A <c>GZipStream</c> with <c>CompressionMode.Decompress</c> works only
               through <c>Read()</c>.
             </para>
            
             </remarks>
            
             <example>
               This example shows how to use a <c>GZipStream</c> to compress data.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim outputFile As String = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                 Using compressor As Stream = New GZipStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the GZipStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain open after inflation/deflation.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.Dispose(System.Boolean)">
            <summary>
            Dispose the stream.
            </summary>
            <remarks>
            This may or may not result in a <c>Close()</c> call on the captive stream.
            See the doc on constructors that take a <c>leaveOpen</c> parameter for more information.
            </remarks>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Read and decompress data from the source stream.
             </summary>
            
             <remarks>
               With a <c>GZipStream</c>, decompression is done through reading.
             </remarks>
            
             <example>
             <code>
             byte[] working = new byte[WORKING_BUFFER_SIZE];
             using (System.IO.Stream input = System.IO.File.OpenRead(_CompressedFile))
             {
                 using (Stream decompressor= new Ionic.Zlib.GZipStream(input, CompressionMode.Decompress, true))
                 {
                     using (var output = System.IO.File.Create(_DecompressedFile))
                     {
                         int n;
                         while ((n= decompressor.Read(working, 0, working.Length)) !=0)
                         {
                             output.Write(working, 0, n);
                         }
                     }
                 }
             }
             </code>
             </example>
             <param name="buffer">The buffer into which the decompressed data should be placed.</param>
             <param name="offset">the offset within that data array to put the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
             <returns>the number of bytes actually read</returns>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
              Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="offset">irrelevant; it will always throw!</param>
            <param name="origin">irrelevant; it will always throw!</param>
            <returns>irrelevant!</returns>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.SetLength(System.Int64)">
            <summary>
              Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
            <param name="value">irrelevant; this method will always throw!</param>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
            
             <remarks>
             <para>
               If you wish to use the <c>GZipStream</c> to compress data while writing,
               you can create a <c>GZipStream</c> with <c>CompressionMode.Compress</c>, and a
               writable output stream.  Then call <c>Write()</c> on that <c>GZipStream</c>,
               providing uncompressed data as input.  The data sent to the output stream
               will be the compressed form of the data written.
             </para>
            
             <para>
               A <c>GZipStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not
               both. Writing implies compression.  Reading implies decompression.
             </para>
            
             </remarks>
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using GZip.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Ionic.Zlib.GZipStream.UncompressString(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Ionic.Zlib.GZipStream.UncompressString(System.Byte[])"/>
             <seealso cref="M:Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])"/>
            
             <param name="s">
               A string to compress. The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using GZip.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Ionic.Zlib.GZipStream.CompressString(System.String)"/>
             <seealso cref="M:Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="b">
               A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a GZip'ed byte array into a single string.
             </summary>
            
             <seealso cref="M:Ionic.Zlib.GZipStream.CompressString(System.String)"/>
             <seealso cref="M:Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing GZIP-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
        </member>
        <member name="M:Ionic.Zlib.GZipStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a GZip'ed byte array into a byte array.
             </summary>
            
             <seealso cref="M:Ionic.Zlib.GZipStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:Ionic.Zlib.GZipStream.UncompressString(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing data that has been compressed with GZip.
             </param>
            
             <returns>The data in uncompressed form</returns>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.Comment">
             <summary>
               The comment on the GZIP stream.
             </summary>
            
             <remarks>
             <para>
               The GZIP format allows for each file to optionally have an associated
               comment stored with the file.  The comment is encoded with the ISO-8859-1
               code page.  To include a comment in a GZIP stream you create, set this
               property before calling <c>Write()</c> for the first time on the
               <c>GZipStream</c>.
             </para>
            
             <para>
               When using <c>GZipStream</c> to decompress, you can retrieve this property
               after the first call to <c>Read()</c>.  If no comment has been set in the
               GZIP bytestream, the Comment property will return <c>null</c>
               (<c>Nothing</c> in VB).
             </para>
             </remarks>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.FileName">
             <summary>
               The FileName for the GZIP stream.
             </summary>
            
             <remarks>
            
             <para>
               The GZIP format optionally allows each file to have an associated
               filename.  When compressing data (through <c>Write()</c>), set this
               FileName before calling <c>Write()</c> the first time on the <c>GZipStream</c>.
               The actual filename is encoded into the GZIP bytestream with the
               ISO-8859-1 code page, according to RFC 1952. It is the application's
               responsibility to insure that the FileName can be encoded and decoded
               correctly with this code page.
             </para>
            
             <para>
               When decompressing (through <c>Read()</c>), you can retrieve this value
               any time after the first <c>Read()</c>.  In the case where there was no filename
               encoded into the GZIP bytestream, the property will return <c>null</c> (<c>Nothing</c>
               in VB).
             </para>
             </remarks>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.Crc32">
            <summary>
            The CRC on the GZIP stream.
            </summary>
            <remarks>
            This is used for internal error checking. You probably don't need to look at this property.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes.  The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.GZipStream.Position">
             <summary>
               The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see cref="T:System.NotImplementedException"/>. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
        <member name="T:Ionic.Zlib.ParallelDeflateOutputStream">
             <summary>
               A class for compressing and decompressing streams using the
               Deflate algorithm with multiple threads.
             </summary>
            
             <remarks>
             <para>
               This class is for compression only, and that can be only
               through writing.
             </para>
            
             <para>
               For more information on the Deflate algorithm, see IETF RFC 1951, "DEFLATE
               Compressed Data Format Specification version 1.3."
             </para>
            
             <para>
               This class is similar to <see cref="T:Ionic.Zlib.DeflateStream"/>, except
               that this implementation uses an approach that employs multiple worker
               threads to perform the DEFLATE.  On a multi-cpu or multi-core computer,
               the performance of this class can be significantly higher than the
               single-threaded DeflateStream, particularly for larger streams.  How
               large?  Anything over 10mb is a good candidate for parallel compression.
             </para>
            
             <para>
               The tradeoff is that this class uses more memory and more CPU than the
               vanilla DeflateStream, and also is less efficient as a compressor. For
               large files the size of the compressed data stream can be less than 1%
               larger than the size of a compressed data stream from the vanialla
               DeflateStream.  For smaller files the difference can be larger.  The
               difference will also be larger if you set the BufferSize to be lower
               than the default value.  Your mileage may vary. Finally, for small
               files, the ParallelDeflateOutputStream can be much slower than the vanilla
               DeflateStream, because of the overhead of using the thread pool.
             </para>
            
             </remarks>
             <seealso cref="T:Ionic.Zlib.DeflateStream"/>
        </member>
        <member name="M:Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)">
             <summary>
             Create a ParallelDeflateOutputStream.
             </summary>
             <remarks>
            
             <para>
               This stream compresses data written into it via the DEFLATE
               algorithm (see RFC 1951), and writes out the compressed byte stream.
             </para>
            
             <para>
               The instance will use the default compression level, the default
               buffer sizes and the default number of threads and buffers per
               thread.
             </para>
            
             <para>
               This class is similar to <see cref="T:Ionic.Zlib.DeflateStream"/>,
               except that this implementation uses an approach that employs
               multiple worker threads to perform the DEFLATE.  On a multi-cpu or
               multi-core computer, the performance of this class can be
               significantly higher than the single-threaded DeflateStream,
               particularly for larger streams.  How large?  Anything over 10mb is
               a good candidate for parallel compression.
             </para>
            
             </remarks>
            
             <example>
            
             This example shows how to use a ParallelDeflateOutputStream to compress
             data.  It reads a file, compresses it, and writes the compressed data to
             a second, output file.
            
             <code>
             byte[] buffer = new byte[WORKING_BUFFER_SIZE];
             int n= -1;
             String outputFile = fileToCompress + ".compressed";
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(outputFile))
                 {
                     using (Stream compressor = new ParallelDeflateOutputStream(raw))
                     {
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Dim buffer As Byte() = New Byte(4096) {}
             Dim n As Integer = -1
             Dim outputFile As String = (fileToCompress &amp; ".compressed")
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(outputFile)
                     Using compressor As Stream = New ParallelDeflateOutputStream(raw)
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
             <param name="stream">The stream to which compressed data will be written.</param>
        </member>
        <member name="M:Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionLevel)">
            <summary>
              Create a ParallelDeflateOutputStream using the specified CompressionLevel.
            </summary>
            <remarks>
              See the <see cref="M:Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)"/>
              constructor for example code.
            </remarks>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Create a ParallelDeflateOutputStream and specify whether to leave the captive stream open
            when the ParallelDeflateOutputStream is closed.
            </summary>
            <remarks>
              See the <see cref="M:Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)"/>
              constructor for example code.
            </remarks>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="leaveOpen">
               true if the application would like the stream to remain open after inflation/deflation.
            </param>
        </member>
        <member name="M:Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionLevel,System.Boolean)">
            <summary>
            Create a ParallelDeflateOutputStream and specify whether to leave the captive stream open
            when the ParallelDeflateOutputStream is closed.
            </summary>
            <remarks>
              See the <see cref="M:Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)"/>
              constructor for example code.
            </remarks>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="level">A tuning knob to trade speed for effectiveness.</param>
            <param name="leaveOpen">
               true if the application would like the stream to remain open after inflation/deflation.
            </param>
        </member>
        <member name="M:Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionLevel,Ionic.Zlib.CompressionStrategy,System.Boolean)">
            <summary>
            Create a ParallelDeflateOutputStream using the specified
            CompressionLevel and CompressionStrategy, and specifying whether to
            leave the captive stream open when the ParallelDeflateOutputStream is
            closed.
            </summary>
            <remarks>
              See the <see cref="M:Ionic.Zlib.ParallelDeflateOutputStream.#ctor(System.IO.Stream)"/>
              constructor for example code.
            </remarks>
            <param name="stream">The stream to which compressed data will be written.</param>
            <param name="level">A tuning knob to trade speed for effectiveness.</param>
            <param name="strategy">
              By tweaking this parameter, you may be able to optimize the compression for
              data with particular characteristics.
            </param>
            <param name="leaveOpen">
               true if the application would like the stream to remain open after inflation/deflation.
            </param>
        </member>
        <member name="M:Ionic.Zlib.ParallelDeflateOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
               Write data to the stream.
             </summary>
            
             <remarks>
            
             <para>
               To use the ParallelDeflateOutputStream to compress data, create a
               ParallelDeflateOutputStream with CompressionMode.Compress, passing a
               writable output stream.  Then call Write() on that
               ParallelDeflateOutputStream, providing uncompressed data as input.  The
               data sent to the output stream will be the compressed form of the data
               written.
             </para>
            
             <para>
               To decompress data, use the <see cref="T:Ionic.Zlib.DeflateStream"/> class.
             </para>
            
             </remarks>
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:Ionic.Zlib.ParallelDeflateOutputStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:Ionic.Zlib.ParallelDeflateOutputStream.Close">
            <summary>
            Close the stream.
            </summary>
            <remarks>
            You must call Close on the stream to guarantee that all of the data written in has
            been compressed, and the compressed data has been written out.
            </remarks>
        </member>
        <member name="M:Ionic.Zlib.ParallelDeflateOutputStream.Dispose">
            <summary>Dispose the object</summary>
            <remarks>
              <para>
                Because ParallelDeflateOutputStream is IDisposable, the
                application must call this method when finished using the instance.
              </para>
              <para>
                This method is generally called implicitly upon exit from
                a <c>using</c> scope in C# (<c>Using</c> in VB).
              </para>
            </remarks>
        </member>
        <member name="M:Ionic.Zlib.ParallelDeflateOutputStream.Dispose(System.Boolean)">
            <summary>The Dispose method</summary>
        </member>
        <member name="M:Ionic.Zlib.ParallelDeflateOutputStream.Reset(System.IO.Stream)">
             <summary>
               Resets the stream for use with another stream.
             </summary>
             <remarks>
               Because the ParallelDeflateOutputStream is expensive to create, it
               has been designed so that it can be recycled and re-used.  You have
               to call Close() on the stream first, then you can call Reset() on
               it, to use it again on another stream.
             </remarks>
            
             <example>
             <code>
             ParallelDeflateOutputStream deflater = null;
             foreach (var inputFile in listOfFiles)
             {
                 string outputFile = inputFile + ".compressed";
                 using (System.IO.Stream input = System.IO.File.OpenRead(inputFile))
                 {
                     using (var outStream = System.IO.File.Create(outputFile))
                     {
                         if (deflater == null)
                             deflater = new ParallelDeflateOutputStream(outStream,
                                                                        CompressionLevel.Best,
                                                                        CompressionStrategy.Default,
                                                                        true);
                         deflater.Reset(outStream);
            
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             deflater.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             </example>
        </member>
        <member name="M:Ionic.Zlib.ParallelDeflateOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method always throws a NotImplementedException.
            </summary>
        </member>
        <member name="M:Ionic.Zlib.ParallelDeflateOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This method always throws a NotImplementedException.
            </summary>
        </member>
        <member name="M:Ionic.Zlib.ParallelDeflateOutputStream.SetLength(System.Int64)">
            <summary>
            This method always throws a NotImplementedException.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.ParallelDeflateOutputStream.Strategy">
             <summary>
               The ZLIB strategy to be used during compression.
             </summary>
            
        </member>
        <member name="P:Ionic.Zlib.ParallelDeflateOutputStream.BuffersPerCore">
             <summary>
             The number of buffers per CPU or CPU core.
             </summary>
            
             <remarks>
             <para>
               This property sets the number of memory buffers to create, for every
               CPU or CPU core in the machine.  The divide-and-conquer approach
               taken by this class assumes a single thread from the application
               will call Write().  There will be multiple background threads that
               then compress (DEFLATE) the data written into the stream, and also a
               single output thread, also operating in the background, aggregating
               those results and finally emitting the output.
             </para>
            
             <para>
               The default value is 4.  Different values may deliver better or
               worse results, depending on the dynamic performance characteristics
               of your storage and compute resources.
             </para>
            
             <para>
               The total amount of storage space allocated for buffering will be
               (n*M*S*2), where n is the number of CPUs, M is the multiple (this
               property), S is the size of each buffer (<see cref="P:Ionic.Zlib.ParallelDeflateOutputStream.BufferSize"/>),
               and there are 2 buffers used by the compressor, one for input and
               one for output. For example, if your machine has 4 cores, and you
               set BuffersPerCore to 3, and you retain the default buffer size of
               128k, then the ParallelDeflateOutputStream will use 3mb of buffer
               memory in total.
             </para>
            
             <para>
               The application can set this value at any time, but it is effective
               only before the first call to Write(), which is when the buffers are
               allocated.
             </para>
             </remarks>
        </member>
        <member name="P:Ionic.Zlib.ParallelDeflateOutputStream.BufferSize">
             <summary>
               The size of the buffers used by the compressor threads.
             </summary>
             <remarks>
            
             <para>
               The default buffer size is 128k. The application can set this value at any
               time, but it is effective only before the first Write().
             </para>
            
             <para>
               Larger buffer sizes implies larger memory consumption but allows
               more efficient compression. Using smaller buffer sizes consumes less
               memory but result in less effective compression.  For example, using
               the default buffer size of 128k, the compression delivered is within
               1% of the compression delivered by the single-threaded <see cref="T:Ionic.Zlib.DeflateStream"/>.  On the other hand, using a
               BufferSize of 8k can result in a compressed data stream that is 5%
               larger than that delivered by the single-threaded
               <c>DeflateStream</c>.  Excessively small buffer sizes can also cause
               the speed of the ParallelDeflateOutputStream to drop, because of
               larger thread scheduling overhead dealing with many many small
               buffers.
             </para>
            
             <para>
               The total amount of storage space allocated for buffering will be
               (n*M*S*2), where n is the number of CPUs, M is the multiple (<see cref="P:Ionic.Zlib.ParallelDeflateOutputStream.BuffersPerCore"/>), S is the size of each buffer (this
               property), and there are 2 buffers used by the compressor, one for
               input and one for output. For example, if your machine has a total
               of 4 cores, and if you set <see cref="P:Ionic.Zlib.ParallelDeflateOutputStream.BuffersPerCore"/> to 3, and
               you keep the default buffer size of 128k, then the
               <c>ParallelDeflateOutputStream</c> will use 3mb of buffer memory in
               total.
             </para>
            
             </remarks>
        </member>
        <member name="P:Ionic.Zlib.ParallelDeflateOutputStream.Crc32">
            <summary>
            The CRC32 for the data that was written out, prior to compression.
            </summary>
            <remarks>
            This value is meaningful only after a call to Close().
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.ParallelDeflateOutputStream.BytesProcessed">
            <summary>
            The total number of uncompressed bytes processed by the ParallelDeflateOutputStream.
            </summary>
            <remarks>
            This value is meaningful only after a call to Close().
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.ParallelDeflateOutputStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.ParallelDeflateOutputStream.CanRead">
            <summary>
            Indicates whether the stream supports Read operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.ParallelDeflateOutputStream.CanWrite">
            <summary>
            Indicates whether the stream supports Write operations.
            </summary>
            <remarks>
            Returns true if the provided stream is writable.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.ParallelDeflateOutputStream.Length">
            <summary>
            Reading this property always throws a NotImplementedException.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.ParallelDeflateOutputStream.Position">
            <summary>
            Reading or Writing this property always throws a NotImplementedException.
            </summary>
        </member>
        <member name="M:Ionic.Zlib.SharedUtils.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:Ionic.Zlib.SharedUtils.ReadInput(System.IO.TextReader,System.Byte[],System.Int32,System.Int32)">
             <summary>
               Reads a number of characters from the current source TextReader and writes
               the data to the target array at the specified index.
             </summary>
            
             <param name="sourceTextReader">The source TextReader to read from</param>
             <param name="target">Contains the array of characteres read from the source TextReader.</param>
             <param name="start">The starting index of the target array.</param>
             <param name="count">The maximum number of characters to read from the source TextReader.</param>
             
             <returns>
               The number of characters read. The number will be less than or equal to
               count depending on the data available in the source TextReader. Returns -1
               if the end of the stream is reached.
             </returns>
        </member>
        <member name="M:Ionic.Zlib.Tree.DistanceCode(System.Int32)">
            <summary>
            Map from a distance to a distance code.
            </summary>
            <remarks> 
            No side effects. _dist_code[256] and _dist_code[257] are never used.
            </remarks>
        </member>
        <member name="T:Ionic.Zlib.ZlibCodec">
             <summary>
             Encoder and Decoder for ZLIB and DEFLATE (IETF RFC1950 and RFC1951).
             </summary>
            
             <remarks>
             This class compresses and decompresses data according to the Deflate algorithm
             and optionally, the ZLIB format, as documented in <see
             href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950 - ZLIB</see> and <see
             href="http://www.ietf.org/rfc/rfc1951.txt">RFC 1951 - DEFLATE</see>.
             </remarks>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.InputBuffer">
            <summary>
            The buffer from which data is taken.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.NextIn">
            <summary>
            An index into the InputBuffer array, indicating where to start reading. 
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.AvailableBytesIn">
            <summary>
            The number of bytes available in the InputBuffer, starting at NextIn. 
            </summary>
            <remarks>
            Generally you should set this to InputBuffer.Length before the first Inflate() or Deflate() call. 
            The class will update this number as calls to Inflate/Deflate are made.
            </remarks>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.TotalBytesIn">
            <summary>
            Total number of bytes read so far, through all calls to Inflate()/Deflate().
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.OutputBuffer">
            <summary>
            Buffer to store output data.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.NextOut">
            <summary>
            An index into the OutputBuffer array, indicating where to start writing. 
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.AvailableBytesOut">
            <summary>
            The number of bytes available in the OutputBuffer, starting at NextOut. 
            </summary>
            <remarks>
            Generally you should set this to OutputBuffer.Length before the first Inflate() or Deflate() call. 
            The class will update this number as calls to Inflate/Deflate are made.
            </remarks>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.TotalBytesOut">
            <summary>
            Total number of bytes written to the output so far, through all calls to Inflate()/Deflate().
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.Message">
            <summary>
            used for diagnostics, when something goes wrong!
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.CompressLevel">
            <summary>
            The compression level to use in this codec.  Useful only in compression mode.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.WindowBits">
            <summary>
            The number of Window Bits to use.  
            </summary>
            <remarks>
            This gauges the size of the sliding window, and hence the 
            compression effectiveness as well as memory consumption. It's best to just leave this 
            setting alone if you don't know what it is.  The maximum value is 15 bits, which implies
            a 32k window.  
            </remarks>
        </member>
        <member name="F:Ionic.Zlib.ZlibCodec.Strategy">
            <summary>
            The compression strategy to use.
            </summary>
            <remarks>
            This is only effective in compression.  The theory offered by ZLIB is that different
            strategies could potentially produce significant differences in compression behavior
            for different data sets.  Unfortunately I don't have any good recommendations for how
            to set it differently.  When I tested changing the strategy I got minimally different
            compression performance. It's best to leave this property alone if you don't have a
            good feel for it.  Or, you may want to produce a test harness that runs through the
            different strategy options and evaluates them on different file types. If you do that,
            let me know your results.
            </remarks>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.#ctor">
            <summary>
            Create a ZlibCodec.
            </summary>
            <remarks>
            If you use this default constructor, you will later have to explicitly call 
            InitializeInflate() or InitializeDeflate() before using the ZlibCodec to compress 
            or decompress. 
            </remarks>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.#ctor(Ionic.Zlib.CompressionMode)">
            <summary>
            Create a ZlibCodec that either compresses or decompresses.
            </summary>
            <param name="mode">
            Indicates whether the codec should compress (deflate) or decompress (inflate).
            </param>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeInflate">
            <summary>
            Initialize the inflation state. 
            </summary>
            <remarks>
            It is not necessary to call this before using the ZlibCodec to inflate data; 
            It is implicitly called when you call the constructor.
            </remarks>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeInflate(System.Boolean)">
             <summary>
             Initialize the inflation state with an explicit flag to
             govern the handling of RFC1950 header bytes.
             </summary>
            
             <remarks>
             By default, the ZLIB header defined in <see
             href="http://www.ietf.org/rfc/rfc1950.txt">RFC 1950</see> is expected.  If
             you want to read a zlib stream you should specify true for
             expectRfc1950Header.  If you have a deflate stream, you will want to specify
             false. It is only necessary to invoke this initializer explicitly if you
             want to specify false.
             </remarks>
            
             <param name="expectRfc1950Header">whether to expect an RFC1950 header byte
             pair when reading the stream of data to be inflated.</param>
            
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeInflate(System.Int32)">
            <summary>
            Initialize the ZlibCodec for inflation, with the specified number of window bits. 
            </summary>
            <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
            then you shouldn't be calling this initializer.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeInflate(System.Int32,System.Boolean)">
             <summary>
             Initialize the inflation state with an explicit flag to govern the handling of
             RFC1950 header bytes. 
             </summary>
            
             <remarks>
             If you want to read a zlib stream you should specify true for
             expectRfc1950Header. In this case, the library will expect to find a ZLIB
             header, as defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
             1950</see>, in the compressed stream.  If you will be reading a DEFLATE or
             GZIP stream, which does not have such a header, you will want to specify
             false.
             </remarks>
            
             <param name="expectRfc1950Header">whether to expect an RFC1950 header byte pair when reading 
             the stream of data to be inflated.</param>
             <param name="windowBits">The number of window bits to use. If you need to ask what that is, 
             then you shouldn't be calling this initializer.</param>
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.Inflate(Ionic.Zlib.FlushType)">
             <summary>
             Inflate the data in the InputBuffer, placing the result in the OutputBuffer.
             </summary>
             <remarks>
             You must have set InputBuffer and OutputBuffer, NextIn and NextOut, and AvailableBytesIn and 
             AvailableBytesOut  before calling this method.
             </remarks>
             <example>
             <code>
             private void InflateBuffer()
             {
                 int bufferSize = 1024;
                 byte[] buffer = new byte[bufferSize];
                 ZlibCodec decompressor = new ZlibCodec();
             
                 Console.WriteLine("\n============================================");
                 Console.WriteLine("Size of Buffer to Inflate: {0} bytes.", CompressedBytes.Length);
                 MemoryStream ms = new MemoryStream(DecompressedBytes);
             
                 int rc = decompressor.InitializeInflate();
             
                 decompressor.InputBuffer = CompressedBytes;
                 decompressor.NextIn = 0;
                 decompressor.AvailableBytesIn = CompressedBytes.Length;
             
                 decompressor.OutputBuffer = buffer;
             
                 // pass 1: inflate 
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(FlushType.None);
             
                     if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     ms.Write(decompressor.OutputBuffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 // pass 2: finish and flush
                 do
                 {
                     decompressor.NextOut = 0;
                     decompressor.AvailableBytesOut = buffer.Length;
                     rc = decompressor.Inflate(FlushType.Finish);
             
                     if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
                         throw new Exception("inflating: " + decompressor.Message);
             
                     if (buffer.Length - decompressor.AvailableBytesOut &gt; 0)
                         ms.Write(buffer, 0, buffer.Length - decompressor.AvailableBytesOut);
                 }
                 while (decompressor.AvailableBytesIn &gt; 0 || decompressor.AvailableBytesOut == 0);
             
                 decompressor.EndInflate();
             }
            
             </code>
             </example>
             <param name="flush">The flush to use when inflating.</param>
             <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.EndInflate">
            <summary>
            Ends an inflation session. 
            </summary>
            <remarks>
            Call this after successively calling Inflate().  This will cause all buffers to be flushed. 
            After calling this you cannot call Inflate() without a intervening call to one of the
            InitializeInflate() overloads.
            </remarks>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.SyncInflate">
            <summary>
            I don't know what this does!
            </summary>
            <returns>Z_OK if everything goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeDeflate">
            <summary>
            Initialize the ZlibCodec for deflation operation.
            </summary>
            <remarks>
            The codec will use the MAX window bits and the default level of compression.
            </remarks>
            <example>
            <code>
             int bufferSize = 40000;
             byte[] CompressedBytes = new byte[bufferSize];
             byte[] DecompressedBytes = new byte[bufferSize];
             
             ZlibCodec compressor = new ZlibCodec();
             
             compressor.InitializeDeflate(CompressionLevel.Default);
             
             compressor.InputBuffer = System.Text.ASCIIEncoding.ASCII.GetBytes(TextToCompress);
             compressor.NextIn = 0;
             compressor.AvailableBytesIn = compressor.InputBuffer.Length;
             
             compressor.OutputBuffer = CompressedBytes;
             compressor.NextOut = 0;
             compressor.AvailableBytesOut = CompressedBytes.Length;
             
             while (compressor.TotalBytesIn != TextToCompress.Length &amp;&amp; compressor.TotalBytesOut &lt; bufferSize)
             {
               compressor.Deflate(FlushType.None);
             }
             
             while (true)
             {
               int rc= compressor.Deflate(FlushType.Finish);
               if (rc == ZlibConstants.Z_STREAM_END) break;
             }
             
             compressor.EndDeflate();
              
            </code>
            </example>
            <returns>Z_OK if all goes well. You generally don't need to check the return code.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeDeflate(Ionic.Zlib.CompressionLevel)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel.
            </summary>
            <remarks>
            The codec will use the maximum window bits (15) and the specified
            CompressionLevel.  It will emit a ZLIB stream as it compresses.
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeDeflate(Ionic.Zlib.CompressionLevel,System.Boolean)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
            and the explicit flag governing whether to emit an RFC1950 header byte pair.
            </summary>
            <remarks>
            The codec will use the maximum window bits (15) and the specified CompressionLevel.
            If you want to generate a zlib stream, you should specify true for
            wantRfc1950Header. In this case, the library will emit a ZLIB
            header, as defined in <see href="http://www.ietf.org/rfc/rfc1950.txt">RFC
            1950</see>, in the compressed stream.  
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeDeflate(Ionic.Zlib.CompressionLevel,System.Int32)">
            <summary>
            Initialize the ZlibCodec for deflation operation, using the specified CompressionLevel, 
            and the specified number of window bits. 
            </summary>
            <remarks>
            The codec will use the specified number of window bits and the specified CompressionLevel.
            </remarks>
            <param name="level">The compression level for the codec.</param>
            <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.InitializeDeflate(Ionic.Zlib.CompressionLevel,System.Int32,System.Boolean)">
             <summary>
             Initialize the ZlibCodec for deflation operation, using the specified
             CompressionLevel, the specified number of window bits, and the explicit flag
             governing whether to emit an RFC1950 header byte pair.
             </summary>
            
             <param name="level">The compression level for the codec.</param>
             <param name="wantRfc1950Header">whether to emit an initial RFC1950 byte pair in the compressed stream.</param>
             <param name="bits">the number of window bits to use.  If you don't know what this means, don't use this method.</param>
             <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.Deflate(Ionic.Zlib.FlushType)">
            <summary>
            Deflate one batch of data.
            </summary>
            <remarks>
            You must have set InputBuffer and OutputBuffer before calling this method.
            </remarks>
            <example>
            <code>
            private void DeflateBuffer(CompressionLevel level)
            {
                int bufferSize = 1024;
                byte[] buffer = new byte[bufferSize];
                ZlibCodec compressor = new ZlibCodec();
            
                Console.WriteLine("\n============================================");
                Console.WriteLine("Size of Buffer to Deflate: {0} bytes.", UncompressedBytes.Length);
                MemoryStream ms = new MemoryStream();
            
                int rc = compressor.InitializeDeflate(level);
            
                compressor.InputBuffer = UncompressedBytes;
                compressor.NextIn = 0;
                compressor.AvailableBytesIn = UncompressedBytes.Length;
            
                compressor.OutputBuffer = buffer;
            
                // pass 1: deflate 
                do
                {
                    compressor.NextOut = 0;
                    compressor.AvailableBytesOut = buffer.Length;
                    rc = compressor.Deflate(FlushType.None);
            
                    if (rc != ZlibConstants.Z_OK &amp;&amp; rc != ZlibConstants.Z_STREAM_END)
                        throw new Exception("deflating: " + compressor.Message);
            
                    ms.Write(compressor.OutputBuffer, 0, buffer.Length - compressor.AvailableBytesOut);
                }
                while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
            
                // pass 2: finish and flush
                do
                {
                    compressor.NextOut = 0;
                    compressor.AvailableBytesOut = buffer.Length;
                    rc = compressor.Deflate(FlushType.Finish);
            
                    if (rc != ZlibConstants.Z_STREAM_END &amp;&amp; rc != ZlibConstants.Z_OK)
                        throw new Exception("deflating: " + compressor.Message);
            
                    if (buffer.Length - compressor.AvailableBytesOut &gt; 0)
                        ms.Write(buffer, 0, buffer.Length - compressor.AvailableBytesOut);
                }
                while (compressor.AvailableBytesIn &gt; 0 || compressor.AvailableBytesOut == 0);
            
                compressor.EndDeflate();
            
                ms.Seek(0, SeekOrigin.Begin);
                CompressedBytes = new byte[compressor.TotalBytesOut];
                ms.Read(CompressedBytes, 0, CompressedBytes.Length);
            }
            </code>
            </example>
            <param name="flush">whether to flush all data as you deflate. Generally you will want to 
            use Z_NO_FLUSH here, in a series of calls to Deflate(), and then call EndDeflate() to 
            flush everything. 
            </param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.EndDeflate">
            <summary>
            End a deflation session.
            </summary>
            <remarks>
            Call this after making a series of one or more calls to Deflate(). All buffers are flushed.
            </remarks>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.ResetDeflate">
            <summary>
            Reset a codec for another deflation session.
            </summary>
            <remarks>
            Call this to reset the deflation state.  For example if a thread is deflating
            non-consecutive blocks, you can call Reset() after the Deflate(Sync) of the first
            block and before the next Deflate(None) of the second block.
            </remarks>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.SetDeflateParams(Ionic.Zlib.CompressionLevel,Ionic.Zlib.CompressionStrategy)">
            <summary>
            Set the CompressionStrategy and CompressionLevel for a deflation session.
            </summary>
            <param name="level">the level of compression to use.</param>
            <param name="strategy">the strategy to use for compression.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibCodec.SetDictionary(System.Byte[])">
            <summary>
            Set the dictionary to be used for either Inflation or Deflation.
            </summary>
            <param name="dictionary">The dictionary bytes to use.</param>
            <returns>Z_OK if all goes well.</returns>
        </member>
        <member name="P:Ionic.Zlib.ZlibCodec.Adler32">
            <summary>
            The Adler32 checksum on the data transferred through the codec so far. You probably don't need to look at this.
            </summary>
        </member>
        <member name="T:Ionic.Zlib.ZlibConstants">
            <summary>
            A bunch of constants used in the Zlib interface.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.WindowBitsMax">
            <summary>
            The maximum number of window bits for the Deflate algorithm.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.WindowBitsDefault">
            <summary>
            The default number of window bits for the Deflate algorithm.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.Z_OK">
            <summary>
            indicates everything is A-OK
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.Z_STREAM_END">
            <summary>
            Indicates that the last operation reached the end of the stream.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.Z_NEED_DICT">
            <summary>
            The operation ended in need of a dictionary. 
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.Z_STREAM_ERROR">
            <summary>
            There was an error with the stream - not enough data, not open and readable, etc.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.Z_DATA_ERROR">
            <summary>
            There was an error with the data - not enough data, bad data, etc.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.Z_BUF_ERROR">
            <summary>
            There was an error with the working buffer.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.WorkingBufferSizeDefault">
            <summary>
            The size of the working buffer used in the ZlibCodec class. Defaults to 8192 bytes.
            </summary>
        </member>
        <member name="F:Ionic.Zlib.ZlibConstants.WorkingBufferSizeMin">
            <summary>
            The minimum size of the working buffer used in the ZlibCodec class.  Currently it is 128 bytes.
            </summary>
        </member>
        <member name="T:Ionic.Zlib.ZlibException">
            <summary>
            A general purpose exception class for exceptions in the Zlib library.
            </summary>
        </member>
        <member name="M:Ionic.Zlib.ZlibException.#ctor">
            <summary>
            The ZlibException class captures exception information generated
            by the Zlib library. 
            </summary>
        </member>
        <member name="M:Ionic.Zlib.ZlibException.#ctor(System.String)">
            <summary>
            This ctor collects a message attached to the exception.
            </summary>
            <param name="s"></param>
        </member>
        <member name="T:Ionic.Zlib.ZlibStream">
             <summary>
             Represents a Zlib stream for compression or decompression.
             </summary>
             <remarks>
            
             <para>
             The ZlibStream is a <see href="http://en.wikipedia.org/wiki/Decorator_pattern">Decorator</see> on a <see cref="T:System.IO.Stream"/>.  It adds ZLIB compression or decompression to any
             stream.
             </para>
            
             <para> Using this stream, applications can compress or decompress data via
             stream <c>Read()</c> and <c>Write()</c> operations.  Either compresssion or
             decompression can occur through either reading or writing. The compression
             format used is ZLIB, which is documented in <see href="http://www.ietf.org/rfc/rfc1950.txt">IETF RFC 1950</see>, "ZLIB Compressed
             Data Format Specification version 3.3". This implementation of ZLIB always uses
             DEFLATE as the compression method.  (see <see href="http://www.ietf.org/rfc/rfc1951.txt">IETF RFC 1951</see>, "DEFLATE
             Compressed Data Format Specification version 1.3.") </para>
            
             <para>
             The ZLIB format allows for varying compression methods, window sizes, and dictionaries.
             This implementation always uses the DEFLATE compression method, a preset dictionary,
             and 15 window bits by default.
             </para>
            
             <para>
             This class is similar to <see cref="T:Ionic.Zlib.DeflateStream"/>, except that it adds the
             RFC1950 header and trailer bytes to a compressed stream when compressing, or expects
             the RFC1950 header and trailer bytes when decompressing.  It is also similar to the
             <see cref="T:Ionic.Zlib.GZipStream"/>.
             </para>
             </remarks>
             <seealso cref="T:Ionic.Zlib.DeflateStream"/>
             <seealso cref="T:Ionic.Zlib.GZipStream"/>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode)">
             <summary>
             Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>.
             </summary>
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>ZlibStream</c> will use the
               default compression level. The "captive" stream will be closed when the
               <c>ZlibStream</c> is closed.
             </para>
            
             </remarks>
            
             <example>
             This example uses a <c>ZlibStream</c> to compress a file, and writes the compressed
             data to another file.
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".zlib"))
                 {
                     using (Stream compressor = new ZlibStream(raw, CompressionMode.Compress))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".zlib")
                 Using compressor As Stream = New ZlibStream(raw, CompressionMode.Compress)
                     Dim buffer As Byte() = New Byte(4096) {}
                     Dim n As Integer = -1
                     Do While (n &lt;&gt; 0)
                         If (n &gt; 0) Then
                             compressor.Write(buffer, 0, n)
                         End If
                         n = input.Read(buffer, 0, buffer.Length)
                     Loop
                 End Using
                 End Using
             End Using
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c> and
               the specified <c>CompressionLevel</c>.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is ignored.
               The "captive" stream will be closed when the <c>ZlibStream</c> is closed.
             </para>
            
             </remarks>
            
             <example>
               This example uses a <c>ZlibStream</c> to compress data from a file, and writes the
               compressed data to another file.
            
             <code>
             using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
             {
                 using (var raw = System.IO.File.Create(fileToCompress + ".zlib"))
                 {
                     using (Stream compressor = new ZlibStream(raw,
                                                               CompressionMode.Compress,
                                                               CompressionLevel.BestCompression))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
             }
             </code>
            
             <code lang="VB">
             Using input As Stream = File.OpenRead(fileToCompress)
                 Using raw As FileStream = File.Create(fileToCompress &amp; ".zlib")
                     Using compressor As Stream = New ZlibStream(raw, CompressionMode.Compress, CompressionLevel.BestCompression)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
             End Using
             </code>
             </example>
            
             <param name="stream">The stream to be read or written while deflating or inflating.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
             <param name="level">A tuning knob to trade speed for effectiveness.</param>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,System.Boolean)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c>, and
               explicitly specify whether the captive stream should be left open after
               Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               When mode is <c>CompressionMode.Compress</c>, the <c>ZlibStream</c> will use
               the default compression level.
             </para>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also
               closed. In some cases this is not desired, for example if the stream is a
               <see cref="T:System.IO.MemoryStream"/> that will be re-read after
               compression.  Specify true for the <paramref name="leaveOpen"/> parameter to leave the stream
               open.
             </para>
            
             <para>
             See the other overloads of this constructor for example code.
             </para>
            
             </remarks>
            
             <param name="stream">The stream which will be read or written. This is called the
             "captive" stream in other places in this documentation.</param>
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
             <param name="leaveOpen">true if the application would like the stream to remain
             open after inflation/deflation.</param>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.#ctor(System.IO.Stream,Ionic.Zlib.CompressionMode,Ionic.Zlib.CompressionLevel,System.Boolean)">
             <summary>
               Create a <c>ZlibStream</c> using the specified <c>CompressionMode</c> and
               the specified <c>CompressionLevel</c>, and explicitly specify whether the
               stream should be left open after Deflation or Inflation.
             </summary>
            
             <remarks>
            
             <para>
               This constructor allows the application to request that the captive stream
               remain open after the deflation or inflation occurs.  By default, after
               <c>Close()</c> is called on the stream, the captive stream is also closed. In
               some cases this is not desired, for example if the stream is a <see cref="T:System.IO.MemoryStream"/> that will be re-read after compression.
               Specify true for the <paramref name="leaveOpen"/> parameter to leave the stream open.
             </para>
            
             <para>
               When mode is <c>CompressionMode.Decompress</c>, the level parameter is ignored.
             </para>
            
             </remarks>
            
             <example>
             This example shows how to use a ZlibStream to compress the data from a file,
             and store the result into another file. The filestream remains open to allow
             additional data to be written to it.
             <code>
             using (var output = System.IO.File.Create(fileToCompress + ".zlib"))
             {
                 using (System.IO.Stream input = System.IO.File.OpenRead(fileToCompress))
                 {
                     using (Stream compressor = new ZlibStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, true))
                     {
                         byte[] buffer = new byte[WORKING_BUFFER_SIZE];
                         int n;
                         while ((n= input.Read(buffer, 0, buffer.Length)) != 0)
                         {
                             compressor.Write(buffer, 0, n);
                         }
                     }
                 }
                 // can write additional data to the output stream here
             }
             </code>
             <code lang="VB">
             Using output As FileStream = File.Create(fileToCompress &amp; ".zlib")
                 Using input As Stream = File.OpenRead(fileToCompress)
                     Using compressor As Stream = New ZlibStream(output, CompressionMode.Compress, CompressionLevel.BestCompression, True)
                         Dim buffer As Byte() = New Byte(4096) {}
                         Dim n As Integer = -1
                         Do While (n &lt;&gt; 0)
                             If (n &gt; 0) Then
                                 compressor.Write(buffer, 0, n)
                             End If
                             n = input.Read(buffer, 0, buffer.Length)
                         Loop
                     End Using
                 End Using
                 ' can write additional data to the output stream here.
             End Using
             </code>
             </example>
            
             <param name="stream">The stream which will be read or written.</param>
            
             <param name="mode">Indicates whether the ZlibStream will compress or decompress.</param>
            
             <param name="leaveOpen">
             true if the application would like the stream to remain open after inflation/deflation.
             </param>
            
             <param name="level">
             A tuning knob to trade speed for effectiveness. This parameter is effective only when
             mode is <c>CompressionMode.Compress</c>.
             </param>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.Dispose(System.Boolean)">
            <summary>
            Dispose the stream.
            </summary>
            <remarks>
            This may or may not result in a <c>Close()</c> call on the captive stream.
            See the constructors that have a  <c>leaveOpen</c> parameter for more information.
            </remarks>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.Flush">
            <summary>
            Flush the stream.
            </summary>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.Read(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Read data from the stream.
             </summary>
            
             <remarks>
            
             <para>
               If you wish to use the <c>ZlibStream</c> to compress data while reading,
               you can create a <c>ZlibStream</c> with <c>CompressionMode.Compress</c>,
               providing an uncompressed data stream.  Then call <c>Read()</c> on that
               <c>ZlibStream</c>, and the data read will be compressed.  If you wish to
               use the <c>ZlibStream</c> to decompress data while reading, you can create
               a <c>ZlibStream</c> with <c>CompressionMode.Decompress</c>, providing a
               readable compressed data stream.  Then call <c>Read()</c> on that
               <c>ZlibStream</c>, and the data will be decompressed as it is read.
             </para>
            
             <para>
               A <c>ZlibStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but
               not both.
             </para>
            
             </remarks>
             <param name="buffer">The buffer into which the read data should be placed.</param>
             <param name="offset">the offset within that data array to put the first byte read.</param>
             <param name="count">the number of bytes to read.</param>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.SetLength(System.Int64)">
            <summary>
            Calling this method always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.Write(System.Byte[],System.Int32,System.Int32)">
             <summary>
             Write data to the stream.
             </summary>
            
             <remarks>
            
             <para>
               If you wish to use the <c>ZlibStream</c> to compress data while writing,
               you can create a <c>ZlibStream</c> with <c>CompressionMode.Compress</c>,
               and a writable output stream.  Then call <c>Write()</c> on that
               <c>ZlibStream</c>, providing uncompressed data as input.  The data sent to
               the output stream will be the compressed form of the data written.  If you
               wish to use the <c>ZlibStream</c> to decompress data while writing, you
               can create a <c>ZlibStream</c> with <c>CompressionMode.Decompress</c>, and a
               writable output stream.  Then call <c>Write()</c> on that stream,
               providing previously compressed data. The data sent to the output stream
               will be the decompressed form of the data written.
             </para>
            
             <para>
               A <c>ZlibStream</c> can be used for <c>Read()</c> or <c>Write()</c>, but not both.
             </para>
             </remarks>
             <param name="buffer">The buffer holding data to write to the stream.</param>
             <param name="offset">the offset within that data array to find the first byte to write.</param>
             <param name="count">the number of bytes to write.</param>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.CompressString(System.String)">
             <summary>
               Compress a string into a byte array using ZLIB.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Ionic.Zlib.ZlibStream.UncompressString(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Ionic.Zlib.ZlibStream.UncompressString(System.Byte[])"/>
             <seealso cref="M:Ionic.Zlib.ZlibStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:Ionic.Zlib.GZipStream.CompressString(System.String)"/>
            
             <param name="s">
               A string to compress.  The string will first be encoded
               using UTF8, then compressed.
             </param>
            
             <returns>The string in compressed form</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.CompressBuffer(System.Byte[])">
             <summary>
               Compress a byte array into a new byte array using ZLIB.
             </summary>
            
             <remarks>
               Uncompress it with <see cref="M:Ionic.Zlib.ZlibStream.UncompressBuffer(System.Byte[])"/>.
             </remarks>
            
             <seealso cref="M:Ionic.Zlib.ZlibStream.CompressString(System.String)"/>
             <seealso cref="M:Ionic.Zlib.ZlibStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="b">
             A buffer to compress.
             </param>
            
             <returns>The data in compressed form</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.UncompressString(System.Byte[])">
             <summary>
               Uncompress a ZLIB-compressed byte array into a single string.
             </summary>
            
             <seealso cref="M:Ionic.Zlib.ZlibStream.CompressString(System.String)"/>
             <seealso cref="M:Ionic.Zlib.ZlibStream.UncompressBuffer(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing ZLIB-compressed data.
             </param>
            
             <returns>The uncompressed string</returns>
        </member>
        <member name="M:Ionic.Zlib.ZlibStream.UncompressBuffer(System.Byte[])">
             <summary>
               Uncompress a ZLIB-compressed byte array into a byte array.
             </summary>
            
             <seealso cref="M:Ionic.Zlib.ZlibStream.CompressBuffer(System.Byte[])"/>
             <seealso cref="M:Ionic.Zlib.ZlibStream.UncompressString(System.Byte[])"/>
            
             <param name="compressed">
               A buffer containing ZLIB-compressed data.
             </param>
            
             <returns>The data in uncompressed form</returns>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.FlushMode">
            <summary>
            This property sets the flush behavior on the stream.
            Sorry, though, not sure exactly how to describe all the various settings.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.BufferSize">
             <summary>
               The size of the working buffer for the compression codec.
             </summary>
            
             <remarks>
             <para>
               The working buffer is used for all stream operations.  The default size is
               1024 bytes. The minimum size is 128 bytes. You may get better performance
               with a larger buffer.  Then again, you might not.  You would have to test
               it.
             </para>
            
             <para>
               Set this before the first call to <c>Read()</c> or <c>Write()</c> on the
               stream. If you try to set it afterwards, it will throw.
             </para>
             </remarks>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.CanRead">
            <summary>
            Indicates whether the stream can be read.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports reading.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.CanSeek">
            <summary>
            Indicates whether the stream supports Seek operations.
            </summary>
            <remarks>
            Always returns false.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.CanWrite">
            <summary>
            Indicates whether the stream can be written.
            </summary>
            <remarks>
            The return value depends on whether the captive stream supports writing.
            </remarks>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.Length">
            <summary>
            Reading this property always throws a <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="P:Ionic.Zlib.ZlibStream.Position">
             <summary>
               The position of the stream pointer.
             </summary>
            
             <remarks>
               Setting this property always throws a <see cref="T:System.NotImplementedException"/>. Reading will return the total bytes
               written out, if used in writing, or the total bytes read in, if used in
               reading.  The count may refer to compressed bytes or uncompressed bytes,
               depending on how you've used the stream.
             </remarks>
        </member>
    </members>
</doc>
